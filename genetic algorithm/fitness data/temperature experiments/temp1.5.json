{"d56f2372": [[0.2743476810143477, "def solve_2abe0579(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_7b130a39(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_ec05940e(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_ee5d8063(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_58144543(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.29037478188052895, "def solve_c404ff4e(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_2078a5b7(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_284f701e(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29706172839506173, "def solve_1d140873(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.3700056407469819, "def solve_652f2f7d(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_215fa4a1(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_cf237ab9(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_410afe94(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_a90593c4(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_e0f2c99d(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_16e291e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_855aa0de(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.41617597321745253, "def solve_a0902199(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_18d416d9(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.41617597321745253, "def solve_06427a8d(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_587e96d8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_8600ec5b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_21001f7b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41699831998382725, "def solve_0a251a9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(colorcount, TWO)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.41699831998382725, "def solve_009f7b1a(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(colorcount, TWO)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.41699831998382725, "def solve_146a39e2(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(colorcount, TWO)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.41699831998382725, "def solve_fb4e977f(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.4204508671590131, "def solve_1b689604(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4245388866968078, "def solve_403a42f0(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_2ca15a9a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_6d55f0c0(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_1db3c982(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_5a785cc6(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_70f78f8f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4301880781590926, "def solve_906511c1(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [0.4344277755856966, "def solve_b450b01b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_01863de9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_27a06128(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_4de86e2e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_3c361c79(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4544472391184824, "def solve_d4719dac(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4544472391184824, "def solve_16e8de09(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4557081334207771, "def solve_1ce68adf(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.45897263451587333, "def solve_141166dd(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.45897263451587333, "def solve_76c667c1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.4592676912459521, "def solve_282e9088(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.4592676912459521, "def solve_ed3b4192(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.46924601939094696, "def solve_40a2b46e(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4744327528950218, "def solve_14dec666(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.47887719733946615, "def solve_cb23d95f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.48123445415925586, "def solve_4bebcdaf(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [0.4828905908059226, "def solve_2e3f11fc(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.4828905908059226, "def solve_cf2f2608(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.4828905908059226, "def solve_f5cba621(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.4838495551165023, "def solve_bfdbb341(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4838495551165023, "def solve_bf1521b7(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4838495551165023, "def solve_68e623cc(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4838495551165023, "def solve_4aba2178(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4869187922819764, "def solve_4e0baa70(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = mostcolor(x4)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x2)\n    x9 = paint(x7, x8)\n    x10 = height(x2)\n    x11 = width(x2)\n    x12 = neighbors(ORIGIN)\n    x13 = toindices(x2)\n    x14 = normalize(x2)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x12)\n    O = paint(x9, x16)\n    return O"], [0.49611068641503425, "def solve_5df24ede(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [0.49680581361740783, "def solve_479d84f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_8beae4b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5067694165737645, "def solve_8ad44e4b(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = color(x2)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = fill(x5, ONE, x2)\n    x7 = fill(x6, TWO, x3)\n    x8 = fill(x7, THREE, x2)\n    x9 = fill(x8, EIGHT, x3)\n    O = fill(x9, TWO, x2)\n    return O"], [0.5319107725339609, "def solve_1a52e3a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = extract(x2, x6)\n    O = subgrid(x7, I)\n    return O"], [0.5319107725339609, "def solve_8c65879a(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.5502516534918191, "def solve_7d821d20(I):\n    x1 = compose(size, dedupe)\n    x2 = x1(I)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, F)\n    x7 = order(x6, leftmost)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    O = x4(x9)\n    return O"], [0.5603234709466594, "def solve_a7867246(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = mostcolor(x3)\n    O = replace(x4, x5, ZERO)\n    return O"], [0.5652441058672942, "def solve_d2c763da(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.5728936785168669, "def solve_f4239180(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5728936785168669, "def solve_0ffbc298(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5728936785168669, "def solve_0ffd7bd1(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5728936785168669, "def solve_60673de9(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5766800033031917, "def solve_2745fbac(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.6580962089870575, "def solve_9e93772e(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, ZERO)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = objects(x7, T, F, T)\n    x9 = lbind(colorfilter, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, TWO)\n    x12 = mfilter(x8, x11)\n    x13 = replace(x7, ZERO, ZERO)\n    O = fill(x13, x12, x12)\n    return O"], [0.6674861298852472, "def solve_a7a1e5c6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_a70cad6f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.701314980779116, "def solve_47ab4d9e(I):\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.7017562383211805, "def solve_968583e8(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7017562383211805, "def solve_ee99d7df(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7031192649623538, "def solve_2270a167(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7209610573661548, "def solve_7685dc78(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ZERO, x3)\n    return O"], [0.7253714992428528, "def solve_0d473cbb(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7305542811310891, "def solve_f06c5f81(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_259e00c8(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_f446b1d5(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_71ac412b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_040a93f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7346483141124492, "def solve_5623dbf8(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.7346483141124492, "def solve_f4a94d1e(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x1, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7366714434090215, "def solve_31ff8911(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.7375405577460977, "def solve_023ec458(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7392725757358751, "def solve_33010530(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.739396261410893, "def solve_b81ded57(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.7394705989789309, "def solve_ef527a63(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.7400226558178445, "def solve_8cc1d8ec(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400226558178445, "def solve_d9fecfa8(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400226558178445, "def solve_d7811ebc(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400474142010353, "def solve_87512924(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.7400474142010353, "def solve_12217d25(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.7401828246155336, "def solve_9b553744(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7402857765811778, "def solve_d55ad3a6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_45b514cd(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7403016058295065, "def solve_55dd0e88(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_954cdeb2(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_28deabb3(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_9d677d16(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_4ddb20c6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_14c41520(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_8ec7aee1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_34394dc1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_219273a5(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_f266e172(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_6ded171a(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7411341780448716, "def solve_e04f5c5a(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7412792299071665, "def solve_a1cf1603(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.7414217191724711, "def solve_488a752e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_8980a015(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_e11ee802(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_b6e88a14(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_19e99ceb(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_eac76aa0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414345790655789, "def solve_a1928191(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.7414654147115858, "def solve_3b778ffa(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_ff54c881(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I, ZERO, x4)\n    return O"], [0.7414654147115858, "def solve_6bb6203b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_58d157db(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_3e160311(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7414654147115858, "def solve_bdaafa10(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7414654147115858, "def solve_e980cfb8(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.7414654147115858, "def solve_5bc9e60f(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.7414654147115858, "def solve_73414106(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.7414654147115858, "def solve_6a57f739(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, EIGHT, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.7415156912324505, "def solve_b1b1b182(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.7415640705261127, "def solve_76061213(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.7417406125100033, "def solve_bd5d921a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7420260064287781, "def solve_9b764f11(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.742083783409111, "def solve_3fdded62(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7421381629647789, "def solve_5e3a8da7(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.7421486333648079, "def solve_a4ad7c83(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = rbind(hmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O"], [0.7424127494601457, "def solve_42c1ed42(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = cover(I, x3)\n    return O"], [0.7424522072121217, "def solve_08ee8af6(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = hperiod(x2)\n    x4 = multiply(x3, THREE)\n    x5 = tojvec(x3)\n    x6 = tojvec(x4)\n    x7 = shift(x2, x5)\n    x8 = shift(x2, x6)\n    x9 = paint(I, x7)\n    O = paint(x9, x8)\n    return O"], [0.7427043838829858, "def solve_8abc9ea2(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.7429519914166027, "def solve_5aad815d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, ulcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [0.7430735847922042, "def solve_61c893ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7430735847922042, "def solve_3a389273(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7431832795883769, "def solve_1b2045ff(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7431832795883769, "def solve_35427a29(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.7434663615646725, "def solve_2aa4aff4(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.7446400178861889, "def solve_f03de876(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.7448399954168033, "def solve_23958e7d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = fill(I, THREE, x3)\n    return O"], [0.7448399954168033, "def solve_f69937af(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, TWO)\n    x3 = compose(x2, size)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.7450712646640288, "def solve_243773de(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7450712646640288, "def solve_f52b0c96(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7452938391810585, "def solve_84cee839(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.7453226770852263, "def solve_daba23b8(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_dfa720d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7454216969955122, "def solve_50cd7898(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7454291044528212, "def solve_6f2b50a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7455485410980326, "def solve_0195c002(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.7473234534622014, "def solve_87355365(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7473234534622014, "def solve_8f63ae18(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7481629482893862, "def solve_fa7ced9e(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, EIGHT, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.7488659023144327, "def solve_efe9fda9(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7488659023144327, "def solve_e997359f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7488659023144327, "def solve_8895b7f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7491210583733974, "def solve_7a16f3d6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.7491210583733974, "def solve_e247cea4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.7496036464722639, "def solve_cfe60207(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.7496450540478259, "def solve_38846359(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.7498499462550435, "def solve_caabff5c(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [0.7498499462550435, "def solve_ed27fd0a(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7498499462550435, "def solve_d02fbb4f(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7498948998515579, "def solve_b5f996c7(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7517379313306956, "def solve_799d352b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    O = replace(x6, ONE, SIX)\n    return O"], [0.7518753424364076, "def solve_6f8d7017(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7525765258226969, "def solve_bc3f41d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, SEVEN, x5)\n    return O"], [0.7700284366461739, "def solve_e8a53623(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = merge(x1)\n    x7 = backdrop(x6)\n    x8 = box(x6)\n    x9 = fill(I, x3, x7)\n    O = fill(x9, x5, x8)\n    return O"], [0.7771381822376172, "def solve_f5677fcc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.7771381822376172, "def solve_006e1e9c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.7771381822376172, "def solve_c2723bc4(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.7771381822376172, "def solve_d62ef2d4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.7771381822376172, "def solve_8613c3e5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_15906aaf(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_c64aa585(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_4f6973f0(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_e7715c13(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = matcher(first, x4)\n    x6 = sfilter(x3, x5)\n    x7 = compose(hfrontier, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x6)\n    x10 = paint(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, TWO)\n    x14 = apply(tojvec, x13)\n    x15 = astuple(ONE, NINE)\n    x16 = canvas(x4, x15)\n    x17 = fill(x16, ONE, x14)\n    x18 = hsplit(x17, x10)\n    O = merge(x18)\n    return O"], [1.0, "def solve_3f640a9f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = objects(I, T, F, T)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = colorfilter(x1, x6)\n    x8 = apply(center, x7)\n    x9 = normalize(x8)\n    x10 = lbind(shift, x9)\n    x11 = mapply(x10, x8)\n    x12 = replace(I, x6, x11)\n    x13 = merge(x8)\n    x14 = paint(x12, x13)\n    O = subgrid(x9, x14)\n    return O"], [1.0, "def solve_e2025190(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_7db60956(I):\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = objects(I, T, F, T)\n    x4 = first(x3)\n    x5 = difference(x2, x4)\n    x6 = objects(I, T, F, T)\n    x7 = colorfilter(x6, FIVE)\n    x8 = compose(last, center)\n    x9 = order(x7, x8)\n    x10 = mapply(last, x9)\n    x11 = fill(I, SIX, x10)\n    x12 = replace(x11, FIVE, ZERO)\n    O = ofcolor(x12, TWO)\n    return O"], [1.0, "def solve_e12627b1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(matcher, x6)\n    x8 = compose(x7, mostcolor)\n    x9 = fork(sfilter, identity, x8)\n    x10 = fork(difference, identity, x9)\n    x11 = lbind(rbind, multiply)\n    x12 = rbind(x11, x10)\n    x13 = chain(x12, leftmost, x10)\n    x14 = lbind(rbind, greater)\n    x15 = rbind(leftmost, x10)\n    x16 = chain(x14, x15, x13)\n    x17 = compose(x12, x16)\n    x18 = fork(sfilter, identity, x17)\n    x19 = fork(connect, identity, x18)\n    x20 = mapply(x19, x5)\n    O = fill(I, EIGHT, x20)\n    return O"], [1.0, "def solve_0a69c961(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(subgrid, I)\n    x5 = apply(x4, x3)\n    x6 = rbind(colorcount, SIX)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = merge(x8)\n    x10 = cover(I, x9)\n    x11 = chain(x4, first, last)\n    x12 = x11(x4)\n    x13 = x10(x12)\n    x14 = normalize(x7)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = paint(x10, x15)\n    x17 = height(x16)\n    x18 = equality(x17, TWO)\n    x19 = hmirror(x16)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = combine(x16, x20)\n    x22 = paint(x16, x21)\n    O = compress(x22)\n    return O"], [1.0, "def solve_cbd4b03f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = hmirror(x2)\n    x4 = replace(x3, ZERO, ZERO)\n    x5 = ofcolor(x4, ONE)\n    x6 = replace(x5, ZERO, ZERO)\n    x7 = ofcolor(x6, ONE)\n    x8 = insert(x4, x7)\n    x9 = backdrop(x8)\n    x10 = insert(x5, x9)\n    x11 = frontiers(x10)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, vsplit, hsplit)\n    x16 = x15(I, TWO)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    O = fill(x17, THREE, x20)\n    return O"], [1.0, "def solve_16c768e0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, TWO)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [1.0, "def solve_575bb161(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(add, height, width)\n    x5 = compose(decrement, x4)\n    x6 = fork(equality, x3, x5)\n    x7 = fork(difference, toindices, box)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x6, x9)\n    x11 = extract(x1, x10)\n    x12 = toindices(x11)\n    x13 = compose(double, halve)\n    x14 = fork(equality, identity, x13)\n    x15 = sfilter(x12, x14)\n    x16 = difference(x12, x15)\n    x17 = fill(I, TWO, x15)\n    O = fill(x17, THREE, x16)\n    return O"], [1.0, "def solve_87de71bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = subgrid(x4, I)\n    x7 = fork(multiply, height, width)\n    x8 = argmax(x6, x7)\n    x9 = mostcolor(x8)\n    x10 = trim(x8)\n    x11 = objects(x10, T, F, T)\n    x12 = compose(hmirror, vmirror)\n    x13 = mapply(x12, x11)\n    x14 = color(x4)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = mapply(vmirror, x16)\n    x18 = replace(x17, x14, x9)\n    O = fill(x18, EIGHT, x15)\n    return O"], [1.0, "def solve_25a666fc(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_c7eee208(I):\n    x1 = objects(I, T, F, T)\n    x2 = other(x1, ZERO)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [1.0, "def solve_0b9ecdc6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(rbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = intersection(x7, x21)\n    O = fill(x17, EIGHT, x22)\n    return O"], [1.0, "def solve_290add8d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_5844ec02(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_25101c5f(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = equality(x2, TWO)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(I)\n    x6 = equality(x2, ONE)\n    x7 = branch(x6, vmirror, hmirror)\n    x8 = x7(x5)\n    x9 = ofcolor(x8, EIGHT)\n    x10 = center(x9)\n    x11 = x8(x10)\n    x12 = repeat(x11, ONE)\n    x13 = x4(x12)\n    x14 = shift(x13, x12)\n    x15 = fill(x5, THREE, x14)\n    x16 = shift(x15, x12)\n    O = fill(x15, SIX, x16)\n    return O"], [1.0, "def solve_b244c671(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmax(x4, size)\n    x7 = other(x4, x6)\n    x8 = inindices(x6)\n    x9 = outbox(x6)\n    x10 = lbind(argmin, x8)\n    x11 = lbind(lbind, manhattan)\n    x12 = compose(x11, initset)\n    x13 = compose(x10, x12)\n    x14 = mapply(x13, x9)\n    x15 = cover(I, x6)\n    O = fill(x15, ONE, x14)\n    return O"], [1.0, "def solve_31dcd022(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = neighbors(ORIGIN)\n    x5 = mapply(neighbors, x4)\n    x6 = apply(urcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, EIGHT, x8)\n    x10 = cover(x9, x1)\n    O = paint(x10, x2)\n    return O"], [1.0, "def solve_007b20c3(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x3)\n    return O"], [1.0, "def solve_d5973466(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [1.0, "def solve_8568c6c7(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(extract, x1)\n    x5 = rbind(subgrid, I)\n    x6 = lbind(compose, x3)\n    x7 = chain(x5, x4, x6)\n    x8 = x7(ulcorner)\n    x9 = x7(urcorner)\n    x10 = x7(llcorner)\n    x11 = x7(lrcorner)\n    x12 = hconcat(x11, x10)\n    x13 = hconcat(x9, x8)\n    O = vconcat(x12, x13)\n    return O"], [1.0, "def solve_c9a20330(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x4)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_0b229d31(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_7732ea61(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_a4cb1dfd(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I, EIGHT, x4)\n    return O"], [1.0, "def solve_7874f11b(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(first, x10, delta)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_091e6040(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_5a80d207(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(subgrid, I)\n    x4 = fork(equality, identity, x3)\n    x5 = extract(x1, x4)\n    x6 = replace(I, ZERO, ZERO)\n    x7 = lbind(insert, DOWN)\n    x8 = compose(lrcorner, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, x5)\n    O = fill(x6, ZERO, x10)\n    return O"], [1.0, "def solve_8aa34d7b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_25ec56c1(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, width, height)\n    x8 = x7(x2)\n    x9 = subtract(x8, DOWN)\n    x10 = downscale(x4, x9)\n    x11 = x7(x10)\n    x12 = other(x1, x11)\n    x13 = x7(x12)\n    x14 = height(x13)\n    x15 = width(x13)\n    x16 = toivec(x14)\n    x17 = hfrontier(x16)\n    x18 = vfrontier(x15)\n    x19 = shape(I)\n    x20 = maximum(x19)\n    x21 = lbind(shift, x3)\n    x22 = objects(x17, x21, x13)\n    x23 = rbind(mapply, x22)\n    x24 = compose(x23, toindices)\n    x25 = mapply(x24, x11)\n    x26 = cover(I, x25)\n    x27 = solve_O = paint(x26, x25)\n    O = x7(x27)\n    return O"], [1.0, "def solve_b44f9a16(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = canvas(x2, x4)\n    x4 = normalize(x2)\n    x5 = paint(x3, x4)\n    x6 = height(x2)\n    x7 = width(x2)\n    x8 = normalize(x2)\n    x9 = divide(x6, x7)\n    x10 = width(x2)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = multiply(x5, x11)\n    x13 = shift(x5, x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = rbind(multiply, x14)\n    x16 = apply(x15, x3)\n    x17 = rbind(shift, x16)\n    x18 = mapply(x17, x12)\n    O = paint(x5, x18)\n    return O"], [1.0, "def solve_71b32747(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NINE, NINE)\n    x4 = canvas(ZERO, x3)\n    x5 = paint(x4, x2)\n    x6 = normalize(x2)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mapply(x8, x6)\n    O = paint(x5, x9)\n    return O"], [1.0, "def solve_6cbded2f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = chain(backdrop, inbox, outbox)\n    x5 = mapply(x4, x3)\n    x6 = canvas(ZERO, THREE_BY_THREE)\n    x7 = asobject(x6)\n    x8 = paint(x7, x7)\n    x9 = argmin(x1, size)\n    x10 = argmax(x1, size)\n    x11 = x9(x10)\n    x12 = x9(x11)\n    x13 = fill(x8, ONE, x12)\n    x14 = fill(x13, TWO, x12)\n    x15 = size(x1)\n    x16 = argmax(x15, size)\n    x17 = size(x16)\n    x18 = fill(x14, THREE, x17)\n    x19 = fill(x18, TWO, x16)\n    O = paint(x19, x19)\n    return O"], [1.0, "def solve_21e720af(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(TEN, TEN)\n    x3 = canvas(ZERO, x2)\n    x4 = astuple(THREE, ONE)\n    x5 = merge(x3)\n    x6 = rbind(toobject, I)\n    x7 = compose(first, x6)\n    x8 = apply(x7, x4)\n    x9 = rbind(colorcount, ONE)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.0, "def solve_11045412(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(contained, ZERO)\n    x5 = compose(x4, size)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(compose, flip)\n    x8 = lbind(matcher, first)\n    x9 = chain(x6, x7, x8)\n    x10 = fork(sfilter, toindices, x9)\n    x11 = chain(even, x6, x10)\n    x12 = sfilter(x3, x11)\n    x13 = compose(invert, size)\n    x14 = argmin(x12, x13)\n    x15 = rightmost(x14)\n    x16 = width(I)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = apply(tojvec, x17)\n    x19 = lbind(shift, x14)\n    x20 = mapply(x19, x18)\n    x21 = fill(I, EIGHT, x20)\n    x22 = canvas(ZERO, THREE_BY_THREE)\n    O = paint(x22, x2)\n    return O"], [1.0, "def solve_e55ab101(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = astuple(ONE, THREE)\n    x10 = astuple(TWO, FOUR)\n    x11 = astuple(TWO, ONE)\n    x12 = initset(x11)\n    x13 = insert(x9, x12)\n    x14 = insert(x10, x13)\n    x15 = dmirror(x14)\n    x16 = astuple(x15, x4)\n    x17 = lbind(canvas, x8)\n    x18 = lbind(occurrences, x16)\n    x19 = chain(x17, x18, lrcorner)\n    x20 = lbind(apply, initset)\n    x21 = lbind(rbind, shift)\n    x22 = chain(x20, x21, x19)\n    x23 = fork(mapply, x19, x22)\n    x24 = fork(paint, identity, x23)\n    x25 = mapply(x24, x15)\n    O = paint(x25, x27)\n    return O"], [1.0, "def solve_f211aade(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_b1371c12(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_34414eee(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_195271f9(I):\n    x1 = fork(equality, toindices, corners)\n    x2 = x1(I)\n    x3 = halve(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, ZERO, x5)\n    return O"], [1.0, "def solve_a693a0aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(greater, x1)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = merge(x3)\n    x6 = recolor(x5, x4)\n    x7 = astuple(THREE, TEN)\n    x8 = canvas(ZERO, x7)\n    x9 = paint(x8, x6)\n    O = rot90(x9)\n    return O"], [1.0, "def solve_747027e2(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = mostcolor(x4)\n    x6 = toindices(x4)\n    x7 = lbind(argmin, x6)\n    x8 = lbind(lbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x5)\n    x12 = merge(x1)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O"], [1.0, "def solve_dc66a1d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_360c150d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_58a99352(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = fork(equality, toindices, box)\n    x4 = sfilter(x2, x3)\n    x5 = normalize(x4)\n    x6 = color(x5)\n    x7 = subtract(NINE, x6)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = product(x8, x8)\n    x10 = interval(ZERO, SEVEN, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = apply(normalize, x11)\n    x13 = lbind(shift, x5)\n    x14 = mapply(x13, x12)\n    x15 = cover(I, x5)\n    x16 = gravitate(x14, x9)\n    x17 = shift(x14, x16)\n    O = fill(x15, x6, x17)\n    return O"], [1.0, "def solve_cd2da8c3(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = merge(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O"], [1.0, "def solve_dce534de(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_d87c8485(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(other, TWO)\n    x3 = compose(x2, palette)\n    x4 = matcher(first, TWO)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(x5, normalize)\n    x7 = lbind(apply, double)\n    x8 = chain(x7, toindices, x6)\n    x9 = rbind(add, NEG_ONE)\n    x10 = lbind(apply, x9)\n    x11 = compose(x10, x8)\n    x12 = lbind(rbind, shoot)\n    x13 = rbind(compose, x12)\n    x14 = lbind(rbind, mapply)\n    x15 = chain(x13, x14, toindices)\n    x16 = fork(mapply, x15, x11)\n    x17 = fork(recolor, x3, x16)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_c6df0cc9(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_6c2118c7(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_717104b0(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_e719d729(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_4c0b39ee(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_c23e707a(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = center(x3)\n    x5 = merge(x3)\n    x6 = intersection(x4, x5)\n    x7 = fill(I, NINE, x6)\n    x8 = fgpartition(x7)\n    x9 = matcher(color, NINE)\n    x10 = extract(x8, x9)\n    x11 = ulcorner(x10)\n    x12 = subtract(x11, DOWN)\n    x13 = shape(x10)\n    x14 = add(x13, TWO_BY_ZERO)\n    O = crop(x12, x14, x12)\n    return O"], [1.1, "def solve_205f7849(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_028d5603(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = matcher(first, x10)\n    x12 = extract(x2, x11)\n    x13 = first(x12)\n    x14 = subgrid(x13, I)\n    x15 = hmirror(x14)\n    x16 = replace(x15, x10, x6)\n    x17 = ofcolor(x16, x10)\n    x18 = leftmost(x17)\n    x19 = leftmost(x10)\n    x20 = greater(x18, x19)\n    x21 = manhattan(x17, x20)\n    x22 = add(x20, x21)\n    x23 = branch(x22, x20, x5)\n    x24 = branch(x22, x27, x6)\n    x25 = branch(x22, x24, x17)\n    x26 = ofcolor(x16, x10)\n    x27 = difference(x26, x25)\n    x28 = toobject(x27, x16)\n    x29 = colorfilter(x28, x10)\n    x30 = rbind(adjacent, x27)\n    x31 = sfilter(x29, x30)\n    x32 = mfilter(x31, x17)\n    x33 = sfilter(x32, x30)\n    x34 = vline(x33)\n    x35 = hmirror(x24)\n    x36 = vmirror(x24)\n    x37 = either(x34, x35)\n    x38 = branch(x37, x35, x36)\n    x39"], [1.1, "def solve_8f1175d9(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = canvas(x2, FOUR)\n    x4 = normalize(x2)\n    x5 = lbind(shift, x4)\n    x6 = height(x2)\n    x7 = equality(x6, FOUR)\n    x8 = x5(x7)\n    x9 = height(x2)\n    x10 = divide(x8, x9)\n    x11 = increment(x10)\n    x12 = width(x2)\n    x13 = divide(x12, x12)\n    x14 = increment(x13)\n    x15 = invert(x14)\n    x16 = toindices(x4)\n    x17 = shift(x16, x15)\n    x18 = toindices(x2)\n    x19 = center(x17)\n    x20 = invert(x19)\n    x21 = shift(x18, x20)\n    x22 = toindices(x2)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = sfilter(x11, x26)\n    x28 = center(x27)\n    x29 = matcher(first, x28)\n    x30 = compose(flip, x28)\n    x31 = extract(x27, x30)\n    x32 = center(x31)\n    x33 = invert(x32)\n    x34 = shift(x31, x33)\n    x35 = toindices(x34)\n    x36 = lbind(apply, last)\n    x37 = rbind(remove, x35)\n    x38 = lbind(lbind, contained)\n    x39 = compose(x38, last)\n    x40 = lbind(sfilter, x33)\n    x41 = chain(size, x40, x39)\n    x42 = decrement(x"], [1.1, "def solve_04d16b8f(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_7da76827(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_c436e9c8(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_feb9e5da(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_bbdb283f(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_b810fd57(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(other, TWO)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = order(x5, leftmost)\n    x7 = compose(last, last)\n    x8 = lbind(matcher, x7)\n    x9 = compose(x8, leftmost)\n    x10 = compose(x8, rightmost)\n    x11 = fork(sfilter, identity, x9)\n    x12 = fork(sfilter, identity, x10)\n    x13 = compose(dneighbors, last)\n    x14 = rbind(chain, x13)\n    x15 = lbind(x14, size)\n    x16 = lbind(rbind, intersection)\n    x17 = chain(x15, x16, toindices)\n    x18 = fork(argmin, x11, x17)\n    x19 = fork(argmin, x12, x17)\n    x20 = compose(last, x18)\n    x21 = compose(last, x19)\n    x22 = astuple(ZERO, DOWN_LEFT)\n    x23 = initset(x22)\n    x24 = lbind(add, RIGHT)\n    x25 = chain(x20, first, last)\n    x26 = compose(x21, first)\n    x27 = fork(subtract, x26, x25)\n    x28 = compose(first, last)\n    x29 = compose(x24, x27)\n    x30 = fork(shift, x28, x29)\n    x31 = fork(combine, first, x30)\n    x32 = fork(remove, x28, last)\n    x33 = fork(astuple, x31, x32)\n    x34 = size(x1)\n    x35 = power(x33, x34)\n    x36 = astuple(x23, x6)\n    x37 = x35(x36)\n    x38 = first(x37)\n    "], [1.1, "def solve_8319893a(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(toindices, normalize)\n    x4 = lbind(matcher, x3)\n    x5 = compose(x4, normalize)\n    x6 = chain(flip, x5, x4)\n    x7 = fork(both, x2, x6)\n    x8 = sfilter(x2, x7)\n    x9 = rbind(multiply, THREE)\n    x10 = rbind(divide, THREE)\n    x11 = compose(x9, x10)\n    x12 = chain(x11, x10, x5)\n    x13 = compose(x11, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = argmin(x8, x14)\n    x16 = x15(x15)\n    x17 = remove(x16, x1)\n    x18 = lbind(colorcount, I)\n    x19 = argmin(x17, x18)\n    x20 = ofcolor(I, x19)\n    x21 = ofcolor(I, x16)\n    x22 = backdrop(x21)\n    x23 = leftmost(x22)\n    x24 = equality(x23, ONE)\n    x25 = branch(x24, x8, x19)\n    x26 = width(I)\n    x27 = equality(x26, x25)\n    x28 = branch(x27, x8, x19)\n    x29 = leftmost(x28)\n    x30 = equality(x29, x25)\n    x31 = rightmost(x28)\n    x32 = decrement(x31)\n    x33 =88(x32, x30)\n    x34 = ofcolor(I, x19)\n    x35 = backdrop(x34)\n    x36 = toobject(x35, I)\n    x37 = matcher(first, x19)\n    x38 = rbind(sfilter, x37)\n    x39 = chain(x30, x38, x37)\n"], [1.1, "def solve_f79d7c4c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_ecd95186(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = color(x2)\n    x5 = color(x3)\n    x6 = merge(x1)\n    x7 = fill(I, x4, x6)\n    x8 = leftmost(x2)\n    x9 = width(I)\n    x10 = interval(x8, x9, TWO)\n    x11 = leftmost(x3)\n    x12 = fill(x7, x4, x11)\n    x13 = astuple(x10, x12)\n    x14 = lbind(shoot, x13)\n    x15 = mapply(x14, x2)\n    x16 = fill(x12, FOUR, x15)\n    x17 = height(x2)\n    x18 = width(I)\n    x19 = interval(x17, x18, ONE)\n    x20 = lbind(apply, last)\n    x21 = rbind(remove, x2)\n    x22 = compose(x20, last)\n    x23 = chain(x19, x21, x22)\n    x24 = rbind(apply, x21)\n    x25 = lbind(lbind, greater)\n    x26 = compose(x24, last)\n    x27 = chain(x26, x25, x22)\n    x28 = fork(sfilter, identity, x27)\n    x29 = compose(center, x2)\n    x30 = fork(subtract, x29, last)\n    x31 = fork(shift, x28, x30)\n    x32 = compose(x15, x31)\n    x33 = fork(mapply, x32, x29)\n    x34 = fork(paint, x33, x32)\n    x35 = compose(x5, x34)\n    x36 = fork(color, first, x35)\n    x37 = astuple(x17, x18)\n    x38 = astuple(x31, x36)\n    x39 = combine(x37,"], [1.1, "def solve_e7a1b0a8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_42bb0197(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, ulcorner, x7)\n    x19 = chain(x14, x13, x7)\n    x20 = fork(apply, x18, x19)\n    x21 = compose(x16, x20)\n    x22 = fork(mapply, x17, x21)\n    x23 = rapply(x10, x3)\n    x24 =rootindices(x23)\n    x25 = lbind(index, I)\n    x26 = compose(x25, x24)\n    x27 = matcher(x26, ZERO)\n    x28 = sfilter(x24, x27)\n    x29 = difference(x24, x28)\n    x30 = sfilter(x29, x27)\n    x31 = merge(x30)\n    x32 = palette(x31)\n    x33 = lbind(chain, first)\n    x34 = lbind(x33, difference)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(x34, x259)\n    x37 = compose(x35, x36)\n    x38 = lbind(rbind, adjacent)\n    "], [1.1, "def solve_4f2676e6(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_dc3c3601(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = vline(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = ofcolor(x4, THREE)\n    x6 = ofcolor(x4, TWO)\n    x7 = center(x5)\n    x8 = hfrontier(x7)\n    x9 = center(x6)\n    x10 = hfrontier(x9)\n    x11 = mostcolor(I)\n    x12 = palette(I)\n    x13 = remove(THREE, x12)\n    x14 = remove(TWO, x13)\n    x15 = other(x14, x11)\n    x16 = replace(x4, THREE, x11)\n    x17 = difference(x8, x5)\n    x18 = underfill(x16, THREE, x17)\n    x19 = replace(x4, TWO, x11)\n    x20 = difference(x10, x6)\n    x21 = underfill(x19, TWO, x20)\n    x22 = objects(x18, T, F, F)\n    x23 = colorfilter(x22, THREE)\n    x24 = rbind(adjacent, x5)\n    x25 = sfilter(x23, x24)\n    x26 = objects(x21, T, F, F)\n    x27 = colorfilter(x26, TWO)\n    x28 = rbind(adjacent, x6)\n    x29 = sfilter(x27, x28)\n    x30 = mapply(toindices, x25)\n    x31 = rbind(equality, x15)\n    x32 = lbind(index, x4)\n    x33 = compose(x31, x32)\n    x34 = rbind(add, LEFT)\n    x35 = compose(x33, x34)\n    x36 = rbind(add, RIGHT)\n    x37 = compose(x33, x36)\n    x38 = fork(either, x35, x37)\n    x39 = rbind(add, UP)\n    x"], [1.1, "def solve_7817c60b(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(hmirror, vmirror, objects)\n    x7 = x6(x5)\n    x8 = argmin(x7, x7)\n    x9 = subgrid(x8, I)\n    x10 = ofcolor(x9, ZERO)\n    x11 = ofcolor(x9, ONE)\n    x12 = position(x10, x11)\n    x13 = first(x12)\n    x14 = normalize(x8)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x9, x15)\n    x17 = objects(x16, T, F, T)\n    x18 = colorfilter(x17, ZERO)\n    x19 = rbind(toobject, x9)\n    x20 = chain(normalize, x19, delta)\n    x21 = chain(positive, size, x20)\n    x22 = lbind(sfilter, x17)\n    x23 = rbind(matcher, x21)\n    x24 = chain(x23, x22, subgrid)\n    x25 = rbind(compose, x21)\n    x26 = chain(x25, x24, x25)\n    x27 = lbind(fork, intersection)\n    x28 = lbind(x27, dneighbors)\n    x29 = lbind(chain, x22)\n    x30 = lbind(x29, x28)\n    x31 = lbind(rbind, outbox)\n    x32 = compose(x31, x30)\n    x33 = lbind(apply, x32)\n    x34 = lbind(chain, backdrop)\n    x35 = lbind(x34, x24)\n    x36 = compose(x35, x32)\n    x37 = lbind(lbind, add)\n    x38 = compose(x37, x36)\n"]], "1e97544e": [[0.05745638404752545, "def solve_ff86047e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = ofcolor(I, x1)\n    x7 = ofcolor(I, x5)\n    x8 = combine(x6, x7)\n    x9 = mapply(neighbors, x8)\n    x10 = difference(x9, x8)\n    x11 = toobject(x10, I)\n    x12 = leastcolor(x11)\n    x13 = ofcolor(I, x1)\n    x14 = first(x13)\n    x15 = initset(x14)\n    x16 = objects(I, T, F, T)\n    x17 = colorfilter(x16, x12)\n    x18 = lbind(adjacent, x8)\n    x19 = mfilter(x17, x18)\n    x20 = toindices(x19)\n    x21 = rbind(manhattan, x15)\n    x22 = chain(even, x21, initset)\n    x23 = sfilter(x20, x22)\n    x24 = fill(I, x5, x20)\n    O = fill(x24, x1, x23)\n    return O"], [0.05745638404752545, "def solve_fd4d7e6e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = ofcolor(I, x1)\n    x7 = ofcolor(I, x5)\n    x8 = combine(x6, x7)\n    x9 = mapply(neighbors, x8)\n    x10 = difference(x9, x8)\n    x11 = toobject(x10, I)\n    x12 = leastcolor(x11)\n    x13 = ofcolor(I, x1)\n    x14 = first(x13)\n    x15 = initset(x14)\n    x16 = objects(I, T, F, T)\n    x17 = colorfilter(x16, x12)\n    x18 = lbind(adjacent, x8)\n    x19 = mfilter(x17, x18)\n    x20 = toindices(x19)\n    x21 = rbind(manhattan, x15)\n    x22 = chain(even, x21, initset)\n    x23 = sfilter(x20, x22)\n    x24 = fill(I, x5, x20)\n    O = fill(x24, x1, x23)\n    return O"], [0.06555616266185658, "def solve_52aa6354(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_115364bf(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_a018ab06(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = recolor(ZERO, x2)\n    x4 = normalize(x3)\n    x5 = occurrences(I, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, x1, x8)\n    return O"], [0.06555616266185658, "def solve_7b100c82(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_707e2f75(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_9b4677ff(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_009f1972(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06639197212020977, "def solve_252b5280(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.06639197212020977, "def solve_266b430a(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.06734634878706808, "def solve_c2f775fc(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = sizefilter(x3, ONE)\n    x5 = merge(x4)\n    x6 = sizefilter(x3, FOUR)\n    x7 = merge(x6)\n    x8 = sizefilter(x3, NINE)\n    x9 = merge(x8)\n    x10 = fill(I, SIX, x5)\n    x11 = fill(x10, SEVEN, x7)\n    O = fill(x11, EIGHT, x9)\n    return O"], [0.06834668128402709, "def solve_169d5505(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.06834668128402709, "def solve_843746e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.06834668128402709, "def solve_ced0ada8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.06836878123221325, "def solve_3ff1d517(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.06920470909682701, "def solve_465b51f8(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.06927348904207718, "def solve_1a33f0f7(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.06959741552663885, "def solve_7827dbeb(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0702135574591548, "def solve_b9035650(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_db6b5069(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_a98d68af(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_ba1fbb2b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.07365085280967543, "def solve_6fc8b39f(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.07443857865203833, "def solve_6b1ab609(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [0.0747180717801148, "def solve_99efabf3(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.07684204363380887, "def solve_3d469b84(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.08096078209867143, "def solve_8b4ec48b(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEG_ONE, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [0.08283557492092357, "def solve_65be25bb(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_010f0e69(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_6e0b711c(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_7ce80c4c(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08598473307451636, "def solve_52046682(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.0887302395387738, "def solve_9dd5ae5a(I):\n    x1 = ofcolor(I, ONE)\n    x2 = product(x1, x1)\n    x3 = fork(connect, first, last)\n    x4 = apply(x3, x2)\n    x5 = fork(either, vline, hline)\n    x6 = mfilter(x4, x5)\n    O = underfill(I, TWO, x6)\n    return O"], [0.09009415538349093, "def solve_28ad12ee(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = leastcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = mostcolor(I)\n    x7 = other(x5, x6)\n    x8 = inbox(x2)\n    O = fill(I, x7, x8)\n    return O"], [0.10116006966158149, "def solve_c5ffc3c7(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.10302238859150492, "def solve_f270c204(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [0.10350267054002193, "def solve_10a954c4(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.10434388482560263, "def solve_70b96fcf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.1098717330267121, "def solve_32e47470(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.11033822332653574, "def solve_0e868a6b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.11410495726315961, "def solve_b7cfdc5e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.12169800916884342, "def solve_df2771cf(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_c3b2e558(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_33271d6f(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.1217171472815362, "def solve_f76bd676(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, x3, x6)\n    return O"], [0.12583356972621706, "def solve_b8878d00(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12583356972621706, "def solve_b3729d44(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12761570956639848, "def solve_82dc0b86(I):\n    x1 = ofcolor(I, TWO)\n    x2 = hline(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = matcher(color, TWO)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = ofcolor(x4, TWO)\n    x10 = leftmost(x9)\n    x11 = leftmost(x8)\n    x12 = greater(x10, x11)\n    x13 = manhattan(x8, x9)\n    x14 = decrement(x13)\n    x15 = branch(x12, identity, invert)\n    x16 = branch(x12, decrement, increment)\n    x17 = branch(x12, leftmost, rightmost)\n    x18 = x15(x14)\n    x19 = tojvec(x18)\n    x20 = shift(x8, x19)\n    x21 = x17(x20)\n    x22 = x16(x21)\n    x23 = tojvec(x22)\n    x24 = vfrontier(x23)\n    x25 = cover(x4, x8)\n    x26 = paint(x25, x20)\n    x27 = fill(x26, EIGHT, x24)\n    O = x3(x27)\n    return O"], [0.1291415585217549, "def solve_b402463d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_db942f0a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_b4cd9371(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_4f1a18cb(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1314364028975242, "def solve_5b95e02b(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.1314364028975242, "def solve_5d73866f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.13351065044779606, "def solve_76ff3a3c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, ONE, x5)\n    x7 = lbind(power, outbox)\n    x8 = chain(x7, halve, width)\n    x9 = initset(x8)\n    x10 = lbind(rapply, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(backdrop, x12)\n    x14 = fork(difference, x13, toindices)\n    x15 = mapply(x14, x1)\n    x16 = mostcolor(I)\n    x17 = ofcolor(I, x16)\n    x18 = intersection(x15, x17)\n    O = fill(x6, THREE, x18)\n    return O"], [0.13378620904168428, "def solve_6457c709(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, FOUR, x3)\n    return O"], [0.13508938916939192, "def solve_5fae9b55(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13508938916939192, "def solve_69a7839e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13732320260021091, "def solve_4ce22f4a(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.1391543174866792, "def solve_406bdcf9(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.1430138225359875, "def solve_923bfbb3(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.1430138225359875, "def solve_90729e89(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.15924388832696912, "def solve_33d590a2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_e3986f71(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_7047c94d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_42f01847(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.16903724504454612, "def solve_f7431e8c(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.1773065582183363, "def solve_6f0f3804(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_c8722dcb(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_917f5c63(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_1477f750(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_95c51eed(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_659e2cb8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_0c12f80d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_0ea4ec5a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_59dea1ab(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_895044a4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_bad53eaa(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_ee5ae5a7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_aa72798e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.18190769514794702, "def solve_3ee925ff(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.18335650834767755, "def solve_01271e9a(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.19328406298127523, "def solve_6c8630f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, THREE, x3)\n    return O"], [0.1968197311802683, "def solve_827ec832(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.1968197311802683, "def solve_f29c4ec3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.21391916164730382, "def solve_720a1349(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_6999ab96(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_89f94237(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_75fec1bc(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_d6796322(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.2143774585781502, "def solve_c895320a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.2160336489405799, "def solve_4da42068(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = fgpartition(x1)\n    x4 = merge(x3)\n    x5 = toindices(x4)\n    x6 = compose(double, halve)\n    x7 = fork(equality, identity, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x5, x8)\n    x10 = fill(x1, THREE, x9)\n    O = vmirror(x10)\n    return O"], [0.2339653368872441, "def solve_bbb9aaf1(I):\n    x1 = mostcolor(I)\n    x2 = width(I)\n    x3 = add(TWO, x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.23424985902563292, "def solve_6a7e9049(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.23424985902563292, "def solve_af56ee75(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.24253645692067347, "def solve_dfc3ad2f(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x1)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x2)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x2)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [0.2537260279414613, "def solve_e008911a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2686091447400782, "def solve_e637ed67(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2686091447400782, "def solve_b6eeb5d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2737085951518015, "def solve_ee48a028(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.27482311667088305, "def solve_62674d7a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x1)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x1)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x1, x3)\n    O = fill(x38, x1, x37)\n    return O"], [0.2925429937616783, "def solve_999b50c4(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.29493888612223423, "def solve_d9e16cc1(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2969700117912533, "def solve_63d42dcc(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_5b5dbce2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_0bd4d283(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_acc47c64(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_af61e04c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_5641ed25(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_cf43f4e1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_245af1ff(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_56b6651b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_f191fcfd(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3066763611693097, "def solve_2cbfab6e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.3066763611693097, "def solve_b3dc3af8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.31011174594270147, "def solve_6727ea91(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_54b060e6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31313111917950626, "def solve_bb00a352(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.3270617126397473, "def solve_dcd601b0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, UNITY, x18)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3387087982661474, "def solve_f8410c1e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.3646584896584897, "def solve_85f0a1c7(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_776cebce(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_23c9ff8e(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_d8efa854(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_ef2b10aa(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4170310435194296, "def solve_26880319(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5455548516524127, "def solve_d545657f(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5586554186554187, "def solve_6767001b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_ed3ff309(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6185357460219338, "def solve_43de25ae(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_38616c0d(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_e9fce823(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6793066105327229, "def solve_5a8b1e41(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.7635281385281386, "def solve_07bb3091(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7744107744107743, "def solve_dc3c48fe(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [1.0, "def solve_f39dcad5(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 =max(x5, x4)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = connect(x7, x3)\n    x9 = rbind(toobject, I)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x10, x9, fgpartition)\n    x12 = chain(x8, x9, fork)\n    x13 = pair(x8, x12)\n    x14 = power(first, TWO)\n    x15 = outbox(x14)\n    x16 = leastcolor(x15)\n    x17 = mostcolor(x15)\n    x18 = shape(I)\n    x19 = canvas(x17, x18)\n    x20 = lbind(multiply, x18)\n    x21 = chain(x20, shape, first)\n    x22 = lbind(multiply, x19)\n    x23 = compose(x22, outbox)\n    x24 = fork(add, x21, x23)\n    x25 = lbind(contained, ZERO)\n    x26 = compose(x25, x14)\n    x27 = fork(add, x26, x24)\n    x28 = compose(x25, x27)\n    x29 = fork(445, x28, x24)\n    x30 = fork(recolor, x29, x3)\n    x31 = mapply(x30, x13)\n    x32 = paint(x19, x31)\n    O = trim(x32)\n    return O"], [1.0, "def solve_78483542(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_3b4b3309(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [1.0, "def solve_b5208e4d(I):\n    x1 = mostcolor(I)\n    x2 = leastcolor(I)\n    x3 = objects(I, T, F, F)\n    x4 = colorfilter(x3, x1)\n    x5 = merge(x4)\n    x6 = width(x5)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = height(x5)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = rbind(toobject, I)\n    x11 = rbind(shoot, UP)\n    x12 = compose(x10, x11)\n    x13 = mapply(x12, x7)\n    x14 = fill(I, x1, x13)\n    x15 = increment(x6)\n    x16 = astuple(x15, x15)\n    x17 = canvas(ZERO, x16)\n    x18 = asindices(x17)\n    x19 = shift(x18, UNITY)\n    x20 = lbind(difference, x18)\n    x21 = lbind(rbind, manhattan)\n    x22 = rbind(compose, initset)\n    x23 = lbind(rbind, sfilter)\n    x24 = chain(x22, x23, x19)\n    x25 = fork(mapply, x24, x21)\n    x26 = fork(recolor, x25, x20)\n    x27 = mapply(x26, x4)\n    O = paint(x14, x27)\n    return O"], [1.0, "def solve_70b56da2(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_9f1c3158(I):\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = vmirror(x2)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = toindices(x5)\n    x7 = compose(double, halve)\n    x8 = fork(equality, identity, x7)\n    x9 = sfilter(x6, x8)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = sfilter(x14, first)\n    x16 = mapply(first, x15)\n    x17 = fill(x6, FOUR, x16)\n    x18 = merge(x15)\n    x19 = fill(x17, NEG_ONE, x18)\n    x20 = shape(x16)\n    x21 = canvas(ZERO, x20)\n    x22 = hconcat(x19, x21)\n    x23 = objects(x22, F, T, T)\n    x24 = sizefilter(x23, ONE)\n    x25 = merge(x24)\n    x26 = fill(x22, THREE, x25)\n    O = replace(x26, ZERO, ONE)\n    return O"], [1.0, "def solve_82fdb0b8(I):\n    x1 = mostcolor(I)\n    x2 = identity(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(x5)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x6, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(x5, x21)\n    return O"], [1.0, "def solve_25e0d02c(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = order(x5, identity)\n    x7 = compose(last, last)\n    x8 = order(x6, x7)\n    x9 = x2(x8)\n    x10 = last(x8)\n    x11 = remove(x10, x8)\n    x12 = power(outbox, TWO)\n    x13 = chain(backdrop, x12, initset)\n    x14 = fork(combine, x13, outbox)\n    x15 = mapply(x14, x11)\n    O = fill(I, x1, x15)\n    return O"], [1.0, "def solve_515e3855(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_f11f80b9(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_389c1b73(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(x3, toindices)\n    x5 = fork(extract, x4, x4)\n    x6 = compose(x5, x4)\n    x7 = fork(intersection, x6, toindices)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x7, x9)\n    x11 = sfilter(x1, x10)\n    x12 = sfilter(x1, x8)\n    x13 = merge(x12)\n    x14 = paint(I, x13)\n    x15 = merge(x14)\n    x16 = paint(x14, x15)\n    x17 = shape(x15)\n    x18 = decrement(x17)\n    x19 = canvas(ZERO, x18)\n    x20 = shoot(ORIGIN, UNITY)\n    x21 = recolor(ZERO, x20)\n    O = paint(x19, x21)\n    return O"], [1.0, "def solve_228fd010(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_9a5b4327(I):\n    x1 = mostcolor(I)\n    x2 = identity(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(dmirror, x4)\n    x6 = chain(x5, lefthalf, x4)\n    x7 = rbind(sfilter, x6)\n    x8 = compose(dmirror, x7)\n    x9 = power(x8, TWO)\n    x10 = dmirror(I)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x11, x10)\n    x13 = lbind(occurrences, I)\n    x14 = chain(positive, size, x13)\n    x15 = compose(x14, x12)\n    x16 = chain(positive, vline, x15)\n    x17 = lbind(rbind, branch)\n    x18 = fork(rapply, x17, x16)\n    x19 = compose(x18, x12)\n    x20 = compose(x13, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, x16)\n    x23 = fork(argmin, x18, x22)\n    x24 = fork(occurrences, x23, x16)\n    x25 = compose(dmirror, x24)\n    x26 = fork(add, x25, x260)\n    x27 = compose(x26, x24)\n    x28 = fork(add, x27, x25)\n    x29 = fork(insert, x27, x28)\n    x30 = compose(backdrop, x29)\n    x31 = mapply(x30, x18)\n    x32 = fill(I, TWO, x31)\n    O = replace(x32, x1, THREE)\n    return O"], [1.0, "def solve_d92131cd(I):\n    x1 = square(I, I)\n    x2 =fork(vsplit, identity, maximum)\n    x3 = x2(x1)\n    x4 = leastcolor(x3)\n    x5 = palette(x3)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, x1)\n    x8 = argmin(x6, x7)\n    x9 = ofcolor(x3, x4)\n    x10 = ofcolor(x3, x8)\n    x11 = mapply(neighbors, x9)\n    x12 = mapply(neighbors, x10)\n    x13 = sfilter(x11, x12)\n    x14 = Neighobject(x13, x3)\n    x15 = mapply(neighbors, x14)\n    x16 = mapply(neighbors, x10)\n    x17 = sfilter(x15, x16)\n    x18 = fill(x3, x4, x17)\n    x19 = fill(x18, x8, x15)\n    O = fill(x19, x4, x17)\n    return O"], [1.0, "def solve_2e8e1af7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_73c25ee2(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = subgrid(x2, I)\n    x4 = argmax(x3, x2)\n    x5 = color(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = output(x6, x2)\n    x8 = merge(x7)\n    x9 = width(x8)\n    x10 = ulcorner(x8)\n    x11 = width(x9)\n    x12 = divide(x9, x11)\n    x13 = upscale(x8, x12)\n    x14 = shift(x13, x10)\n    O = paint(x4, x14)\n    return O"], [1.0, "def solve_41aaea5c(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_7b20a6e2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_574a357b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_efe06c75(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = x2(x1)\n    x4 = fork(combine, upscale, vsplit)\n    x5 = fork(equality, identity, x4)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = compose(x7, toindices)\n    x9 = mapply(x8, x7)\n    x10 = intersection(x9, x7)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_77aeeaf6(I):\n    x1 = fgpartition(I)\n    x2 = mapply(neighbors, x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(ulcorner, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_00c1363c(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_439cb827(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = lbind(contained, ONE)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    x6 = branch(x5, vsplit, hsplit)\n    x7 = x6(I, TWO)\n    x8 = extract(x7, numcolors)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = objects(x9, F, F, T)\n    x12 = merge(x11)\n    x13 = paint(x9, x12)\n    x14 = ofcolor(x13, ONE)\n    x15 = subgrid(x14, x13)\n    x16 = trim(x15)\n    x17 = asobject(x16)\n    x18 = shift(x17, UNITY)\n    O = paint(x13, x18)\n    return O"], [1.0, "def solve_182f938a(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_01623570(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_289ef8eb(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = difference(x1, x3)\n    x8 = apply(toindices, x7)\n    x9 = rbind(adjacent, x6)\n    x10 = mfilter(x8, x9)\n    O = fill(I, EIGHT, x10)\n    return O"], [1.0, "def solve_177d874e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_9ee24c34(I):\n    x1 = asindices(I)\n    x2 = lbind(index, I)\n    x3 = compose(x2, lrcorner)\n    x4 = astuple(NEG_TWO, NEG_TWO)\n    x5 = rbind(shift, x4)\n    x6 = apply(x5, x3)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = asindices(x9)\n    x11 = box(x10)\n    x12 = toobject(x11, I)\n    x13 = mostcolor(x12)\n    x14 = palette(I)\n    x15 = remove(x13, x14)\n    x16 = other(x15, x1)\n    x17 = ofcolor(I, x16)\n    x18 = shift(x17, UNITY)\n    x19 = paint(I, x18)\n    x20 = ofcolor(x19, x16)\n    x21 = subgrid(x20, x19)\n    x22 = ofcolor(x21, x16)\n    x23 = replace(x22, x16, x17)\n    x24 = replace(x23, x16, x174)\n    x25 = ofcolor(x24, x16)\n    x26 = replace(x25, x16, x17)\n    x27 = ofcolor(x26, x16)\n    x28 = mapply(dneighbors, x27)\n    x29 = mapply(ineighbors, x27)\n    x30 = fill(x19, ONE, x28)\n    x31 = fill(x30, x16, x29)\n    x32 = fill(x31, x16, x35)\n    x33 = first(x32)\n    x34 = ofcolor(x33, x16)\n    x35 = shift(x34, UP)\n    x36 = combine(x35, x33)\n    O = fill(x36, x16, x32)\n    return O"], [1.0, "def solve_0fa31ed4(I):\n    x1 = dmirror(I)\n    x2 = partition(x1)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(last, last)\n    x7 = chain(last, last, x6)\n    x8 = argmin(x5, x7)\n    x9 = x4(x8)\n    O = subgrid(x9, x1)\n    return O"], [1.0, "def solve_2a371d2f(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_5bec7abc(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, ONE)\n    x16 = difference(x14, x15)\n    x17 = size(x16)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = pair(x18, x18)\n    x20 = lbind(shift, x9)\n    x21 = mapply(x20, x19)\n    O = paint(x1, x21)\n    return O"], [1.0, "def solve_9e6377c9(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_adb1a526(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_5ff6c333(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_2a387963(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = fork(intersection, first, last)\n    x8 = apply(x3, x7)\n    x9 = rbind(shift, x8)\n    x10 = mapply(x9, x2)\n    O = paint(x6, x10)\n    return O"], [1.0, "def solve_2ddbb6ff(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_9a862385(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_5185c745(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_335dfa3e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_aa8b7678(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = remove(x7, x4)\n    x9 = lbind(vmatching, x7)\n    x10 = lbind(hmatching, x7)\n    x11 = sfilter(x8, x9)\n    x12 = sfilter(x8, x10)\n    x13 = argmin(x11, uppermost)\n    x14 = argmax(x11, uppermost)\n    x15 = argmin(x12, leftmost)\n    x16 = argmax(x12, leftmost)\n    x17 = fill(I, SIX, x7)\n    x18 = fill(x17, TWO, x13)\n    x19 = fill(x18, ONE, x14)\n    x20 = fill(x19, FOUR, x15)\n    O = fill(x20, THREE, x16)\n    return O"], [1.0, "def solve_0c79c844(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_4264e0bf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_55dbe36c(I):\n    x1 = hmirror(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_8e039474(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_5d168bec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_5ac009da(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_fa23493b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = fgpartition(I)\n    x6 = matcher(color, x4)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = rbind(colorcount, x4)\n    x15 = argmin(x13, x14)\n    x16 = rbind(colorcount, x4)\n    x17 = normalize(x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x9, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x4)\n    x23 = argmin(x12, x22)\n    x24 = ofcolor(x12, x39)\n    x25 = ofcolor(x12, x21)\n    x26 = combine(x24, x25)\n    x27 = mapply(neighbors, x26)\n    O = difference(x27, x26)\n    return O"], [1.0, "def solve_e11e283a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_020c67cb(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = mfilter(x1, x5)\n    x7 = colorfilter(x1, TWO)\n    x8 = rbind(contained, x7)\n    x9 = compose(x8, color)\n    x10 = sfilter(x3, x9)\n    x11 = increment(x10)\n    x12 = rbind(greater, x11)\n    x13 = compose(x12, size)\n    x14 = chain(x13, maximum, partition)\n    x15 = fork(add, x14, x9)\n    x16 = fork(connect, x14, x15)\n    x17 = apply(x16, x3)\n    x18 = fork(either, vline, hline)\n    x19 = mfilter(x17, x18)\n    x20 = difference(x17, x19)\n    O = fill(I, FOUR, x19)\n    return O"], [1.0, "def solve_9d4b36c7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = dmirror(I)\n    x5 = x(x4)\n    x6 = x1(x5)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = width(x6)\n    x10 = halve(x9)\n    x11 = matcher(last, x10)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x7, x12)\n    x14 = fill(x6, x3, x13)\n    x15 = objects(x14, F, T, T)\n    x16 = argmax(x15, numcolors)\n    x17 = increment(x16)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = lbind( integrator, x18)\n    x20 = lbind(shift, x16)\n    x21 = compose(x19, x20)\n    x22 = apply(x21, x3)\n    x23 = fork(combine, x21, x22)\n    x24 = mapply(x23, x4)\n    O = paint(x14, x24)\n    return O"], [1.0, "def solve_77640d5b(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_b133062b(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, trim, x8)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_08162c05(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(multiply, THREE)\n    x3 = compose(x2, tojvec)\n    x4 = lbind(shift, x1)\n    x5 = compose(x4, tojvec)\n    x6 = rbind(mapply, x3)\n    x7 = compose(x6, tojvec)\n    x8 = fork(paint, identity, x7)\n    x9 = compose(rot90, x8)\n    x10 = power(x9, FOUR)\n    x11 = power(x9, FOUR)\n    x12 = fgpartition(I)\n    x13 = merge(x12)\n    x14 = rbind(remove, x13)\n    x15 = compose(x14, last)\n    x16 = fork(equality, first, x15)\n    x17 = pair(x5, x1)\n    x18 = sfilter(x17, x16)\n    O = mapply(last, x18)\n    return O"], [1.0, "def solve_c08d52af(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(lowermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = lbind(compose, x4)\n    x7 = compose(initset, x6)\n    x8 = chain(first, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_d8a94671(I):\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shoot(ORIGIN, NEG_UNITY)\n    x5 = mapply(x4, x3)\n    x6 = lbind(shift, x6)\n    x7 = height(I)\n    x8 = rbind(multiply, x7)\n    x9 = apply(x8, x4)\n    x10 = mapply(x6, x9)\n    x11 = height(I)\n    x12 = rbind(multiply, x11)\n    x13 = apply(x12, x10)\n    x14 = width(I)\n    x15 = rbind(multiply, x14)\n    x16 = apply(x15, x13)\n    x17 = height(I)\n    x18 = rbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = combine(x12, x19)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_265734ac(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_08dd10cd(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = other(x15, x17)\n    x19 = color(x18)\n    x20 = astuple(x19, RIGHT)\n    x21 = initset(ZERO_BY_TWO)\n    x22 = insert(ORIGIN, x21)\n    x23 = recolor(x4, x22)\n    x24 = insert(x20, x23)\n    x25 = dmirror(x24)\n    x26 = lbind(shift, x24)\n    x27 = occurrences(x10, x24)\n    x28 = mapply(x26, x27)\n    x29 = lbind(shift, x25)\n    x30 = occurrences(x10, x25)\n    x31 = mapply(x29, x30)\n    x32 = combine(x28, x31)\n    x33 = fill(x10, x4, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = gravitate(x34, x17)\n    x36 = replace(x10, x19, x4)\n    x37 = shift(x34, x35)\n    x38 = fill(x36, x19, x37)\n    O = trim(x38)\n    return O"], [1.0, "def solve_0ed276db(I):\n    x1 = trim(I)\n    x2 = objects(x1, T, F, F)\n    x3 = asindices(x1)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, color)\n    x9 = mfilter(x5, x8)\n    x10 = asindices(I)\n    x11 = box(x10)\n    x12 = fill(I, ZERO, x11)\n    x13 = hmirror(x12)\n    x14 = shift(x13, UNITY)\n    x15 = inobject(x14, I)\n    x16 = matcher(first, ZERO)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = lbind(shift, x12)\n    x20 = mapply(x19, x18)\n    x21 = paint(x12, x20)\n    x22 = width(I)\n    x23 = subtract(x22, TWO)\n    x24 = tojvec(x23)\n    x25 = shift(x19, x24)\n    x26 = combine(x23, x25)\n    x27 = paint(x21, x26)\n    O = subgrid(x26, x27)\n    return O"], [1.0, "def solve_91d2226b(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = difference(x1, x6)\n    x8 = rbind(bordering, I)\n    x9 = mfilter(x7, x8)\n    O = fill(I, EIGHT, x9)\n    return O"], [1.0, "def solve_a90eb9c1(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(I, x1, x8)\n    x10 = increment(TEN)\n    x11 = width(I)\n    x12 = halve(x11)\n    x13 = tojvec(x12)\n    x14 = height(I)\n    x15 = decrement(x14)\n    x16 = lbind(astuple, x15)\n    x17 = apply(x16, x8)\n    x18 = identity(x3)\n    x19 = asindices(x18)\n    x20 = ofcolor(x18, x1)\n    x21 = difference(x19, x20)\n    x22 = rbind(toobject, x18)\n    x23 = rbind(colorcount, x1)\n    x24 = chain(x23, x22, dneighbors)\n    x25 = matcher(x24, TWO)\n    x26 = compose(x25, last)\n    x27 = fork(sfilter, first, x26)\n    x28 = chain(x22, x27, dneighbors)\n    x29 = rbind(contained, x21)\n    x30 = compose(x29, last)\n    x31 = sfilter(x16, x30)\n    x32 = compose(first, last)\n    x33 = fork(sfilter, x32, x31)\n    x34 = fork(gravitate, x33, x34)\n    x35 = compose(crement, x34)\n    x36 = fork(shift, identity, x35)\n    x37 = mapply(x36, x31)\n    O = paint(x9, x37)\n    return O"], [1.0, "def solve_47289ca4(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(size, delta)\n    x5 = argmax(x3, x4)\n    x6 = mapply(delta, x3)\n    x7 = difference(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = product(x8, x8)\n    x10 = rbind(adjacent, x5)\n    x11 = mfilter(x9, x10)\n    x12 = sfilter(x1, x11)\n    x13 = argmax(x12, size)\n    x14 = mapply(delta, x4)\n    x15 = fill(I, x1, x14)\n    x16 = fill(x15, TWO, x13)\n    O = fill(x16, ONE, x15)\n    return O"], [1.0, "def solve_a192457f(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_051e2c46(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_67c67bad(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.1, "def solve_9a8fc43c(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x1)\n    x4 = compose(x3, initset)\n    x5 = fork(extract, identity, x4)\n    x6 = compose(color, x5)\n    x7 = palette(I)\n    x8 = order(x7, x6)\n    x9 = fork(colorfilter, identity, x4)\n    x10 = rbind(matcher, ZERO)\n    x11 = compose(x10, x9)\n    x12 = extract(x8, x11)\n    x13 = other(x8, x12)\n    x14 = colorfilter(x2, x13)\n    x15 = rbind(bordering, I)\n    x16 = compose(flip, x15)\n    x17 = mfilter(x14, x16)\n    x18 = difference(x14, x17)\n    x19 = first(x18)\n    x20 = colorfilter(x2, x19)\n    x21 = rbind(adjacent, x17)\n    x22 = compose(x21, initset)\n    x23 = fork(extract, identity, x22)\n    x24 = sfilter(x19, x23)\n    x25 = size(x24)\n    x26 = positive(x25)\n    x27 = branch(x26, x24, x25)\n    x28 = multiply(UNITY, UNITY)\n    x29 = multiply(RIGHT, x28)\n    x30 = branch(x26, x29, x25)\n    x31 = multiply( UNITY, UP_RIGHT)\n    x32 = multiply( DOWN_LEFT, x31)\n    x33 = branch(x26, x32, x30)\n    x34 = multiply(UNITY, ulcorner)\n    x35 = multiply(UP_RIGHT, x34)\n    x36 = fork(multiply, x33, x35)\n    x37 = fork(shift, x22, x36)\n    x38 = mapply(x37"], [1.1, "def solve_e0f4efdb(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_e5f4c11e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = identity(I)\n    x6 = identity(x5)\n    x7 = identity(I)\n    x8 = identity(x7)\n    x9 = asindices(I)\n    x10 = box(x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = increment(x12)\n    x14 = width(I)\n    x15 = vsplit(I, x8)\n    x16 = hsplit(I, x8)\n    x17 = astuple(x15, x16)\n    x18 = argmax(x17, numcolors)\n    x19 = rot90(x18)\n    x20 = rot180(x18)\n    x21 = rot270(x18)\n    x22 = hconcat(x19, x1)\n    x23 = hconcat(x20, x2)\n    x24 = vconcat(x22, x21)\n    x25 = vconcat(x34, x2)\n    x26 = objects(x24, F, F, T)\n    x27 = sizefilter(x26, ONE)\n    x28 = difference(x26, x27)\n    x29 = toobject(x28, x25)\n    x30 = color(x29)\n    x31 = rbind(ofcolor, x30)\n    x32 = compose(lowermost, x31)\n    x33 = rbind(argmax, x32)\n    x34 = toindices(x29)\n    x35 = x33(x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x37)\n    x38 = hconcat(x34, x36)\n    x39 = height(x38)\n    x40 = divide(x39, x40)\n    x41 = width(x38)\n    x42 = halve(x41)\n    x"], [1.1, "def solve_2fbfc764(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = leastcolor(x1)\n    x4 = leastcolor(x2)\n    x5 = ofcolor(I, x3)\n    x6 = center(x5)\n    x7 = ofcolor(I, x4)\n    x8 = center(x7)\n    x9 = height(I)\n    x10 = width(I)\n    x11 = hfrontier(x6)\n    x12 = fill(I, x3, x11)\n    x13 = hfrontier(x8)\n    x14 = fill(x12, x4, x13)\n    x15 = decrement(x10)\n    x16 = decrement(x9)\n    x17 = halve(x9)\n    x18 = tojvec(x15)\n    x19 = connect(ORIGIN, x18)\n    x20 = fill(x14, x3, x19)\n    x21 = toivec(x16)\n    x22 = astuple(x16, x15)\n    x23 = connect(x21, x22)\n    x24 = fill(x20, x4, x23)\n    x25 = decrement(x17)\n    x26 = toivec(x25)\n    x27 = connect(ORIGIN, x26)\n    x28 = fill(x24, x3, x27)\n    x29 = tojvec(x15)\n    x30 = decrement(x17)\n    x31 = astuple(x30, x15)\n    x32 = connect(x29, x31)\n    x33 = fill(x28, x3, x32)\n    x34 = toivec(x17)\n    x35 = toivec(x16)\n    x36 = connect(x34, x35)\n    x37 = fill(x33, x4, x36)\n    x38 = astuple(x17, x15)\n    x39 = astuple(x16, x15)\n    x40 = connect(x38, x39)\n    O = fill(x37,"], [1.1, "def solve_d7c5e25c(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_d179eaeb(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = plugin(I, ORIGIN)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorcount, I)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = lbind(ofcolor, x9)\n    x11 = compose(dmirror, x10)\n    x12 = fork(equality, identity, x11)\n    x13 = compose(flip, x12)\n    x14 = extract(x10, x13)\n    x15 = ofcolor(x9, x14)\n    x16 = subgrid(x15, x9)\n    x17 = rightmost(x15)\n    x18 = rightmost(x15)\n    x19 = greater(x17, x18)\n    x20 = leftmost(x15)\n    x21 = leftmost(x15)\n    x22 = greater(x20, x21)\n    x23 = astuple(x19, x22)\n    x24 = maximum(x23)\n    x25 = dmirror(x24)\n    x26 = astuple(x24, x25)\n    x27 = repeat(x26, ONE)\n    x28 = merge(x27)\n    x29 = double(x width)\n    x30 = decrement(x29)\n    x31 = apply(vfrontier, x30)\n    x32 = initset(x19)\n    x33 = insert(x25, x32)\n    x34 = insert(x28, x33)\n    x35 = ofcolor(x9, x14)\n    x36 = subgrid(x35, x36)\n    x37 = ulcorner(x15)\n    x38 = lbind(shift, x37)\n    x39 = mapply(x38, x31)\n    x40 = shift(x39, UNITY)\n    O = fill(x36, x14, x40)"], [1.1, "def solve_cb3c7568(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)\n    x41"], [1.1, "def solve_74c589aa(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_ec2459c5(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_eaa5241e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = neighbors(ORIGIN)\n    x3 = lbind(extract, x2)\n    x4 = matcher(first, ZERO)\n    x5 = matcher(last, ZERO)\n    x6 = rbind(branch, hmirror)\n    x7 = rbind(x6, identity)\n    x8 = rbind(branch, vmirror)\n    x9 = rbind(x8, identity)\n    x10 = compose(x7, x4)\n    x11 = compose(x9, x5)\n    x12 = fork(compose, x10, x11)\n    x13 = lbind(matcher, first)\n    x14 = compose(x13, mostcolor)\n    x15 = fork(sfilter, identity, x14)\n    x16 = fork(difference, identity, x15)\n    x17 = lbind(rbind, multiply)\n    x18 = chain(x17, shape, x15)\n    x19 = lbind(lbind, shift)\n    x20 = chain(x19, backdrop, x15)\n    x21 = fork(compose, x20, x18)\n    x22 = lbind(lbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x23)\n    x25 = lbind(rbind, compose)\n    x26 = chain(x24, x25, x21)\n    x27 = lbind(fork, recolor)\n    x28 = lbind(x27, first)\n    x29 = lbind(fork, shift)\n    x30 = lbind(chain, x12)\n    x31 = lbind(x30, x3)\n    x32 = rbind(compose, x3)\n    x33 = compose(x32, x18)\n    x34 = fork(compose, x33, x26)\n    x35 = compose(x31, x26)\n    x36 = lbind(chain, first)\n    x37 = lbind(rbind, rapply)\n    x38 = compose("], [1.1, "def solve_80446c1b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_288ac6a9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_28ac493b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_fe1db21f(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, ZERO)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_24754d7d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_06284cad(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_f7dc3039(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_29cb906e(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_63dad47d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_145fa21e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_d1d8b417(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_2b8fbe5a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_1f869576(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = compose(increment, size)\n    x3 = order(x1, x2)\n    x4 = rbind(apply, UNITY)\n    x5 = lbind(recolor, ZERO)\n    x6 = chain(x4, x5, leftmost)\n    x7 = fork(recolor, x6, identity)\n    x8 = lbind(canvas, NEG_ONE)\n    x9 = compose(x8, leftmost)\n    x10 = chain(corners, asindices, x9)\n    x11 = fork(difference, x10, toindices)\n    x12 = compose(size, x11)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x3, x13)\n    x15 = other(x3, x14)\n    x16 = color(x15)\n    x17 = rightmost(x15)\n    x18 = rightmost(x16)\n    x19 = subtract(x17, x18)\n    x20 = leftmost(x15)\n    x21 = leftmost(x16)\n    x22 = subtract(x20, x21)\n    x23 = astuple(x19, x22)\n    x24 = maximum(x23)\n    x25 = dmirror(x24)\n    x26 = astuple(x24, x25)\n    x27 = maximum(x26)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = prapply(shift, x29, x23)\n    x31 = lbind(canvas, NEG_ONE)\n    x32 = lbind(occurrences, I)\n    x33 = compose(x31, x32)\n    x34 = fork(mapply, x33, x34)\n    x35 = lbind(shift, x15)\n    x36 = lbind(mapply, x35)\n    x37 = fork(lbind, x36, x34)\n    x38 = fork(mapply, x37, x34)\n"], [1.1, "def solve_83aee696(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_cb4cebfe(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_061f1f56(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_4bc706c5(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_b39c0860(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shoot(x26, UP_RIGHT)\n    x28 = add(x25, DOWN_LEFT)\n    x29 = shoot(x28, DOWN_LEFT)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x30, x27)\n    x32 = rbind(shoot, LEFT)\n    x33 = mapply(x32, x29)\n    x34 = width(x23)\n    x35 = invert(x34)\n    x36 = tojvec(x35)\n    x37 = shift(x31, x36)\n    x38 = combine(x31, x37)\n    x39 ="], [1.1, "def solve_f2128b49(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b9b5824d(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_07f57436(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_0cdaa581(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_0f224dd3(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_590600ec(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_ca038374(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = asobject(I)\n    x6 = matcher(first, x4)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = hperiod(x8)\n    x10 = vperiod(x8)\n    x11 = width(I)\n    x12 = width(x8)\n    x13 = subtract(x11, x12)\n    x14 = add(x13, TWO)\n    x15 = height(I)\n    x16 = height(x8)\n    x17 = subtract(x15, x16)\n    x18 = add(x17, TWO)\n    x19 = rbind(multiply, x9)\n    x20 = invert(x14)\n    x21 = interval(x20, x14, ONE)\n    x22 = apply(x19, x21)\n    x23 = rbind(multiply, x10)\n    x24 = invert(x18)\n    x25 = interval(x24, x18, ONE)\n    x26 = apply(x23, x25)\n    x27 = product(x26, x22)\n    x28 = lbind(shift, x8)\n    x29 = mapply(x28, x27)\n    x30 = index(I, ORIGIN)\n    x31 = equality(x30, x4)\n    x32 = flip(x31)\n    x33 = asindices(I)\n    x34 = urcorner(x33)\n    x35 = index(I, x34)\n    x36 = equality(x35, x4)\n    x37 = flip(x36)\n    x38 = asindices(I)\n    x39 = lrcorner(x38)\n    x40 = index(I, x39)\n    x41 = equality(x40, x4)\n    x42 = flip(x41)\n    x43 = asindices("], [1.1, "def solve_59e2d081(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = palette(I)\n    x7 = sfilter(x6, x5)\n    x8 = fork(equality, toindices, box)\n    x9 = rbind(contained, x7)\n    x10 = compose(x9, hull)\n    x11 = sfilter(x1, x10)\n    x12 = rbind(greater, SEVEN)\n    x13 = compose(x12, palette)\n    x14 = sfilter(x11, x13)\n    x15 = extract(x14, x8)\n    x16 = remove(x15, x14)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(x18, x19)\n    x21 = remove(x20, x14)\n    x22 = first(x21)\n    x23 = colorfilter(x2, x22)\n    x24 = argmax(x23, size)\n    x25 = other(x23, x24)\n    x26 = colorfilter(x2, x25)\n    x27 = apply(normalize, x26)\n    x28 = size(x27)\n    x29 = equality(x28, ONE)\n    x30 = branch(x29, x22, x23)\n    x31 = ofcolor(I, x25)\n    x32 = ofcolor(I, x22)\n    x33 = height(x31)\n    x34 = equality(x33, ONE)\n    x35 = branch(x34, x22, x23)\n    x36 = ofcolor(I, x25)\n    x37 = ofcolor(I, x22)\n    x38 = initset(x37)\n    x39 = insert(x35, x38)\n    x40 = insert(x36, x39)\n    x41 = vmirror(x"], [1.1, "def solve_ddf36dca(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_9cf4074f(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_b4acae7c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 =1888(I)\n    x4 =88888888(x3, I)\n    x5 = leastcolor(x4)\n    x6 = ofcolor(x4, x5)\n    x7 = neighbors(x6)\n    x8 = mapply(neighbors, x7)\n    x9 = fill(x4, x5, x8)\n    x10 = leastcolor(x9)\n    x11 = ofcolor(x9, x10)\n    x12 = replace(x9, x10, x11)\n    x13 = mapply(dneighbors, x11)\n    x14 = mapply(ineighbors, x11)\n    x15 = fill(x13, x10, x14)\n    x16 = fill(x15, x11, x11)\n    x17 = compress(x16)\n    x18 = objects(x17, T, F, F)\n    x19 = Fgpartition(x18)\n    x20 = merge(x19)\n    x21 =88910883339e20222638\n    x22 = argmax(x19, x21)\n    x23 = remove(x22, x19)\n    x24 = merge(x23)\n    x25 = fill(x16, x5, x24)\n    x26 = shape(x22)\n    x27 = multiply(x26, x26)\n    x28 = canvas(ZERO, x27)\n    x29 = fill(x28, x10, x24)\n    x30 =294(x29)\n    x31 = objects(x30, T, F, F)\n    x32 = rbind(add, DOWN)\n    x33 = compose(x32, uppermost)\n    x34 = fork(equality, x33, identity)\n    x35 = compose(x34, leftmost)\n    x36 =77(x34)\n    x37 = compose(x35, x36)\n    x38 =77(x34)\n    x39 = remove(x38, x32)\n    x"], [1.1, "def solve_962646d9(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(x1)\n    x5 = insert(x2, x4)\n    x6 = insert(x3, x5)\n    x7 = apply(mostcommon, x6)\n    x8 = valmax(x7, numcolors)\n    x9 = matcher(identity, x8)\n    x10 = sfilter(x7, x9)\n    x11 = size(x10)\n    x12 = increment(x11)\n    x13 = sfilter(x7, x9)\n    x14 = size(x13)\n    x15 = increment(x14)\n    x16 = sfilter(x7, x9)\n    x17 = size(x16)\n    x18 = increment(x17)\n    x19 = height(x10)\n    x20 = decrement(x19)\n    x21 = lbind(subtract, x20)\n    x22 = height(x10)\n    x23 = increment(x22)\n    x24 = lbind(subtract, x23)\n    x25 = chain(x21, size, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = compose(last, last)\n    x28 = fork(subtract, first, x27)\n    x29 = fork(astuple, x28, identity)\n    x30 = apply(x29, x10)\n    x31 = dmirror(x30)\n    x32 = merge(x31)\n    x33 = dmirror(x32)\n    x34 = last(x33)\n    x35 = remove(x34, x33)\n    x36 = astuple(x35, x36)\n    x37 = x24(x36)\n    x38 = last(x37)\n    x39 =Confine(x38)\n    x40 = invert(x39)\n    x41 = index(x3, x40)\n    x42 = asindices(x3)\n    x43 = apply(first"], [1.1, "def solve_b35831c0(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_848b5179(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_7dfad14b(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)\n    x41"], [1.1, "def solve_d97306fe(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_705e2944(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_bcc0dec2(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = lbind(extract, x2)\n    x4 = matcher(first, ZERO)\n    x5 = matcher(last, ZERO)\n    x6 = rbind(branch, hmirror)\n    x7 = rbind(x6, identity)\n    x8 = rbind(branch, vmirror)\n    x9 = rbind(x8, identity)\n    x10 = compose(x7, x4)\n    x11 = compose(x9, x5)\n    x12 = fork(compose, x10, x11)\n    x13 = lbind(matcher, first)\n    x14 = compose(x13, mostcolor)\n    x15 = fork(sfilter, identity, x14)\n    x16 = fork(difference, identity, x15)\n    x17 = lbind(rbind, multiply)\n    x18 = chain(x17, shape, x15)\n    x19 = lbind(lbind, shift)\n    x20 = chain(x19, backdrop, x15)\n    x21 = fork(compose, x20, x18)\n    x22 = lbind(lbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x23)\n    x25 = lbind(rbind, compose)\n    x26 = chain(x24, x25, x21)\n    x27 = lbind(fork, recolor)\n    x28 = lbind(x27, first)\n    x29 = lbind(fork, shift)\n    x30 = lbind(chain, x12)\n    x31 = lbind(x30, x3)\n    x32 = rbind(compose, x3)\n    x33 = compose(x32, x18)\n    x34 = fork(compose, x33, x26)\n    x35 = compose(x31, x26)\n    x36 = lbind(chain, first)\n    x37 = lbind(rbind, rapply)\n    x38 = compose("], [1.1, "def solve_c5e86aa3(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_54aecf39(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = merge(x2)\n    x4 = palette(x3)\n    x5 = other(x4, x1)\n    x6 = ofcolor(I, x1)\n    x7 = frontiers(I)\n    x8 = colorfilter(x7, x5)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = height(I)\n    x13 = toivec(x12)\n    x14 = hfrontier(x13)\n    x15 = toivec(NEG_ONE)\n    x16 = hfrontier(x15)\n    x17 = insert(x16, x8)\n    x18 = insert(x14, x17)\n    x19 = width(I)\n    x20 = tojvec(x19)\n    x21 = vfrontier(x20)\n    x22 = tojvec(NEG_ONE)\n    x23 = vfrontier(x22)\n    x24 = insert(x23, x8)\n    x25 = insert(x21, x24)\n    x26 = branch(x11, x18, x25)\n    x27 = lbind(argmin, x26)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x26)\n    x32 = compose(x31, x30)\n    x33 = fork(argmin, x32, x29)\n    x34 = fork(gravitate, initset, x30)\n    x35 = compose(crement, x34)\n    x36 = fork(add, identity, x35)\n    x37 = fork(gravitate, initset, x33)\n    x38 = compose(crement, x37)\n    x39 = fork(add, identity, x38)\n    x40 = ofcolor(I, x5"], [1.1, "def solve_844e285a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)\n    x41"], [1.1, "def solve_95731fa7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = palette(I)\n    x7 = sfilter(x6, x5)\n    x8 = rbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = rbind(colorcount, x1)\n    x11 = matcher(x10, ZERO)\n    x12 = matcher(x8, x9)\n    x13 = sfilter(x1, x11)\n    x14 = sfilter(x1, x12)\n    x15 = colorfilter(x1, x9)\n    x16 = difference(x1, x15)\n    x17 =88bind(subgrid, I)\n    x18 = trim(x16)\n    x19 = trim(x17)\n    x20 = identity(x18)\n    x21 = identity(x19)\n    x22 = identity(x20)\n    x23 = identity(x21)\n    x24 = identity(x22)\n    x25 = lbind(fork, connect)\n    x26 = lbind(x25, x14)\n    x27 = compose(x26, ulcorner)\n    x28 = argmin(x23, x27)\n    x29 = identity(x28)\n    x30 = identity(x92)\n    x31 =Ididentity(x30)\n    x32 = identity(x31)\n    x33 = identity(x22)\n    x34 = identity(x32)\n    x35 = dmirror(x27)\n    x36 = cmirror(x35)\n    x37 = dmirror(x34)\n    x38 = combine(x36, x37)\n    x39 =74ddmirror(x28)\n    x40 = identity(x39)\n    x41 = dmirror(x40)\n    x42 = ofcolor(x41, x29)\n    x43 = fill("], [1.1, "def solve_c4312dd6(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = rbind(0066, x3)\n    x5 = rbind(subgrid, I)\n    x6 = chain(x4, x5, backdrop)\n    x7 = apply(x6, x2)\n    x8 = contained(x7, x2)\n    x9 = ofcolor(I, x1)\n    x10 = shift(x9, UNITY)\n    x11 = rbind(shoot, UP)\n    x12 = mapply(x11, x10)\n    x13 = fill(I, x1, x12)\n    x14 = mapply(vfrontier, x10)\n    x15 = fill(x13, x1, x14)\n    O = fill(x15, x1, x12)\n    return O"], [1.1, "def solve_94b11c13(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =22(x2)\n    x4 = apply(size, x3)\n    x5 = palette(I)\n    x6 = contained(ONE, x5)\n    x7 = branch(x6, x3, x4)\n    x8 = canvas(x7, UNITY)\n    x9 = lbind(contained, x7)\n    x10 = compose(x9, vline)\n    x11 = lbind(contained, x7)\n    x12 = compose(x11, dmirror)\n    x13 = fork(both, x10, x12)\n    x14 = extract(x15, x13)\n    x15 = lbind(14, x7)\n    x16 = compose(x15, height)\n    x17 = extract(x15, x16)\n    x18 = last(x17)\n    x19 = compose(last, vmirror)\n    x20 = ofcolor(I, x7)\n    x21 = asindices(I)\n    x22 = ofcolor(I, x12)\n    x23 = difference(x21, x22)\n    x24 = fill(x8, ZERO, x23)\n    x25 = compose(even, last)\n    x26 = sfilter(x22, x25)\n    x27 = fill(x24, x7, x26)\n    x28 = merge(x22)\n    x29 = fill(x27, ZERO, x28)\n    O = fill(x29, x17, x29)\n    return O"], [1.1, "def solve_3c139cc7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = colorfilter(x1, ZERO)\n    x7 = matcher(x4, ONE)\n    x8 = sfilter(x6, x5)\n    x9 = merge(x8)\n    x10 = palette(x9)\n    x11 = matcher(x4, ONE)\n    x12 = sfilter(x10, x11)\n    x13 = argmax(x12, size)\n    x14 = remove(x13, x10)\n    x15 = Classic(x14)\n    x16 = lbind(colorcount, I)\n    x17 = argmin(x15, x16)\n    x18 =:\n    x17, recolor)\n    x19 = normalize(x18)\n    x20 = occurrences(I, x19)\n    x21 = first(x20)\n    x22 = last(x21)\n    x23 = recolor(x21, x22)\n    x24 = normalize(x23)\n    x25 = occurrences(I, x24)\n    x26 = normalize(x25)\n    x27 = occurrences(I, x26)\n    x28 = first(x27)\n    x29 = normalize(x28)\n    x30 = ofcolor(I, x17)\n    x31 = ofcolor(I, x18)\n    x32 = combine(x30, x31)\n    x33 = apply(first, x32)\n    x34 = asindices(I)\n    x35 = apply(first, x34)\n    x36 = difference(x35, x33)\n    x37 = ofcolor(I, x17)\n    x38 = lbind(shift, x37)\n    x39 = mapply(x38, x36)\n    O = paint(I, x39)\n    return O"], [1.1, "def solve_cc3f3fe2(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =11111111(I)\n    x2 = index(I, ORIGIN)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = astuple(x4, ONE)\n    x6 = branch(x5, ORIGIN, x5)\n    x7 = canvas(x2, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = interval(ZERO, x5, ONE)\n    x13 = lbind(multiply, x5)\n    x14 = apply(x13, x12)\n    x15 = lbind(shift, x10)\n    x16 = mapply(x15, x14)\n    O = fill(I, FOUR, x16)\n    return O"], [1.1, "def solve_b683469f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 =111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    \"\"\"\n    x2 = replace(I, x1, x2)\n    x3 = leastcolor(x2)\n    x4 = mostcolor(x2)\n    x5 =111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    11111111111111111111111\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = leastcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x3, x2)\n    x5 = mapply(dneighbors, x4)\n    x6 = mapply(ineighbors, x4)\n    x7 = fill(x4, x1, x5)\n    O = fill(x7, x1, x6)\n    return O"], [1.1, "def solve_196fb26a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = lbind(tophalf, I)\n    x2 = lbind(26halfhalf, I)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = compose(flip, x4)\n    x6 = lbind(apply, last)\n    x7 = compose(x6, first)\n    x8 = chain(positive, decrement, x7)\n    x9 = fork(both, x4, x8)\n    x10 = sfilter(x2, x9)\n    x11 = compose(x1, first)\n    x12 = lbind(interval, ZERO)\n    x13 = fork(x12, x11, x12)\n    x14 = compose(x12, first)\n    x15 = compose(x13, x14)\n    x16 = fork(product, x15, x13)\n    x17 = compose(x6, first)\n    x18 = fork(product, x16, x17)\n    x19 = fork(combine, x18, x13)\n    x20 = fork(combine, x16, x12)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x10)\n    O = fill(I, SIX, x22)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_70133835(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.08173484697705038, "def solve_719039eb(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_8378969c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_3bb5a2fb(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.08173484697705038, "def solve_1989989d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = product(x3, x3)\n    x5 = fork(vmatching, first, last)\n    x6 = sfilter(x4, x5)\n    x7 = compose(color, first)\n    x8 = fork(recolor, x7, last)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [0.08173484697705038, "def solve_e9ca6156(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_d1510dd1(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_563cfe00(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_1cf71d1d(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = replace(x4, ZERO, TWO)\n    x6 = asobject(x5)\n    x7 = shift(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.08173484697705038, "def solve_e73448c5(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.08173484697705038, "def solve_5110f910(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.08173484697705038, "def solve_2ddadaea(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_eeb94cb1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_3685e4fb(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_d217020e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_3ab9a43f(I):\n    x1 = objects(I, T, T, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_62d834cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_f910a0f3(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.08173484697705038, "def solve_f4c6989f(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_2412a5ec(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_13941f57(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.08173484697705038, "def solve_9e6e9f24(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(first, totuple, palette)\n    x6 = chain(last, totuple, palette)\n    x7 = lbind(matcher, first)\n    x8 = compose(x7, x5)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, x6)\n    x11 = fork(sfilter, identity, x8)\n    x12 = fork(sfilter, identity, x10)\n    x13 = lbind(occurrences, I)\n    x14 = chain(invert, ulcorner, x11)\n    x15 = chain(invert, ulcorner, x12)\n    x16 = lbind(lbind, shift)\n    x17 = fork(shift, identity, x14)\n    x18 = fork(shift, identity, x15)\n    x19 = compose(x16, x17)\n    x20 = compose(x13, x11)\n    x21 = fork(mapply, x19, x20)\n    x22 = compose(x16, x18)\n    x23 = compose(x13, x12)\n    x24 = fork(mapply, x22, x23)\n    x25 = fork(combine, x21, x24)\n    x26 = mapply(x25, x4)\n    O = paint(I, x26)\n    return O"], [0.08173484697705038, "def solve_ad8af9fb(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, SEVEN, x6)\n    return O"], [0.08173484697705038, "def solve_889528aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.08173484697705038, "def solve_dc0e106d(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x2, x8)\n    O = fill(x3, x4, x9)\n    return O"], [0.08173484697705038, "def solve_db81a54e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_8edad65e(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, hline)\n    x3 = sfilter(x1, vline)\n    x4 = compose(hfrontier, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = compose(vfrontier, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    x10 = combine(x6, x9)\n    x11 = paint(I, x10)\n    x12 = toindices(x6)\n    x13 = toindices(x9)\n    x14 = intersection(x12, x13)\n    O = fill(x11, FOUR, x14)\n    return O"], [0.08173484697705038, "def solve_4841df33(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(toindices, normalize)\n    x4 = fork(difference, x3, toindices)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, ZERO)\n    x7 = sfilter(x2, x6)\n    x8 = difference(x2, x7)\n    x9 = merge(x8)\n    x10 = cover(I, x9)\n    x11 = apply(ulcorner, x7)\n    x12 = lbind(shift, x9)\n    x13 = mapply(x12, x11)\n    O = fill(x10, TWO, x13)\n    return O"], [0.08173484697705038, "def solve_bdceb06d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_79ca6265(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_195afd3c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_391250cc(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(objects, F)\n    x4 = rbind(x3, F)\n    x5 = rbind(x4, T)\n    x6 = lbind(canvas, x1)\n    x7 = compose(x6, shape)\n    x8 = fork(paint, x7, normalize)\n    x9 = compose(x5, x8)\n    x10 = fork(colorfilter, x9, color)\n    x11 = rbind(shift, RIGHT)\n    x12 = rbind(argmax, rightmost)\n    x13 = compose(x12, x10)\n    x14 = fork(remove, x13, x10)\n    x15 = chain(x11, merge, x14)\n    x16 = rbind(argmax, rightmost)\n    x17 = compose(x16, x10)\n    x18 = fork(combine, x17, x15)\n    x19 = fork(shift, x18, ulcorner)\n    x20 = merge(x2)\n    x21 = fill(I, x1, x20)\n    x22 = mapply(x19, x2)\n    O = paint(x21, x22)\n    return O"], [0.08173484697705038, "def solve_25ba1d76(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_696de44a(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_d625fdf3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08206691200645198, "def solve_2f677aaf(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_1f262df4(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08468134728045976, "def solve_88c1c018(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.08468134728045976, "def solve_4041ca26(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.08468134728045976, "def solve_0a583890(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.09909437803847193, "def solve_ef846cae(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.09909437803847193, "def solve_6eb67b2d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.1031390067270748, "def solve_9c9f2a7e(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = vmirror(x2)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = toivec(x4)\n    x7 = tojvec(x5)\n    x8 = add(x7, ZERO_BY_TWO)\n    x9 = add(x6, TWO_BY_ZERO)\n    x10 = shift(x3, x8)\n    x11 = fill(I, TWO, x10)\n    x12 = ofcolor(x11, TWO)\n    x13 = hmirror(x12)\n    x14 = shift(x13, x9)\n    x15 = fill(x11, TWO, x14)\n    x16 = size(x1)\n    x17 = greater(x16, FOUR)\n    O = branch(x17, I, x15)\n    return O"], [0.11634314213316777, "def solve_59c0f9af(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_c2a468e5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_48499475(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_5c5915dc(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_5f45092e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_9d0a5a24(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.12098612632347573, "def solve_65e1c3e0(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.1212328255730617, "def solve_60448451(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.1212328255730617, "def solve_5c8bea75(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.12504636708534062, "def solve_549ebab3(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.12993277496796057, "def solve_5748c90a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_af804aaf(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_7f8a3848(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_52214986(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_f5fe010d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_58778f09(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_9805050f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.13468134728045977, "def solve_86db2e51(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.13468134728045977, "def solve_48b26aec(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_7e5d017b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_92d08d8b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_71160c05(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_aa7250ec(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_bdfd5650(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = leastcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = mostcolor(I)\n    x7 = other(x5, x6)\n    x8 = inbox(x2)\n    O = fill(I, x7, x8)\n    return O"], [0.13468134728045977, "def solve_d5a69a5b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sfilter(x1, square)\n    x3 = difference(x1, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = replace(I, TWO, ZERO)\n    O = fill(x6, THREE, x5)\n    return O"], [0.13468134728045977, "def solve_891b0820(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_b4006b14(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13757267766397355, "def solve_e425b3fe(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.13757267766397355, "def solve_507d4fa2(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.14012102340220775, "def solve_33ef20b1(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_53164f15(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_4e1e994c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I,7777, x5)\n    return O"], [0.14012102340220775, "def solve_e48b6b8d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14098233381512817, "def solve_a930edb1(I):\n    x1 = objects(I, T, T, T)\n    x2 = leastcolor(I)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x2)\n    x5 = replace(I, x2, x3)\n    x6 = mapply(dneighbors, x4)\n    x7 = mapply(ineighbors, x4)\n    x8 = fill(x5, ONE, x6)\n    O = fill(x8, x2, x7)\n    return O"], [0.14098233381512817, "def solve_b58403e5(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.14098233381512817, "def solve_b64dee3d(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.14633502634498852, "def solve_04883db4(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.147039853263387, "def solve_bb30467e(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.147039853263387, "def solve_227b21d6(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_de8c625c(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_8cccb664(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_da4472f3(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.15201967101125663, "def solve_38d4ce76(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15261934013352818, "def solve_fafc868b(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = compose(hfrontier, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = compose(vfrontier, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    x10 = combine(x6, x9)\n    x11 = paint(I, x10)\n    x12 = toindices(x6)\n    x13 = toindices(x9)\n    x14 = intersection(x12, x13)\n    O = fill(x11, FOUR, x14)\n    return O"], [0.1666949415715136, "def solve_2f008aa9(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.1666949415715136, "def solve_fc0c80b4(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.167039853263387, "def solve_850aab77(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.167039853263387, "def solve_19800b4c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(center, x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = fill(x6, TWO, x3)\n    O = replace(x7, EIGHT, ONE)\n    return O"], [0.168463732206312, "def solve_dbf52ef6(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.1697728934434557, "def solve_d42d1f46(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.1697728934434557, "def solve_5768ead3(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.1705557794573261, "def solve_71046550(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_6085e942(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_22f56819(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1816725678756399, "def solve_2eb5df59(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.1816725678756399, "def solve_1eb8397c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.19326297813860446, "def solve_b10c4ac9(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.19648169652350164, "def solve_aecb7211(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = shift(x2, UP)\n    x7 = paint(x5, x6)\n    x8 = shift(x2, RIGHT)\n    x9 = paint(x7, x8)\n    x10 = shift(x2, LEFT)\n    O = paint(x9, x10)\n    return O"], [0.20252763457609518, "def solve_ff33bfa6(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20977289344345568, "def solve_617329c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_6f86447c(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_ee56b133(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.20977289344345568, "def solve_51f498d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.20977289344345568, "def solve_6e13ccfa(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_592d6abf(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2133114088199879, "def solve_cab543f8(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2133114088199879, "def solve_68cabf95(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2133114088199879, "def solve_6a72710b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.21882948035120994, "def solve_5d287bf3(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(extract, identity, x3)\n    x7 = compose(last, x6)\n    x8 = compose(dneighbors, x7)\n    x9 = lbind(apply, last)\n    x10 = fork(sfilter, identity, x5)\n    x11 = compose(x9, x10)\n    x12 = fork(difference, x8, x11)\n    x13 = compose(first, x12)\n    x14 = fork(subtract, x7, x13)\n    x15 = fork(shoot, x7, x14)\n    x16 = fork(recolor, leastcolor, x15)\n    x17 = mapply(x16, x1)\n    O = underpaint(I, x17)\n    return O"], [0.22208695827893984, "def solve_a310a8bb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.23823994288959274, "def solve_65a72a16(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_142e48e8(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_50b15c4e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_54b887c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_04b2d1de(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_e4478bcb(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_55f3aa37(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_ba212853(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_84f0ae8d(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_e5c63a45(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_e31d4dea(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23915094341200335, "def solve_5f5ddb9a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, TWO, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.253858380731812, "def solve_540be6cf(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.25543417203130403, "def solve_1856e2a8(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.25543417203130403, "def solve_2eec8b02(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.25543417203130403, "def solve_0bd12da2(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.26915094341200335, "def solve_2aa0e48b(I):\n    x1 = objects(I, F, T, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ONE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, ZERO, x4)\n    return O"], [0.26915094341200335, "def solve_79d7b71a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ONE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_1085ae6c(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_f2a0c958(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ONE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_a8615142(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ONE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_f0aa4eb1(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ONE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_aa7e0153(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.28046050168233005, "def solve_a0356631(I):\n    x1 = objects(I, T, T, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28046050168233005, "def solve_8777f293(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28046050168233005, "def solve_5878d40e(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.29024380546596323, "def solve_978f4ab7(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.2928824046422477, "def solve_5dd3f399(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.31414873887079675, "def solve_7ea1968b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.31414873887079675, "def solve_7d9895c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.31414873887079675, "def solve_7e1ca4f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.3624446703322224, "def solve_343d913d(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.3624446703322224, "def solve_50e019a5(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.3997728934434557, "def solve_6518df90(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.4121180954681841, "def solve_b9fd0789(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.41434496433667933, "def solve_a189d563(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = recolor(ZERO, x2)\n    x4 = normalize(x3)\n    x5 = occurrences(I, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, x1, x8)\n    return O"], [0.4874662202660552, "def solve_30490a04(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = vsplit(I, TWO)\n    x4 = rbind(hsplit, TWO)\n    x5 = mapply(x4, x3)\n    O = argmax(x5, numcolors)\n    return O"], [0.5430215763602573, "def solve_13b1e8e6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_34d12d71(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5635796963558032, "def solve_32a8cf1c(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5925867488163814, "def solve_a71d9d7b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = replace(x3, x4, ZERO)\n    x6 = leastcolor(x5)\n    x7 = replace(x5, x6, x4)\n    x8 = ofcolor(x7, x4)\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = mapply(x9, x8)\n    O = fill(x7, x6, x10)\n    return O"], [0.7825046979697893, "def solve_4a392e0b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.9182807290875006, "def solve_78bcfd0a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.9182807290875006, "def solve_13b56175(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.9182807290875006, "def solve_2f708453(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.9182807290875006, "def solve_a6c9545a(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.9183491285403049, "def solve_f1ef0f70(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_1385b268(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_87728d5e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_7fcf7b86(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.9183491285403049, "def solve_356db642(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_85c9e2e6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_11f9f80d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_aed89f2b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_435254df(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9683491285403051, "def solve_94cc82bc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = first(x1)\n    x4 = normalize(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [1.0, "def solve_1f0b0471(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ONE)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_7c7a2c27(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_be2bca5e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = objects(x7, T, F, T)\n    x9 = order(x8, uppermost)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = remove(x11, x9)\n    x13 = remove(x10, x12)\n    x14 = first(x13)\n    x15 = color(x11)\n    x16 = subgrid(x11, x7)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = tophalf(x18)\n    x20 = righthalf(x17)\n    x21 = bottomhalf(x18)\n    x22 = vmirror(x21)\n    x23 = hmirror(x22)\n    x24 = merge(x11)\n    x25 = merge(x24)\n    x26 = cover(x16, x25)\n    x27 = fill(x26, THREE, x22)\n    O = paint(x27, x26)\n    return O"], [1.0, "def solve_4de0641b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_16355067(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_901cad4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, EIGHT)\n    x3 = ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = replace(x4, ZERO, TWO)\n    x6 = hmirror(x5)\n    x7 = vmirror(x6)\n    x8 = asobject(x7)\n    x9 = occurrences(x8, x4)\n    x10 = objects(x8, T, F, T)\n    x11 = compose(toindices, normalize)\n    x12 = matcher(x11, x3)\n    x13 = mfilter(x10, x12)\n    x14 = fill(x8, EIGHT, x13)\n    x15 = replace(x14, ONE, THREE)\n    O = paint(x15, x13)\n    return O"], [1.0, "def solve_a773022c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = objects(I, T, F, T)\n    x5 = valmax(x4, size)\n    x6 = colorfilter(x4, x3)\n    x7 = sizefilter(x6, ONE)\n    x8 = merge(x7)\n    x9 = sizefilter(x6, ONE)\n    x10 = merge(x9)\n    x11 = height(x8)\n    x12 = width(x8)\n    x13 = matcher(hfrontier, x11)\n    x14 = toivec(x13)\n    x15 = rbind(shoot, x14)\n    x16 = mapply(x15, x12)\n    x17 = fill(I, x3, x16)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = mapply(x18, x9)\n    O = fill(x17, x3, x19)\n    return O"], [1.0, "def solve_03171e2c(I):\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = lbind(mapply, dneighbors)\n    x9 = matcher(first, x4)\n    x10 = chain(x8, x9, initset)\n    x11 = fork(difference, x7, x10)\n    x12 = mapply(x11, x9)\n    O = fill(x7, ZERO, x12)\n    return O"], [1.0, "def solve_3bf9ccbd(I):\n    x1 = objects(I, T, F, T)\n    x2 = prapply(connect, x1, x1)\n    x3 = fork(either, vline, hline)\n    x4 = mfilter(x2, x3)\n    x5 = underfill(I, NEG_ONE, x4)\n    x6 = objects(x5, F, F, T)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    x9 = fill(x5, TWO, x8)\n    O = replace(x9, NEG_ONE, ZERO)\n    return O"], [1.0, "def solve_e6815b7f(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_e3933283(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_ca0c572b(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = asindices(x6)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = intersection(x8, x7)\n    x10 = lrcorner(x7)\n    x11 = shoot(x10, DOWN_LEFT)\n    x12 = intersection(x11, x7)\n    x13 = combine(x9, x12)\n    x14 = fork(combine, vfrontier, hfrontier)\n    x15 = compose(x14, center)\n    x16 = mapply(x15, x13)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_477b167c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_b4fd6373(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [1.0, "def solve_c7195758(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, size)\n    x12 = sfilter(x1, x11)\n    x13 = argmax(x12, x12)\n    x14 = remove(x13, x12)\n    x15 = height(x12)\n    x16 = increment(x15)\n    x17 = frontiers(I)\n    x18 = colorfilter(x17, x4)\n    x19 = sfilter(x18, hline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x16, x21)\n    x23 = increment(x22)\n    x24 = colorfilter(x17, x4)\n    x25 = repeat(x24, x2)\n    x26 = lbind(shift, x25)\n    x27 = compose(x26, toivec)\n    x28 = apply(x27, x23)\n    x29 = mapply(x28, x24)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_64b897ef(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = subgrid(x3, I)\n    return O"], [1.0, "def solve_197911df(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = apply(toindices, x2)\n    x4 = lbind(index, I)\n    x5 = compose(x4, size)\n    x6 = matcher(x5, ZERO)\n    x7 = compose(palette, asindices)\n    x8 = fork(recolor, x7, x6)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_cdf7a4fa(I):\n    x1 = shape(I)\n    x2 = multiply(x1, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = lbind(multiply, x1)\n    x7 = apply(x6, x5)\n    x8 = asobject(I)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x7)\n    O = paint(x3, x10)\n    return O"], [1.0, "def solve_f65b092f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, F)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [1.0, "def solve_e737105e(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_ef3a2b9b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(first, TWO)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = first(x6)\n    x8 = replace(x7, NEG_ONE, ZERO)\n    x9 = box(x7)\n    x10 = rbind(difference, x9)\n    x11 = mapply(x10, x9)\n    O = fill(x6, TWO, x11)\n    return O"], [1.0, "def solve_874cc373(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(x3)\n    x5 = objects(x3, T, F, T)\n    x6 = first(x5)\n    x7 = neighbors(x6)\n    x8 = toobject(x7, x3)\n    x9 = mostcolor(x8)\n    x10 = ofcolor(x4, x9)\n    x11 = combine(x7, x10)\n    x12 = fill(x3, ONE, x11)\n    x13 = hmirror(x12)\n    x14 = ofcolor(x13, x9)\n    x15 = combine(x7, x14)\n    x16 = apply(first, x15)\n    x17 = mapply(neighbors, x16)\n    x18 = size(x17)\n    x19 = double(x18)\n    x20 = interval(ZERO, x19, ONE)\n    x21 = apply(tojvec, x20)\n    x22 = astuple(ONE, NINE)\n    x23 = canvas(ZERO, x22)\n    x24 = fill(x23, ONE, x21)\n    x25 = hsplit(x24, THREE)\n    x26 = merge(x25)\n    x27 = fill(x24, THREE, x26)\n    x28 = astuple(x25, x27)\n    x29 = shift(x28, UP_RIGHT)\n    x30 = shift(x29, LEFT)\n    x31 = paint(x27, x30)\n    x32 = tojvec(x30)\n    x33 = index(x31, x32)\n    x34 = equality(x33, LEFT)\n    x35 = flip(x34)\n    x36 = branch(x35, x31, x32)\n    x37 = fill(x31, x9, x36)\n    O = x22(x37)\n    return O"], [1.0, "def solve_921f3ad7(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = lbind(sfilter, x1)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x1, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    x13 = subgrid(x12, I)\n    x14 = identity(x13)\n    x15 = subgrid(x12, I)\n    x16 = identity(x15)\n    x17 = width(x16)\n    x18 = increment(x17)\n    x19 = chain(toivec, tojvec, x18)\n    x20 = lbind(shift, x12)\n    x21 = occurrences(x16, x2)\n    x22 = mapply(x20, x21)\n    x23 = combine(x3, x22)\n    x24 = fill(x16, x13, x23)\n    x25 = objects(x24, T, F, T)\n    x26 = apply(toindices, x25)\n    x27 = rbind( mapply, x26)\n    x28 = lbind(shift, x12)\n    x29 = occurrences(x16, x28)\n    x30 = combine(x29, x28)\n    x31 = fill(x24, x3, x30)\n    x32 = objects(x31, T, F, T)\n    x33 = rbind(mapply, x32)\n    x34 = compose(x33, x27)\n    x35 = fork(recolor, x34, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x31, x36)\n    return O"], [1.0, "def solve_6a3d7e9b(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_3e7775cf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = matcher(x2, ONE)\n    x4 = extract(x1, x3)\n    x5 = argmin(x1, x2)\n    x6 = remove(x5, x1)\n    x7 = merge(x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, vmirror, hmirror)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = colorfilter(x12, ZERO)\n    x14 = rbind(bordering, I)\n    x15 = compose(flip, x14)\n    x16 = mfilter(x13, x15)\n    x17 = replace(x11, SIX, x16)\n    x18 = combine(x17, x16)\n    x19 = paint(x17, x18)\n    O = x10(x19)\n    return O"], [1.0, "def solve_448c2ee2(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_dd1c8b23(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = fill(I, TWO, x3)\n    x5 = urcorner(x2)\n    x6 = ulcorner(x2)\n    x7 = shoot(x5, NEG_UNITY)\n    x8 = shoot(x6, UNITY)\n    x9 = fill(x4, TWO, x8)\n    x10 = underfill(x9, x1, x7)\n    O = fill(x10, x1, x6)\n    return O"], [1.0, "def solve_d3525314(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_64636da8(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_8596927e(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = matcher(width, ONE)\n    x5 = sfilter(x3, x4)\n    x6 = matcher(vplit, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = merge(x7)\n    x9 = matcher(hmirror, x8)\n    x10 = sfilter(x7, x9)\n    x11 = index(I, ORIGIN)\n    x12 = objects(x8, T, F, T)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(I, x14)\n    x16 = fork(recolor, color, backdrop)\n    x17 = mapply(x16, x15)\n    O = paint(x15, x17)\n    return O"], [1.0, "def solve_a64dc336(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = argmax(x3, leastcolor)\n    x6 = argmin(x3, x2)\n    x7 = ulcorner(x5)\n    x8 = llcorner(x6)\n    x9 = subgrid(x5, x4)\n    x10 = x7(x9)\n    x11 = height(x9)\n    x12 = width(x9)\n    x13 = ofcolor(x10, x1)\n    x14 = divide(x11, x12)\n    x15 = astuple(x14, x13)\n    x16 = ulcorner(x5)\n    x17 = crop(x10, x16, x15)\n    x18 = repeat(x17, ONE)\n    x19 = merge(x18)\n    x20 = ofcolor(x19, x1)\n    x21 = fill(x4, x1, x20)\n    x22 = astuple(x21, x13)\n    x23 = astuple(x17, x12)\n    x24 = shift(x23, x22)\n    O = fill(x21, x1, x24)\n    return O"], [1.0, "def solve_bbdbc72e(I):\n    x1 = width(I)\n    x2 = palette(I)\n    x3 = halve(x1)\n    x4 = vupscale(I, x3)\n    x5 = rbind(shoot, UNITY)\n    x6 = other(x2, ZERO)\n    x7 = ofcolor(x4, x6)\n    x8 = mapply(x5, x7)\n    O = fill(x4, x6, x8)\n    return O"], [1.0, "def solve_c005bede(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FIVE, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x1, x4)\n    x6 = difference(x1, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmax(x6, x7)\n    x9 = mostcolor(x8)\n    x10 = fill(x3, x9, x8)\n    x11 = normalize(x8)\n    x12 = lbind(shift, x11)\n    x13 = mapply(x12, x10)\n    O = paint(x10, x13)\n    return O"], [1.0, "def solve_d6c55298(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = sizefilter(x2, ONE)\n    x6 = apply(initset, x4)\n    x7 = lbind(argmin, x6)\n    x8 = lbind(rbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x5)\n    x12 = merge(x5)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O"], [1.0, "def solve_535b5f0e(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_79d41692(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = lbind(shift, x4)\n    x6 = compose(x5, center)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x3)\n    x9 = paint(I, x8)\n    x10 = objects(x9, F, F, T)\n    x11 = argmax(x10, size)\n    x12 = remove(x11, x10)\n    x13 = merge(x12)\n    x14 = cover(x9, x13)\n    x15 = paint(x14, x11)\n    O = uppermost(x11)\n    return O"], [1.0, "def solve_74efd132(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FIVE, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x1, x4)\n    x6 = difference(x1, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmax(x6, x7)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = center(x10)\n    x12 = outbox(x11)\n    x13 = lbind(argmin, x12)\n    x14 = lbind(gravitate, x8)\n    x15 = compose(x13, x14)\n    x16 = fork(recolor, color, x15)\n    x17 = mapply(x16, x12)\n    O = paint(x3, x17)\n    return O"], [1.0, "def solve_d754af13(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_7feaee99(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4cde178a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = matcher(color, ZERO)\n    x9 = rbind(sfilter, x8)\n    x10 = chain(size, x9, toindices)\n    x11 = argmin(x5, x10)\n    x12 = objects(x5, T, F, T)\n    x13 = colorfilter(x12, ZERO)\n    x14 = rbind(sfilter, x13)\n    x15 = compose(normalize, x14)\n    x16 = chain(x15, toindices, x9)\n    x17 = normalize(x2)\n    x18 = lbind(shift, x17)\n    x19 = compose(x18, x16)\n    x20 = fork(recolor, x15, x19)\n    x21 = mapply(x20, x29)\n    O = paint(x5, x21)\n    return O"], [1.0, "def solve_fcf8fd40(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_5a0844d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = center(x1)\n    x3 = color(x2)\n    x4 = astuple(UNITY, NEG_UNITY)\n    x5 = astuple(UP_RIGHT, DOWN_LEFT)\n    x6 = combine(x4, x5)\n    x7 = lbind(shoot, x2)\n    x8 = mapply(x7, x6)\n    O = fill(I, x3, x8)\n    return O"], [1.0, "def solve_c75e2086(I):\n    x1 = upscale(I, TWO)\n    x2 = objects(x1, T, T, T)\n    x3 = argmin(x2, size)\n    x4 = argmax(x2, size)\n    x5 = ulcorner(x3)\n    x6 = urcorner(x3)\n    x7 = index(x1, x5)\n    x8 = equality(x7, EIGHT)\n    x9 = branch(x8, x5, x6)\n    x10 = branch(x8, UNITY, DOWN_LEFT)\n    x11 = multiply(x10, x5)\n    x12 = double(x11)\n    x13 = add(x9, x12)\n    x14 = subtract(x9, x12)\n    x15 = connect(x13, x14)\n    x16 = fill(x1, TWO, x15)\n    x17 = paint(x16, x3)\n    x18 = branch(x8, UNITY, vmirror)\n    x19 = x18(x17)\n    x20 = shape(x19)\n    x21 = decrement(x20)\n    x22 = index(x19, x21)\n    x23 = canvas(22, x4)\n    x24 = asindices(x23)\n    x25 = shape(x19)\n    x26 = increment(x25)\n    x27 = index(x25, x26)\n    x28 = canvas(ZERO, x14)\n    x29 = asobject(x28)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x28, x30)\n    x32 = objects(x31, T, F, T)\n    x33 = rbind(shift, x27)\n    x34 = mapply(x33, x32)\n    O = paint(x31, x34)\n    return O"], [1.0, "def solve_9190f435(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = lbind(position, x4)\n    x6 = compose(first, x5)\n    x7 = fork(equality, toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(add, x7, x9)\n    x11 = fork(equality, toindices, x10)\n    x12 = compose(x11, x7)\n    x13 = fork(equality, toindices, x12)\n    x14 = fork( both, x7, x13)\n    x15 = fork(both, x13, x14)\n    x16 = fork(both, x7, x15)\n    x17 = mapply(x16, x2)\n    x18 = fill(I, ONE, x17)\n    x19 = replace(x18, ONE, THREE)\n    O = x9(x19)\n    return O"], [1.0, "def solve_117feb8f(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_10e039b1(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = order(x5, leftmost)\n    x7 = apply(color, x6)\n    x8 = last(x6)\n    x9 = remove(x8, x6)\n    x10 = last(x7)\n    x11 = ulcorner(x8)\n    x12 = ulcorner(x10)\n    x13 = subgrid(x11, I)\n    x14 = subgrid(x12, I)\n    x15 = ofcolor(x13, x1)\n    x16 = ofcolor(x14, x10)\n    x17 = intersection(x15, x16)\n    x18 = last(x17)\n    x19 = canvas(x18, x11)\n    O = fill(x19, THREE, x13)\n    return O"], [1.0, "def solve_71a6b48e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, ulcorner, x7)\n    x19 = chain(x14, x13, x7)\n    x20 = fork(apply, x18, x19)\n    x21 = compose(x16, x20)\n    x22 = fork(mapply, x17, x21)\n    x23 = rapply(x10, x3)\n    x24 = mapply(x22, x23)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_8dd8575b(I):\n    x1 = partition(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [1.0, "def solve_71129632(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [1.0, "def solve_3678e9e2(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = fork(subtract, halve, width)\n    x7 = compose(increment, x6)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, x7)\n    x10 = rbind(sfilter, x9)\n    x11 = lbind(matcher, size)\n    x12 = chain(x11, x10, palette)\n    x13 = lbind(sfilter, x5)\n    x14 = compose(d5111000, x12)\n    x15 = lbind(compose, x14)\n    x16 = lbind(rbind, contained)\n    x17 = compose(x15, x16)\n    x18 = lbind(remove, x4)\n    x19 = chain(x18, positive, size)\n    x20 = chain(x19, x17, xp)\n    x21 = chain(x19, x16, x12)\n    x22 = compose(x4, x21)\n    x23 = fork(add, x22, x20)\n    x24 = chain(x21, x13, x23)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(rapply, x24, x26)\n    x28 = compose(x27, x1)\n    x29 = fork(apply, x28, x23)\n    x30 = fork(mapply, x28, x22)\n    x31 = fork(mapply, x29, x23)\n    x32 = mapply(x30, x5)\n    x33 = mapply(x31, x9)\n    x34 = fill(I, x1, x32)\n    O = fill(x34, x1, x33)\n    return O"], [1.0, "def solve_d9635e16(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = ofcolor(I, x2)\n    x4 = asobject(I)\n    x5 = vperiod(x4)\n    x6 = height(I)\n    x7 = halve(x6)\n    x8 = add(x6, x7)\n    x9 = width(I)\n    x10 = astuple(x8, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = increment(x8)\n    x13 = interval(ZERO, x12, x5)\n    x14 = lbind(shift, x3)\n    x15 = apply(toivec, x13)\n    x16 = mapply(x14, x15)\n    O = fill(x11, TWO, x16)\n    return O"], [1.0, "def solve_79bdfd91(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = ofcolor(I, FIVE)\n    x4 = first(x3)\n    x5 = dneighbors(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = ofcolor(I, x7)\n    x9 = colorfilter(x2, ZERO)\n    x10 = rbind(adjacent, x8)\n    x11 = mfilter(x9, x10)\n    x12 = toindices(x11)\n    x13 = rbind(manhattan, x3)\n    x14 = chain(even, x13, initset)\n    x15 = sfilter(x12, x14)\n    x16 = difference(x12, x15)\n    x17 = fill(I, x7, x15)\n    O = fill(x17, x6, x16)\n    return O"], [1.0, "def solve_6047ef19(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = ulcorner(I)\n    x5 = index(I, x4)\n    x6 = subgrid(x2, I)\n    x7 = mostcolor(x6)\n    x8 = replace(x6, x7, x3)\n    x9 = replace(x8, x7, x5)\n    O = replace(x9, normalize, x2)\n    return O"], [1.0, "def solve_2c25caab(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_5d6e2b44(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_65fcdb5e(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, ONE, x5)\n    x7 = lbind(power, outbox)\n    x8 = chain(x7, halve, width)\n    x9 = initset(x8)\n    x10 = lbind(rapply, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(backdrop, x12)\n    x14 = fork(difference, x13, toindices)\n    x15 = mapply(x14, x1)\n    x16 = mostcolor(I)\n    x17 = ofcolor(I, x16)\n    x18 = intersection(x15, x17)\n    O = fill(x6, THREE, x18)\n    return O"], [1.0, "def solve_00b63d24(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_2cd0af27(I):\n    x1 = fgpartition(I)\n    x2 = mapply(neighbors, x1)\n    x3 = rbind(difference, x2)\n    x4 = chain(size, x3, toindices)\n    x5 = matcher(x4, ZERO)\n    x6 = partition(I)\n    x7 = sfilter(x6, x5)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = fork(either, hline, vline)\n    x12 = prapply(connect, x10, x10)\n    x13 = compose(flip, x5)\n    x14 = fork(both, x13, x11)\n    x15 = mfilter(x12, x14)\n    x16 = mostcolor(I)\n    x17 = shape(I)\n    x18 = canvas(x16, x17)\n    O = fill(x18, x9, x15)\n    return O"], [1.0, "def solve_726492c7(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(delta, toindices)\n    x3 = mfilter(x1, x2)\n    x4 = toindices(x3)\n    x5 = rbind(shoot, RIGHT)\n    x6 = mapply(x5, x4)\n    x7 = underfill(I, ONE, x6)\n    x8 = box(x3)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x9, x10)\n    x12 = sfilter(x4, x11)\n    x13 = difference(x4, x12)\n    x14 = merge(x12)\n    x15 = fill(x7, TWO, x14)\n    x16 = mapply(x6, x13)\n    O = fill(x15, ONE, x16)\n    return O"], [1.0, "def solve_f701a49a(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x19(x16, x17)\n    return O"], [1.0, "def solve_cba4d284(I):\n    x1 = height(I)\n    x2 = astuple(ONE, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = ORIGIN(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x1)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [1.1, "def solve_900bdf7f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_f0e0dd80(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = asindices(I)\n    x4 = shoot(ORIGIN, NEG_UNITY)\n    x5 = mapply(x4, x2)\n    x6 = last(x5)\n    x7 = asobject(I)\n    x8 = subtract(UNITY, x7)\n    x9 = shift(x8, x6)\n    x10 = partition(I)\n    x11 = sizefilter(x10, ONE)\n    x12 = difference(x10, x11)\n    x13 = argmax(x12, size)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x14, x15)\n    x17 = lbind(colorcount, I)\n    x18 = argmin(x16, x17)\n    x19 = other(x16, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = ofcolor(x21, x18)\n    x23 = replace(x22, x18, x19)\n    x24 = mapply(dneighbors, x20)\n    x25 = mapply(ineighbors, x24)\n    x26 = ofcolor(x23, x18)\n    x27 = cover(x26, x25)\n    x28 = difference(x24, x27)\n    x29 = fill(x27, x18, x28)\n    x30 = shift(x29, UNITY)\n    x31 = ofcolor(x30, x18)\n    x32 = combine(x26, x31)\n    x33 = mapply(dneighbors, x32)\n    x34 = difference(x31, x33)\n    x35 = toobject(x34, x41)\n    x36 = size(x35)\n    x37 = positive(x36)\n    x38 = branch(x37, x30, x34)\n    O = fill(x38, x19, x32)\n    return"], [1.1, "def solve_61be3925(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = color(x1)\n    x4 = rot180(I)\n    x5 = shape(x1)\n    x6 = canvas(x3, x5)\n    x7 = hconcat(x6, x1)\n    x8 = rot180(x7)\n    x9 = compress(x8)\n    x10 = leastcolor(x9)\n    x11 = mostcolor(x9)\n    x12 = index(x9, ORIGIN)\n    x13 =12(x12)\n    x14 = box(x13)\n    x15 = hmirror(x14)\n    x16 = mostcolor(x15)\n    x17 = rot270(I)\n    x18 = fgpartition(x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = other(x20, x16)\n    x22 = ofcolor(x19, x21)\n    x23 = asindices(x19)\n    x24 = ofcolor(x19, x16)\n    x25 = normalize(x24)\n    x26 = lbind(shift, x25)\n    x27 = rbind(difference, x2)\n    x28 = chain(size, x27, toindices)\n    x29 = matcher(x28, ZERO)\n    x30 = partition(x19)\n    x31 = sfilter(x30, x29)\n    x32 = argmax(x31, x24)\n    x33 = difference(x32, x23)\n    x34 = vmirror(x32)\n    x35 = fgpartition(x34)\n    x36 = merge(x35)\n    x37 = cover(x6, x36)\n    x38 = shift(x34, x37)\n    x39 = fork(equality, identity, dmirror)\n    x40 = extract(x38, x39)\n    x41 = x40(x40)\n    x42 = height(x41)\n    x43 = height(x36)"], [1.1, "def solve_b6113b44(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_fc30d1e2(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = colorcount(I, TWO)\n    x2 = outbox(x1)\n    x3 = objects(I, T, F, F)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = lowermost(x4)\n    x7 = uppermost(x4)\n    x8 = toindices(x4)\n    x9 = add(x6, x8)\n    x10 = increment(x9)\n    x11 = width(I)\n    x12 = rbind(greater, x11)\n    x13 = compose(x12, width)\n    x14 = apply(x13, x10)\n    x15 = maximum(x14)\n    x16 = increment(x15)\n    x17 = interval(TWO, x16, ONE)\n    x18 = combine(x15, x17)\n    x19 = lbind(shift, x8)\n    x20 = lbind(multiply, x18)\n    x21 = rbind(apply, x20)\n    x22 = lbind(mapply, x9)\n    x23 = compose(x21, x22)\n    x24 = fork(combine, x21, x23)\n    x25 = compose(x19, x24)\n    x26 = fork(difference, x25, toindices)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x27, last)\n    x29 = lbind(rbind, adjacent)\n    x30 = compose(x29, first)\n    x31 = fork(extract, x28, x30)\n    x32 = compose(x31, x26)\n    x33 = fork(combine, x31, x32)\n    x34 = fork(combine, x33, x32)\n    x35 = fork(combine, x34, x28)\n    x36 = fork(difference, x33, x35)\n    x37 = compose(x33, x36)\n    x38 = fork(recolor, x37, x34)\n    x39 = mapply(x38, x9)"], [1.1, "def solve_744dbd36(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_6b5cd8ae(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = chain(positive, size, dmirror)\n    x7 = chain(x6, toindices, box)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(x8, normalize, x6)\n    x10 = lbind(chain, uppermost)\n    x11 = rbind(sfilter, x10)\n    x12 = lbind(lbind, shift)\n    x13 = compose(x11, x12)\n    x14 = lbind(rbind, leftmost)\n    x15 = chain(x13, x14, x9)\n    x16 = lbind(fork, greater)\n    x17 = lbind(x16, both)\n    x18 = rbind(sfilter, x17)\n    x19 = lbind(compose, x8)\n    x20 = lbind(rbind, difference)\n    x21 = chain(x19, x20, toindices)\n    x22 = chain(x17, x21, x9)\n    x23 = fork(compose, x18, x19)\n    x24 = fork(compose, x11, x23)\n    x25 = lbind(compose, x5)\n    x26 = x25(x22)\n    x27 = x25(x24)\n    x28 = combine(x26, x27)\n    x29 = cover(x5, x28)\n    x30 = mapply(x16, x29)\n    x31 = paint(x3, x30)\n    x32 = height(x31)\n    x33 = width(x31)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x34)\n    x36 = astuple(x352, x35)\n    x37 = astuple(x302, x35)\n    x38 = combine(x36, x"], [1.1, "def solve_71486c6a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = difference(x1, x2)\n    x4 = rbind(subgrid, I)\n    x5 = chain(x4, decrement, width)\n    x6 = rbind(subgrid, I)\n    x7 = lbind(compose, x5)\n    x8 = compose(x7, x6)\n    x9 = lbind(fork, subtract)\n    x10 = lbind(x9, decrement)\n    x11 = lbind(lbind, astuple)\n    x12 = lbind( rbind, x11)\n    x13 = compose(x12, x10)\n    x14 = lbind(compose, x4)\n    x15 = compose(x14, x13)\n    x16 = fork(x7, x15, x16)\n    x17 = fork(x9, x16, backdrop)\n    x18 = lbind(contained, x2)\n    x19 = compose(x18, palette)\n    x20 = fork(flip, x19, vline)\n    x21 = fork(both, x19, x20)\n    x22 = sfilter(x3, x21)\n    x23 = compose(decrement, width)\n    x24 = chain(x23, x22, asobject)\n    x25 = fork(shift, x24, ulcorner)\n    x26 = lbind(shift, x22)\n    x27 = fork(shift, x26, ulcorner)\n    x28 = compose(x27, x25)\n    x29 = fork(recolor, x28, x24)\n    x30 = mapply(x29, x22)\n    x31 = paint(I, x30)\n    x32 = objects(x31, T, F, T)\n    x33 = first(x32)\n    x34 = vmirror(x33)\n    x35 = cover(x31, x34)\n    x36 = mapply(x29, x34)\n    x37 = paint(x35, x36)\n    "], [1.1, "def solve_f9dcf2c2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_bfb24f5d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = interval(THREE, SEVEN, ONE)\n    x5 = product(x4, x4)\n    x6 = fork(multiply, first, last)\n    x7 = order(x5, x6)\n    x8 = lbind(canvas, NEG_ONE)\n    x9 = chain(x8, first, first)\n    x10 = chain(corners, asindices, x9)\n    x11 = lbind(recolor, x1)\n    x12 = compose(asindices, x9)\n    x13 = fork(difference, x12, x10)\n    x14 = lbind(recolor, TWO)\n    x15 = compose(inbox, x10)\n    x16 = chain(x14, backdrop, x15)\n    x17 = compose(x11, x13)\n    x18 = lbind(lbind, combine)\n    x19 = compose(x18, x17)\n    x20 = lbind(rbind, recolor)\n    x21 = compose(x20, x10)\n    x22 = fork(compose, x19, x21)\n    x23 = lbind(lbind, mapply)\n    x24 = lbind(lbind, shift)\n    x25 = chain(x23, x24, x16)\n    x26 = lbind(lbind, occurrences)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x27, x22)\n    x29 = fork(compose, x25, x28)\n    x30 = rbind(mapply, x3)\n    x31 = compose(x30, x29)\n    x32 = fork(paint, last, x31)\n    x33 = compose(first, first)\n    x34 = fork(remove, x33, first)\n    x35 = fork(astuple, x34, x32)\n    x36 = size(x7)\n    x37 = power(x35, x36)\n    x38 = ast"], [1.1, "def solve_128af0e5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f2335bc9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_b4df3c82(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = ofcolor(x3, EIGHT)\n    x5 = branch(x1, identity, vmirror)\n    x6 = x5(x1)\n    x7 = objects(x6, T, F, T)\n    x8 = argmin(x7, leftmost)\n    x9 = argmax(x7, leftmost)\n    x10 = color(x9)\n    x11 = color(x10)\n    x12 = subgrid(x9, x6)\n    x13 = x12(x6)\n    x14 = replace(x13, x10, x11)\n    x15 = subgrid(x9, x6)\n    x16 = color(x15)\n    x17 = replace(x16, x10, x11)\n    x18 = width(x17)\n    x19 = lowermost(x9)\n    x20 = matcher(last, x19)\n    x21 = sfilter(x17, x20)\n    x22 = uppermost(x9)\n    x23 = matcher(first, x22)\n    x24 = sfilter(x17, x23)\n    x25 = ulcorner(x9)\n    x26 = lbind(shift, x24)\n    x27 = lrcorner(x9)\n    x28 = add(x27, x25)\n    x29 = ulcorner(x24)\n    x30 = shift(x24, x29)\n    x31 = llcorner(x9)\n    x32 = hmirror(x31)\n    x33 = urcorner(x9)\n    x34 = shoot(x28, UNITY)\n    x35 = shoot(x28, DOWN_LEFT)\n    x36 = shoot(x28, UP_RIGHT)\n    x37 = shoot(x28, NEG_UNITY)\n    x38 = combine(x34, x35)\n    x39 = combine(x36, x37)\n    x40 = combine(x38,"], [1.1, "def solve_2b04d7e7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_4ec2553f(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_38a45427(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_f3486f5f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_c8b23cdd(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_26424741(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_afeb53ac(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_c34cb446(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_a63f7457(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_16eb721d(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_a4c47a30(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_05c00a9c(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = astuple(x1, TWO)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = colorfilter(x2, FIVE)\n    x6 = compose(normalize, toindices)\n    x7 = difference(x2, x5)\n    x8 = power(x6, FOUR)\n    x9 = rbind(subgrid, I)\n    x10 = apply(x9, x7)\n    x11 = rbind(4count, SIX)\n    x12 = matcher(x11, TWO)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, THREE, x13)\n    x15 = merge(x5)\n    x16 = fill(x14, EIGHT, x15)\n    x17 = fill(x16, FOUR, x13)\n    O = replace(x17, FIVE, ZERO)\n    return O"], [1.1, "def solve_bfb44e41(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 =441000000000044004440444444\n    x2 =44000000000000444440444444\n    x3 =4410000000000444444444444\n    x4 =04000444444444444444444400\n    0400040444444444444444440044\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_9802378b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_14f7cb3a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.1607843137254902, "def solve_dfc1e538(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_df4fe242(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.29814814814814816, "def solve_e6abba53(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_788438c7(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_f4f08929(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_f8fefd31(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_2fc26b0b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.32027505446623095, "def solve_5a2dcf4d(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_1f54acc9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_42a993a1(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_58b8c5d9(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_038a5e9a(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_c1ad9a9c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_a62498af(I):\n    x1 = objects(I, T, T, F)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_6cb9282c(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_ba060e7c(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [0.3215686274509804, "def solve_fb375d48(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_b5c6bc80(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_51d98218(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_6801bdfb(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_0fa818a8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.3215686274509804, "def solve_7b1f6396(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_2f9b11e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_85235694(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3296296296296296, "def solve_5e239bfe(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_1be88343(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [0.3296296296296296, "def solve_76888c99(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.35728291316526606, "def solve_c8e0b617(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.35728291316526606, "def solve_6c97a78b(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.35728291316526606, "def solve_c5493613(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.37411764705882355, "def solve_caf0cbfc(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.37411764705882355, "def solve_c9fcf513(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.38055555555555554, "def solve_9cf4e19b(I):\n    x1 = asobject(I)\n    x2 = objects(I, T, T, T)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = dedupe(x4)\n    x6 = rot90(x5)\n    x7 = dedupe(x6)\n    O = rot270(x7)\n    return O"], [0.3985185185185185, "def solve_7530e9f8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = shape(I)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = hconcat(x5, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = rbind(other, x3)\n    x11 = compose(x10, palette)\n    x12 = fork(astuple, x11, ulcorner)\n    x13 = apply(x12, x9)\n    x14 = merge(x9)\n    x15 = fill(I, x3, x14)\n    x16 = paint(x15, x13)\n    O = compress(x16)\n    return O"], [0.40740740740740744, "def solve_f0285051(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = size(x2)\n    x4 = astuple(ONE, x3)\n    x5 = canvas(x1, x4)\n    x6 = cmirror(x5)\n    x7 = hconcat(x5, x6)\n    x8 = hsplit(x7, TWO)\n    O = merge(x8)\n    return O"], [0.41333791996330693, "def solve_57a29ff2(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_8912a67d(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_74917f16(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_e1106147(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_1b76a6d1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_f4809efe(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_67edea0b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.4148148148148148, "def solve_22d7ee40(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_6fdfd44d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, dmirror)\n    x3 = extract(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_978e1238(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.42592592592592593, "def solve_ba29a956(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_7ab3f5ba(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_ebe08060(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_a05b9252(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.42592592592592593, "def solve_a9787225(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.42592592592592593, "def solve_43f30d66(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_3f833dad(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_17a55864(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4296296296296296, "def solve_d2bddfb2(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_33b9b230(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_a156ea66(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_23a80fc3(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = mostcommon(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    O = paint(x7, x4)\n    return O"], [0.4296296296296296, "def solve_a36bed47(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_aebd06ff(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.43504273504273505, "def solve_52bf3475(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.43504273504273505, "def solve_65bf67f4(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4715975529100529, "def solve_ae43c53a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_b0ef54e0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_903b2b7d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_726cae0c(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_9f846436(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_0edcae9b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_578b6afe(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_e651c0a1(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_ef4d0932(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_5ef98fab(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5013227513227514, "def solve_990bb08a(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_833b8496(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5692631993695824, "def solve_4c03438f(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [0.5722260195944406, "def solve_8673ab25(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5936739417989418, "def solve_295db4c3(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.5936739417989418, "def solve_5993a89f(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.6163211951447245, "def solve_90efb223(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6163211951447245, "def solve_fec2fcf4(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6428952122854562, "def solve_29eb6403(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6428952122854562, "def solve_ffe1460e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6600575299564271, "def solve_4deaed00(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.660134929337232, "def solve_ce04f63c(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6645751998060916, "def solve_7f3f686e(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_386c5816(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_9a55a156(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7073928669896412, "def solve_b9c38c16(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmax(x6, x7)\n    x9 = fgpartition(I)\n    x10 = merge(x9)\n    x11 = difference(x10, x8)\n    x12 = subgrid(x11, I)\n    x13 = height(x12)\n    x14 = subtract(x13, TWO)\n    x15 = height(x12)\n    x16 = divide(x14, x15)\n    x17 = width(x12)\n    x18 = subtract(x17, TWO)\n    x19 = width(x12)\n    x20 = divide(x18, x19)\n    x21 = hupscale(x12, x20)\n    x22 = vupscale(x21, x20)\n    x23 = asobject(x22)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x12, x24)\n    x26 = height(x12)\n    x27 = shift(x24, x26)\n    x28 = toobject(x27, x12)\n    x29 = numcolors(x28)\n    x30 = shift(x27, x29)\n    x31 = ofcolor(x22, x27)\n    x32 = difference(x30, x31)\n    x33 = ofcolor(x22, x27)\n    x34 = intersection(x32, x33)\n    O = fill(x25, THREE, x34)\n    return O"], [0.709172269403161, "def solve_f617582e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_ead99a43(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7241016188672439, "def solve_b1043381(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_368c41cc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_cd9ba62c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_b65b93d8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_006f34e4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_874a9e58(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7275112822906941, "def solve_3ecd7293(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7302617642288691, "def solve_c2303a99(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7302617642288691, "def solve_da429c43(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7338151265460182, "def solve_e42497b8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7341722694031612, "def solve_5c12f0a1(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7389341741650659, "def solve_59ff1176(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [0.7400296972330871, "def solve_02a37980(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7400296972330871, "def solve_c3866abf(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.741832732082732, "def solve_35f43cd2(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7433389360698277, "def solve_d32634f1(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, ONE, x6)\n    return O"], [0.7433389360698277, "def solve_0d2c57e7(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.7436960789269706, "def solve_356c1e3a(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7436960789269706, "def solve_642f0767(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.7436960789269706, "def solve_bb22cc7d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.7436960789269706, "def solve_4a059c37(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_d152eac3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_8890dd0b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.7436960789269706, "def solve_9c78fbdd(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, shape)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = order(x5, leftmost)\n    x7 = compose(last, last)\n    x8 = lbind(ofcolor, I)\n    x9 = fork(recolor, x7, x8)\n    x10 = fork(mapply, x4, x9)\n    x11 = mapply(x10, x6)\n    O = paint(I, x11)\n    return O"], [0.7436960789269706, "def solve_27c66148(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7436960789269706, "def solve_d3a8b5a0(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_5459fa73(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    O = fill(I, ZERO, x3)\n    return O"], [0.7436960789269706, "def solve_c37754db(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_d8fea838(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.7436960789269706, "def solve_a2344edb(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_3fccc521(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = rbind(add, RIGHT)\n    x5 = compose(x4, x3)\n    x6 = chain(toivec, decrement, numcolors)\n    x7 = fork(add, x5, x6)\n    x8 = compose(initset, x7)\n    x9 = fork(insert, x3, x8)\n    x10 = compose(backdrop, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, THREE, x11)\n    return O"], [0.7440145502645503, "def solve_8795668f(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.7440145502645503, "def solve_bd9a241a(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7440145502645503, "def solve_a4538800(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = lbind(apply, x3)\n    x5 = chain(even, maximum, x4)\n    x6 = lbind(sfilter, x1)\n    x7 = fork(add, first, last)\n    x8 = rbind(remove, x2)\n    x9 = compose(center, last)\n    x10 = fork(subtract, first, x9)\n    x11 = compose(x5, x10)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(argmin, x2)\n    x14 = chain(x7, x4, x10)\n    x15 = lbind(lbind, astuple)\n    x16 = lbind(rbind, astuple)\n    x17 = lbind(compose, x11)\n    x18 = lbind(compose, x14)\n    x19 = compose(x18, x15)\n    x20 = compose(x18, x16)\n    x21 = compose(x13, x19)\n    x22 = rbind(compose, x21)\n    x23 = lbind(lbind, valmin)\n    x24 = rbind(compose, x19)\n    x25 = chain(x24, x23, x8)\n    x26 = lbind(fork, greater)\n    x27 = fork(x26, x25, x20)\n    x28 = chain(x6, x17, x16)\n    x29 = chain(x6, x22, x12)\n    x30 = fork(intersection, x28, x29)\n    x31 = compose(x6, x27)\n    x32 = fork(intersection, x30, x31)\n    x33 = fork(recolor, color, x32)\n    x34 = mapply(x33, x2)\n    O = paint(I, x34)\n    return O"], [0.7469103646412563, "def solve_707587bc(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = apply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = apply(lrcorner, x1)\n    x6 = shift(x2, NEG_UNITY)\n    x7 = shift(x3, UP_RIGHT)\n    x8 = shift(x4, DOWN_LEFT)\n    x9 = shift(x5, UNITY)\n    x10 = fill(I, ONE, x6)\n    x11 = fill(x10, TWO, x7)\n    x12 = fill(x11, THREE, x8)\n    O = fill(x12, FOUR, x9)\n    return O"], [0.7482270044770045, "def solve_ba2aee3b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_4fc760d8(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7504817932126848, "def solve_bbd4c144(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [0.7504817932126848, "def solve_156c812d(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [0.7532198884507801, "def solve_97ebc8a4(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_631a0ff8(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_0820e133(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.7532198884507801, "def solve_dd3fb5ac(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7615532217841134, "def solve_34370e43(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c5430e59(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.767824074074074, "def solve_a8a21025(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.767824074074074, "def solve_124f14e9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7707743846330803, "def solve_0606b733(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7707743846330803, "def solve_737d873b(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7707743846330803, "def solve_77e9355e(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7707743846330803, "def solve_e535c1a0(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7722675074983991, "def solve_2a3777c0(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7722675074983991, "def solve_21ad24f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7725859788359788, "def solve_b8e88be6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_0163d288(I):\n    x1 = objects(I, T, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = apply(x4, x3)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    x9 = shift(x8, UP_RIGHT)\n    x10 = shift(x8, DOWN_LEFT)\n    x11 = paint(I, x8)\n    x12 = paint(x11, x9)\n    O = paint(x12, x10)\n    return O"], [0.7725859788359788, "def solve_83c6f56f(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x5, THREE)\n    return O"], [1.0, "def solve_5f287b44(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_5e248b73(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_02e455b8(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = rbind(astuple, x2)\n    x4 = equality(x2, x3)\n    x5 = merge(x1)\n    x6 = fill(I, ONE, x5)\n    x7 = merge(x2)\n    x8 = fill(x6, TWO, x7)\n    x9 = merge(x4)\n    O = fill(x8, SEVEN, x9)\n    return O"], [1.0, "def solve_6ab3d309(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = rbind(sizefilter, ONE)\n    x5 = apply(color, x3)\n    x6 = difference(x5, x3)\n    x7 = merge(x6)\n    O = fill(I, TWO, x7)\n    return O"], [1.0, "def solve_ebdb68fe(I):\n    x1 = compose(backdrop, inbox)\n    x2 =mass(x1)\n    x3 = x1(x2)\n    x4 = neighbors(x3)\n    x5 = astuple(TEN, TEN)\n    x6 = canvas(ZERO, x5)\n    x7 = initset(x2)\n    x8 = fill(x6, EIGHT, x7)\n    O = fill(x8, TWO, x4)\n    return O"], [1.0, "def solve_b9ca7227(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_819bf653(I):\n    x1 = fgpartition(I)\n    x2 = Tneighbors(ORIGIN)\n    x3 = crop(I, DOWN, x2)\n    x4 = add(TWO, UNITY)\n    x5 = interval(ZERO, x4, ONE)\n    x6 = apply(tojvec, x5)\n    x7 = lbind(add, x4)\n    x8 = compose(x7, increment)\n    x9 = lbind(add, x4)\n    x10 = compose(x9, increment)\n    x11 = lbind(astuple, x4)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = compose(x11, x12)\n    x14 = fork(recolor, x8, x13)\n    x15 = mapply(x14, x1)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_a14a78d7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 = fill(I, x3, x4)\n    x6 = merge(x1)\n    x7 = width(x6)\n    x8 = height(x6)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = lbind(shift, x6)\n    x11 = rbind(multiply, x7)\n    x12 = chain(x10, x11, last)\n    x13 = mapply(x12, x9)\n    O = fill(x5, x4, x13)\n    return O"], [1.0, "def solve_3860e439(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_d23bd423(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_5cd480ec(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_fdae7422(I):\n    x1 = trim(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = index(I, ORIGIN)\n    x5 = width(x2)\n    x6 = increment(x5)\n    x7 = index(x2, x6)\n    x8 = height(x2)\n    x9 = decrement(x8)\n    x10 = astuple(x9, ORIGIN)\n    x11 = double(x10)\n    x12 = decrement(x11)\n    x13 = width(x2)\n    x14 = interval(x12, x13, ZERO)\n    x15 = astuple(x11, x14)\n    x16 = other(x14, x15)\n    x17 = portrait(x16)\n    x18 = branch(x17, x8, x16)\n    x19 = multiply(x17, THREE)\n    x20 = initset(x19)\n    x21 = insert(x14, x20)\n    x22 = insert(x16, x21)\n    x23 = rapply(x22, x2)\n    x24 = vmirror(x23)\n    x25 = hconcat(x17, x24)\n    x26 = hconcat(x22, x25)\n    O = vconcat(x26, x26)\n    return O"], [1.0, "def solve_78c665ef(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_4409aef9(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = ofcolor(I, x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, size)\n    x8 = mapply(x7, x1)\n    O = fill(I, x4, x8)\n    return O"], [1.0, "def solve_91fa5cd4(I):\n    x1 = asobject(I)\n    x2 = lbind(shift, x1)\n    x3 = compose(x2, shape)\n    x4 = fork(combine, x3, x3)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = fork(color, x4, x4)\n    x8 = compose(last, x4)\n    x9 = compose(first, x4)\n    x10 = fork(recolor, x8, x9)\n    x11 = mapply(x10, x6)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_122df8a0(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_f511d995(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, x1)\n    x4 = compose(45, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_b5d10c6e(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, last)\n    x3 = compose(x2, frontiers)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_ea50596d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = argmax(x1, x2)\n    x4 = x3(x3)\n    x5 = fork(subtract, toindices, box)\n    x6 = fork(multiply, x5, x4)\n    x7 = fork(add, x6, identity)\n    x8 = argmin(x1, x7)\n    x9 = palette(x8)\n    x10 = inbox(x8)\n    x11 = cover(I, x10)\n    x12 = normalize(x8)\n    x13 = matcher(first, x18)\n    x14 = ulcorner(x8)\n    x15 = matcher(first, x14)\n    x16 = fork(either, x13, x15)\n    x17 = rbind(contained, x9)\n    x18 = compose(x17, ulcorner)\n    x19 = rbind(sfilter, x18)\n    x20 = lbind(d10, manhattan)\n    x21 = chain(x19, x20, initset)\n    x22 = lbind(argmin, x5)\n    x23 = chain(first, x22, x21)\n    x24 = fork(contained, x23, x20)\n    x25 = chain(flip, x24, x20)\n    x26 = fork(astuple, x20, x23)\n    x27 = fork(astuple, x23, x20)\n    x28 = fork(connect, x27, x161)\n    x29 = fork(combine, x28, x23)\n    x30 = mapply(x29, x10)\n    O = paint(x11, x30)\n    return O"], [1.0, "def solve_f208d0cb(I):\n    x1 = partition(I)\n    x2 = fork(contained, ofcolor, toindices)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmin(x3, x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, ZERO, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = mapply(x8, x8)\n    O = fill(x7, ZERO, x9)\n    return O"], [1.0, "def solve_d6594b1d(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(index, I)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(extract, x1)\n    x5 = rbind(subgrid, I)\n    x6 = lbind(compose, x3)\n    x7 = chain(x5, x4, x6)\n    x8 = x7(ulcorner)\n    x9 = x7(urcorner)\n    x10 = x7(llcorner)\n    x11 = x7(lrcorner)\n    x12 = hconcat(x11, x10)\n    x13 = hconcat(x9, x8)\n    O = vconcat(x12, x13)\n    return O"], [1.0, "def solve_822ea7c2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_4c4aa011(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = mapply(x16, x20)\n    x22 = paint(I, x21)\n    O = subgrid(x2, x22)\n    return O"], [1.0, "def solve_6ba0a01a(I):\n    x1 = astuple(identity, cmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_92dc0beb(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_e8c89c3f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = leastcolor(I)\n    x10 = ofcolor(I, x4)\n    x11 = ofcolor(I, x8)\n    x12 = position(x10, x11)\n    x13 = first(x12)\n    x14 = recolor(x4, x13)\n    x15 = shift(x14, UNITY)\n    x16 = ulcorner(x15)\n    x17 = remove(x16, x15)\n    x18 = lbind(shift, x15)\n    x19 = rbind(sfilter, x18)\n    x20 = mapply(x19, x17)\n    O = underfill(I, x4, x20)\n    return O"], [1.0, "def solve_270e0c3a(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = asobject(x27)\n    x30 = matcher(first, x28)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x29, x31)\n    x33 = paint(x27, x32)\n    O = subgrid(x33, x25)\n    return O"], [1.0, "def solve_301537ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, size)\n    x12 = sfilter(x1, x11)\n    x13 = argmax(x12, size)\n    x14 = color(x13)\n    x15 = center(x13)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x13, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x17, x19)\n    x21 = apply(toindices, x20)\n    x22 = lbind(shift, x21)\n    x23 = mapply(x22, x15)\n    O = underfill(I, x4, x23)\n    return O"], [1.0, "def solve_dd15079f(I):\n    x1 = objects(I, F, T, T)\n    x2 = order(x1, TWO)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_af66c55a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_8669a179(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_5d22b3df(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_8e09a5a4(I):\n    x1 = partition(I)\n    x2 = fork(contained, ONE, neighbors)\n    x3 = matcher(size, ONE)\n    x4 = fork(both, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, size)\n    x7 = color(x6)\n    x8 = uppermost(x6)\n    x9 = matcher(first, x8)\n    x10 = fork(both, x3, x9)\n    x11 = sfilter(x7, x10)\n    x12 = increment(x6)\n    x13 = add(x12, DOWN)\n    x14 = matcher(first, x7)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = maximum(x16)\n    x18 = increment(x17)\n    x19 = matcher(first, x7)\n    x20 = sfilter(x16, x19)\n    x21 = maximum(x20)\n    x22 = matcher(first, x7)\n    x23 = sfilter(x16, x22)\n    x24 = uppermost(x23)\n    x25 = matcher(first, x7)\n    x26 = sfilter(x16, x25)\n    x27 =ORIGIN(x26)\n    x28 = lbind(matcher, last)\n    x29 = compose(x28,41)\n    x30 = fork(sfilter, identity, x29)\n    x31 = compose(toindices, x30)\n    x32 = fork(difference, x31, last)\n    x33 = mapply(x32, x11)\n    O = fill(I, x7, x33)\n    return O"], [1.0, "def solve_6e2b7e4d(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_cd9858bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(equality, toindices, box)\n    x4 = sfilter(x2, x3)\n    x5 = lbind(fork, either)\n    x6 = lbind(matcher, hline)\n    x7 = compose(x6, center)\n    x8 = lbind(compose, center)\n    x9 = compose(x8, color)\n    x10 = lbind(rbind, sfilter)\n    x11 = compose(x10, x7)\n    x12 = fork(compose, x11, x9)\n    x13 = lbind(rbind, subtract)\n    x14 = compose(x13, uppermost)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = lbind(recolor, TWO)\n    x17 = compose(x16, x12)\n    x18 = fork(compose, x17, x15)\n    x19 = fork(lrcorner, x15, x12)\n    x20 = fork(shift, x18, x19)\n    x21 = mapply(x20, x4)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_4c6eef66(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_3ed87b3f(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_0925bbeb(I):\n    x1 = objects(I, F, T, T)\n    x2 = lbind(mapply, dneighbors)\n    x3 = compose(x2, toindices)\n    x4 = fork(recolor, mostcolor, x3)\n    x5 = compose(decrement, ulcorner)\n    x6 = compose(increment, lrcorner)\n    x7 = fork(connect, x5, x6)\n    x8 = compose(hmirror, x7)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(recolor, leastcolor, x9)\n    x11 = mapply(x4, x1)\n    x12 = paint(I, x11)\n    x13 = mapply(x10, x1)\n    O = paint(x12, x13)\n    return O"], [1.0, "def solve_ca0098cc(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_b4f93e44(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = difference(x1, x6)\n    x8 = mostcolor(I)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [1.0, "def solve_ef641523(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_9ae52c73(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_5fe7315f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d1e4029e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = rbind(remove, x3)\n    x5 = compose(lrcorner, x4)\n    x6 = compose(hmirror, x5)\n    x7 = fork(recolor, x6, identity)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_f5c63a8c(I):\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = mapply(vfrontier, x2)\n    x4 = underfill(I, EIGHT, x3)\n    x5 = hconcat(x4, x4)\n    O = vconcat(x5, x5)\n    return O"], [1.0, "def solve_57c2c28e(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_6ca082f5(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_e21623e3(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = fork(equality, identity, vmirror)\n    x6 = equality(x5, x4)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_fbcff55c(I):\n    x1 = palette(I)\n    x2 = fork(multiply, height, width)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x2, x3)\n    x5 = lbind(prapply, I)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, x7, identity)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_c827fbf0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fgpartition(I)\n    x3 = equality(x1, FOUR)\n    x4 = equality(x1, FOUR)\n    x5 = branch(x3, TWO, ONE)\n    x6 = branch(x4, THREE, x5)\n    x7 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x7, EIGHT, x6)\n    return O"], [1.0, "def solve_8c960b85(I):\n    x1 = objects(I, T, F, F)\n    x2 = frontiers(I)\n    x3 = merge(x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, tophalf, lefthalf)\n    x13 = branch(x11, bottomhalf, righthalf)\n    x14 = x12(x1)\n    x15 = x13(x14)\n    x16 = x15(I)\n    x17 = shape(x16)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(gravitate, x10)\n    x21 = chain(x19, sign, x20)\n    x22 = compose(x21, center)\n    x23 = fork(add, first, x22)\n    x24 = chain(halve, x19, x23)\n    x25 = compose(x24, last)\n    x26 = ofcolor(x16, x4)\n    x27 = fork(astuple, x26, x25)\n    x28 = canvas(ZERO, x17)\n    x29 = paint(x28, x26)\n    O = x12(x29)\n    return O"], [1.0, "def solve_d1a652c8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_b1c6909a(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [1.1, "def solve_344b1bd3(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_b1599657(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_b1b4e9b2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_2046b3f2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_57289d32(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_4ad472d7(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_a2631085(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_e7e24cff(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_37cb145d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = first(x2)\n    x4 = normalize(x3)\n    x5 = last(x2)\n    x6 = normalize(x5)\n    x7 = color(x4)\n    x8 = color(x6)\n    x9 = toindices(x4)\n    x10 = toindices(x6)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = lbind(shift, x9)\n    x14 = lbind(shift, x10)\n    x15 = compose(x13, first)\n    x16 = compose(x14, last)\n    x17 = fork(intersection, x15, x16)\n    x18 = compose(size, x17)\n    x19 = compose(x13, first)\n    x20 = compose(x14, last)\n    x21 = fork(combine, x19, x20)\n    x22 = compose(x12, x21)\n    x23 = matcher(x18, ZERO)\n    x24 = fork(both, x23, x22)\n    x25 = valmax(x2, height)\n    x26 = valmax(x2, width)\n    x27 = interval(ZERO, x25, ONE)\n    x28 = interval(ZERO, x26, ONE)\n    x29 = product(x27, x28)\n    x30 = product(x29, x29)\n    x31 = argmax(x30, x24)\n    x32 = first(x31)\n    x33 = shift(x9, x32)\n    x34 = last(x31)\n    x35 = shift(x10, x34)\n    x36 = combine(x33, x35)\n    x37 = shape(x36)\n    x38 = canvas(x8, x37)\n    x39 = ulcorner(x36)\n    x40 = invert(x39)\n    x41 = shift(x33, x40"], [1.1, "def solve_90063e10(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NEG_TWO, ONE)\n    x4 = interval(THREE, x3, ONE)\n    x5 = fork(shift, toivec, toivec)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, tojvec)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = compose(x9, initset)\n    x11 = lbind(fork, greater)\n    x12 = compose(x11, tojvec)\n    x13 = rbind(compose, initset)\n    x14 = lbind(rbind, manhattan)\n    x15 = compose(x13, x14)\n    x16 = fork(compose, x12, x15)\n    x17 = compose(x16, hmirror)\n    x18 = lbind(rbind, greater)\n    x19 = compose(x18, leftmost)\n    x20 = rbind(compose, initset)\n    x21 = lbind(rbind, manhattan)\n    x22 = compose(x20, x21)\n    x23 = fork(compose, x19, x22)\n    x24 = compose(x23, x7)\n    x25 = compose(x23, x6)\n    x26 = fork(compose, x24, x25)\n    x27 = fork(compose, x26, x21)\n    x28 = compose(x23, x27)\n    x29 = rbind(compose, x28)\n    x30 = lbind(rbind, greater)\n    x31 = chain(x29, x30, x29)\n    x32 = fork(compose, x23, x23)\n    x33 = fork(compose, x26, x23)\n    x34 = fork(combine, x32, x33)\n    x35 = compose(x34, x31)\n    x36 = fork(compose, x"], [1.1, "def solve_d2d5acd8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_f114b4cd(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_047469eb(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_c2c88eee(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_dc78d54d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_f5518bfb(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_8f08e124(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_a507898a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_9d29285f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_805f0a04(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_07528aee(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_39e1cfa2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, I, x2)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, FIVE)\n    x9 = apply(center, x8)\n    x10 = valmin(x9, first)\n    x11 = compose(first, center)\n    x12 = matcher(x11, x10)\n    x13 = compose(flip, x12)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x14)\n    x17 = ulcorner(x15)\n    x18 = subgrid(x14, x6)\n    x19 = subgrid(x15, x6)\n    x20 = hmirror(x18)\n    x21 = hmirror(x19)\n    x22 = ofcolor(x20, FIVE)\n    x23 = recolor(FIVE, x22)\n    x24 = ofcolor(x21, FIVE)\n    x25 = recolor(FIVE, x24)\n    x26 = height(x23)\n    x27 = height(x25)\n    x28 = add(THREE, x26)\n    x29 = add(THREE, x27)\n    x30 = toivec(x28)\n    x31 = toivec(x29)\n    x32 = add(x16, x30)\n    x33 = subtract(x17, x31)\n    x34 = shift(x23, x32)\n    x35 = shift(x25, x33)\n    x36 = merge(x8)\n    x37 = cover(x6, x36)\n    x38 = paint(x37, x34)\n    x39 = paint(x38, x35)\n    x40 = rot270(x39)\n    O = branch(x5, x39"], [1.1, "def solve_74904e83(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f622f4b0(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_c611c968(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_49d4a9d9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(equality, toindices, box)\n    x4 = extract(x2, x3)\n    x5 = halve(x4)\n    x6 =94(I, x5)\n    x7 =92(flip, x6)\n    x8 = extract(x2, x7)\n    x9 = palette(x8)\n    x10 = lbind(colorcount, x8)\n    x11 = compose(x10, color)\n    x12 = argmin(x9, x11)\n    x13 = other(x9, x12)\n    x14 = colorfilter(x1, x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, color)\n    x17 = sfilter(x16, x16)\n    x18 = ulcorner(x17)\n    x19 = llcorner(x17)\n    x20 = urcorner(x17)\n    x21 = index(I, x20)\n    x22 = asindices(I)\n    x23 = NEG_UNITY(x22)\n    x24 = width(I)\n    x25 =mx(x24)\n    x26 = ulcorner(x24)\n    x27 = width(I)\n    x28 = interval(x26, x27, ONE)\n    x29 = sfilter(x28, x26)\n    x30 = asobject(I)\n    x31 = ofcolor(I, x13)\n    x32 = difference(x30, x31)\n    x33 = ofcolor(I, x14)\n    x34 = intersection(x31, x33)\n    x35 = height(I)\n    x36 = astuple(x35, x34)\n    x37 = crop(I, ORIGIN, x36)\n    x38 = insert(x32, x37)\n    x39 =375(x38)\n    x40 = astuple(x24, x13)\n    x41 = crop(I, x40, x40)"], [1.1, "def solve_c1afd35e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_972d33e9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x36)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = rbind(divide, x38)\n    x41 = compose(x39, x40)\n"], [1.1, "def solve_a29a49c2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = color(x23)\n    x25 = palette(x22)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x6)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = ofcolor(x22, x24)\n    x31 = ofcolor(x22, x6)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = lowermost(x30)\n    x35 = dneighbors(ORIGIN)\n    x36 = remove(DOWN, x35)\n    x37 = rbind(mapply, x36)\n    x38 = lbind(chain, x37)\n    "], [1.1, "def solve_f834af88(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(0000000, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39)"], [1.1, "def solve_30856337(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_4083a828(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_ed4e0dc6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_a1f266d6(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_2aaf94cb(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_dfad40c2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = FIGurcorner(x3)\n    x13 = paint(x11, x12)\n    x14 = argmin(x13, first)\n    x15 = ofcolor(I, x4)\n    x16 = backdrop(x15)\n    x17 = toobject(x16, I)\n    x18 = matcher(first, x8)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = difference(x17, x20)\n    x22 = fill(x9, TWO, x21)\n    x23 = colorfilter(x2, x4)\n    x24 = rbind(adjacent, x22)\n    x25 = sfilter(x23, x24)\n    x26 = objects(x22, T, F, F)\n    x27 = colorfilter(x26, x4)\n    x28 = rbind(adjacent, x27)\n    x29 = sfilter(x27, x28)\n    x30 = mfilter(x29, vline)\n    x31 = fill(x9, TWO, x30)\n    x32 = ofcolor(x31, x4)\n    x33 = rbind(adjacent, x32)\n    x34 = mfilter(x27, x33)\n    x35 = fill(x31, ONE, x34)\n    x36 = ofcolor(x35, x4)\n    x37 = rbind(adjacent, x33)\n    x38 = mfilter(x27, x37)\n    x39 = fill(x35, x8, x"], [1.1, "def solve_e7db2d39(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_509f8572(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_7175bcf0(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_d2adc151(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_8583e304(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = normalize(x8)\n    x11 = matcher(first, x8)\n    x12 = sfilter(x10, x11)\n    x13 = ulcorner(x12)\n    x14 = colorfilter(x8, x4)\n    x15 = argmin(x14, x13)\n    x16 =initset(x13)\n    x17 = insert(x16, x16)\n    x18 = insert(x17, x17)\n    x19 =2147(x18)\n    x20 = toobject(x19, I)\n    x21 = mostcolor(x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x22, x5)\n    x24 = apply(leftmost, x23)\n    x25 = size(x24)\n    x26 = equality(x25, ONE)\n    x27 = branch(x26, identity, outbox)\n    x28 = apply(uppermost, x24)\n    x29 = order(x28, identity)\n    x30 = size(x29)\n    x31 = equality(x30, ONE)\n    x32 = uppermost(x29)\n    x33 = increment(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x31, x34)\n    x36 = interval(ZERO, x35, ONE)\n    x37 = pair(x32, x36)\n    x38 = fork(multiply, first, last)\n    x39 = apply(x38, x37)\n    x40 = lbind(sfilter, x33)\n    x41"], [1.1, "def solve_a2467394(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_aa2ebeec(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_2be3f2df(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_fcfee51e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_a6d77c7c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_fbf0585f(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_ada1e33f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, cmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normal"], [1.1, "def solve_36324d62(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_3352c838(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_68d14289(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 = tojvec(x38)\n    x40 = shift(x34, x39)\n    x41 = vmirror("], [1.1, "def solve_573dc479(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_bc9941e7(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = fork(equality, toindices, backdrop)\n    x5 = sfilter(x3, x4)\n    x6 = lbind(mapply, dneighbors)\n    x7 = chain(x6, corners, outbox)\n    x8 = fork(difference, x7, outbox)\n    x9 = leastcolor(I)\n    x10 = ofcolor(I, x9)\n    x11 = rbind(intersection, x10)\n    x12 = matcher(size, ZERO)\n    x13 = chain(x12, x11, x8)\n    x14 = matcher(size, FOUR)\n    x15 =296(I, x9)\n    x16 = matcher(size, FOUR)\n    x17 = fork(either, x13, x14)\n    x18 = fork(either, x17, x15)\n    x19 = sfilter(x11, x18)\n    x20 = difference(x11, x19)\n    O = fill(I, x9, x20)\n    return O"], [1.1, "def solve_d3e85573(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =63(I)\n    x2 = astuple(identity, identity)\n    x3 = astuple(rot90, rot270)\n    x4 = astuple(x2, x3)\n    x5 = astuple(rot180, rot180)\n    x6 = astuple(rot270, rot90)\n    x7 = astuple(x5, x6)\n    x8 = combine(x4, x7)\n    x9 = leastcolor(I)\n    x10 = repeat(x9, ONE)\n    x11 = rbind(ofcolor, x9)\n    x12 = compose(x11, last)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, first)\n    x15 = chain(first, x13, x14)\n    x16 = compose(x12, x15)\n    x17 = compose(x12, first)\n    x18 = chain(x17, last, x16)\n    x19 = compose(x13, first)\n    x20 = power(x18, x19)\n    x21 = fork(add, last, x20)\n    x22 = fork(connect, x16, x21)\n    x23 = compose(asobject, x22)\n    x24 = fork(recolor, first, x23)\n    x25 = mapply(x24, x5)\n    O = paint(I, x25)\n    return O"], [1.1, "def solve_f1c93dcd(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, ORIGIN)\n    x8 = canvas(x7, TWO_BY_TWO)\n    x9 = branch(x6, TWO_BY_TWO, ZERO_BY_TWO)\n    x10 = branch(x6, T, F, F)\n    x11 = branch(x6, TWO, ZERO_BY_TWO)\n    x12 = initset(x11)\n    x13 = insert(x13, x12)\n    x14 = insert(x12, x13)\n    x15 = insert(x5, x14)\n    x16 = outbox(x15)\n    x17 = mapply(normalize, x16)\n    x18 = double(x5)\n    x19 = divide(x18, x17)\n    x20 = interval(ZERO, x19, ONE)\n    x21 = mapply(tojvec, x20)\n    x22 = lbind(shift, x21)\n    x23 = mapply(x22, x18)\n     x24 = fill(x8, EIGHT, x23)\n    x25 = FIVE(x2)\n    x26 = paint(x24, x25)\n    O = replace(x26, ONE, FIVE)\n    return O"], [1.1, "def solve_b3cb3ba2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =94455(I)\n    x3 = fork(subtract, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, width, height)\n    x8 = sfilter(x6, x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = ofcolor(I, x10)\n    x12 = toindices(x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, first)\n    x15 = sfilter(x11, x14)\n    x16 = difference(x11, x15)\n    x17 = fill(I, x10, x15)\n    x18 = fill(x17, x10, x16)\n    x19 = argmin(x11, size)\n    x20 = x19(x13)\n    x21 = subgrid(x20, x18)\n    x22 = width(x21)\n    x23 = subtract(x22, x3)\n    x24 = divide(x23, x6)\n    x25 = multiply(x24, x6)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x25)\n    x29 = rbind(multiply, x25)\n    x30 = apply(x29, x26)\n    x31 = pair(x28, x30)\n    x32 = sfilter(x31, first)\n    x33 = difference(x31, x32)\n    x34 = pair(x33, x32)\n    x35 = mapply(box, x34)\n    O = fill(x20, FOUR, x35)\n    return O"]], "2037f2c7": [[0.4733155843162237, "def solve_5be8281b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_15429445(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_3a5dc6be(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4923960902221772, "def solve_d53141e2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.4923960902221772, "def solve_1880188f(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.5083086331274738, "def solve_676929c7(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ZERO, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5182413270369292, "def solve_091416b6(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5182413270369292, "def solve_a8b5615e(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5264273572564281, "def solve_6b1a396d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5341705127937012, "def solve_2b1ba926(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.5341705127937012, "def solve_a3b209fb(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.5341705127937012, "def solve_ad59bd77(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5371766746404427, "def solve_fc6afe6a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5371766746404427, "def solve_741d7743(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5389342090692021, "def solve_d9574d53(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_e21c8ef8(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_1b7f4731(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_0872b4b5(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_d2edc73a(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5437278100321579, "def solve_cac52bb8(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.5437278100321579, "def solve_835c2638(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.5696230758236387, "def solve_f1e487bc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_91a333f8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_e1944ace(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_92f0942c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5748260164859528, "def solve_99f401f9(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5862614030933166, "def solve_1f2b6ec9(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5862614030933166, "def solve_dbd22fc4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5863202149434034, "def solve_964abb7e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.5870737823636375, "def solve_7d3e292a(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5951113969229912, "def solve_1acbfde3(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5980018302732818, "def solve_251f40b7(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_aa0c5081(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_de8af120(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.6076921592043171, "def solve_844fe687(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, size)\n    x3 = argmax(x1, size)\n    x4 = subgrid(x2, I)\n    x5 = subgrid(x3, I)\n    x6 = width(x4)\n    x7 = width(x5)\n    x8 = divide(x6, x7)\n    x9 = downscale(x4, x8)\n    x10 = ofcolor(x9, EIGHT)\n    O = fill(x5, ZERO, x10)\n    return O"], [0.6076921592043171, "def solve_cd98e7d1(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.6219584682628162, "def solve_4e4ca5a3(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = vsplit(x3, x4)\n    x7 = lbind(greater, FOUR)\n    x8 = compose(x7, numcolors)\n    x9 = sfilter(x6, x8)\n    x10 = merge(x9)\n    x11 = rot90(x10)\n    x12 = vsplit(x11, x5)\n    x13 = sfilter(x12, x8)\n    x14 = merge(x13)\n    x15 = rot270(x14)\n    x16 = leastcolor(x15)\n    x17 = ofcolor(x15, x16)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = mapply(x18, x17)\n    O = fill(x15, x16, x19)\n    return O"], [0.6352501765545244, "def solve_e0226c88(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6400120813164292, "def solve_a5cb9826(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.641907963212311, "def solve_26a5b14f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.641907963212311, "def solve_56153af3(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.6748161707949084, "def solve_cfd1bcc5(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6906801139687889, "def solve_995bfe5f(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6938245927181472, "def solve_ec542d63(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.7330246028575503, "def solve_2362983c(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7635614912120104, "def solve_c895f7bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7635614912120104, "def solve_4a4b0039(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7639317839144906, "def solve_acf69d5e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = other(x5, x2)\n    x7 = subgrid(x2, I)\n    x8 = ofcolor(x7, x6)\n    x9 = shift(x8, UNITY)\n    O = fill(x7, x6, x9)\n    return O"], [0.7702994509699451, "def solve_c058afa5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_c5738d81(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7702994509699451, "def solve_c80d3dcf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_0b02d5ca(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_94d3d475(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_3bf210ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7702994509699451, "def solve_db21ef9e(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7799357178954492, "def solve_a6430df6(I):\n    x1 = leastcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.7946931652854432, "def solve_1ae44d88(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.8078379565261865, "def solve_a959e18e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.8264892431277836, "def solve_effb3b6b(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.8264892431277836, "def solve_860b9b8a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.8277875214971026, "def solve_c8b42190(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8277875214971026, "def solve_b797f371(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8277875214971026, "def solve_14767cbd(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8277875214971026, "def solve_35bb5280(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8280264986187765, "def solve_c39ddcdd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = box(x5)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x3, x11)\n    O = fill(x6, x1, x12)\n    return O"], [0.8338669716268375, "def solve_abaef0fa(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, EIGHT, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.8342901164137547, "def solve_62b533c0(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(invert, halve, shape)\n    x4 = fork(combine, hfrontier, vfrontier)\n    x5 = compose(x2, vmirror)\n    x6 = fork(shift, x5, x3)\n    x7 = compose(toindices, x6)\n    x8 = lbind(mapply, x4)\n    x9 = compose(x8, toindices)\n    x10 = fork(difference, x7, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, EIGHT, x11)\n    return O"], [0.8372035288420694, "def solve_d4fd46c4(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.8376932799217021, "def solve_e43c7aee(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8446931652854431, "def solve_e059e8a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.8447284563617042, "def solve_68e31cbd(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.8477590843976248, "def solve_ea844340(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8479971796357203, "def solve_26f18fe5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.8479971796357203, "def solve_07d6fd44(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.851214269594616, "def solve_c86623b3(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(ineighbors, last, first)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = vconcat(x7, x7)\n    O = vconcat(x7, x8)\n    return O"], [0.8515686082071486, "def solve_875950cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.8519775951141462, "def solve_230bbc9a(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.8519775951141462, "def solve_b5592765(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.8559394370602877, "def solve_1d9941f5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x3)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x3)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x3, x7)\n    O = fill(x38, x3, x37)\n    return O"], [0.8562927755331531, "def solve_082390c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.861654101864071, "def solve_f1bfe458(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = replace(I, FIVE, ZERO)\n    x5 = colorfilter(x1, FIVE)\n    x6 = mapply(box, x5)\n    x7 = fill(x4, EIGHT, x6)\n    x8 = mapply(delta, x1)\n    O = fill(x7, TWO, x8)\n    return O"], [0.8619789768786953, "def solve_e7852038(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_80d9c3ab(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8626797193182597, "def solve_abb05dc0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8626797193182597, "def solve_a6f89bf1(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8626797193182597, "def solve_0843890f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8626797193182597, "def solve_2bb3f7e8(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8627265337429545, "def solve_a699314f(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.8631105583205274, "def solve_73326a1e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_90d1f57f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_02c7dbe7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8633432102880447, "def solve_3fdbc0fb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = extract(x1, x4)\n    x6 = remove(x5, x1)\n    x7 = compose(flip, even)\n    x8 = rbind(chain, first)\n    x9 = rbind(chain, last)\n    x10 = lbind(rbind, subtract)\n    x11 = lbind(x8, x7)\n    x12 = lbind(x9, x7)\n    x13 = chain(x11, x10, uppermost)\n    x14 = chain(x12, x10, leftmost)\n    x15 = lbind(fork, both)\n    x16 = fork(x15, x13, x14)\n    x17 = fork(sfilter, toindices, x16)\n    x18 = mapply(x17, x6)\n    x19 = color(x5)\n    O = fill(I, x19, x18)\n    return O"], [0.863678348633302, "def solve_7f75dedf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863678348633302, "def solve_02d15cb0(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.8637716288947456, "def solve_f9ef4c8c(I):\n    x1 = objects(I, T, F, F)\n    x2 = ofcolor(I, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x1, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [0.8638179923732853, "def solve_0181d802(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.8638701955087361, "def solve_0cabc609(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = rbind(hmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O"], [0.8638701955087361, "def solve_f16d40d2(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_57795fad(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmax(x2, size)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = product(x2, x4)\n    x6 = fork(subtract, first, last)\n    x7 = compose(x6, size)\n    x8 = fork(shift, first, x7)\n    x9 = mapply(x8, x5)\n    O = paint(I, x9)\n    return O"], [0.8638701955087361, "def solve_59323d8e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_6e755334(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = replace(x4, ZERO, TWO)\n    x6 = asobject(x5)\n    x7 = shift(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8638701955087361, "def solve_e9cbe983(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.8638701955087361, "def solve_96585510(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.8638701955087361, "def solve_d03cf2ce(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.8638823704010644, "def solve_6f9e6245(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(colorcount, TWO)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [0.863900032004738, "def solve_e02043a3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.863900032004738, "def solve_fb287640(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.863900032004738, "def solve_9eb69a48(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.8639438916538609, "def solve_93b184c3(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_e7623402(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639835741935432, "def solve_0356a817(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8639835741935432, "def solve_733df619(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_d1ac451b(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_a5f9538c(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_deb73ade(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_6d994af9(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.864145266847158, "def solve_5b80c15c(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.864145266847158, "def solve_54598365(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.8642201225067311, "def solve_45c99b45(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8643350082204696, "def solve_28669716(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643350082204696, "def solve_0c50eb15(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643386284959661, "def solve_425f2002(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_25f3dd02(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_8b0d243d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8644400334286123, "def solve_7d68ceaf(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8656237858337551, "def solve_345c50f5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.8658411233895729, "def solve_66ab4fe7(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = leftmost(x3)\n    x6 = interval(x5, TEN, TWO)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x5)\n    x11 = add(x5, THREE)\n    x12 = interval(x10, TEN, FOUR)\n    x13 = interval(x11, TEN, FOUR)\n    x14 = lbind(astuple, NINE)\n    x15 = apply(tojvec, x12)\n    x16 = apply(x14, x13)\n    x17 = fill(I, x4, x9)\n    x18 = fill(x17, FIVE, x15)\n    O = fill(x18, FIVE, x16)\n    return O"], [0.8665000955130503, "def solve_51d2c83e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, SIX, x4)\n    return O"], [0.8675050263928483, "def solve_883bdd44(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.8675050263928483, "def solve_80dc8dc4(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.895840777338116, "def solve_b2ec8f1e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [1.0, "def solve_4621c4f0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = mapply(vfrontier, x5)\n    x7 = underfill(x3, EIGHT, x6)\n    x8 = hconcat(x7, x7)\n    O = vconcat(x8, x7)\n    return O"], [1.0, "def solve_f2bf26f8(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = trim(x3)\n    return O"], [1.0, "def solve_2f5bf4d0(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_68580274(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(size, x1)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(x3)\n    x9 = canvas(x7, x8)\n    x10 = lbind(prapply, connect)\n    x11 = fork(x10, x4, x4)\n    x12 = compose(merge, x11)\n    x13 = fork(recolor, identity, x12)\n    x14 = mapply(x13, x9)\n    O = paint(x9, x14)\n    return O"], [1.0, "def solve_3c17d6a9(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_029fbbeb(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = rbind(subgrid, I)\n    x4 = apply(x3, x2)\n    x5 = merge(x4)\n    O = hmirror(x5)\n    return O"], [1.0, "def solve_6b911817(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_d008b209(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = height(x3)\n    x7 = width(x3)\n    x8 = normalize(x4)\n    x9 = divide(x6, x7)\n    x10 = downscale(x3, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = Fbind(multiply, x5)\n    x13 = add(x12, TWO)\n    x14 = matcher(first, ZERO)\n    x15 = compose(flip, x14)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(occurrences, x12)\n    x18 = compose(x17, x16)\n    x19 = compose(x17, x16)\n    x20 = fork(lbind,positive, size)\n    x21 = lbind(rbind, sfilter)\n    x22 = chain(x20, x21, x16)\n    x23 = fork(argmin, x22, x19)\n    x24 = fork(other, palette, x23)\n    x25 = compose(x24, normalize)\n    x26 = compose(x23, x25)\n    x27 = fork(mapply, x26, x26)\n    x28 = mapply(x27, x11)\n    O = paint(x10, x28)\n    return O"], [1.0, "def solve_b9090884(I):\n    x1 = partition(I)\n    x2 = fork(contained, height, width)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = remove(x4, x3)\n    x6 = argmin(x5, size)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x10 = color(x8)\n    x11 = fill(I, SIX, x7)\n    x12 = fill(x11, x10, x8)\n    x13 = ofcolor(x12, x9)\n    x14 = normalize(x13)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = paint(x12, x15)\n    x17 = shift(x16, UNITY)\n    x18 = fork(combine, hfrontier, vfrontier)\n    x19 = x18(x17)\n    x20 = difference(x17, x19)\n    x21 = fill(x16, x9, x20)\n    O = fill(x21, x10, x19)\n    return O"], [1.0, "def solve_7ebf1c26(I):\n    x1 = compose(size, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = objects(x3, T, F, F)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = color(x7)\n    x10 = combine(x6, x9)\n    x11 = paint(x3, x10)\n    x12 = first(x5)\n    x13 = sizefilter(x5, x12)\n    x14 = merge(x13)\n    x15 = fill(x11, x9, x14)\n    x16 = shape(x15)\n    x17 = canvas(x9, x16)\n    x18 = hconcat(x15, x17)\n    x19 = objects(x18, T, F, F)\n    x20 = colorfilter(x19, x8)\n    x21 = rbind(adjacent, x4)\n    x22 = sfilter(x20, x21)\n    x23 = rbind(adjacent, x7)\n    x24 = sfilter(x22, x23)\n    x25 = ofcolor(x18, x8)\n    x26 = ofcolor(x18, x7)\n    x27 = combine(x25, x26)\n    O = fill(x15, x8, x27)\n    return O"], [1.0, "def solve_c23fb044(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = matcher(first, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = mostcommon(x8)\n    x10 = mostcolor(I)\n    x11 = palette(I)\n    x12 = remove(x10, x11)\n    x13 = other(x12, x9)\n    x14 = ofcolor(I, x13)\n    x15 = prapply(connect, x14, x14)\n    x16 = lbind(greater, x13)\n    x17 = compose(x16, size)\n    x18 = sfilter(x15, x17)\n    x19 = mapply(neighbors, x18)\n    x20 = difference(x19, x15)\n    x21 = fill(I, x13, x20)\n    x22 = leastcolor(I)\n    x23 =recolor(x22, x21)\n    x24 = mapply(neighbors, x24)\n    O = paint(x21, x24)\n    return O"], [1.0, "def solve_0f085b0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x2)\n    x5 = paint(I, x4)\n    x6 = replace(x5, EIGHT, ONE)\n    O = replace(x6, TWO, SIX)\n    return O"], [1.0, "def solve_1b73cfe8(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = palette(I)\n    x8 = lrcorner(x3)\n    x9 = add(x8, UNITY)\n    x10 = toindices(x3)\n    x11 = center(x10)\n    x12 = ofcolor(I, x5)\n    x13 = lrcorner(x12)\n    x14 = add(x13, UP_RIGHT)\n    x15 = toindices(x14)\n    x16 = center(x15)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x12)\n    x19 = fill(I, x5, x18)\n    x20 = ofcolor(x19, FIVE)\n    O = fill(x19, ZERO, x20)\n    return O"], [1.0, "def solve_940140e7(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = rbind(subgrid, I)\n    x5 = fork(equality, identity, rot90)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    x8 = center(x7)\n    x9 = subgrid(x3, I)\n    x10 = hmirror(x9)\n    x11 = objects(x10, F, T, T)\n    x12 = first(x11)\n    x13 = objects(x10, T, T, T)\n    x14 = rbind(subgrid, x10)\n    x15 = compose(x5, x14)\n    x16 = extract(x13, x15)\n    x17 = center(x16)\n    x18 = subtract(x8, x17)\n    x19 = shift(x12, x18)\n    x20 = paint(I, x19)\n    x21 = objects(x20, F, T, T)\n    x22 = first(x21)\n    x23 = subgrid(x22, x20)\n    x24 = vmirror(x23)\n    x25 = objects(x24, F, T, T)\n    x26 = first(x25)\n    x27 = objects(x24, T, T, T)\n    x28 = color(x7)\n    x29 = matcher(color, x28)\n    x30 = extract(x27, x29)\n    x31 = center(x30)\n    x32 = subtract(x8, x31)\n    x33 = shift(x26, x32)\n    O = paint(x20, x33)\n    return O"], [1.0, "def solve_6ba8a993(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_c6274808(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = mapply(toindices, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, EIGHT, x9)\n    O = replace(x10, x2, ZERO)\n    return O"], [1.0, "def solve_9d16571b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_95e6f6ac(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = divide(x4, x5)\n    x7 = width(x3)\n    x8 = interval(x6, x7, ONE)\n    x9 = interval(x6, x5, ONE)\n    x10 = apply(tojvec, x8)\n    x11 = lbind(shift, x3)\n    x12 = mapply(x11, x10)\n    x13 = fill(x3, FOUR, x12)\n    x14 = replace(x13, FIVE, ZERO)\n    O = downscale(x14, x5)\n    return O"], [1.0, "def solve_8a804832(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_e3fc99fe(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = difference(x1, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = compose( backdrop, outbox)\n    x8 = fork(recolor, x7, backdrop)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_3c914a6b(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = lbind(apply, x3)\n    x5 = chain(even, maximum, x4)\n    x6 = lbind(sfilter, x1)\n    x7 = fork(add, first, last)\n    x8 = rbind(remove, x2)\n    x9 = compose(center, last)\n    x10 = fork(subtract, first, x9)\n    x11 = compose(x5, x10)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(argmin, x2)\n    x14 = chain(x7, x4, x10)\n    x15 = lbind(lbind, astuple)\n    x16 = lbind(rbind, astuple)\n    x17 = lbind(compose, x11)\n    x18 = lbind(compose, x14)\n    x19 = compose(x18, x15)\n    x20 = compose(x18, x16)\n    x21 = compose(x13, x19)\n    x22 = rbind(compose, x21)\n    x23 = lbind(lbind, valmin)\n    x24 = rbind(compose, x19)\n    x25 = chain(x24, x23, x8)\n    x26 = lbind(fork, greater)\n    x27 = fork(x26, x25, x20)\n    x28 = chain(x6, x17, x16)\n    x29 = chain(x6, x22, x12)\n    x30 = fork(intersection, x28, x29)\n    x31 = compose(x6, x27)\n    x32 = fork(intersection, x30, x31)\n    x33 = fork(recolor, color, x32)\n    x34 = mapply(x33, x2)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_287c9d73(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_9d6d871a(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = increment(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(shift, NEG_UNITY)\n    x7 = canvas(ZERO, x6)\n    x8 = paint(x7, x5)\n    x9 = rot90(x8)\n    x10 = rot180(x8)\n    x11 = rot270(x8)\n    x12 = hconcat(x9, x9)\n    x13 = hconcat(x10, x12)\n    O = vconcat(x13, x11)\n    return O"], [1.0, "def solve_920c7e1c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_147ab61e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = valmax(x4, size)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x4, x6)\n    x8 = lbind(colorfilter, x4)\n    x9 = compose(e179, x8)\n    x10 = argmin(x7, x9)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = hfrontier(x11)\n    x14 = mapply(x9, x13)\n    x15 = fill(I, x3, x14)\n    x16 = frontiers(x15)\n    x17 = sfilter(x16, x6)\n    x18 = size(x17)\n    x19 = positive(x18)\n    x20 = branch(x19, dmirror, identity)\n    x21 = x20(x15)\n    x22 = x20(x24)\n    x23 = x20(x22)\n    x24 = x23(x20)\n    x25 = x24(x23)\n    x26 = width(x25)\n    x27 = increment(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(x28, x27)\n    x30 = pair(x29, x29)\n    x31 = lbind(shift, x10)\n    x32 = mapply(x31, x30)\n    x33 = paint(x15, x32)\n    O = x20(x33)\n    return O"], [1.0, "def solve_7226650a(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = astuple( appearance64, x7)\n    x9 = llcorner(x7)\n    x10 = urcorner(x7)\n    x11 = index(I, x9)\n    x12 = equality(x11, x7)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x15, x14)\n    x16 = apply(last, x15)\n    x17 = remove(x16, x15)\n    x18 = compose(last, last)\n    x19 = rbind(argmin, x18)\n    x20 = compose(first, x19)\n    x21 = compose(other, x19)\n    x22 = x20(x17)\n    x23 = x20(x20)\n    x24 = x21(x23)\n    x25 = x21(x24)\n    x26 = llcorner(x15)\n    x27 = hfrontier(x26)\n    x28 = add(x22, x27)\n    x29 = shoot(x28, UP_RIGHT)\n    x30 = branch(x12, vmirror, hmirror)\n    x31 = x30(x10)\n    x32 = x30(x16)\n    x33 = x31(x32)\n    x34 = x30(x25)\n    x35 = x30(x24)\n    x36 = combine(x29, x34)\n    x37 = combine(x31, x35)\n    x38 = combine(x36, x37)\n    O = fill(I, x4, x38)\n    return O"], [1.0, "def solve_b6261152(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x2, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    O = fill(I, EIGHT, x9)\n    return O"], [1.0, "def solve_1fec6ba0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = other(x3, FOUR)\n    x5 = color(x4)\n    x6 = subgrid(x4, I)\n    x7 = lbind(insert, DOWN)\n    x8 = compose(lrcorner, asindices)\n    x9 = chain(x7, initset, x8)\n    x10 = fork(subgrid, x9, identity)\n    x11 = apply(x10, x5)\n    x12 = merge(x11)\n    x13 = chain(first, totuple, halve)\n    x14 = lbind(apply, x13)\n    x15 = lbind(chain, x14)\n    x16 = lbind(x15, toindices)\n    x17 = lbind(lbind, shift)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x17, x18, x16)\n    x20 = fork(mapply, x19, x15)\n    x21 = fork(recolor, x20, identity)\n    x22 = mapply(x21, x4)\n    O = paint(x6, x22)\n    return O"], [1.0, "def solve_25ad83ca(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = fill(I, TWO, x4)\n    x6 = shape(x2)\n    x7 = halve(x6)\n    x8 = invert(x7)\n    x9 = shift(x5, x8)\n    x10 = shift(x9, x7)\n    x11 = apply(normalize, x10)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = apply(toivec, x13)\n    x15 = mpapply(shift, x11, x14)\n    x16 = canvas(ZERO, x6)\n    x17 = paint(x16, x15)\n    O = rot180(x17)\n    return O"], [1.0, "def solve_e7526aaa(I):\n    x1 = objects(I, T, F, T)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(equality, toivec, ONE)\n    x5 = pair(x3, x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, tojvec)\n    x8 = interval(ZERO, x2, ONE)\n    x9 = pair(x8, x8)\n    x10 = lbind(apply, last)\n    x11 = compose(x10, last)\n    x12 = fork(ofcolor, x7, x11)\n    x13 = mapply(x12, x9)\n    O = fill(I, EIGHT, x13)\n    return O"], [1.0, "def solve_eb1d0d2d(I):\n    x1 = compose(width, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = fork(multiply, height, width)\n    x5 = compose(decrement, x4)\n    x6 = fork(equality, size, x5)\n    x7 = fork(difference, toindices, box)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x2, x9)\n    x11 = center(x10)\n    x12 = difference(x3, x10)\n    x13 = merge(x12)\n    x14 = toindices(x13)\n    x15 = normalize(x13)\n    x16 = lbind(shift, x15)\n    x17 = objects(x14, T, F, T)\n    x18 = color(x10)\n    x19 = palette(x18)\n    x20 = remove(x16, x19)\n    x21 = lbind(shift, x17)\n    x22 = mapply(x21, x20)\n    x23 = color(x3)\n    x24 = colorfilter(x17, x23)\n    x25 = rbind(intersection, x14)\n    x26 = argmin(x24, size)\n    x27 = rbind(shoot, x26)\n    x28 = mapply(x27, x22)\n    x29 = fill(x17, x23, x28)\n    x30 = mapply(x21, x22)\n    x31 = fill(x29, x23, x30)\n    x32 = mapply(delta, x26)\n    O = fill(x31, x23, x32)\n    return O"], [1.0, "def solve_9f58567f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_5cf7a861(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, TWO)\n    x3 = colorfilter(x1, TWO)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, EIGHT, x5)\n    O = fill(x7, TWO, x6)\n    return O"], [1.0, "def solve_2ea4a63d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_a06400ca(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_98e5f7cc(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = fork(equality, height, width)\n    x4 = extract(x2, x3)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = rbind(greater, THREE)\n    x8 = rbind(toobject, I)\n    x9 = rbind(colorcount, x6)\n    x10 = chain(x8, ineighbors, last)\n    x11 = chain(x7, x9, x10)\n    x12 = sfilter(x5, x11)\n    x13 = outbox(x12)\n    x14 = backdrop(x13)\n    x15 = cover(I, x5)\n    x16 = gravitate(x14, x4)\n    x17 = shift(x14, x16)\n    O = fill(x15, x6, x17)\n    return O"], [1.0, "def solve_a2a3ccd4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(outbox, TWO)\n    x4 = initset(x3)\n    x5 = chain(backdrop, inbox, x4)\n    x6 = lbind(mapply, x5)\n    x7 = lbind(recolor, TWO)\n    x8 = compose(x6, outbox)\n    x9 = chain(x7, x8, x7)\n    x10 = lbind(remove, x2)\n    x11 = chain(x10, x9, x7)\n    x12 = lbind(ofcolor, I)\n    x13 = chain(x12, palette, x11)\n    x14 = fork(combine, x11, x13)\n    x15 = fork(position, x14, x4)\n    x16 = compose(toivec, x15)\n    x17 = fork(shift, x16, ulcorner)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f0964ba7(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, ZERO)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [1.0, "def solve_4a6879b5(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = extract(x3, x3)\n    x5 = color(x4)\n    x6 = subgrid(x4, I)\n    x7 = compose(hmirror, vmirror)\n    x8 = rbind(equality, x7)\n    x9 = argmin(x6, x8)\n    x10 = trim(x9)\n    x11 = x10(x9)\n    x12 = x11(x6)\n    x13 = width(x12)\n    x14 = asobject(x12)\n    x15 = hperiod(x14)\n    x16 = height(x11)\n    x17 = astuple(x16, x13)\n    x18 = ulcorner(x4)\n    x19 = crop(x11, x18, x17)\n    x20 = rot90(x19)\n    x21 = double(x13)\n    x22 = rbind(multiply, x21)\n    x23 = apply(x22, x20)\n    x24 = lbind(shift, x11)\n    x25 = mapply(x24, x23)\n    O = paint(x20, x25)\n    return O"], [1.0, "def solve_690aeaf2(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = fork(equality, identity, rot90)\n    x6 = compose(equality, x5)\n    x7 = extract(x1, x6)\n    x8 = first(x7)\n    x9 = rot90(x8)\n    x10 = color(x9)\n    x11 = rot180(x9)\n    x12 = lefthalf(x11)\n    x13 = righthalf(x11)\n    x14 = ofcolor(x13, x10)\n    x15 = toindices(x14)\n    x16 = difference(x15, x15)\n    x17 = fill(x13, THREE, x16)\n    x18 = lbind(index, x17)\n    x19 = compose( neighbors, last)\n    x20 = fork(recolor, first, x19)\n    x21 = mapply(x20, x16)\n    O = paint(x17, x21)\n    return O"], [1.0, "def solve_d573d5ad(I):\n    x1 = objects(I, T, F, F)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = difference(x1, x3)\n    x5 = rbind(toobject, I)\n    x6 = chain(leastcolor, x5, delta)\n    x7 = rbind(shift, UP)\n    x8 = rbind(argmax, rightmost)\n    x9 = chain(x7, x8, x6)\n    x10 = fork(combine, delta, x9)\n    x11 = mapply(x10, x4)\n    O = underfill(I, EIGHT, x11)\n    return O"], [1.0, "def solve_7bc3a0a4(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_0a9372be(I):\n    x1 = objects(I, T, F, T)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = objects(x4, T, F, T)\n    x6 = order(x5, uppermost)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x10 = color(x8)\n    x11 = subgrid(x7, x4)\n    x12 = x10(x11)\n    x13 = replace(x12, x9, x10)\n    x14 = replace(x13, x10, x5)\n    x15 = compress(x14)\n    x16 = ulcorner(x7)\n    x17 = halve(x16)\n    x18 = shift(x15, x17)\n    O = fill(x13, x9, x18)\n    return O"], [1.0, "def solve_ff988907(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = mfilter(x2, x5)\n    x7 = palette(I)\n    x8 = rbind(toobject, I)\n    x9 = colorfilter(x7, TWO)\n    x10 = sfilter(x9, x5)\n    x11 = apply(numcolors, x10)\n    x12 = size(x11)\n    x13 = equality(x12, ONE)\n    x14 = branch(x13, identity, outbox)\n    x15 = x14(I)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, TWO)\n    x18 = compose(normalize, toindices)\n    x19 = x18(x17)\n    x20 = initset(x19)\n    x21 = insert(x8, x20)\n    x22 = objects(x15, T, F, T)\n    x23 = colorfilter(x22, TWO)\n    x24 = rbind(adjacent, x2)\n    x25 = rbind(adjacent, x11)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, positive, initset)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_c8426970(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_1f634098(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_3d9f0eed(I):\n    x1 = rot180(I)\n    x2 = objects(x1, T, F, T)\n    x3 = astuple(FOUR, FOUR)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = canvas(x5, x4)\n    x7 = paint(x6, x4)\n    x8 = fgpartition(x7)\n    x9 = merge(x8)\n    x10 = cover(x7, x9)\n    x11 = fill(x10, TWO, x9)\n    O = paint(x11, x4)\n    return O"], [1.0, "def solve_6807ed78(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(rbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = intersection(x7, x21)\n    O = fill(x17, EIGHT, x22)\n    return O"], [1.0, "def solve_2e272533(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, EIGHT, x9)\n    x11 = fill(x10, TWO, x8)\n    O = fill(x11, SIX, x9)\n    return O"], [1.0, "def solve_c8820c79(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [1.0, "def solve_5aef1807(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, other)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_b33a1f45(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, replace, x3)\n    x8 = objects(x7, T, F, T)\n    x9 = mapply(d687, x8)\n    O = replace(x7, x5, x9)\n    return O"], [1.0, "def solve_e62800d4(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = mapply(delta, x2)\n    x4 = first(x3)\n    x5 = toindices(x4)\n    x6 = box(x5)\n    x7 = center(x5)\n    x8 = hfrontier(x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = hmirror(x9)\n    x11 = vmirror(x10)\n    x12 = combine(x8, x11)\n    x13 = merge(x12)\n    x14 = center(x13)\n    x15 = subtract(x14, x7)\n    x16 = multiply(x15, x5)\n    x17 = add(x16, x3)\n    x18 = combine(x7, x17)\n    x19 = fill(x9, NEG_ONE, x18)\n    O = fill(x19, vmirror, x15)\n    return O"], [1.0, "def solve_10122167(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(initset, center, dneighbors)\n    x5 = fork(rapply, x4, identity)\n    x6 = compose(first, x5)\n    x7 = compose(backdrop, x6)\n    x8 = fork(difference, x7, toindices)\n    x9 = mapply(x8, x1)\n    O = fill(x3, EIGHT, x9)\n    return O"], [1.0, "def solve_4cfc8237(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = subgrid(x4, I)\n    x7 = width(x6)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = subgrid(x5, x6)\n    x10 = height(x9)\n    x11 = halve(x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = lbind(multiply, x12)\n    x15 = apply(x14, x13)\n    x16 = lbind(shift, x4)\n    x17 = mapply(x16, x15)\n    x18 = fill(x6, FOUR, x17)\n    x19 = canvas(FIVE, x8)\n    O = fill(x19, ZERO, x3)\n    return O"], [1.0, "def solve_a9043dc5(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = objects(I, T, F, T)\n    x4 = order(x3, size)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    O = hmirror(x8)\n    return O"], [1.0, "def solve_ca30a1df(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = square(TWO, TWO)\n    x4 = crop(x3, to_ORIGIN, x2)\n    x5 = vmirror(x4)\n    x6 = hconcat(x5, x4)\n    x7 = hconcat(x6, x4)\n    x8 = vconcat(x7, x7)\n    O = vconcat(x8, x7)\n    return O"], [1.0, "def solve_df107822(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, EIGHT)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_457cdcbb(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = height(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_e2245cb7(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_7d80d6d8(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.1, "def solve_a11f7a51(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_a7a6be9d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_17a07571(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_0deb0bcd(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_16e04911(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_108edfe2(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = normalize(x5)\n    x9 = remove(x6, x7)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = mostcolor(I)\n    x13 = shape(x5)\n    x14 = canvas(x12, x13)\n    x15 = normalize(x5)\n    x16 = occurrences(x14, x15)\n    x17 = first(x16)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(dmirror, dmirror, merge)\n    x20 = x19(x2)\n    x21 = fork(shift, identity, x20)\n    x22 = canvas(x6, x21)\n    x23 = paint(x22, x2)\n    x24 = height(x2)\n    x25 = frontiers(x2)\n    x26 = colorfilter(x25, x6)\n    x27 = toindices(x2)\n    x28 = toindices(x2)\n    x29 = lbind(shift, x27)\n    x30 = toindices(x2)\n    x31 = rbind(intersection, x30)\n    x32 = chain(size, x29, x31)\n    x33 = compose(size, x32)\n    x34 = fork(equality, x33, x24)\n    x35 = chain(positive, size, x34)\n    x36 = sfilter(x26, x35)\n    x37 = objects(x36, x32, rot90)\n    x38 = colorfilter(x37, x6)\n    x39 = sfilter(x38, x34)\n    x40 = ofcolor(x39, x13)\n    "], [1.1, "def solve_0cc8e928(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = height(x2)\n    x4 = normalize(x2)\n    x5 = width(x2)\n    x6 = divide(x3, x5)\n    x7 = upscale(x4, x6)\n    x8 = normalize(x7)\n    x9 = lbind(shift, x8)\n    x10 = height(I)\n    x11 = divide(x10, x3)\n    x12 = width(I)\n    x13 = divide(x12, x3)\n    x14 = astuple(x11, x13)\n    x15 = maximum(x14)\n    x16 = increment(x15)\n    x17 = interval(ONE, x16, ONE)\n    x18 = astuple(x17, x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(shift, x9)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, x21, outbox)\n    x23 = lbind(apply, x22)\n    x24 = lbind(ofcolor, I)\n    x25 = palette(I)\n    x26 = compose(x24, x25)\n    x27 = power(x26, TWO)\n    x28 = lbind(mapply, x27)\n    x29 = lbind(ofcolor, I)\n    x30 = compose(x28, x29)\n    x31 = fork(difference, x30, x22)\n    x32 = lbind(recolor, FIVE)\n    x33 = compose(x32, x31)\n    x34 = fork(paint, identity, x33)\n    x35 = chain(x38, x34, x29)\n    x36 = astuple(x15, x13)\n    x37 = astuple(x24, x13)\n    x38 = initset(x37)\n    x39 = insert(x36, x38)\n    x40 = insert(x28, x39)"], [1.1, "def solve_a2316f1c(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_37403352(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_6d637720(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_42982e30(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_7934467d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = fill(x6, TWO, x3)\n    x8 = objects(x7, T, F, T)\n    x9 = power(increment, FIVE)\n    x10 = rbind(remove, x9)\n    x11 = chain(x10, toindices, x8)\n    x12 = chain(x00000000, x11, x9)\n    x13 = first(x12)\n    x14 = center(x13)\n    x15 = dneighbors(x14)\n    x16 = insert(x14, x15)\n    x17 = center(x16)\n    x18 = initset(x17)\n    x19 = cover(x7, x18)\n    x20 = toindices(x3)\n    x21 = rbind(contained, x20)\n    x22 = compose(x21, last)\n    x23 = sfilter(x16, x22)\n    x24 = center(x23)\n    x25 = matcher(last, x24)\n    x26 = sfilter(x16, x25)\n    x27 = center(x26)\n    x28 = matcher(first, x27)\n    x29 = sfilter(x16, x28)\n    x30 = center(x29)\n    x31 = matcher(first, x30)\n    x32 = sfilter(x16, x31)\n    x33 = center(x32)\n    x34 = matcher(first, x33)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x16, x35)\n    x37 = center(x36)\n    x38 = initset(x37)\n    x39 = sfilter(x16, x38)\n    x40 = fill(x35, EIGHT, x39)\n    x"], [1.1, "def solve_bbfe24bd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_64b55c55(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_adfc9638(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    x7 = uppermost(x6)\n    x8 = leftmost(x6)\n    x9 = height(x3)\n    x10 = width(x3)\n    x11 = astuple(x9, x10)\n    x12 = add(x11, TWO)\n    x13 = crement(x12)\n    x14 = urcorner(x6)\n    x15 = lbind(shift, x6)\n    x16 = rbind(multiply, x15)\n    x17 = apply(x16, x14)\n    x18 = bottomhalf(x7)\n    x19 = mapply(x17, x18)\n    x20 = hmirror(x19)\n    x21 = papply(x17, x20)\n    x22 =400(x21)\n    x23 = replace(I, THREE, NEG_ONE)\n    x24 = ofcolor(x23, ZERO)\n    x25 = subgrid(x24, x23)\n    x26 = interval(x25, x25, ONE)\n    x27 = rbind(multiply, x13)\n    x28 = apply(x27, x26)\n    x29 = rbind(multiply, x11)\n    x30 = apply(x29, x28)\n    x31 = pair(x26, x30)\n    x32 = mapply(x27, x31)\n    x33 = fill(x23, ONE, x32)\n    x34 = ofcolor(x33, THREE)\n    x35 = subgrid(x34, x33)\n    x36 = matcher(first, ZERO)\n    x37 = rbind(sfilter, x36)\n    x38 = lbind(upscale, x37)\n    x39 = chain(x38, halve, width"], [1.1, "def solve_e2592cb3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_2334d14f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_b376ac96(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_a35ebc22(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_e0e5a1f7(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = lbind(apply, x3)\n    x5 = chain(even, maximum, x4)\n    x6 = lbind(sfilter, x1)\n    x7 = fork(add, first, last)\n    x8 = rbind(remove, x2)\n    x9 = compose(center, last)\n    x10 = fork(subtract, first, x9)\n    x11 = compose(x5, x10)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(argmin, x2)\n    x14 = chain(x7, x4, x10)\n    x15 = lbind(lbind, astuple)\n    x16 = lbind(rbind, astuple)\n    x17 = lbind(compose, x11)\n    x18 = lbind(compose, x14)\n    x19 = compose(x18, x15)\n    x20 = compose(x18, x16)\n    x21 = compose(x13, x19)\n    x22 = rbind(compose, x21)\n    x23 = lbind(lbind, valmin)\n    x24 = rbind(compose, x19)\n    x25 = chain(x24, x23, x8)\n    x26 = lbind(fork, greater)\n    x27 = fork(x26, x25, x22)\n    x28 = lbind(compose, x11)\n    x29 = lbind(rbind, astuple)\n    x30 = lbind(compose, x14)\n    x31 = chain(x29, x30, x7)\n    x32 = fork(sfilter, x27, x31)\n    x33 = fork(difference, x32, identity)\n    x34 = lbind(rbind, valmin)\n    x35 = rbind(compose, x29)\n    x36 = lbind(rbind, sfilter)\n    x37 = lbind(compose,"], [1.1, "def solve_96726c44(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = other(x9, x11)\n    x13 = colorfilter(x1, x12)\n    x14 = outbox(x13)\n    x15 = backdrop(x14)\n    x16 = subgrid(x15, I)\n    x17 = height(x16)\n    x18 = increment(x17)\n    x19 = width(x16)\n    x20 = divide(x18, x19)\n    x21 = increment(x20)\n    x22 = interval(x9, x21, ONE)\n    x23 = scatteredly(x22, x16)\n    x24 = repeat(x16, x23)\n    x25 = combine(x16, x24)\n    x26 = compose(decrement, ulcorner)\n    x27 = lbind(add, x26)\n    x28 = height(x12)\n    x29 = interval(x9, x28, ONE)\n    x30 = pair(x25, x29)\n    x31 = apply(x27, x30)\n    x32 = mapply(x28, x31)\n    x33 = ofcolor(x16, x12)\n    x34 = recolor(x12, x33)\n    x35 = shift(x34, x16)\n    x36 = lbind( mapply, x29)\n    x37 = lbind(shift, x33)\n    x38 = compose(x36, x37)\n    x39 = fork(paint, identity, x38)\n    x40 = mapply(x39, x"], [1.1, "def solve_b8f3be59(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(TEN, TEN)\n    x3 = rbind(contained, x2)\n    x4 = compose(flip, x3)\n    x5 = extract(x1, x4)\n    x6 = UPmost(x5)\n    x7 = lowermost(x5)\n    x8 = uppermost(x5)\n    x9 = leftmost(x5)\n    x10 = astuple(x6, x7)\n    x11 = minimum(x10)\n    x12 = maximum(x10)\n    x13 = astuple(x11, x12)\n    x14 = astuple(x13, x8)\n    x15 = astuple(x14, x9)\n    x16 = astuple(x15, x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = merge(x1)\n    x20 = lbind(colorcount, x19)\n    x21 = argmax(x18, x20)\n    x22 = rbind(colorcount, x21)\n    x23 = argmin(x2, x22)\n    x24 = x23(x4)\n    x25 = x23(x24)\n    x26 = x23(x8)\n    x27 = x23(x4)\n    x28 = combine(x26, x27)\n    x29 = fill(I, x23, x28)\n    x30 = hmirror(x29)\n    x31 = papply(pair, x29, x30)\n    x32 = rbind(apply, x31)\n    x33 = apply(x32, x31)\n    x34 = argmax(x30, x33)\n    x35 = x34(x34)\n    x36 = ofcolor(x35, x21)\n    x37 = rbind(contained, x36)\n    x38 = apply(x37, x32)\n    x39 = rbind(sfilter, x38)\n    x40 = lbind(recolor, x21"], [1.1, "def solve_2cfe89a8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_9c3f9ee0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_82b1d13f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_c5b3f9ca(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_2168334a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_38beebe0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = first(x2)\n    x4 = normalize(x3)\n    x5 = last(x2)\n    x6 = normalize(x5)\n    x7 = color(x4)\n    x8 = color(x6)\n    x9 = toindices(x4)\n    x10 = toindices(x6)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = lbind(shift, x9)\n    x14 = lbind(shift, x10)\n    x15 = compose(x13, first)\n    x16 = compose(x14, last)\n    x17 = fork(intersection, x15, x16)\n    x18 = compose(size, x17)\n    x19 = compose(x13, first)\n    x20 = compose(x14, last)\n    x21 = fork(combine, x19, x20)\n    x22 = compose(x12, x21)\n    x23 = matcher(x18, ZERO)\n    x24 = fork(both, x23, x22)\n    x25 = valmax(x2, height)\n    x26 = valmax(x2, width)\n    x27 = interval(ZERO, x25, ONE)\n    x28 = interval(ZERO, x26, ONE)\n    x29 = product(x27, x28)\n    x30 = product(x29, x29)\n    x31 = argmax(x30, x24)\n    x32 = first(x31)\n    x33 = shift(x9, x32)\n    x34 = last(x31)\n    x35 = shift(x10, x34)\n    x36 = combine(x33, x35)\n    x37 = shape(x36)\n    x38 = canvas(x8, x37)\n    x39 = ulcorner(x36)\n    x40 = invert(x39)\n    x41 = shift(x33, x40"], [1.1, "def solve_cb28e6cf(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_84914aaa(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_352c7935(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_b09d4d06(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x7)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = normalize(x4)\n    x24 = paint(x22, x23)\n    x25 = normalize(x7)\n    x26 = width(x7)\n    x27 = subtract(x19, x26)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = normalize(x10)\n    x32 = height(x10)\n    x33 = subtract(x16, x32)\n    x34 = toivec(x33)\n    x35 = shift(x31, x34)\n    x36 = paint(x30, x35)\n    x37 = normalize(x13)\n    x38 = shape(x13)\n    x39 = subtract(x20, x38)\n    x40 = shift(x37, x39)\n    O = paint(x36, x40"], [1.1, "def solve_8bbe3947(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_3a1d1854(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(equality, TWO)\n    x4 = fork(multiply, height, width)\n    x5 = fork(equality, x4, x3)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = cover(I, x9)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = objects(x10, T, T, F)\n    x14 = colorfilter(x13, TWO)\n    x15 = subgrid(x9, I)\n    x16 = subgrid(x12, I)\n    x17 = width(x16)\n    x18 = subtract(x17, THREE)\n    x19 = lowermost(x9)\n    x20 = matcher(last, x19)\n    x21 = rightmost(x9)\n    x22 = matcher(last, x21)\n    x23 = sfilter(x13, x20)\n    x24 = difference(x13, x23)\n    x25 = merge(x24)\n    x26 = cover(x10, x25)\n    x27 = subgrid(x9, x26)\n    x28 = subgrid(x12, x27)\n    x29 = height(x28)\n    x30 = subtract(x29, THREE)\n    x31 = lowermost(x9)\n    x32 = matcher(first, x31)\n    x33 = rightmost(x9)\n    x34 = matcher(first, x33)\n    x35 = sfilter(x24, x32)\n    x36 = merge(x35)\n    x37 = fill(x10, TWO, x36)\n    x38 = ofcolor(x37, TWO)\n    x39 = asindices(x38)\n    x40 = shift(x39, LEFT)\n    x41 = vmirror(x37)\n    x42 = hmir"], [1.1, "def solve_d5ad7a58(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b3f8721d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_1750b1ff(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_29965df4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = plot(I, x8)\n    x13 = objects(x12, F, F, T)\n    x14 = argmin(x13, size)\n    x15 = shift(x14, LEFT)\n    x16 = paint(x11, x15)\n    x17 = normalize(x15)\n    x18 = remove(x16, x1)\n    x19 = rbind(colorcount, x18)\n    x20 = argmin(x12, x19)\n    x21 = color(x20)\n    x22 = normalize(x20)\n    x23 = color(x22)\n    x24 = remove(x21, x23)\n    x25 = argmin(x24, size)\n    x26 = recolor(xx x25)\n    x27 = subgrid(x26, x25)\n    x28 = normalize(x27)\n    x29 = x25(x28)\n    x30 = toindices(x29)\n    x31 = normalize(x29)\n    x32 = x25(x30)\n    x33 = x25(x31)\n    x34 = normalize(x30)\n    x35 = x25(x34)\n    x36 = toindices(x35)\n    x37 = normalize(x25)\n    x38 = x25(x37)\n    x39 = normalize(x31)\n    x40 = x25(x39)\n    x41 = normalize(x33)\n    x42 = x25(x41)\n    x43 = combine(x28, x42)\n    "], [1.1, "def solve_e37efa57(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_ac934a20(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x3)\n    x13 = paint(x11, x12)\n    x14 = height(x12)\n    x15 = width(x12)\n    x16 = subtract(x14, x15)\n    x17 = width(x12)\n    x18 = divide(x16, x17)\n    x19 = upscale(x13, x18)\n    x20 = occurrences(x9, x19)\n    x21 = colorfilter(x20, x4)\n    x22 = rbind(toobject, I)\n    x23 = lbind(shift, x21)\n    x24 = rbind(colorcount, x4)\n    x25 = chain(x24, x23, x8)\n    x26 = argmin(x21, x25)\n    x27 = subgrid(x26, x25)\n    x28 = height(x27)\n    x29 = divide(x28, x18)\n    x30 = width(x27)\n    x31 = divide(x30, x19)\n    x32 = invert(x26)\n    x33 = invert(x32)\n    x34 = interval(x33, x29, ONE)\n    x35 = invert(x29)\n    x36 = interval(x34, x35, ONE)\n    x37 = product(x36, x34)\n    x38 = compose(x37, first)\n    x39 = apply(x38, x32)\n    x40 = shift(x39, x3)\n    x41 = apply(x32, x40)\n    x42 = urcorner"], [1.1, "def solve_4c2334aa(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_a3e5b062(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_96cf4a43(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = box(x2)\n    x5 = fill(I, x3, x4)\n    x6 = subgrid(x2, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmax(x7, numcolors)\n    x9 = normalize(x8)\n    x10 = lbind(shift, x9)\n    x11 = mapply(x10, x7)\n    x12 = paint(x5, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x2, x15)\n    x17 = paint(x12, x16)\n    x18 = fork(normalize, first, last)\n    x19 = lbind(18, first)\n    x20 = compose(x19, last)\n    x21 = fork(subtract, x20, height)\n    x22 = fork(multiply, x21, width)\n    x23 = fork(equality, size, x22)\n    x24 = rbind(valmax, numcolors)\n    x25 = chain(x24, x23, x22)\n    x26 = sfilter(x12, x25)\n    x27 = downscale(x17, x12)\n    x28 = objects(x27, T, F, T)\n    x29 = rbind(toobject, x27)\n    x30 = compose(x29, delta)\n    x31 = fork(both, x23, x30)\n    x32 = rbind(shift, DOWN)\n    x33 = compose(x32, ulcorner)\n    x34 = fork(combine, x31, x33)\n    x35 = fork(shift, x27, x34)\n    x36 = fork(combine, x30, x35)\n    x37 = fork(shift, x27, x36)\n    x38 ="], [1.1, "def solve_16b44e88(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_8a42169b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_f6ffea56(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_43c9bf10(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_942bcdb6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = subgrid(x3, I)\n    x5 = chain(hfrontier, vfrontier, center)\n    x6 = x5(x4)\n    x7 = fork(combine, hfrontier, vfrontier)\n    x8 = x7(x6)\n    x9 = objects(x8, T, F, T)\n    x10 = extract(x9, x5)\n    x11 = subgrid(x10, x8)\n    x12 = hmirror(x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x13)\n    x15 = vmirror(x14)\n    x16 = objects(x15, T, F, T)\n    x17 = merge(x16)\n    x18 = palette(x17)\n    x19 = lbind(colorcount, x17)\n    x20 = compose(invert, x19)\n    x21 = argmin(x18, x20)\n    x22 = rbind(colorcount, x21)\n    x23 = rbind(toobject, x25)\n    x24 = compose(x22, x23)\n    x25 = extract(x18, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = colorfilter(x26, x21)\n    x28 = rbind(toobject, x25)\n    x29 = chain(x28, initset, x15)\n    x30 = product(x27, x27)\n    x31 = order(x30, uppermost)\n    x32 = apply(first, x31)\n    x33 = rbind(sfilter, x32)\n    x34 = lbind(matcher, x24)\n    x35 = chain(x33, x34, lowermost)\n    x36 = fork(sfilter, identity, x35)\n    x37 = lbind(apply, maximum)\n    x38 = chain(x37, x34, left"], [1.1, "def solve_f13e7a53(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_f142f3c4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(hmirror, x4)\n    x6 = chain(x5, lefthalf, tophalf)\n    x7 = rbind(toobject, x4)\n    x8 = chain(x7, palette, x6)\n    x9 = matcher(x8, x3)\n    x10 = extract(x1, x9)\n    x11 = replace(x4, x10, ZERO)\n    x12 = objects(x11, T, F, T)\n    x13 = compose(flip, x12)\n    x14 = order(x12, x13)\n    x15 =245(x14)\n    x16 =885(x15)\n    x17 = apply(center, x16)\n    x18 = fork(either, vline, hline)\n    x19 = x18(x17)\n    x20 = lefthalf(x19)\n    x21 = righthalf(x19)\n    x22 = palette(x20)\n    x23 = compose(flip, x22)\n    x24 = matcher(x23, x21)\n    x25 = rbind(multiply, x19)\n    x26 = chain(x25, toindices, x24)\n    x27 = fork(add, x26, x25)\n    x28 = compose(flip, x27)\n    x29 = extract(x24, x28)\n    x30 =**9(x29)\n    x31 = palette(x20)\n    x32 = remove(x31, x31)\n    x33 = lbind(colorcount, x4)\n    x34 = argmin(x32, x33)\n    x35 = other(x32, x34)\n    x36 = ofcolor(x20, x31)\n    x37 = ofcolor(x21, x35)\n    x38 = combine(x36, x37)\n    x39 = combine(x34"], [1.1, "def solve_e9144ed6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_8cda0762(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_1479485e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_5d3917f4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x32 = compose(x29, x30)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = lbind(apply, first)\n    x36 = rbind(sfilter, x28)\n    x37 = rbind(pair, x21)\n    x38 = chain(x35, x36, x37)\n    x39 = pair(x7, x23)\n    x40 = sfilter(x39, x34)\n    x41 = apply(first, x40"], [1.1, "def solve_0e3f2e1b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_c5b87914(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_60f0c8ef(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_8152419d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_449eee80(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = shape(x10)\n    x13 = add(x12, x9)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, x15, ZERO)\n    x17 = branch(x6, width, width)\n    x18 = x17(x16)\n    x19 = decrement(x18)\n    x20 = index(x11, x19)\n    x21 = replace(x11, x20, ZERO)\n    x22 = ofcolor(x16, ZERO)\n    x23 = asindices(x22)\n    x24 = box(x23)\n    x25 = fill(x16, ZERO, x24)\n    x26 = subgrid(x22, x25)\n    x27 = asobject(x26)\n    x28 = occurrences(x26, x27)\n    x29 = normalize(x27)\n    x30 = shift(x29, x28)\n    x31 = subgrid(x25, x15)\n    x32 = occurrences(x31, x31)\n    x33 = normalize(x32)\n    x34 = shift(x33, x28)\n    x35 = toobject(x34, x41)\n    x36 = size(x35)\n    x37 =14(x36)\n    x38 = paint(x25, x37)\n    x39 = astuple(x38, x32)\n    x40 = shift("], [1.1, "def solve_657cf995(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = x7(I)\n    x10 = x8(I)\n    x11 = center(x9)\n    x12 = center(x10)\n    x13 = subtract(x11, x12)\n    x14 = add(x13, x22)\n    x15 = solve(x9, x14)\n    x16 = shape(x9)\n    x17 = canvas(ZERO, x16)\n    x18 = color(x2)\n    x19 = replace(x17, x18, x5)\n    x20 = shift(x19, LEFT)\n    x21 = paint(x20, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, x18)\n    x24 = rbind(adjacent, x2)\n    x25 = sfilter(x23, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = colorfilter(x26, x18)\n    x28 = rbind(adjacent, x2)\n    x29 = sfilter(x27, x28)\n    x30 = mapply(toindices, x25)\n    x31 = rbind(equality, x11)\n    x32 = lbind(index, x35)\n    x33 = compose(x31, x32)\n    x34 = rbind(add, LEFT)\n    x35 = chain(x33, x34, rbind)\n    x36 = rbind(add, RIGHT)\n    x37 = compose(x33, x36)\n    x38 = fork(either, x35, x37)\n    x39 = rbind(add, UP)\n    x40 ="], [1.1, "def solve_14d263e9(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = merge(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = chain(size, x4, color)\n    x6 = matcher(x5, ONE)\n    x7 = palette(I)\n    x8 = sfilter(x7, x6)\n    x9 = fork(equality, toindices, box)\n    x10 = rbind(contained, x8)\n    x11 = compose(x10, color)\n    x12 = extract(x8, x11)\n    x13 = colorfilter(x1, x12)\n    x14 = rbind(greater, SEVEN)\n    x15 = compose(x14, size)\n    x16 = sfilter(x13, x15)\n    x17 = remove(ZERO, x16)\n    x18 = lbind(colorcount, I)\n    x19 = argmin(x17, x18)\n    x20 = palette(I)\n    x21 = remove(x19, x20)\n    x22 = lbind(colorcount, I)\n    x23 = rbind(greater, x22)\n    x24 = compose(x23, first)\n    x25 = rbind(contained, x21)\n    x26 = compose(x25, last)\n    x27 = sfilter(x24, x26)\n    x28 = compose(invert, size)\n    x29 = order(x27, x28)\n    x30 = apply(normalize, x29)\n    x31 = size(x30)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = apply(tojvec, x32)\n    x34 = mpapply(shift, x30, x33)\n    x35 = fill(I, x19, x34)\n    x36 = mapply(x21, x1)\n    x37 = fill(x35, x13, x36)\n    x38 = mapply(x26, x1)\n    x39 = fill(x37, x11, x"], [1.1, "def solve_4efad687(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = fork(subtract, height, width)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(chain, positive)\n    x7 = lbind(x6, size)\n    x8 = rbind(compose, backdrop)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(lbind, outbox)\n    x11 = chain(x7, x8, x10)\n    x12 = lbind(chain, backdrop)\n    x13 = compose(x12, x11)\n    x14 = lbind(fork, recolor)\n    x15 = lbind(x14, color)\n    x16 = lbind(rbind, recolor)\n    x17 = compose(x15, x16)\n    x18 = lbind(compose, x7)\n    x19 = x13(x14)\n    x20 = x17(x19)\n    x21 = fork(compose, x18, x20)\n    x22 = compose(x17, x21)\n    x23 = fork(compose, x7, x22)\n    x24 = x23(x5)\n    x25 =8672844(x24)\n    x26 = x23(x6)\n    x27 = greater(x25, x26)\n    x28 = branch(x27, x25, x27)\n    O = canvas(x28, UNITY)\n    return O"], [1.1, "def solve_fac16a33(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = chain(first, positive, last)\n    x7 = x6(x5)\n    x8 = first(x7)\n    x9 = ofcolor(I, x4)\n    x10 = subgrid(x9, I)\n    x11 = leftmost(x9)\n    x12 = leftmost(x8)\n    x13 = subtract(x11, x12)\n    x14 = add(x13, x11)\n    x15 =initset(x14)\n    x16 = insert(x9, x15)\n    x17 = backdrop(x16)\n    x18 = subgrid(x17, I)\n    x19 = ulcorner(x9)\n    x20 = llcorner(x9)\n    x21 = subtract(x19, x20)\n    x22 = add(x21, x11)\n    x23 = tojvec(x22)\n    x24 = rbind(multiply, x30)\n    x25 = apply(x24, x23)\n    x26 =117(x21)\n    x27 = lbind(shift, x26)\n    x28 = mapply(x27, x25)\n    x29 = cover(I, x28)\n    O = fill(x29, x4, x29)\n    return O"], [1.1, "def solve_85411680(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = extract(x1, x2)\n    x8 = box(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = numcolors(x10)\n    x12 = positive(x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = x13(x4)\n    x15 = fgpartition(x14)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = vmirror(x16)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 = vmirror(x21)\n    x23 = asindices(x20)\n    x24 = ofcolor(x14, x25)\n    x25 = ofcolor(x14, x22)\n    x26 = position(x24, x25)\n    x27 = first(x26)\n    x28 = last(x26)\n    x29 = add(x27, UNITY)\n    x30 = initset(x29)\n    x31 = recolor(x25, x30)\n    x32 = subgrid(x31, x4)\n    x33 = trim(x32)\n    x34 = shift(x33, UNITY)\n    x35 = mapply(x19, x34)\n    x36 =434(x35, x24)\n    x37 = fill(x6, x25, x36)\n    x38 = shift(x34, x27)\n    x39 = combine(x37, x38)\n    x40 = shift(x33, x39)\n    O = fill(x37, x25, x40)\n    return O"]]}