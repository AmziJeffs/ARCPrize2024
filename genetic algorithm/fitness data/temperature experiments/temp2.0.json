{"d56f2372": [[0.2743476810143477, "def solve_9b3ca227(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.29037478188052895, "def solve_4fdf045f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29706172839506173, "def solve_25199b94(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.31036002669336005, "def solve_8f252453(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.39591901174509864, "def solve_63e375da(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_2a0d13fb(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_820cf18e(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_52fedb46(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_f4128f97(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_5e6325b5(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_2254f6eb(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_26ce0c8f(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_1d871db9(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_e818bb66(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_d858eef4(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_5dcf6fd2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_d2890c1b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.41617597321745253, "def solve_54311e96(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_99a790b1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    O = subgrid(x2, I)\n    return O"], [0.41617597321745253, "def solve_7a9e5e44(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_43c1ba37(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, ONE)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = mostcolor(x3)\n    O = replace(x4, EIGHT, x5)\n    return O"], [0.41617597321745253, "def solve_61a16e5e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41699831998382725, "def solve_10f8e628(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.4204508671590131, "def solve_1b6b671e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_65b1ae0e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_bdb162fd(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_de248895(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_533f4e50(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4245388866968078, "def solve_b523ab04(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_9b838b73(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.42862868185566755, "def solve_e3d2ff72(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    O = replace(x4, x5, ZERO)\n    return O"], [0.4351747897948946, "def solve_3b582e0e(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4519109258964331, "def solve_cd2bbbf3(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4519109258964331, "def solve_da712afb(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.45420349399449317, "def solve_38189a32(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4544472391184824, "def solve_ca12676f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4557081334207771, "def solve_6458b9b9(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.46626613107772524, "def solve_dc30a115(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.46626613107772524, "def solve_552f87b3(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.46924601939094696, "def solve_f57c11ba(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.47457571038730456, "def solve_6bf83693(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4780512509934251, "def solve_2c6f2762(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4780512509934251, "def solve_cc60ad25(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4780512509934251, "def solve_52026925(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.47887719733946615, "def solve_cd95d5f1(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4838495551165023, "def solve_24bf45be(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4838495551165023, "def solve_8bfad056(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4838495551165023, "def solve_4cf5aacd(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4869187922819764, "def solve_ecbce844(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.4869187922819764, "def solve_5fcef941(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.4869187922819764, "def solve_5191b151(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_ea9412be(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_845c80e3(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_d7b919c8(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5135153382270797, "def solve_afae886f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5652441058672942, "def solve_1f32ab7d(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, T)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.5652441058672942, "def solve_628fffc7(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O"], [0.5985774392006277, "def solve_ffdbd62d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(colorcount, TWO)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.6157582830481382, "def solve_9b0fa045(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6285917506761496, "def solve_47bd7e8b(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6955752018051657, "def solve_0b2c86b4(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6955752018051657, "def solve_7bea8c39(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.701314980779116, "def solve_73520d4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, greater)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.7052501974196685, "def solve_15c7c98c(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7052501974196685, "def solve_797da83f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7226167626040653, "def solve_775d7a63(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7226167626040653, "def solve_501c678d(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.728049799593843, "def solve_f6ba1684(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = compose(asobject, x2)\n    x4 = mapply(x3, x1)\n    O = replace(I, FOUR, ZERO)\n    return O"], [0.7292779869601377, "def solve_49d7e4f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = matcher(x3, ONE)\n    x5 = compose(maximum, shape)\n    x6 = lbind(apply, x5)\n    x7 = lbind(ofcolor, I)\n    x8 = compose(x6, x7)\n    x9 = mapply(x8, x1)\n    x10 = fill(I, ZERO, x9)\n    x11 = leastcolor(I)\n    x12 = ofcolor(x10, x11)\n    x13 = switch(x10, x11, x12)\n    x14 = fill(x13, ZERO, x12)\n    O = replace(x14, x11, ZERO)\n    return O"], [0.7305542811310891, "def solve_ef5a6119(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7346483141124492, "def solve_ea74c65d(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, ONE, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.7357135548175452, "def solve_7c96aa0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, ZERO, x3)\n    return O"], [0.7358683159313282, "def solve_eca05263(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7362216582362898, "def solve_51bdd343(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = box(x2)\n    x4 = fill(I, x1, x3)\n    x5 = subgrid(x2, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, x1, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, x1, x16)\n    return O"], [0.7392725757358751, "def solve_40a2bc26(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7392725757358751, "def solve_8997fe7f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400226558178445, "def solve_b04ec111(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400226558178445, "def solve_f4d0700e(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7402857765811778, "def solve_bd0b4221(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7403016058295065, "def solve_8fa1782d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_86495561(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_3c71edf0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_87343393(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7410390952301974, "def solve_9ec42ffd(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7411341780448716, "def solve_e8c1bb9e(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7413643800290229, "def solve_9373eeb8(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.7413643800290229, "def solve_f63787c7(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.7414217191724711, "def solve_d6cc9200(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_eb2bb1a0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_77403926(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414355847808533, "def solve_ca2686b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414355847808533, "def solve_865c5ddd(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414355847808533, "def solve_91654361(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414654147115858, "def solve_15557b0f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_5af6823f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_8bb393e5(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    O = move(I, x4, DOWN)\n    return O"], [0.7414654147115858, "def solve_311af45d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = leastcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.7414654147115858, "def solve_6a39f7d2(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = rbind(subgrid, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x1, x4)\n    O = fill(I, ZERO, x5)\n    return O"], [0.7414654147115858, "def solve_38e74341(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_ccf61d06(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7414654147115858, "def solve_9ace500e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = rbind(adjacent, x3)\n    x5 = mfilter(x2, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [0.7414654147115858, "def solve_4e112ed0(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(first, totuple, palette)\n    x6 = chain(last, totuple, palette)\n    x7 = lbind(matcher, first)\n    x8 = compose(x7, x5)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, x6)\n    x11 = fork(sfilter, identity, x8)\n    x12 = fork(sfilter, identity, x10)\n    x13 = lbind(occurrences, I)\n    x14 = chain(invert, ulcorner, x11)\n    x15 = chain(invert, ulcorner, x12)\n    x16 = lbind(lbind, shift)\n    x17 = fork(shift, identity, x14)\n    x18 = fork(shift, identity, x15)\n    x19 = compose(x16, x17)\n    x20 = compose(x13, x11)\n    x21 = fork(mapply, x19, x20)\n    x22 = compose(x16, x18)\n    x23 = compose(x13, x12)\n    x24 = fork(mapply, x22, x23)\n    x25 = fork(combine, x21, x24)\n    x26 = mapply(x25, x4)\n    O = paint(I, x26)\n    return O"], [0.7414654147115858, "def solve_fbdb0cf1(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, NINE)\n    x3 = colorfilter(x1, NINE)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, ONE, x5)\n    x7 = compose(halve, double)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, last)\n    x10 = matcher(x7, THREE)\n    x11 = sfilter(x3, x9)\n    x12 = merge(x11)\n    x13 = fill(x6, THREE, x12)\n    x14 = merge(x3)\n    x15 = fill(x13, THREE, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = mapply(x16, x12)\n    O = fill(x15, THREE, x17)\n    return O"], [0.7414654147115858, "def solve_fd896db4(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_9e00bda0(I):\n    x1 = ofcolor(I, FOUR)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, FOUR, x10)\n    return O"], [0.7416022713190306, "def solve_7e5c42c2(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.7416022713190306, "def solve_3fb4e3a4(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.7419971090288048, "def solve_069b0ac0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = paint(x5, x9)\n    return O"], [0.7420260064287781, "def solve_d46d4bd5(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7420260064287781, "def solve_18e53646(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.7420260064287781, "def solve_8221280c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.742083783409111, "def solve_65546a4a(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7425480010711071, "def solve_12c95bda(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7426909638249383, "def solve_f31b43d3(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7431832795883769, "def solve_4665d618(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.7431832795883769, "def solve_31e65995(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7433745710118439, "def solve_2361dae0(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7434075964521693, "def solve_1bade093(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = ofcolor(I, x1)\n    x6 = prapply(connect, x4, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.7450712646640288, "def solve_323ff306(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.745370583385215, "def solve_d96cf38c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.745385924111318, "def solve_1bd68153(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ZERO, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7453979667327834, "def solve_353dd005(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(SIX)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.7454216969955122, "def solve_54c2515c(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7454216969955122, "def solve_74c864cd(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7454291044528212, "def solve_510aed34(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7464981923799551, "def solve_f9c65bb2(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = order(x1, x2)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = color(x4)\n    x7 = color(x5)\n    x8 = equality(x6, x7)\n    x9 = combine(x4, x5)\n    x10 = repeat(x9, ONE)\n    x11 = remove(x4, x3)\n    x12 = remove(x5, x11)\n    x13 = combine(x10, x12)\n    x14 = branch(x8, x13, x3)\n    x15 = apply(color, x14)\n    x16 = last(x14)\n    x17 = remove(x16, x14)\n    x18 = repeat(x16, ONE)\n    x19 = combine(x18, x17)\n    x20 = mpapply(recolor, x15, x19)\n    O = paint(I, x20)\n    return O"], [0.7467587450693074, "def solve_99d33e21(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [0.7473234534622014, "def solve_7dfa3c09(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7488659023144327, "def solve_ee20506b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7490844623306332, "def solve_34512173(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.749340420494207, "def solve_421132da(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = fork(intersection, first, last)\n    x8 = apply(x3, x1)\n    x9 = x7(x8)\n    O = fill(x6, TWO, x9)\n    return O"], [0.749340420494207, "def solve_142eb5d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = fork(intersection, first, last)\n    x8 = apply(x3, x1)\n    x9 = x7(x8)\n    O = fill(x6, TWO, x9)\n    return O"], [0.7498499462550435, "def solve_89062853(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7507990216016639, "def solve_16233da9(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(invert, halve, shape)\n    x4 = fork(combine, hfrontier, vfrontier)\n    x5 = compose(x2, vmirror)\n    x6 = fork(shift, x5, x3)\n    x7 = compose(toindices, x6)\n    x8 = lbind(mapply, x4)\n    x9 = compose(x8, toindices)\n    x10 = fork(difference, x7, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, EIGHT, x11)\n    return O"], [0.7700284366461739, "def solve_a8984bf7(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = merge(x1)\n    x7 = backdrop(x6)\n    x8 = box(x6)\n    x9 = fill(I, x3, x7)\n    O = fill(x9, x5, x8)\n    return O"], [1.0, "def solve_266d98d1(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_ecc27ddc(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, numcolors)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_7ae67d5d(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = dmirror(x4)\n    x6 = papply(equality, x4, x5)\n    x7 = compose(convert, center)\n    x8 = order(x6, x7)\n    x9 = apply(mostcolor, x8)\n    x10 = repeat(x9, ONE)\n    O = x11(x10)\n    return O"], [1.0, "def solve_066572a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = cmirror(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(toobject, x7)\n    x9 = matcher(palette, x4)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = normalize(x11)\n    x13 = shift(x12, UNITY)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_8ce5e5f7(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = interval(ONE, NINE, ONE)\n    x4 = apply(normalize, x3)\n    x5 = apply(center, x4)\n    x6 = remove(x2, x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x4)\n    x9 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x9, FIVE, x8)\n    return O"], [1.0, "def solve_063db491(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = difference(x3, x2)\n    x5 = outbox(x4)\n    x6 = lbind(position, x5)\n    x7 = compose(x6, initset)\n    x8 = argmin(x2, x7)\n    x9 = mostcolor(I)\n    x10 = ofcolor(I, x9)\n    x11 = fill(I, x9, x10)\n    x12 = lbind(multiply, x)\n    x13 = apply(x12, x11)\n    x14 = mapply(vfrontier, x13)\n    x15 = mapply(hfrontier, x13)\n    x16 = size(x14)\n    x17 = size(x15)\n    x18 = greater(x16, x17)\n    x19 = fill(x11, x9, x13)\n    x20 = fill(x19, x9, x15)\n    O = branch(x18, x20, x13)\n    return O"], [1.0, "def solve_75f76d49(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b1bb6c5c(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = replace(I, x2, ZERO)\n    x4 = replace(x3, ONE, ZERO)\n    x5 = compress(x4)\n    x6 = width(x2)\n    x7 = halve(x6)\n    x8 = upscale(x5, x7)\n    x9 = height(x2)\n    x10 = halve(x9)\n    x11 = fgpartition(x8)\n    x12 = merge(x11)\n    x13 = cover(x3, x12)\n    x14 = shift(x2, DOWN)\n    x15 = paint(x13, x14)\n    x16 = shift(x2, UP)\n    x17 = paint(x15, x16)\n    x18 = urcorner(x2)\n    x19 = ulcorner(x2)\n    x20 = shoot(x18, UNITY)\n    O = shoot(x19, NEG_UNITY)\n    return O"], [1.0, "def solve_0b1d0fae(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [1.0, "def solve_3979708f(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_cd7cc800(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(other, TWO)\n    x3 = compose(x2, palette)\n    x4 = matcher(first, TWO)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(x5, normalize)\n    x7 = lbind(apply, double)\n    x8 = chain(x7, toindices, x6)\n    x9 = rbind(add, NEG_ONE)\n    x10 = lbind(apply, x9)\n    x11 = compose(x10, x8)\n    x12 = lbind(rbind, shoot)\n    x13 = rbind(compose, x12)\n    x14 = lbind(rbind, mapply)\n    x15 = chain(x13, x14, toindices)\n    x16 = fork(mapply, x15, x11)\n    x17 = fork(recolor, x3, x16)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_4e4c6ba4(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_53707273(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_ec1a822e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(fork, shift)\n    x7 = lbind(x6, identity)\n    x8 = rbind(ofcolor, x5)\n    x9 = compose(x8, x7)\n    x10 = mapply(x9, x2)\n    O = fill(I, x5, x10)\n    return O"], [1.0, "def solve_aa60beb9(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(vfrontier, x1)\n    x3 = underfill(I, EIGHT, x2)\n    x4 = hconcat(x3, x3)\n    O = vconcat(x4, x4)\n    return O"], [1.0, "def solve_8543cf1c(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = matcher(x3, ONE)\n    x5 = extract(x1, x4)\n    x6 = lbind(adjacent, x5)\n    x7 = extract(x1, x6)\n    O = subgrid(x7, I)\n    return O"], [1.0, "def solve_b67880bc(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_65628a8a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_0ae9606d(I):\n    x1 = hsplit(I, THREE)\n    x2 = objects(x1, T, F, T)\n    x3 = compose(increment, merge)\n    x4 = order(x2, x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = switch(x5, UNITY, NEG_ONE)\n    x8 = switch(x6, EIGHT, x7)\n    x9 = switch(x8, TWO, x6)\n    O = switch(x9, THREE, x7)\n    return O"], [1.0, "def solve_ac0a98ec(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = fork(equality, toindices, box)\n    x4 = extract(x2, x3)\n    x5 = inbox(x4)\n    x6 = subgrid(x5, I)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_9123c724(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = divide(x6, x7)\n    x10 = astuple(x9, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = paint(x11, x6)\n    x13 = normalize(x12)\n    x14 = shift(x13, LEFT)\n    x15 = paint(x12, x14)\n    x16 = double(x13)\n    x17 = width(x12)\n    x18 = divide(x16, x17)\n    x19 =shift(x15, x18)\n    x20 = paint(x15, x19)\n    x21 = normalize(x12)\n    x22 = lbind(remove, x21)\n    x23 = compose(000000, last)\n    x24 = rbind(ofcolor, x23)\n    x25 = compose(x22, x24)\n    x26 = lbind(prapply, x25)\n    x27 = fork(x26, identity, identity)\n    x28 = apply(x25, x5)\n    x29 = rbind(subgrid, x28)\n    x30 = apply(x29, x29)\n    O = rot180(x30)\n    return O"], [1.0, "def solve_a36f5905(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_bb0f01ae(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_7e8420ee(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = mostcolor(x3)\n    O = replace(x4, EIGHT, x5)\n    return O"], [1.0, "def solve_c013d650(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_9000b06e(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = objects(I, T, F, T)\n    x4 = mapply(x3, x2)\n    x5 = papply(recolor, x3, x4)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_f4b32db4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = mapply(x2, x1)\n    O = paint(I, x3)\n    return O"], [1.0, "def solve_fabb6804(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(center, x1)\n    x3 = order(x2, size)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = color(x4)\n    x7 = color(x5)\n    x8 = equality(x6, x7)\n    x9 = combine(x4, x5)\n    x10 = repeat(x9, ONE)\n    x11 = remove(x4, x10)\n    x12 = width(x11)\n    x13 =-valmax(x11, x12)\n    x14 = hmatching(x13, x4)\n    x15 = branch(x8, dmirror, identity)\n    x16 = x15(x15)\n    x17 = subtract(x16, TWO)\n    x18 = invert(x17)\n    x19 = shift(x19, x18)\n    x20 = apply(I, x19)\n    x21 = interval(ZERO, NINE, ONE)\n    x22 = rbind(multiply, x18)\n    x23 = apply(x22, x21)\n    x24 = lbind(shift, x11)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_783e00f1(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = argmax(x3, size)\n    x5 = remove(x4, x3)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = subgrid(x4, I)\n    x9 = lbind(colorfilter, x8)\n    x10 = compose(first, x9)\n    x11 = rbind(greater, ONE)\n    x12 = compose(x11, x10)\n    x13 = sfilter(x6, x12)\n    x14 = merge(x13)\n    x15 = width(x14)\n    x16 = hsplit(x14, x15)\n    x17 = apply(x16, x3)\n    x18 = lefthalf(x17)\n    x19 = righthalf(x17)\n    x20 = vmirror(x19)\n    x21 = ofcolor(x20, x7)\n    x22 = frontiers(x21)\n    x23 = sfilter(x22, x12)\n    x24 = mapply(toindices, x23)\n    x25 = difference(x24, x55)\n    x26 = mapply(size, x25)\n    x27 = equality(x26, x25)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [1.0, "def solve_86163414(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = first(x3)\n    x9 = last(x3)\n    x10 = fgpartition(x4)\n    x11 = merge(x10)\n    x12 = fill(x4, TWO, x11)\n    x13 = shape(x12)\n    x14 = first(x10)\n    x15 = last(x10)\n    x16 = add(x13, x14)\n    x17 = add(x15, x15)\n    x18 = alignbreak00000000\n    x8 = canvas(ZERO, x13)\n    x9 = paint(x8, x12)\n    O = x2(x9)\n    return O"], [1.0, "def solve_103840dd(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_50c5f94e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = argmin(x1, numcolors)\n    x6 = rbind(adjacent, x2)\n    x7 = combine(x5, x6)\n    x8 = extract(x7, size)\n    x9 = backdrop(x8)\n    x10 = cover(I, x9)\n    x11 = leftmost(x8)\n    x12 = greater(x11, TWO)\n    x13 = branch(x12, x10, lefthalf)\n    x14 = branch(x12, RIGHT, ZERO)\n    x15 = branch(x12, leftmost, ZERO)\n    x16 = greater(x15, TWO)\n    x17 = x13(x16)\n    x18 = shape(x2)\n    x19 = canvas(ZERO, x18)\n    x20 = normalize(x2)\n    x21 = lbind(shift, x20)\n    x22 = compose(x21, tojvec)\n    x23 = rbind(multiply, x4)\n    x24 =apply(x22, x23)\n    x25 = mapply(x21, x24)\n    O = paint(x19, x25)\n    return O"], [1.0, "def solve_f4692c0d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_31a5421e(I):\n    x1 = leastcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = objects(x2, T, T, T)\n    x4 = argmax(x3, size)\n    x5 = argmin(x3, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x8)\n    x10 = hline(x9)\n    x11 = branch(x10, x7, x8)\n    x12 = branch(x10, x7, x8)\n    x13 = fork(combine, vfrontier, hfrontier)\n    x14 = mapply(x13, x11)\n    x15 = height(x4)\n    x16 = width(x4)\n    x17 = divide(x15, x16)\n    x18 = intersection(x14, x17)\n    O = fill(I, x1, x18)\n    return O"], [1.0, "def solve_f61eeb93(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_607f662a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = toindices(x3)\n    x5 = normalize(x2)\n    x6 = lbind(shift, x5)\n    x7 = compose(even, x6)\n    x8 = sfilter(x4, x7)\n    x9 = paint(I, x8)\n    x10 = ofcolor(I, x3)\n    x11 = ofcolor(x9, x35)\n    x12 = height(x10)\n    x13 = increment(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(tojvec, x14)\n    x16 = mapply(vfrontier, x15)\n    x17 = fill(x9, NINE, x16)\n    O = fill(x17, FIVE, x2)\n    return O"], [1.0, "def solve_19c24612(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_d56a4b34(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, ulcorner, x7)\n    x19 = chain(x14, x13, x7)\n    x20 = fork(apply, x18, x19)\n    x21 = compose(x16, x20)\n    x22 = fork(mapply, x17, x21)\n    x23 = rapply(x10, x3)\n    x24 = mapply(x22, x23)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_67b9eb43(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(NINE, NINE)\n    x3 = canvas(ZERO, x2)\n    x4 = upscale(x3, TWO)\n    x5 = papply(shift, x4, x2)\n    O = paint(x5, x4)\n    return O"], [1.0, "def solve_1a2772d5(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = width(x6)\n    x8 = astuple(ONE, x7)\n    x9 = x5(x6)\n    x10 = canvas(ZERO, x8)\n    x11 = upscale(x10, x9)\n    x12 = fill(x11, ONE, x13)\n    x13 = multiply(UNITY, THREE)\n    x14 = initset(x13)\n    x15 = insert(xmirror, x14)\n    x16 = insert(xadmirror, x15)\n    x17 = insert(x20, x16)\n    x18 = order(x17, leftmost)\n    x19 = last(x18)\n    x20 = remove(x19, x18)\n    x21 = first(x20)\n    x22 = last(x21)\n    x23 = argmin(x22, uppermost)\n    x24 = add(x23, LEFT)\n    x25 = llcorner(x24)\n    x26 = add(x25, RIGHT)\n    x27 = upscale(x26, x24)\n    x28 = add(x27, UP)\n    x29 = initset(x28)\n    x30 = insert(x27, x29)\n    x31 = BACKdrop(x30, x24)\n    x32 = lefthalf(x31)\n    x33 = righthalf(x31)\n    x34 = width(x33)\n    x35 = first(x34)\n    x36 = tojvec(x35)\n    x37 = shift(x31, x36)\n    x38 = fork(combine, vfrontier, hfrontier)\n    x39 = mapply(x38, x37)\n    O = paint(x12, x39)\n    return O"], [1.0, "def solve_60f506e1(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(increment, last, width)\n    x7 = compose(greater, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = mfilter(x5, x8)\n    O = fill(x5, ZERO, x9)\n    return O"], [1.0, "def solve_b7708571(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [1.0, "def solve_dfdfd695(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_4399093f(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(equality, NINE)\n    x3 = compose(x2, size)\n    x4 = fork(equality, height, width)\n    x5 = fork(both, x3, x4)\n    x6 = objects(I, T, F, F)\n    x7 = sfilter(x6, x5)\n    x8 = rbind(shoot, UNITY)\n    x9 = mapply(x8, x7)\n    x10 = gravitate(x9, x7)\n    O = move(I, x10, x7)\n    return O"], [1.0, "def solve_8f1562d9(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = crop(I, x14, x20)\n    x22 = branch(x21, x7, x13)\n    O = move(I, x22, x20)\n    return O"], [1.0, "def solve_0119baa3(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_583bc566(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(backdrop, x1)\n    x3 = mapply(x2, x2)\n    O = fill(I, TWO, x3)\n    return O"], [1.0, "def solve_39773f0c(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_c2a1afba(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    O = upscale(x3, THREE)\n    return O"], [1.0, "def solve_1df70482(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = height(I)\n    x19 = divide(x18, x4)\n    x20 = increment(x19)\n    x21 = interval(ONE, x20, ONE)\n    x22 = apply(x17, x21)\n    x23 = rbind(multiply, x4)\n    x24 = apply(x23, x22)\n    x25 = repeat(x24, ONE)\n    x26 = combine(x28, x25)\n    x27 = astuple(x21, x26)\n    x28 = lbind(shift, x26)\n    x29 = mapply(x28, x27)\n    x30 = combine(x27, x28)\n    x31 = apply(x26, x30)\n    x32 = rbind(shift, x30)\n    x33 = mapply(x32, x31)\n    O = combine(x31, x33)\n    return O"], [1.0, "def solve_6a950de0(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = argmin(x1, size)\n    x4 = subgrid(x2, I)\n    x5 = width(x4)\n    x6 = divide(x5, THREE)\n    x7 = upscale(x3, x6)\n    x8 = normalize(x7)\n    x9 = shift(x8, UNITY)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_b4772b37(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = replace(I, x3, ZERO)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = apply(urcorner, x5)\n    x7 = shoot(x6, DOWN_LEFT)\n    x8 = combine(x6, x7)\n    O = combine(x8, x8)\n    return O"], [1.0, "def solve_c294315e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = lbind(position, x2)\n    x4 = chain(toivec, x3, normalize)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_88bd8878(I):\n    x1 = rot270(I)\n    x2 = fork(equality, identity, rot90)\n    x3 = rot180(x1)\n    x4 = rot270(x1)\n    x5 = sfilter(x3, x2)\n    x6 = sfilter(x4, x3)\n    x7 = merge(x5)\n    x8 = fill(x1, THREE, x7)\n    O = fill(x8, EIGHT, x6)\n    return O"], [1.0, "def solve_74da73ad(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [1.0, "def solve_03b92625(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = positive(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [1.0, "def solve_e4768df1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(lbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = intersection(x7, x21)\n    O = fill(x17, ZERO, x22)\n    return O"], [1.0, "def solve_6c84830b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [1.0, "def solve_45b73bd7(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = RIGHT(x8, DOWN)\n    x10 = branch(x4, leftmost, uppermost)\n    x11 = x10(x4)\n    x12 = subtract(x11, x8)\n    x13 = multiply(x12, add)\n    x14 = add(x13, LEFT)\n    x15 = rightmost(x5)\n    x16 = rightmost(x8)\n    x17 = subtract(x15, x16)\n    x18 = add(x17, leftmost)\n    x19 = subtract(x18, x4)\n    x20 = greater(x14, x19)\n    x21 = branch(x20, rbind, compose)\n    x22 = branch(x20, vmirror, hmirror)\n    x23 = x21(x22)\n    x24 = branch(x20, leftmost, uppermost)\n    x25 = branch(x20, rightmost, uppermost)\n    x26 = x24(x23)\n    x27 = x24(x25)\n    x28 = add(x26, x27)\n    x29 = x25(x28)\n    x30 = branch(x24, tojvec, toivec)\n    x31 = branch(x24, rbind, shape)\n    x32 = x31(x30)\n    x33 = x31(x32)\n    x34 = shift(x9, x33)\n    x35 = merge(x34)\n    x36 = cover(x5, x35)\n    x37 = paint(x36, x34)\n    O = x4(x37)\n    return O"], [1.0, "def solve_5a302b02(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = mfilter(x1, x5)\n    x7 = fill(I, SIX, x3)\n    x8 = fill(x7, TWO, x4)\n    O = fill(x8, ONE, x6)\n    return O"], [1.0, "def solve_d3a21713(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, llcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x2, DOWN)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, T, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, merge)\n    x19 = compose(lrcorner, initset)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, x20)\n    x22 = fork(recolor, x21, ulcorner)\n    x23 = fork(recolor, x21, llcorner)\n    x24 = fork(combine, x22, x23)\n    x25 = pair(x16, x17)\n    x26 = mapply(x24, x25)\n    O = underpaint(x7, x26)\n    return O"], [1.0, "def solve_f45d5dd5(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = rbind(objects, F)\n    x4 = argmax(x1, x2)\n    x5 = argmin(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [1.0, "def solve_d49071de(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, TWO)\n    x3 = first(x1)\n    x4 = first(x2)\n    x5 = subtract(x4, x3)\n    x6 = sign(x5)\n    x7 = recolor(THREE, x1)\n    O = move(I, x7, x6)\n    return O"], [1.0, "def solve_a00869be(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = width(x4)\n    x6 = difference(x1, x5)\n    x7 = toobject(x6, x4)\n    x8 = matcher(first, ZERO)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = increment(x5)\n    x14 = increment(x13)\n    x15 = divide(x12, x14)\n    x16 = astuple(x15, x5)\n    x17 = rbind(multiply, x16)\n    x18 = neighbors(ORIGIN)\n    x19 = mapply(neighbors, x18)\n    x20 = rbind(multiply, x5)\n    x21 = apply(x20, x19)\n    x22 = lbind(shift, x4)\n    x23 = mapply(x22, x21)\n    x24 = paint(x3, x23)\n    x25 = shift(x4, UP)\n    x26 = mapply(x27, x25)\n    O = paint(x24, x26)\n    return O"], [1.0, "def solve_0e29ba26(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, ulcorner, x7)\n    x19 = chain(x14, x13, x7)\n    x20 = fork(apply, x18, x19)\n    x21 = compose(x16, x20)\n    x22 = fork(mapply, x17, x21)\n    x23 = rapply(x10, x3)\n    x24 = mapply(x22, x23)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_30a130fc(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_04904e2d(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = dmirror(I)\n    x5 = matcher(x3, x4)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = cover(I, x9)\n    x11 = ulcorner(x7)\n    x12 = lrcorner(x7)\n    x13 = shape(x5)\n    x14 = add(x13, THREE_BY_THREE)\n    x15 = crop(x10, x14, x8)\n    x16 = ofcolor(x15, ZERO)\n    x17 = palette(x16)\n    x18 = compose(vmirror, x16)\n    x19 = fork(insert, x18, identity)\n    x20 = branch(x6, x17, x19)\n    x21 = x20(x15)\n    x22 = objects(x10, F, T, T)\n    x23 = colorfilter(x22, ZERO)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x10, FOUR, x25)\n    x27 = fill(x26, THREE, x21)\n    O = replace(x27, NINE, ZERO)\n    return O"], [1.0, "def solve_85d9542f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    x5 = shape(x4)\n    x6 = canvas(ZERO, x5)\n    x7 = lbind(hatching, x4)\n    x8 = rbind(vmatching, x4)\n    x9 = chain(x7, x8, initset)\n    x10 = lbind(hmatching, x4)\n    x11 = rbind(vmatching, x4)\n    x12 = chain(x10, x11, initset)\n    x13 = fork(either, x9, x12)\n    x14 = sfilter(x2, x13)\n    x15 = mostcolor(I)\n    x16 = colorfilter(x2, x15)\n    x17 = mapply(toindices, x16)\n    x18 = box(x17)\n    x19 = fill(I, x15, x18)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = fork(add, x21, outbox)\n    x23 = fork(connect, x22, ulcorner)\n    x24 = fork(subtract, x23, x62)\n    x25 = fork(connect, x24, width)\n    x26 = fork(2444, x25, x23)\n    x27 = fork(combine, x26, x24)\n    x28 = mapply(x27, x14)\n    O = fill(x19, x15, x28)\n    return O"], [1.0, "def solve_b16739cf(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_34f26725(I):\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = interval(ZERO, x6, NEG_ONE)\n    x9 = lbind(multiply, x8)\n    x10 = apply(x9, x7)\n    x11 = apply(toivec, x10)\n    x12 = mapply(x4, x11)\n    x13 = fill(I, FOUR, x12)\n    x14 = center(x2)\n    x15 = shift(x4, x14)\n    x16 = shift(x3, x15)\n    x17 = paint(x13, x16)\n    x18 = toindices(x2)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x17)\n    O = fill(x17, FOUR, x20)\n    return O"], [1.0, "def solve_0d160bdf(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_432832d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_1b017114(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = apply(x2, x1)\n    x4 = fork(equality, identity, vmirror)\n    x5 = extract(x3, x4)\n    x6 = replace(I, THREE, ZERO)\n    O = subgrid(x5, x6)\n    return O"], [1.0, "def solve_3f032e1a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(NEG_ONE, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = apply(x24, x23)\n    x27 = apply(x25, x23)\n    x28 = argmax(x26, x27)\n    x29 = apply(ulcorner, x27)\n    x30 = normalize(x28)\n    x31 = lbind(shift, x30)\n    x32 = mapply(x31, x29)\n    O = paint(x7, x32)\n    return O"], [1.0, "def solve_92c7bb3e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(neighbors, x4)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, ulcorner, x7)\n    x19 = chain(x14, x13, x7)\n    x20 = fork(apply, x18, x19)\n    x21 = compose(x16, x20)\n    x22 = fork(mapply, x17, x21)\n    x23 = rapply(x10, x3)\n    x24 = mapply(x22, x23)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_cd1c9c0e(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = compose(first,ulcorner)\n    x4 = order(x1, x3)\n    x5 = apply(last, x4)\n    x6 = mpapply(recolor, x5, x4)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_7422dfeb(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_dbbeb38d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_74b60059(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = mostcolor(x3)\n    O = replace(x4, EIGHT, x5)\n    return O"], [1.0, "def solve_ace89835(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b3b65f21(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, width, height)\n    x8 = x7(x2)\n    x9 = subtract(x8, TWO)\n    x10 = multiply(x9, FIVE)\n    x11 = paint(I, x10)\n    x12 =rot90(x11)\n    x13 = subtract(x8, THREE)\n    x14 = divide(x13, x9)\n    x15 = paint(x12, x14)\n    x16 = rot90(x15)\n    x17 = subtract(x8, THREE)\n    x18 = divide(x17, x9)\n    x19 = paint(x16, x18)\n    O = x7(x2)\n    return O"], [1.0, "def solve_fca49b98(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.1, "def solve_694d6e88(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_3d84568d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = x3(I)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(TWO, FOUR)\n    x9 = initset(x8)\n    x10 = insert(TWO_BY_TWO, x9)\n    x11 = insert(x7, x10)\n    x12 = tojvec(THREE)\n    x13 = tojvec(THREE)\n    x14 = shift(x11, x12)\n    x15 = shift(x11, x13)\n    x16 = combine(x14, x15)\n    x17 = underfill(x6, x6, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = colorfilter(x18, x6)\n    x20 = rbind(adjacent, x4)\n    x21 = sfilter(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = rbind(bordering, I)\n    x24 = argmin(x22, x23)\n    x25 = remove(x24, x22)\n    x26 = lbind(vmatching, x24)\n    x27 = rbind(hmatching, x24)\n    x28 = chain(x26, x27, initset)\n    x29 = lbind(rbind, sfilter)\n    x30 = chain(x27, x29, x28)\n    x31 = rbind(apply, x21)\n    x32 = lbind(lbind, add)\n    x33 = chain(x31, x halve, x30)\n    x34 = compose(x29, x28)\n    x35 = fork(connect, x34, x33)\n    x36 = fork(recolor, x26, x35)\n    x37 = mapply(x36, x22)\n    x38 = paint"], [1.1, "def solve_7e7dda8b(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = height(x2)\n    x7 = divide(x6, FIVE)\n    x8 = downscale(x3, x7)\n    x9 = height(x2)\n    x10 = divide(x9, FIVE)\n    x11 = increment(x10)\n    x12 = width(x2)\n    x13 = divide(x12, FIVE)\n    x14 = frontiers(x8)\n    x15 = partition(x14)\n    x16 = color(x2)\n    x17 = toindices(x2)\n    x18 = initset(x13)\n    x19 = divide(x19, FIVE)\n    x20 = increment(x19)\n    x21 = width(x2)\n    x22 = divide(x21, FIVE)\n    x23 = frontiers(x8)\n    x24 = color(x2)\n    x25 = rbind(multiply, x19)\n    x26 = rbind(divide, x19)\n    x27 = compose(x25, x26)\n    x28 = fork(equality, identity, x27)\n    x29 = rbind(multiply, x22)\n    x30 = rbind(divide, x22)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = fork(either, x28, x32)\n    x34 = rbind(multiply, x23)\n    x35 = rbind(divide, x23)\n    x36 = compose(x34, x35)\n    x37 = fork(equality, identity, x36)\n    x38 = fork(either, x33, x37)\n    x39 = rbind(multiply, x19)\n    x40 = rbind(divide, x19)\n    x41 ="], [1.1, "def solve_446a00d8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = rbind(ofcolor, ZERO)\n    x13 = chain(x11, x12, uppermost)\n    x14 = fork(combine, x6, x13)\n    x15 = lbind(recolor, ZERO)\n    x16 = rbind(ofcolor, ZERO)\n    x17 = chain(x15, x16, leftmost)\n    x18 = fork(combine, x14, x17)\n    x19 = lbind(recolor, ZERO)\n    x20 = rbind(multiply, THREE)\n    x21 = chain(x19, x20, shape)\n    x22 = fork(paint, identity, x21)\n    x23 = lbind(recolor, FIVE)\n    x24 = rbind(multiply, THREE)\n    x25 = chain(x23, x24, x23)\n    x26 = lbind(remove, FIVE)\n    x27 = chain(x26, x25, x22)\n    x28 = chain(x11, x27, x7)\n    x29 = fork(952its, x28, x25)\n    x30 = fork(apply, x29, x27)\n    x31 = lbind(chain, flip)\n    x32 = lbind(x31, x30)\n    x33 = rbind(ofcolor, ZERO)\n    x34 = chain(x32, x33, x28)\n    x35 = rbind(mapply, x10)\n    x36 = lbind(l"], [1.1, "def solve_9859d355(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(arg center, x5)\n    x7 = compose(x6, x4)\n    x8 = fork(add, x7, x4)\n    x9 = compose(invert, x8)\n    x10 = order(x3, x9)\n    x11 = rbind(sordering, I)\n    x12 = compose(x11, last)\n    x13 = fork(remove, x12, x5)\n    x14 = fork(astuple, x13, identity)\n    x15 = lbind(subtract, x10)\n    x16 = lbind(multiply, astuple)\n    x17 = compose(x15, x16)\n    x18 = fork(150, x17, x14)\n    x19 = lbind(add, x11)\n    x20 = lbind(multiply, litter)\n    x21 = compose(x19, x20)\n    x22 = fork(130, x21, x14)\n    x23 = lbind(rbind, astuple)\n    x24 = compose(last, x23)\n    x25 = fork(subtract, x12, x24)\n    x26 = fork(insert, x18, x25)\n    x27 = compose(last, last)\n    x28 = fork(remove, x27, first)\n    x29 = fork(astuple, x28, x26)\n    x30 = size(x10)\n    x31 =iety(x10)\n    x32 = interval(ZERO, x30, ONE)\n    x33 = apply(tojvec, x32)\n    x34 = mpapply(shift, x33, x29)\n    x35 = mapply(x38, x31)\n    x36 = paint(I, x35)\n    x37 = height(I)\n    x38 = equality(x37, ONE)\n    x39"], [1.1, "def solve_106f1858(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fork(connect, ulcorner, lrcorner)\n    x2 = fork(connect, llcorner, urcorner)\n    x3 = fork(connect, ulcorner, llcorner)\n    x4 = fork(combine, x1, x2)\n    x5 = fork(combine, x3, x4)\n    x6 = fork(equality, size, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = fork(remove, last, last)\n    x10 = compose(last, x9)\n    x11 = power(x10, TWO)\n    x12 = x11(x8)\n    x13 = x11(x6)\n    x14 = connect(x12, x13)\n    x15 = fill(I, last, x14)\n    x16 = fork(equality, identity, vmirror)\n    x17 = fork(contained, palette, hmirror)\n    x18 = compose(flip, x17)\n    x19 = extract(x5, x18)\n    x20 = remove(x19, x5)\n    x21 = initset(x20)\n    x22 = objects(x15, T, F, T)\n    x23 = colorfilter(x22, x21)\n    x24 = product(x23, x23)\n    x25 = fork(combine, first, last)\n    x26 = apply(x25, x24)\n    x27 = rbind(sfilter, x26)\n    x28 = lbind(chain, ulcorner)\n    x29 = lbind(x28, x27)\n    x30 = initset(x29)\n    x31 = lbind(rbind, add)\n    x32 = rbind(sfilter, x31)\n    x33 = lbind(lbind, shift)\n    x34 = lbind(rbind, other)\n    x35 = compose(x33, x34)\n    x36 = lbind(rbind, equality)\n    x37 = compose(x36, x27)\n    x38 = fork("], [1.1, "def solve_9e1c1f6c(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(other, ZERO)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = order(x5, identity)\n    x7 = lbind(sfilter, x1)\n    x8 = lbind(matcher, E40)\n    x9 = chain(x7, x8,340)\n    x10 = apply(x9, x6)\n    x11 = fork(sfilter, identity, x10)\n    x12 = compose(center, x11)\n    x13 = compose(dneighbors, x12)\n    x14 = fork(difference, x13, toindices)\n    x15 = compose(first, x14)\n    x16 = fork(subtract, x12, x15)\n    x17 = fork(shoot, x12, x16)\n    x18 = fork(difference, x17, toindices)\n    x19 = chain(mostcolor, x18, x16)\n    x20 = matcher(x19, ZERO)\n    x21 = fork(manhattan, x20, x14)\n    x22 = fork(shoot, x5, x21)\n    x23 = fork(difference, x22, x14)\n    x24 = chain(mostcolor, x23, x16)\n    x25 = matcher(x24, ZERO)\n    x26 = fork(connect, x22, x25)\n    x27 = fork(difference, x26, x14)\n    x28 = fork(recolor, x27, x23)\n    x29 = fork(difference, x28, x14)\n    x30 = fork(recolor, x27, x29)\n    x31 = lbind(mapply, x34)\n    x32 = chain(x31, x30, x27)\n    x33 = lbind(lbind, shift)\n    x34 =x37(x struck)\n    x35 = x33(x34)\n    x36 = x33"], [1.1, "def solve_7618dc16(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = rbind(add, UNITY)\n    x4 = chain(x2, x3, lrcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(add, UP_RIGHT)\n    x8 = chain(x6, x7, urcorner)\n    x9 = fork(recolor, color, x8)\n    x10 = rbind(shoot, NEG_UNITY)\n    x11 = rbind(add, NEG_UNITY)\n    x12 = chain(x10, x11, ulcorner)\n    x13 = fork(recolor, color, x12)\n    x14 = rbind(shoot, DOWN_LEFT)\n    x15 = rbind(add, DOWN_LEFT)\n    x16 = chain(x14, x15, llcorner)\n    x17 = fork(recolor, color, x16)\n    x18 = fork(remove, lrcorner, toindices)\n    x19 = fork(equality, toindices, x18)\n    x20 = sfilter(x1, x19)\n    x21 = fork(remove, urcorner, toindices)\n    x22 = fork(equality, toindices, x21)\n    x23 = sfilter(x1, x22)\n    x24 = fork(remove, ulcorner, toindices)\n    x25 = fork(equality, toindices, x24)\n    x26 = sfilter(x1, x25)\n    x27 = fork(remove, llcorner, toindices)\n    x28 = fork(equality, toindices, x27)\n    x29 = sfilter(x1, x28)\n    x30 = mapply(x5, x20)\n    x31 = mapply(x9, x23)\n    x32 = combine(x30, x31)\n    x33 = mapply(x13, x26)\n    x34 = mapply("], [1.1, "def solve_c468388d(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = lbind(compose, flip)\n    x7 = lbind(matcher, first)\n    x8 = chain(x6, x7, mostcolor)\n    x9 = fork(sfilter, identity, x8)\n    x10 = chain(last, x7, x9)\n    x11 = compose(last, last)\n    x12 = fork(difference, x11, x10)\n    x13 = compose(x12, first)\n    x14 = fork(multiply, x10, x13)\n    x15 = compose(x14, last)\n    x16 = fork(equality, x15, x8)\n    x17 = sfilter(x2, x16)\n    x18 = fork(multiply, x12, x10)\n    x19 = FIVE(x17)\n    x20 = valmax(x17, x18)\n    x21 = compose(x20, x19)\n    x22 = fork(add, x21, x16)\n    x23 = height(x4)\n    x24 = decrement(x23)\n    x25 = compose(toivec, x24)\n    x26 = height(x4)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = product(x27, x27)\n    x29 = product(x28, x28)\n    x30 = product(x29, x29)\n    x31 = fork(multiply, first, last)\n    x32 =hessmax(x30, x31)\n    x33 = lbind(greater, x32)\n    x34 = compose(x33, first)\n    x35 = sfilter(x29, x34)\n    x36 = difference(x29, x35)\n    x37 = compose(x32, first)\n    x38 = apply(x37, x31)"], [1.1, "def solve_042f5f5b(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = cellwise(x2, F, T)\n    x4 = normalize(x3)\n    x5 = width(x4)\n    x6 =668(x5, FOUR)\n    x7 = add(x5, THREE)\n    x8 = width(x4)\n    x9 = divide(x8, x7)\n    x10 = asobject(x4)\n    x11 = rbind(add, UNITY)\n    x12 = compose(invert, x11)\n    x13 = chain(x10, x12, width)\n    x14 = shift(x4, x13)\n    x15 = lbind(shift, x14)\n    x16 = height(x4)\n    x17 = equality(x16, FOUR)\n    x18 = x15(I)\n    x19 = decrement(x18)\n    x20 = toivec(x19)\n    x21 = rbind(add, x20)\n    x22 = compose(invert, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x15)\n    x25 = paint(x4, x24)\n    x26 = vsplit(x25, x9)\n    x27 = objects(x26, T, F, T)\n    x28 = colorfilter(x27, TWO)\n    x29 = rbind(adjacent, x2)\n    x30 = mfilter(x28, x29)\n    x31 = remove(x30, x28)\n    x32 = apply(x21, x31)\n    x33 = last(x32)\n    x34 = sIX(x33, ONE)\n    x35 = hupscale(x34, x5)\n    x36 = sizefilter(x26, FOUR)\n    x37 = merge(x36)\n    x38 = paint(x25, x37)\n    x39 = fill(x38, EIGHT, x1)\n    O = paint("], [1.1, "def solve_6974a4f8(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind( contained, x7)\n    x11 = chain(flip, x10, normalize)\n    x12 = lbind(contained, x7)\n    x13 = chain(flip, x12, x11)\n    x14 = fork(equality, toindices, box)\n    x15 = fork(both, x13, x14)\n    x16 = sfilter(x9, x15)\n    x17 = compose(center, x6)\n    x18 = fork(contained, x17, outbox)\n    x19 = lbind(manhattan, x18)\n    x20 = compose(initset, x9)\n    x21 = fork(rapply, x20, x19)\n    x22 = compose(first, x21)\n    x23 = fork(astuple, x18, x22)\n    x24 = size(x16)\n    x25 = power(x23, x24)\n    x26 = astuple(x25, x27)\n    x27 = downscale(x16, x26)\n    x28 = increment(x12)\n    x29 = downscale(x27, x28)\n    x30 = fork(manhattan, x29, initset)\n    x31 = order(x7, x30)\n    x32 = difference(x69, x31)\n    x33 = compose(x29, x32)\n    x34 = fork(combine, vfrontier, hfrontier)\n    x35 = compose(x33, x34)\n    x36 = double(x20)\n    x37 = decrement(x36)\n    x38 = tojvec(x37"], [1.1, "def solve_2940a85c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x2)\n    x26 = increment(x24)\n    x27 = rbind(greater, x26)\n    x28 = compose(x27, last)\n    x29 = sfilter(x23, x28)\n    x30 = increment(x29)\n    x31 = width(x22)\n    x32 = divide(x31, x30)\n    x33 = increment(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = paint(x22, x34)\n    x36 = astuple(x32, x32)\n    x37 = canvas(ZERO, x36)\n    x38 = asindices(x37)\n    x39 = increment(x38)\n    x40 = pair(x39, x30)\n    x41 = lb"], [1.1, "def solve_32c2d42c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = chain(ineighbors, last, first)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = objects(x7, T, F, T)\n    x10 = vmirror(x7)\n    x11 = objects(x10, T, F, T)\n    x12 = lbind(greater, THREE)\n    x13 = compose(x12, size)\n    x14 = sfilter(x11, x13)\n    x15 = merge(x14)\n    x16 = objects(x7, T, F, T)\n    x17 = colorfilter(x16, ZERO)\n    x18 = rbind(toobject, x17)\n    x19 = chain(x18, delta, x2)\n    x20 = rbind(sfilter,both)\n    x21 = compose(x20, vline)\n    x22 = sfilter(x1, x21)\n    x23 = difference(x1, x22)\n    x24 = chain(positive, size, x19)\n    x25 = rbind(sfilter, x22)\n    x26 = compose(x25, vline)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(x24, x27, dneighbors)\n    x29 = rbind(sfilter, x22)\n    x30 = chain( xenette, x28, x29)\n    x31 = merge(x1)\n    x32 = vsplit(x27, x31)\n    x33 = apply(x30, x32)\n    x34 = lbind(greater, ONE)\n    x35 = compose(x34, size)\n    x36 = sfilter(x33, x35)\n    x37 = apply(x32, x36)\n    x38 = paint(x25, x"], [1.1, "def solve_4fc10b87(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_fded9af2(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = fork(connect, ulcorner, lrcorner)\n    x4 = fork(equality, toindices, x3)\n    x5 = sfilter(x2, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, hmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, T)\n    x11 = compose(flip, x4)\n    x12 = sfilter(x10, x11)\n    x13 = rbind(shoot, UNITY)\n    x14 = rbind(shoot, NEG_UNITY)\n    x15 = fork(combine, x13, x14)\n    x16 = rbind(branch, llcorner)\n    x17 = rbind(x16, urcorner)\n    x18 = rbind(branch, DOWN_LEFT)\n    x19 = rbind(x18, UP_RIGHT)\n    x20 = rbind(branch, RIGHT)\n    x21 = rbind(x20, DOWN)\n    x22 = fork(contained, urcorner, toindices)\n    x23 = lbind(index, x9)\n    x24 = compose(x21, x22)\n    x25 = fork(add, ulcorner, x24)\n    x26 = compose(x23, x25)\n    x27 = chain(initset, x17, x22)\n    x28 = fork(rapply, x27, identity)\n    x29 = compose(first, x28)\n    x30 = compose(x19, x22)\n    x31 = fork(add, x29, x30)\n    x32 = compose(x15, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x12)\n    x35 = merge(x12)\n    x36 = cover(x9, x35)\n    x37 ="], [1.1, "def solve_5bf96769(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = subgrid(x1, I)\n    x3 = argmax(x1, size)\n    x4 = outbox(x3)\n    x5 = subgrid(x4, I)\n    x6 = width(x5)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = height(x5)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = lbind(multiply, x7)\n    x11 = lbind(vsplit, x5)\n    x12 = compose(x10, x11)\n    x13 = fork(equality, identity, x12)\n    x14 = lbind(multiply, x6)\n    x15 = lbind(occurrences, x14)\n    x16 = compose(x14, x15)\n    x17 = fork(add, last, x16)\n    x18 = compose(positive, first)\n    x19 = lbind(interval, ZERO)\n    x20 = rbind(x19, ONE)\n    x21 = compose(x20, x17)\n    x22 = compose(x21, x18)\n    x23 = fork(add, x2, x22)\n    x24 = decrement(x368)\n    x25 = lbind(astuple, x24)\n    x26 = compose(x25, x23)\n    x27 = fork(connect, x26, center)\n    x28 = mapply(x27, x3)\n    x29 = fill(x5, FOUR, x28)\n    x30 = objects(x29, T, F, T)\n    x31 = fork(connect, ulcorner, x7)\n    x32 = mapply(x31, x30)\n    x33 = fill(x29, TWO, x32)\n    x34 = replace(x33, FIVE, ZERO)\n    x35 = ofcolor(x34, FIVE)\n    x36 = subgrid(x35, x33)\n    x37 = asobject(x36)\n    x38 = shift(x"], [1.1, "def solve_4a6e75dd(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_0e5203de(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = width(x4)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = matcher(first, ZERO)\n    x10 = compose(flip, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(x11, asobject)\n    x13 = x12(x4)\n    x14 = x12(x4)\n    x15 = mostcolor(x13)\n    x16 = matcher(first, x15)\n    x17 = compose(flip, x16)\n    x18 = rbind(sfilter, x17)\n    x19 = compose(x18, asobject)\n    x20 = apply(x19, x8)\n    x21 = mostcolor(x20)\n    x22 = shape(I)\n    x23 = canvas(x21, x22)\n    x24 = lbind(hconcat, x4)\n    x25 = chain(x24,asobject, x9)\n    x26 = lbind(shift, x3)\n    x27 =(NEG_ONE, x30)\n    x28 = chain(x26, x27, asobject)\n    x29 = lbind(shift, x3)\n    x30 = x29(x4)\n    x31 = objects(x22, x30, x8)\n    x32 = merge(x31)\n    x33 = paint(x22, x32)\n    x34 = rot90(x33)\n    x35 = rot180(x33)\n    x36 = rot270(x33)\n    x37 = hconcat(x34, x35)\n    x38 = lbind(shift, x3)\n    x39 = lbind(mapply, x38)\n    x40 = rbind(ofcolor, x21)\n    x41 = compose("], [1.1, "def solve_5f207658(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(FOUR, FOUR)\n    x4 = index(I, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = shoot(x8, UP_RIGHT)\n    x10 = combine(x6, x9)\n    x11 = astuple(NEG_TWO, ONE)\n    x12 = rbind(multiply, x11)\n    x13 = apply(x12, x10)\n    x14 = rbind(hsplit, x12)\n    x15 = apply(x14, x13)\n    x16 = combine(x13, x15)\n    x17 = paint(I, x16)\n    x18 = ofcolor(I, TWO)\n    x19 = asindices(I)\n    x20 = box(x19)\n    x21 = rbind(difference, x20)\n    x22 = chain(size, x21, toindices)\n    x23 = matcher(x22, ZERO)\n    x24 = partition(I)\n    x25 = sfilter(x24, x23)\n    x26 = argmax(x25, x24)\n    x27 = subgrid(x26, I)\n    x28 = interval(ONE, FOUR, ONE)\n    x29 = lbind(apply, initset)\n    x30 = lbind(indices, x26)\n    x31 = chain(x29, x30, corners)\n    x32 = lbind(apply, x11)\n    x33 = lbind(subtract, x26)\n    x34 = chain(x32, x33, x31)\n    x35 = fork( approximation81, x34, x21)\n    x36 = fork(vmirror, x35, x31)\n    x37 = extract(x28, x35)\n    x38 = x"], [1.1, "def solve_33ee0baf(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(sfilter, hline)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = rbind(sfilter, vline)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = rbind(multiply, THREE)\n    x9 = chain(increment, x8, last)\n    x10 = lbind(rbind, astuple)\n    x11 = lbind(chain, x9)\n    x12 = rbind(x11, first)\n    x13 = lbind(subtract, x1)\n    x14 = chain(x12, x13, decrement)\n    x15 = fork(multiply, first, last)\n    x16 = lbind(fork, connect)\n    x17 = lbind(x16, x14)\n    x18 = compose(x15, x17)\n    x19 = lbind(chain, first)\n    x20 = lbind(rbind, difference)\n    x21 = compose(x19, x20)\n    x22 = lbind(lbind, shape)\n    x23 = compose(x22, center)\n    x24 = lbind(lbind, occurrences)\n    x25 = compose(x24, last)\n    x26 = fork(matcher, x23, x25)\n    x27 = fork(compose, x28, x26)\n    x28 = lbind(chain, size)\n    x29 = compose(x28, x6)\n    x30 = lbind(x26, I)\n    x31 = compose(x30, x6)\n    x32 = lbind(lbind, IS)\n    x33 = compose(x32, x6)\n    x34 = fork(compose, x33, x29)\n    x35 = fork(compose, x28, x28)\n    x36 = fork(both, x34, x35)\n    x37 = fork(sfilter, first, last)\n    x38 = chain(decre"], [1.1, "def solve_56142bed(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_ae467121(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_6ca6cd2e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, ONE)\n    x3 = ulcorner(x1)\n    x4 = index(I, x3)\n    x5 = equality(x4, NEG_UNITY)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x15, x17)\n    x19 = remove(x16, x18)\n    x20 = remove(x4, x19)\n    x21 = first(x20)\n    x22 = asindices(I)\n    x23 = other(x22, x21)\n    x24 = palette(I)\n    x25 = remove(x16, x24)\n    x26 = lbind(index, I)\n    x27 = compose(x26, last)\n    x28 = fork(equality, last, x27)\n    x29 = rbind(contained, x31)\n    x30 = compose(x29, first)\n    x31 = rbind(ofcolor, x15)\n    x32 = compose(x31, first)\n    x33 = fork(equality, x32, x28)\n    x34 = fork(either, x30, x33)\n    x35 = ofcolor(x9, x23)\n    x36 = ofcolor(x10, x24)\n    x37 = center(x35)\n    x38 = center(x36)\n    x39 = subtract(x37, x38)\n    x40 = multiply(x39, THREE)\n    x41 = power(x40, x28)"], [1.1, "def solve_f821eba5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = other(x3, ZERO)\n    x5 = ofcolor(I, x4)\n    x6 = urcorner(x5)\n    x7 = shoot(x6, UNITY)\n    x8 = shoot(x6, DOWN_LEFT)\n    x9 = shoot(x6, UP_RIGHT)\n    x10 = shoot(x6, NEG_UNITY)\n    x11 = combine(x7, x8)\n    x12 = combine(x10, x9)\n    x13 = combine(x11, x12)\n    x14 = lbind(colorfilter, x1)\n    x15 = compose(x14, color)\n    x16 = rbind(toobject, I)\n    x17 = difference(x1, x13)\n    x18 = rbind(colorcount, x4)\n    x19 = chain(x18, x16, color)\n    x20 = matcher(x19, ONE)\n    x21 = fork(both, x19, x20)\n    x22 = extract(x1, x21)\n    x23 = other(x1, x22)\n    x24 = colorfilter(x1, x23)\n    x25 = rbind(toobject, I)\n    x26 = matcher(x25, x24)\n    x27 = compose(x26, dneighbors)\n    x28 = fork(equality, x27, last)\n    x29 = sfilter(x24, x28)\n    x30 = rbind(adjacent, x524)\n    x31 = compose(x30, first)\n    x32 = sfilter(x29, x31)\n    x33 = compose(x32, last)\n    x34 = fork(either, x30, x33)\n    x35 = sfilter(x24, x34)\n    x36 = height(x23)\n    x37 = subtract(x36, THREE)\n    x38 = height(x36)\n    x39 = divide(x37, x"], [1.1, "def solve_003d1402(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = ofcolor(I, x2)\n    x4 = switch(I, x2, x3)\n    x5 = ofcolor(x4, ZERO)\n    x6 = shape(I)\n    x7 = canvas(ZERO, x6)\n    x8 = normalize(x5)\n    x9 = lbind(shift, x8)\n    x10 = apply(x9, x4)\n    x11 = argmin(x10, x9)\n    x12 = canvas(ZERO, x6)\n    x13 = ofcolor(x4, x2)\n    x14 = rbind(shift, x13)\n    x15 = mapply(x14, x4)\n    x16 = normalize(x15)\n    x17 = ulcorner(x2)\n    x18 = vmirror(x16)\n    x19 = objects(x18, T, F, T)\n    x20 = insert(x17, x19)\n    x21 = color(x2)\n    x22 =540(ZERO, x16)\n    x23 = rightmost(x2)\n    x24 = remove(x23, x20)\n    x25 = objects(x18, T, F, T)\n    x26 = colorfilter(x25, x21)\n    x27 = merge(x26)\n    x28 = ulcorner(x2)\n    x29 = first(x26)\n    x30 = rbind(subtract, x28)\n    x31 = rbind(mapply, x30)\n    x32 = chain(x31, x27, dmirror)\n    x33 = ofcolor(x4, x2)\n    x34 = mapply(x32, x33)\n    O = fill(x4, x2, x34)\n    return O"], [1.1, "def solve_2134eac9(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(ONE, THREE)\n    x4 = astuple(TWO, FOUR)\n    x5 = matcher(size, x4)\n    x6 =8980001(x3)\n    x7 = rbind(subgrid, I)\n    x8 = lbind(compose, x5)\n    x9 = compose(x8, x7)\n    x10 = lbind(compose, x10)\n    x11 = compose(x11, x8)\n    x12 = lbind(compose, x11)\n    x13 = compose(x12, x9)\n    x14 = fork(ofcolor, x9, x13)\n    x15 = compose(normalize, x14)\n    x16 = mapply(x15, x2)\n    O = fill(I, ZERO, x16)\n    return O"], [1.1, "def solve_42d13249(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = difference(x1, x3)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = chain(delta, merge, fgpartition)\n    x8 = rbind(argmin, x7)\n    x9 = chain(first, x8, x7)\n    x10 =676e(x5)\n    x11 = x9(x10)\n    x12 = occurrences(x6, x11)\n    x13 = first(x12)\n    x14 = initset(x13)\n    x15 = color(x13)\n    x16 = fill(x6, x15, x13)\n    x17 = fill(x16, x15, x13)\n    x18 = fork(recolor, x9, x17)\n    x19 = fork(remove, normalize, x18)\n    x20 = objects(x16, T, T, T)\n    x21 = apply(x19, x20)\n    x22 = mapply(x16, x21)\n    O = paint(x17, x22)\n    return O"], [1.1, "def solve_894941a6(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = apply(izatching, x3)\n    x5 = difference(x2, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = rbind(subtract, x6)\n    x8 = rbind(colorcount, ZERO)\n    x9 = chain(x8, invert, x7)\n    x10 = x9(UP)\n    x11 =129(x10)\n    x12 = lbind(subtract, x11)\n    x13 = chain(toivec, invert, x12)\n    x14 = fork(shift, identity, x13)\n    x15 = mapply(x14, x5)\n    O = paint(I, x15)\n    return O"], [1.1, "def solve_1b88e50e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(rbind, manhattan)\n    x5 = lbind(argmax, x3)\n    x6 = lbind(colorcount, I)\n    x7 = compose(x5, x6)\n    x8 = fork(combine, x7, identity)\n    x9 = apply(x8, x4)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, last)\n    x12 = sfilter(x4, x11)\n    x13 = rapply(x12, x2)\n    x14 = mapply(first, x13)\n    x15 = same Welsh(x14)\n    x16 = cover(I, x15)\n    x17 = shape(x15)\n    x18 = add(DOWN, x17)\n    x19 = width(I)\n    x20 = divide(x19, x17)\n    x21 = add(x19, x20)\n    x22 = width(I)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x17)\n    x25 = neighbors(x2)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x23)\n    x28 = rbind(shift, x17)\n    x29 = mapply(x28, x27)\n    O = paint(x16, x29)\n    return O"], [1.1, "def solve_3ab273c6(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 =recolor(I, x8)\n    x22 = mfilter(x20, x19)\n    x23 = rbind(adjacent, x7)\n    x24 =993(x23, x22)\n    x25 = mfilter(x7, x18)\n    x26 = mapply(x25, x24)\n    x27 = fill(x13, FOUR, x25)\n    O = fill(x27, ONE, x26)\n    return O"], [1.1, "def solve_5f77b5f6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = compose(last, trim)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(vmirror, x4)\n    x6 = compose( hmirror, x4)\n    x7 = fork( equality, identity, x6)\n    x8 = fork(either, x7, x5)\n    x9 = rbind(toobject, I)\n    x10 = chain(palette, x9, trim)\n    x11 = lbind(contained, THREE)\n    x12 = compose(x11, x8)\n    x13 = fork(contained, height, width)\n    x14 = chain(flip, x12, x13)\n    x15 = sfilter(x1, x14)\n    x16 = chain(first, asobject, x8)\n    x17 = fork(040, x16, x12)\n    x18 = fork(shift, x17, ulcorner)\n    x19 = compose(x9, x18)\n    x20 = argmin(x15, x19)\n    x21 = rbind( subgrid, I)\n    x22 = apply(x21, x5)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_975aa0b1(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, toindices, box)\n    x5 = chain(contained, corners, x4)\n    x6 = x5(ZERO)\n    x7 = fgpartition(I)\n    x8 = sfilter(x7, x6)\n    x9 = fork(equality, toindices, corners)\n    x10 = height(x8)\n    x11 = extract(x9, x10)\n    x12 = minimum(x9)\n    x13 = subtract(x12, x11)\n    x14 = divide(x13, x10)\n    x15 =backdrop(x8, x14)\n    x16 = inbox(x15)\n    x17 = backdrop(x16)\n    x18 = cover(I, x17)\n    x19 = uppermost(x18)\n    x20 = lowermost(x18)\n    x21 = subtract(x19, x20)\n    x22 =41(greater)\n    x23 = rbind(greater, x21)\n    x24 = compose(x23, x22)\n    x25 = sfilter(x18, x24)\n    x26 = difference(x19, x25)\n    x27 = fill(x18, FOUR, x25)\n    x28 = paint(x27, x26)\n    O = fill(x28,9, x27)\n    return O"], [1.1, "def solve_f3ced5ba(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, shape)\n    x7 = x6(x5)\n    x8 = objects(x5, T, F, T)\n    x9 = lbind(contained, x7)\n    x10 = compose(flip, x9)\n    x11 = fork(both, x3, x10)\n    x12 = sfilter(x8, x11)\n    x13 = merge(x12)\n    x14 = vsplit(x5, x13)\n    x15 = hsplit(x5, x14)\n    x16 = greater(x15, ONE)\n    x17 = branch(x16, divide, identity)\n    x18 = x17(x9)\n    x19 =28(x18)\n    x20 = downscale(x5, x19)\n    x21 = ofcolor(x20, x7)\n    x22 = ZERO(x21)\n    x23 = asindices(x20)\n    x24 = ofcolor(x20, x7)\n    x25 = x23(x24)\n    x26 = shift(x25, x22)\n    x27 = fill(x20, ZERO, x26)\n    O = paint(x27, x27)\n    return O"], [1.1, "def solve_02cb3927(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = compose(positive, size)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(toindices, x3, box)\n    x5 = fork(4048 x4, box, identity)\n    x6 = fork(difference, box, x5)\n    x7 = mapply(x6, x1)\n    O = fill(I, EIGHT, x7)\n    return O"], [1.1, "def solve_bac9ad3c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =14444490\n    00000000\n    00000000\n    77777790\n    70777770\n    77777770\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1\n    return O"], [1.1, "def solve_496c1a13(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = halve(x1)\n    x4 = vupscale(x3, x2)\n    x5 = rbind(shoot, UNITY)\n    x6 = other(x2, ZERO)\n    x7 = color(x6)\n    x8 = astuple(x3, x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x9, x7)\n    x11 = objects(x10, T, T, T)\n    x12 = initset(ZERO)\n    x13 = rbind(manhattan, x12)\n    x14 = compose(x13, initset)\n    x15 = argmax(x11, x14)\n    x16 = astuple(x3, x4)\n    x17 = canvas(x15, x16)\n    x18 = shoot(x15, UNITY)\n    x19 = shoot(x15, NEG_UNITY)\n    x20 = fill(x17, x7, x19)\n    x21 = fill(x20, x17, x18)\n    x22 = objects(x21, T, F, T)\n    x23 = merge(x22)\n    x24 = cover(x21, x23)\n    x25 = mapply(vfrontier, x22)\n    x26 = mapply(hfrontier, x22)\n    x27 = size(x26)\n    x28 = equality(x27, x25)\n    x29 = fill(x24, x7, x28)\n    x30 = branch(x29, x25, x1)\n    x31 = fill(x30, x7, x25)\n    x32 =279(x31)\n    x33 = first(x32)\n    x34 = shift(x33, x33)\n    O = fill(x31, x2, x34)\n    return O"], [1.1, "def solve_718bbafe(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = other(x3, ZERO)\n    x5 = lbind(colorfilter, x1)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, x7)\n    x10 = sfilter(x4, x9)\n    x11 = totuple(x10)\n    x12 = apply(color, x11)\n    x13 = leastcommon(x12)\n    x14 = ofcolor(I, x13)\n    x15 = inbox(x14)\n    x16 = center(x15)\n    x17 = mapply(neighbors, x16)\n    O = underfill(I,(x13, x17)\n    return O"], [1.1, "def solve_54cb40ad(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =46(6900\n    6444446\n    6446446\n    4444446\n    6444446\n    0630336\n    0630336\n    0055596\n    0055596\n    0000460\n    0000460\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [1.1, "def solve_a7610ae1(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = apply(size, x10)\n    x12 = x11(x1)\n    x13 = toivec(x12)\n    x14 = shift(x10, x13)\n    x15 = delta(x14)\n    x16 = shift(x15, x8)\n    x17 = delta(x16)\n    x18 = size(x16)\n    x19 =41866(equality)\n    x20 = sfilter(x17, x19)\n    x21 = combine(x16, x20)\n    x22 = mapply(x21, x3)\n    O = fill(I, ONE, x22)\n    return O"]], "1e97544e": [[0.05978427658322649, "def solve_7bad2d57(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.05978427658322649, "def solve_eb708b00(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.06555616266185658, "def solve_185c1c78(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_6b93072a(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.06555616266185658, "def solve_41a44318(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_8fb59eda(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_e3c6bb0b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_a95e9c18(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_bd2a2dd5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.06555616266185658, "def solve_5c48632a(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_ba306f93(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.06555616266185658, "def solve_1afa0c0f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, hline)\n    x4 = sfilter(x2, vline)\n    x5 = merge(x3)\n    x6 = shape(x5)\n    x7 = merge(x4)\n    x8 = fill(I, FOUR, x7)\n    O = fill(x8, THREE, x5)\n    return O"], [0.06673962439929698, "def solve_1dba5970(I):\n    x1 = height(I)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = subtract(x1, TWO)\n    x5 = divide(x4, THREE)\n    x6 = astuple(x5, x5)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = partition(x7)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = initset(x2)\n    x13 = palette(x3)\n    x14 = palette(x11)\n    x15 = difference(x13, x14)\n    x16 = difference(x15, x12)\n    x17 = first(x16)\n    x18 = interval(ZERO, THREE, ONE)\n    x19 = product(x18, x18)\n    x20 = totuple(x19)\n    x21 = apply(first, x20)\n    x22 = apply(last, x20)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x21)\n    x25 = apply(x23, x22)\n    x26 = papply(add, x24, x21)\n    x27 = papply(add, x25, x22)\n    x28 = papply(astuple, x26, x27)\n    x29 = lbind(shift, x11)\n    x30 = mapply(x29, x28)\n    O = underfill(I, x17, x30)\n    return O"], [0.06834668128402709, "def solve_95450210(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.06959741552663885, "def solve_ddec980a(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_ae0112f9(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_f863fa7d(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_12ec8fbc(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0702135574591548, "def solve_4132e03c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.07189074458127896, "def solve_0f47992f(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.0747180717801148, "def solve_f916a135(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.07641808482315048, "def solve_0e1070b8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_931bc39d(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07909280166991962, "def solve_c0d585e4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.08283557492092357, "def solve_5e0f813b(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08498956006826804, "def solve_638e4583(I):\n    x1 = mostcolor(I)\n    x2 = rot90(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot270(x8)\n    return O"], [0.08598473307451636, "def solve_4ecec0a9(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.0868238750835419, "def solve_091e81b2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.09009415538349093, "def solve_a2a18978(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = leastcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = mostcolor(I)\n    x7 = other(x5, x6)\n    x8 = inbox(x2)\n    O = fill(I, x7, x8)\n    return O"], [0.09720967561895832, "def solve_22c9619f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.09720967561895832, "def solve_94303c0e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.10350267054002193, "def solve_06bc2b5c(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.10350267054002193, "def solve_e9735efc(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.10350267054002193, "def solve_0ca562cc(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.10434388482560263, "def solve_532500fe(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.10434388482560263, "def solve_e1a14e0e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.11033822332653574, "def solve_1e42a02d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.11033822332653574, "def solve_3e8904b4(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.11343164518038894, "def solve_bea7d06e(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.11873730483078786, "def solve_c884ac36(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.12169800916884342, "def solve_125e1b1b(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_0c3bcaf4(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_c0391217(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_74d8ad7f(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12583356972621706, "def solve_b636b6f3(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12638696646420425, "def solve_e9af2c6b(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.13134103434345124, "def solve_8a17129d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_68aedafd(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_d4154c89(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.1314364028975242, "def solve_1036b60f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.1314364028975242, "def solve_326badf8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.13378620904168428, "def solve_7374ead7(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, FOUR, x3)\n    return O"], [0.1391543174866792, "def solve_cc6026c3(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.15924388832696912, "def solve_2e4a5a68(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_f993355a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.16903724504454612, "def solve_fe772d1b(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.1744829489578147, "def solve_f5b7533d(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, DOWN, x3)\n    return O"], [0.1773065582183363, "def solve_09958390(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_18b9f4d3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_50c6f120(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_ec9f16fa(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_8cd8340c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_495a0350(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_ccdd4d83(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.18190769514794702, "def solve_4277ab5c(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.18967220198830603, "def solve_171a966a(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind(ofcolor, I)\n    x5 = lbind(prapply, connect)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, identity, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [0.1968197311802683, "def solve_b2b848a7(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.20421150314458938, "def solve_0c4841a8(I):\n    x1 = partition(I)\n    x2 = fork(difference, toindices, corners)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.21035164879858023, "def solve_5559d864(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.21391916164730382, "def solve_c2a72280(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_118e3c4e(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_fa8b33ba(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_c42fc120(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_acf718d7(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.23012508925350347, "def solve_6b5c9d52(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork(add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, EIGHT, x29)\n    return O"], [0.2537260279414613, "def solve_690dda1d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_e1694021(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2953542834280259, "def solve_a035e858(I):\n    x1 = replace(I, THREE, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, THREE)\n    O = subgrid(x15, x14)\n    return O"], [0.2969700117912533, "def solve_530ae4e1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_30c2ff8c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_fe1c9918(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_73293819(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_bf515fe6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_5758f578(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_5bc55252(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_350e0204(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_ca8cc9f8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_6ddc37d9(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_640e98f7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_cd8bbc67(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3063136421137608, "def solve_4a36436e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.30649821446512787, "def solve_f8ab48ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.30649821446512787, "def solve_2ef4922f(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.3066763611693097, "def solve_1a2bf88c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.31011174594270147, "def solve_71b2589a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_05dd8a53(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first,x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_05f314e7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_1c3eff8e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.35285797856791773, "def solve_e8e0e5b5(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35285797856791773, "def solve_d3b1f1ac(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = ofcolor(I, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = rbind(shoot, UP_RIGHT)\n    x10 = rbind(shoot, DOWN_LEFT)\n    x11 = fork(combine, x9, x10)\n    x12 = fork(combine, x8, x11)\n    x13 = mapply(x12, x5)\n    O = fill(I, x4, x13)\n    return O"], [0.3546426310625093, "def solve_8e226f6f(I):\n    x1 = objects(I, T, F, F)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.3546426310625093, "def solve_19251b86(I):\n    x1 = asobject(I)\n    x2 = occurrences(I, x1)\n    x3 = lbind(shift, x1)\n    x4 = mapply(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.3646584896584897, "def solve_3bd44582(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(subtract, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_4fef0840(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_b1f76321(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3805678079386525, "def solve_9e21de42(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = valmax(x2, shape)\n    x5 = canvas(x1, x4)\n    x6 = colorfilter(x3, x1)\n    x7 = compose(maximum, shape)\n    x8 = order(x6, x7)\n    x9 = apply(normalize, x8)\n    x10 = size(x9)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = apply(toivec, x11)\n    x13 = mpapply(shift, x9, x12)\n    x14 = canvas(x1, x4)\n    x15 = paint(x14, x13)\n    O = rot180(x15)\n    return O"], [0.4231949243417133, "def solve_77a3f40d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5586554186554187, "def solve_a367a9d5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_32d5027b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6, "def solve_7bbed118(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6185357460219338, "def solve_8a1de097(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_1f14e3b0(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_596386e8(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6303391053391053, "def solve_14ea4d58(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorcount, I)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.6609853638425067, "def solve_0dc8b874(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vline(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = ofcolor(x4, THREE)\n    x6 = ofcolor(x4, TWO)\n    x7 = center(x5)\n    x8 = hfrontier(x7)\n    x9 = center(x6)\n    x10 = hfrontier(x9)\n    x11 = mostcolor(I)\n    x12 = partition(I)\n    x13 = matcher(color, x11)\n    x14 = extract(x12, x13)\n    x15 = other(x12, x14)\n    x16 = replace(x4, THREE, x11)\n    x17 = difference(x16, x15)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = other(x19, x18)\n    x21 = switch(x10, x17, x20)\n    x22 = replace(x21, THREE, x11)\n    O = x3(x22)\n    return O"], [0.6793066105327229, "def solve_cbd467ff(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.7635281385281386, "def solve_067b1692(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.8704545454545455, "def solve_2cf1007c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_270b080f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(extract, identity, x3)\n    x7 = compose(last, x6)\n    x8 = compose(dneighbors, x7)\n    x9 = lbind(apply, last)\n    x10 = fork(sfilter, identity, x5)\n    x11 = compose(x9, x10)\n    x12 = fork(difference, x8, x11)\n    x13 = compose(first, x12)\n    x14 = fork(subtract, x7, x13)\n    x15 = fork(shoot, x7, x14)\n    x16 = fork(recolor, leastcolor, x15)\n    x17 = mapply(x16, x1)\n    O = underpaint(I, x17)\n    return O"], [1.0, "def solve_9f04acbb(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_6e449a2d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x12)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x8)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [1.0, "def solve_4bc447d9(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_09b3f310(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_337e52db(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = ulcorner(x5)\n    x7 = power(last, TWO)\n    x8 = order(x6, identity)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = color(x9)\n    x12 = width(x9)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = apply(tojvec, x13)\n    x15 = mapply(shift, x14)\n    x16 = fill(I, x11, x15)\n    x17 = shape(x9)\n    x18 = canvas(x1, x17)\n    x19 = paint(x18, x16)\n    O = rot90(x19)\n    return O"], [1.0, "def solve_f67416e9(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_50664123(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = difference(x1, x3)\n    return O"], [1.0, "def solve_8c2bbcd0(I):\n    x1 = fgpartition(I)\n    x2 = matcher(merge, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f60e82e8(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x2)\n    x5 = toindices(x4)\n    x6 = difference(x1, x5)\n    x7 = toobject(x6, I)\n    x8 = mostcolor(x7)\n    x9 = palette(I)\n    x10 = remove(x2, x9)\n    x11 = lbind(colorcount, I)\n    x12 = argmax(x10, x11)\n    x13 = rbind(contained, x12)\n    x14 = neighbors(ORIGIN)\n    x15 = mapply(neighbors, x14)\n    x16 = apply(x13, x15)\n    x17 = rbind(gravitate, x12)\n    x18 = compose(x17, initset)\n    x19 = fork(add, identity, x18)\n    x20 = fork(connect, identity, x19)\n    x21 = mapply(x20, x16)\n    x22 = fill(I, x2, x21)\n    O = replace(x22, x8, x12)\n    return O"], [1.0, "def solve_34a53a5a(I):\n    x1 = Imirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(x4, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = compose(x3, palette)\n    x11 = fork(equality, x10, identity)\n    x12 = extract(x9, x11)\n    x13 = objects(x8,fl, F, T)\n    x14 = rbind(colorcount, x5)\n    x15 = compose(x14, palette)\n    x16 = argmin(x13, x15)\n    x17 = rbind(colorcount, x5)\n    x18 = compose(x17, palette)\n    x19 = argmin(x16, x18)\n    x20 = ofcolor(x800, x6)\n    x21 = subgrid(x20, x8)\n    x22 = leftmost(x12)\n    x23 = rightmost(x12)\n    x24 = lbind(greater, x22)\n    x25 = compose(x24, first)\n    x26 = rbind(greater, x23)\n    x27 = compose(x26, first)\n    x28 = asindices(x27)\n    x29 = sfilter(x28, x25)\n    x30 = mapply(x45, x29)\n    x31 = paint(x5, x30)\n    O = subgrid(x21, x31)\n    return O"], [1.0, "def solve_2e79b8ca(I):\n    x1 = fgpartition(I)\n    x2 = matcher(neighbors, FOUR)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_90596e66(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_44e66daa(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = add(UNITY, UNITY)\n    x4 = canvas(x1, x3)\n    x5 = toobject(x4, I)\n    x6 = increment(x1)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = apply(outbox, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(rbind, neighbors)\n    x11 = chain(x10, x9, outbox)\n    x12 = apply(x11, x8)\n    x13 = lbind(argmin, x5)\n    x14 = lbind(matcher, x4)\n    x15 = compose(x13, x14)\n    x16 = apply(x15, x12)\n    x17 = lbind(contained, ZERO)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = compose(color, x11)\n    x21 = fork(recolor, x20, identity)\n    x22 = mapply(x21, x19)\n    x23 = paint(I, x22)\n    x24 = flip(x18)\n    x25 = asindices(I)\n    x26 = box(x25)\n    x27 = toobject(x25, I)\n    x28 = increment(x26)\n    x29 = rbind(interval, x28)\n    x30 = apply(x29, x27)\n    x31 = pair(x32, x30)\n    x32 = mapply(x11, x31)\n    O = paint(x23, x32)\n    return O"], [1.0, "def solve_e5a7c74f(I):\n    x1 = objects(I, T, T, F)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(increment, minimum, shape)\n    x5 = fork(greater, x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = fill(x3, TWO, x7)\n    x9 = merge(x8)\n    O = paint(x8, x9)\n    return O"], [1.0, "def solve_7a859b70(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = identity(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = identity(x10)\n    x13 = matcher(x11, x12)\n    x14 = fgpartition(x8)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = shift(x16, UNITY)\n    x18 = paint(x7, x17)\n    x19 = color(x3)\n    O = x3(x18)\n    return O"], [1.0, "def solve_3f7aedb9(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = mostcolor(I)\n    x4 = remove(x3, x2)\n    x5 = lbind(other, x4)\n    x6 = compose(x5, color)\n    x7 = fork(recolor, x6, outbox)\n    x8 = mapply(x7, x1)\n    x9 = mapply(toindices, x1)\n    x10 = box(x9)\n    x11 = difference(x10, x9)\n    x12 = lbind(argmin, x9)\n    x13 = rbind(compose, initset)\n    x14 = lbind(rbind, manhattan)\n    x15 = chain(x13, x14, initset)\n    x16 = chain(initset, x12, x15)\n    x17 = fork(combine, x16, outbox)\n    x18 = compose(x12, x17)\n    x19 = fork(apply, x18, x13)\n    x20 = apply(normalize, x11)\n    x21 = ofcolor(I, x3)\n    x22 = rbind(subtract, SEVEN)\n    x23 = rbind(compose, initset)\n    x24 = lbind(rbind, manhattan)\n    x25 = chain(x23, x24, initset)\n    x26 = lbind(fork, greater)\n    x27 = fork(sfilter, x25, x26)\n    x28 = mapply(x27, x11)\n    x29 = paint(I, x28)\n    O = fill(x29, ZERO, x1)\n    return O"], [1.0, "def solve_3fa421d1(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_bff2a01d(I):\n    x1 = solveSighity(I)\n    x2 = dmirror(I)\n    x3 = invert(NEG_TWO)\n    x4 = papply(pair, I, x2)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x7, x6)\n    x9 = apply(x5, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.0, "def solve_c449c1da(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x2)\n    x5 = fill(I, x3, x4)\n    x6 = increment(x5)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = invert(x6)\n    x9 = shift(x7, x8)\n    x10 = interval(ZERO, x6, ONE)\n    x11 = increment(x5)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = product(x9, x12)\n    x14 = power(first, totuple)\n    x15 = compose(first, totuple)\n    x16 = fork(subtract, x14, x15)\n    x17 = compose(last, last)\n    x18 = compose(last, last)\n    x19 = fork(intersection, x17, x18)\n    x20 = compose(size, x19)\n    x21 = matcher(x20, ZERO)\n    x22 = sfilter(x13, x21)\n    x23 = fork(subtract, first, last)\n    x24 = fork(increment, x23, x22)\n    x25 = compose(invert, x24)\n    x26 = order(x22, x25)\n    x27 = apply(x25, x26)\n    x28 = size(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(tojvec, x29)\n    x31 = apply(x24, x30)\n    x32 = pair(x27, x31)\n    x33 = mapply(x21, x32)\n    x34 = fill(x5, x2, x33)\n    x35 = difference(x34, x28)\n    O = fill(x35, x2, x36)\n    return O"], [1.0, "def solve_44cd2a3b(I):\n    x1 = leastcolor(I)\n    x2 = astuple(dmirror, cmirror)\n    x3 = astuple(hmirror, identity)\n    x4 = combine(x2, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x1)\n    x8 = chain(lowermost, x7, x6)\n    x9 = chain(decrement, height, x6)\n    x10 = fork(equality, x8, x9)\n    x11 = extract(x4, x10)\n    x12 = x11(I)\n    x13 = ofcolor(x12, x1)\n    x14 = shift(x13, UP)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(x12, x1, x19)\n    O = x11(x20)\n    return O"], [1.0, "def solve_424203be(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_9052932d(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = objects(x7, T, F, T)\n    x9 = order(x8, leftmost)\n    x10 = apply(color, x9)\n    x11 = repeat(x10, ONE)\n    O = x6(x11)\n    return O"], [1.0, "def solve_abbbc4e0(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_6c1aabda(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = rbind(sfilter, x7)\n    x9 = totuple(x2)\n    x10 = apply(x8, x9)\n    x11 = pair(x4, x10)\n    x12 = combine(x6, x11)\n    x13 = compose(first, last)\n    x14 = fork(recolor, color, x13)\n    x15 = apply(x14, x12)\n    x16 = mapply(x16, x11)\n    x17 = paint(I, x16)\n    x18 = replace(x17, SIX, ZERO)\n    x19 = paint(x18, x17)\n    O = compress(x19)\n    return O"], [1.0, "def solve_241dbaaa(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = difference(x2, x5)\n    x7 = compose(vmirror, dmirror)\n    x8 = x7(x5)\n    x9 = lbind(shift, x8)\n    x10 = apply(x9, x6)\n    x11 = dedupe(x10)\n    x12 = mapply(x9, x11)\n    x13 = paint(I, x12)\n    O = objects(x13, T, F, T)\n    return O"], [1.0, "def solve_d371d695(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = remove(x2, x5)\n    x8 = lbind(colorcount, I)\n    x9 = argmax(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x5)\n    x13 = lbind(hmirror, vmirror)\n    x14 = toindices(x12)\n    x15 = lbind(rbind, add)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, x16, x17)\n    x19 = chain(x13, x12, x18)\n    x20 = fork(mapply, x18, x19)\n    x21 = x20(x2)\n    x22 = paint(x11, x21)\n    O = x20(x2)\n    return O"], [1.0, "def solve_4dedf5dc(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(asobject, I)\n    x5 = chain(x3, backdrop, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_7c5b8e66(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_24ed8c9a(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = objects(x2, T, F, T)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = lbind(colorfilter, x3)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(initset, x7)\n    x10 = fork(404, x8, x9)\n    x11 = mapply(x10, x5)\n    O = fill(x2, x6, x11)\n    return O"], [1.0, "def solve_73e00a22(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(maximum, shape)\n    x5 = argmin(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = mostcolor(I)\n    x12 = ofcolor(I, x11)\n    x13 = first(x12)\n    x14 = initset(x13)\n    x15 =manhattan(x14, x4)\n    x16 = shape(I)\n    x17 = increment(x16)\n    x18 = canvas(x11, x17)\n    x19 = asobject(I)\n    x20 = shift(x19, UNITY)\n    x21 = paint(x18, x20)\n    x22 =indices(x5)\n    x23 = remove(x22, x22)\n    x24 = lbind(shift, x5)\n    x25 = mapply(x24, x23)\n    O = fill(x21, x6, x25)\n    return O"], [1.0, "def solve_a363f455(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = vsplit(x3, x4)\n    x7 = lbind(greater, numcolors)\n    x8 = compose(x7, numcolors)\n    x9 = sfilter(x6, x8)\n    x10 = merge(x9)\n    x11 = rot90(x10)\n    x12 = vsplit(x11, x5)\n    x13 = sfilter(x12, x8)\n    x14 = merge(x13)\n    x15 = rot270(x14)\n    x16 = leastcolor(x15)\n    x17 = ofcolor(x15, x16)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = mapply(x18, x17)\n    O = fill(x15, x16, x19)\n    return O"], [1.0, "def solve_c52eb951(I):\n    x1 = asobject(I)\n    x2 = frontiers(I)\n    x3 = merge(x2)\n    x4 = difference(x1, x3)\n    x5 = mostcolor(x4)\n    x6 = objects(I, T, F, F)\n    x7 = color(x3)\n    x8 = matcher(color, x7)\n    x9 = matcher(color, x5)\n    x10 = fork(either, x8, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x6, x11)\n    x13 = merge(x12)\n    x14 = palette(x13)\n    x15 = lbind(mfilter, x14)\n    x16 = lbind(matcher, color)\n    x17 = compose(x15, x16)\n    x18 = apply(x17, x12)\n    x19 = fork(either, vline, hline)\n    x20 = lbind(prapply, sfilter)\n    x21 = fork(x20, identity,1969)\n    x22 = compose(x21, toindices)\n    x23 = rbind(sfilter, x19)\n    x24 = chain(merge, x23, x22)\n    x25 = fork(recolor, color, x24)\n    x26 = mapply(x25, x18)\n    x27 = paint(I, x26)\n    O = paint(x27, x3)\n    return O"], [1.0, "def solve_49fa8022(I):\n    x1 = fgpartition(I)\n    x2 = Tizefilter(x1, tophalf)\n    x3 = numcolors(x2)\n    x4 = equality(x3, TWO)\n    x5 = bottomhalf(x2)\n    x6 = numcolors(x5)\n    x7 = equality(x6, TWO)\n    x8 = both(x4, x7)\n    x9 = bottomhalf(x2)\n    x10 = numcolors(x9)\n    x11 = equality(x10, TWO)\n    x12 = both(x8, x11)\n    x13 = first(x12)\n    x14 = height(I)\n    x15 = decrement(x14)\n    x16 = astuple(x15, ONE)\n    x17 = add(x16, RIGHT)\n    x18 = shoot(x13, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = decrement(x20)\n    x22 = astuple(x21, ONE)\n    x23 = add(x22, DOWN)\n    x24 = shoot(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(ZERO, x25)\n    x27 = ofcolor(I, FIVE)\n    x28 = initset(x27)\n    x29 = insert(x15, x28)\n    x30 = insert(x14, x29)\n    x31 = product(x30, x30)\n    x32 = box(x31)\n    x33 = fill(x26, THREE, x32)\n    x34 = recolor(FIVE, x33)\n    x35 = ofcolor(I, FIVE)\n    x36 = difference(x35, x31)\n    O = fill(x33, EIGHT, x36)\n    return O"], [1.0, "def solve_5701214a(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_ebf61b6e(I):\n    x1 =compose(dmirror, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = fork(remove, last, identity)\n    x5 = compose(hmirror, vmirror)\n    x6 = fork(vconcat, identity, x5)\n    x7 = x6(x3)\n    x8 = dmirror(x7)\n    O = x6(x8)\n    return O"], [1.0, "def solve_ae77c900(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_5ae70910(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = ofcolor(I, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = toindices(x5)\n    x7 = normalize(x6)\n    x8 = objects(I, T, F, T)\n    x9 = rbind(toobject, I)\n    x10 = compose(ulcorner, x9)\n    x11 = chain(x10, initset, partition)\n    x12 = rbind(argmin, x11)\n    x13 = rbind(chain, toindices)\n    x14 = lbind(x13, x12)\n    x15 = lbind(rbind, subgrid)\n    x16 = lbind(compose, x14)\n    x17 = compose(x16, x15)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x18, v)\n    x20 = lbind(lbind, intersection)\n    x21 = compose(x20, h)\n    x22 = fork(apply, x19, x21)\n    x23 = fork(mapply, x17, x22)\n    x24 = mapply(x23, x3)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_4e583d39(I):\n    x1 = frontiers(I)\n    x2 = toindices(x1)\n    x3 = lbind(contained, ZERO)\n    x4 = compose(x3, hcontained)\n    x5 = sfilter(x2, x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, NEG_ONE, x5)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, fgpartition)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = leftmost(x5)\n    x15 = lbind(greater, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = ZERO(x17)\n    x19 = ofcolor(x13, ZERO)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, last)\n    x22 = sfilter(x13, x21)\n    x23 = asobject(x22)\n    x24 = identity(x23)\n    x25 = rightmost(x5)\n    x26 = leftmost(x5)\n    x27 = equality(x25, x26)\n    x28 = add(x22, x27)\n    x29 = increment(x28)\n    x30 = shift(x29, x27)\n    x31 = leftmost(x5)\n    x32 = rightmost(x5)\n    x33 = combine(x31, x32)\n    x34 = shift(x33, x27)\n    x35 = hmirror(x30)\n    x36 = vmirror(x35)\n    x37 = shift(x34, x36)\n    x38 = combine(x35, x37)\n    x39 = paint(x033, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_ab2582a1(I):\n    x1 = mostcolor(I)\n    x2 = leastcolor(I)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = canvas(x1, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(normalize, TWO)\n    x9 = x8(x7)\n    x10 = astuple(TWO, ONE)\n    x11 = x8(x10)\n    x12 = rbind(UNITY, x11)\n    x13 = in22(x12)\n    x14 = rbind(TWO, x4)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = lbind(multiply, x3)\n    x17 = apply(x16, x15)\n    x18 = lbind(shift, x9)\n    x19 = mapply(x18, x17)\n    O = fill(x6, x1, x19)\n    return O"], [1.0, "def solve_c1fea47a(I):\n    x1 = trim(I)\n    x2 = other(x1, ZERO)\n    x3 = color(x2)\n    x4 = leastcolor(I)\n    x5 = tophalf(x2)\n    x6 = lefthalf(x5)\n    x7 = righthalf(x5)\n    x8 = bottomhalf(x2)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = lefthalf(x10)\n    x12 = righthalf(x11)\n    x13 = ofcolor(x66, x4)\n    x14 = ofcolor(x12, x3)\n    x15 = combine(x13, x14)\n    x16 = intersection(x13, x14)\n    x17 = difference(x15, x16)\n    O = fill(x6, THREE, x17)\n    return O"], [1.0, "def solve_5bcabc5e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_fcac85b8(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = matcher(5582, TWO)\n    x6 = fork(both, x3, x5)\n    x7 = sfilter(x1, x6)\n    x8 = difference(x1, x7)\n    x9 = merge(x8)\n    x10 = mostcolor(I)\n    x11 = fill(I, x10, x9)\n    x12 = index(I, ORIGIN)\n    x13 = shoot(ORIGIN, UNITY)\n    x14 = add(x13, UNITY)\n    x15 = shoot(x14, DOWN_LEFT)\n    x16 = add(x15, UP_RIGHT)\n    x17 = shoot(x16, UNITY)\n    x18 = combine(x17, x13)\n    x19 = combine(x18, x10)\n    x20 = fill(x11, TWO, x19)\n    O = replace(x20, x10, TWO)\n    return O"], [1.0, "def solve_f3c6539f(I):\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = vmirror(x2)\n    x4 = vmirror(x3)\n    x5 = insert(x4, x2)\n    x6 = insert(x5, x2)\n    x7 = apply(normalize, x6)\n    x8 = astuple(NINE, FOUR)\n    x9 = canvas(ZERO, x8)\n    x10 = asindices(x9)\n    x11 = shape(I)\n    x12 = minimum(x11)\n    x13 = matcher(first, ZERO)\n    x14 = astuple(identity, NEG_TWO)\n    x15 = rbind(sfilter, x13)\n    x16 = compose(x15, dmirror)\n    x17 = rbind(sfilter, x13)\n    x18 = compose(x17, vmirror)\n    x19 = astuple(x14, x18)\n    x20 = lbind(multiply, x19)\n    x21 = rbind(colorcount, ZERO)\n    x22 = argmax(x10, x21)\n    x23 = lbind(shift, x10)\n    x24 = rbind(multiply, x9)\n    x25 = chain(x23, x24, x20)\n    x26 = mapply(x25, x22)\n    O = paint(x9, x26)\n    return O"], [1.0, "def solve_e556403a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = matcher(first, x3)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x2, x5)\n    O = fill(I, THREE, x6)\n    return O"], [1.0, "def solve_2b0acdeb(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x990 = compose(initset, x9)\n    x9999 = fork(rapply, x30, x990)\n    x12 = compose(first, x9)\n    x13 = apply(x12, x10)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [1.0, "def solve_5b99675b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_3aba2caf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x21 = argmax(x21, x28)\n    x22 = rbind(add, x21)\n    x23 = rbind(greater, x21)\n    x24 = compose(x22, dedupe)\n    x25 = sfilter(x7, x24)\n    x26 = power(x25, TWO)\n    x27 = asobject(x23)\n    x28 = shift(x27, UNITY)\n    x29 = paint(x7, x28)\n    O = subgrid(x3, x29)\n    return O"], [1.0, "def solve_75d133fe(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_e0a5e883(I):\n    x1 = crement(I)\n    x2 = fork(add, first, last)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = normalize(x8)\n    x10 = last(x8)\n    x11 = remove(x10, x8)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x6, x12)\n    x14 = mpapply(recolor, x13, x11)\n    O = paint(x5, x14)\n    return O"], [1.0, "def solve_560a7e1d(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_b324b1be(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, NEG_ONE)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, x4, backdrop)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, NEG_ONE)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, NEG_ONE)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, x1, x18)\n    return O"], [1.0, "def solve_5b471567(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_8a14a0b0(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_a061e7e9(I):\n    x1 = fgpartition(I)\n    x2 = mostcolor(I)\n    x3 = toindices(x2)\n    x4 = contained(ZERO_BY_TWO, x3)\n    x5 = contained(TWO_BY_TWO, x3)\n    x6 = contained(TWO_BY_ZERO, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = astuple(THREE, ORIGIN)\n    x10 = initset(x9)\n    x11 = upscale(x10, TWO)\n    x12 = upscale(x11, TWO)\n    x13 = shape(x12)\n    x14 = shift(x12, x13)\n    x15 = combine(x12, x14)\n    x16 = paint(x8, x15)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = branch(x4, x17, x16)\n    x21 = branch(x5, x18, x20)\n    O = branch(x6, x19, x21)\n    return O"], [1.0, "def solve_26ea4aa6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_0cb7d62a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = last(x5)\n    x7 = first(x5)\n    x8 = center(x7)\n    x9 = mostcolor(I)\n    x10 = shape(x7)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x7)\n    x13 = argmin(x12, x2)\n    x14 = color(x13)\n    x15 = palette(x12)\n    x16 = other(x15, x14)\n    x17 = colorcount(I, x16)\n    x18 = divide(x17, x12)\n    x19 = increment(x18)\n    x20 = interval(ZERO, x19, ONE)\n    x21 = invert(x8)\n    x22 = lbind(shift, x21)\n    x23 = apply(x22, x20)\n    x24 = asobject(I)\n    x25 = mapply(x24, x23)\n    x26 = color(x25)\n    x27 = ofcolor(x25, x6)\n    x28 = asindices(x25)\n    x29 = ofcolor(x25, x6)\n    x30 = x22(x28)\n    x31 = mapply(x22, x29)\n    x32 = fill(x15, x16, x31)\n    x33 = fill(x32, x16, x22)\n    O = fill(x33, x16, x3)\n    return O"], [1.0, "def solve_7f680dfb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_b226346a(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_d5e9f93b(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_4151ed94(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = palette(x6)\n    x8 = rbind(contained, x7)\n    x9 = compose(x8, color)\n    x10 = sfilter(x6, x9)\n    x11 = objects(x4, T, F, T)\n    x12 = colorfilter(x11, x1)\n    x13 = difference(x10, x12)\n    x14 = rbind(subgrid, x4)\n    x15 = apply(x14, x13)\n    x16 = rbind(colorcount, x1)\n    x17 = argmax(x15, x16)\n    x18 = x17(x4)\n    x19 = height(x18)\n    x20 = width(x18)\n    x21 = ofcolor(x18, x1)\n    x22 = astuple(x19, x20)\n    x23 = crop(x18, ORIGIN, x22)\n    x24 = hupscale(x23, x18)\n    x25 = fill(x24, ZERO, x21)\n    x26 = ofcolor(x25, x1)\n    x27 = subgrid(x26, x25)\n    x28 = height(x27)\n    x29 = divide(x28, x19)\n    x30 = increment(x29)\n    x31 = width(x27)\n    x32 = divide(x31, x20)\n    x33 = increment(x32)\n    x34 = neighbors(x33)\n    x35 = mapply(toindices, x34)\n    x36 = astuple(x32, x20)\n    x37 = shift(x35, x36)\n    x38 = combine(x35, x37)\n    x39 = fill(x25, ZERO, x38)\n    O = x3(x39)\n    return O"], [1.0, "def solve_d3092f09(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(dmirror, merge, dmirror)\n    x5 = astuple(NEGff68b1006)\n    x6 = lbind(multiply, x5)\n    x7 = apply(x6, x4)\n    x8 = chain( toivec, invert, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, x7)\n    O = paint(x3, x10)\n    return O"], [1.0, "def solve_0acd544d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_47cc685a(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_4ff4d040(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, corners, outbox)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = x8(x7)\n    x10 = difference(x6, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x10)\n    x13 = lbind(lbind, manhattan)\n    x14 = lbind(lbind, shoot)\n    x15 = chain(x13, x14, initset)\n    x16 = fork(shift, identity, x15)\n    x17 = mapply(x16, x12)\n    O = fill(x12, x11, x17)\n    return O"], [1.0, "def solve_46ef40b8(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_0d9c09ce(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(occurrences, I)\n    x3 = compose(x2, asindices)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x1)\n    O = fill(x6, EIGHT, x8)\n    return O"], [1.0, "def solve_9e2f4fde(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_5008a9e8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_1f076efb(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_53ee68c1(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_48540d99(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = objects(I, T, F, F)\n    x5 = colorfilter(x4, x3)\n    x6 = compose(toindices, normalize)\n    x7 = normalize(x5)\n    x8 = x6(x7)\n    x9 = matcher(size, ONE)\n    x10 = argmin(x8, x9)\n    x11 = rbind(adjacent, x8)\n    x12 = sfilter(x10, x11)\n    x13 = difference(x10, x12)\n    x14 = extract(x13, x12)\n    x15 = totuple(x14)\n    x16 = apply(color, x15)\n    x17 = mostcommon(x16)\n    x18 = matcher(color, x17)\n    x19 = extract(x18, x13)\n    x20 = last(x19)\n    x21 = matcher(first, x20)\n    x22 = extract(x18, x21)\n    x23 = put2464(x22)\n    x24 = width(x23)\n    x25 = apply(last, x23)\n    x26 = matcher(first, x25)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = dmirror(x28)\n    x30 = sfilter(x29, x27)\n    x31 = merge(x30)\n    x32 = width(x31)\n    x33 = increment(x32)\n    x34 = matcher(first, x33)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x31, x35)\n    x37 = combine(x29, x36)\n    x38 = paint(x27, x37)\n    O = x10(x38)\n    return O"], [1.0, "def solve_09893c8a(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(intersection, x8, x5)\n    x10 = compose(x8, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = mapply(x11, x2)\n    O = fill(I, ZERO, x12)\n    return O"], [1.0, "def solve_5b345841(I):\n    x1 = objects(I, T, T, T)\n    x2 = toindices(ORIGIN)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toindices, x4, uppermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [1.0, "def solve_6f0b1b81(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = fork(404, identity, color)\n    x8 = compose(rot90, x7)\n    x9 = power(x8, FOUR)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = subtract(x13, TWO)\n    x15 = divide(x14, TWO)\n    x16 = insert(ZERO, x15)\n    x17 = dmirror(x16)\n    x18 = shape(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(shift, x17)\n    x21 = mapply(x19, x16)\n    x22 = paint(x10, x21)\n    x23 = hmirror(x22)\n    x24 = fgpartition(x23)\n    x25 = merge(x24)\n    x26 = normalize(x25)\n    x27 = crop(x23, x23, x26)\n    x28 = replace(x22, x1, xl)\n    O = x9(x28)\n    return O"], [1.1, "def solve_de8a8e6c(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(x8)\n    x10 = astuple(TWO, x4)\n    x11 = dneighbors(x10)\n    x12 = insert(x11, x8)\n    x13 = width(x12)\n    x14 = maximum(x13)\n    x15 = astuple(x14, x4)\n    x16 = remove(x11, x15)\n    x17 =141(x16)\n    x18 =atoryindices(x17)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(sfilter, identity, x21)\n    x23 = branch(x16, x22, identity)\n    x24 = width(x12)\n    x25 = rbind(multiply, x24)\n    x26 = width(x12)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = rbind(multiply, x28)\n    x30 = height(x12)\n    x31 = rbind(multiply, x30)\n    x32 = chain(x29, x31, initset)\n    x33 = fork(insert, x62, x32)\n    x34 = compose(box, x33)\n    x35 = mapply(x34, x12)\n    x36 = highest(x1)\n    x37 =1111(x36)\n    x38 = add(x37, TWO)\n    x39 = width(x12)\n    x40 = interval(x38, x39, ONE)\n    x41 = apply("], [1.1, "def solve_98589e10(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, hmirror)\n    x8 = x7(I)\n    x9 = objects(x8, T, F, T)\n    x10 = compose(flip, x9)\n    x11 = extract(x9, x10)\n    x12 = remove(x11, x9)\n    x13 = argmin(x12, size)\n    x14 = subgrid(x13, x8)\n    x15 = index(x14, DOWN)\n    x16 = subgrid(x15, x8)\n    x17 = llcorner(x16)\n    x18 = hmirror(x17)\n    x19 =7(x18)\n    x20 = branch(x6, x18, x19)\n    x21 = branch(x6, x16, x20)\n    x22 = branch(x6, x17, x21)\n    x23 = branch(x6, x26, x22)\n    x24 = dashedmirror(x23)\n    x25 = objects(x24, T, F, T)\n    x26 = valmax(x25, x24)\n    x27 = difference(x25, x26)\n    x28 = lbind(astuple, x26)\n    x29 = lbind(shift, x16)\n    x30 = compose(x28, x29)\n    x31 = order(x27, x30)\n    x32 = size(x31)\n    x33 = divide(x32, x31)\n    x34 = astuple(x31, x33)\n    x35 = maximum(x34)\n    x36 = interval(ZERO, x35, ONE)\n    x37 = product(x36, x36)\n    x38 = rbind(multiply, x37)\n"], [1.1, "def solve_f2308fc4(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, leftmost)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(contained, NEG_ONE, x13)\n    x20 = fork(contained, positive, x18)\n    x21 = fork(both, x19, x20)\n    x22 = extract(x10, x21)\n    x23 = color(x22)\n    x24 = center(x22)\n    x25 = ofcolor(I, x23)\n    x26 = ulcorner(x22)\n    x27 = shoot(x26, UNITY)\n    x28 = lrcorner(x22)\n    x29 = shoot(x28, DOWN_LEFT)\n    x30 = rbind(shoot, UP_RIGHT)\n    x31 = mapply(x30, x29)\n    x32 = rbind(shoot, DOWN_LEFT)\n    x33 = mapply(x32, x30)\n    x34 = combine(x27, x33)\n    x35 = fill(I, x23, x34)\n    x36 = difference(x31, x35)\n    O = fill(x35,"], [1.1, "def solve_f6522731(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = subgrid(x10, I)\n    x12 = leastcolor(x11)\n    x13 = replace(x11, x12, ZERO)\n    x14 = replace(x13, x12, x1)\n    x15 = compress(x14)\n    x16 = width(x11)\n    x17 = divide(x16, x17)\n    x18 = subtract(x17, x12)\n    x19 = tojvec(x18)\n    x20 = shift(x15, x19)\n    x21 = merge(x20)\n    x22 = numcolors(x21)\n    x23 = recolor(x12, x20)\n    x24 = paint(x11, x23)\n    x25 = normalize(x21)\n    x26 = occurrences(x24, x25)\n    x27 = toindices(x25)\n    x28 = compose(x24, normalize)\n    x29 = fill(x24, x1, x27)\n    x30 = initset(x17)\n    x31 = rbind(insert, x30)\n    x32 = lbind(compose, initset)\n    x33 = lbind(rbind, manhattan)\n    x34 = compose(x33, x28)\n    x35 = fork(compose, x32, x34)\n    x36 = compose(positive, size)\n    x37 = rbind(intersection, x36)\n    x38 = chain(x size, x37, x35)\n    x39 = valmax(x68, x38)\n    x"], [1.1, "def solve_e726f99c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(size, x1)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, UNITY)\n    x5 = rbind(compose, size)\n    x6 = lbind(rbind, contained)\n    x7 = chain(x5, x4, x6)\n    x8 = chain(dedupe, totuple, x7)\n    x9 = lbind(apply, maximum)\n    x10 = lbind(sfilter, x1)\n    x11 = chain(x10, x9, x5)\n    x12 = compose(x9, x11)\n    x13 = fork(intersection, x12, toindices)\n    x14 = lbind(rbind, ZERO)\n    x15 = compose(x14, x13)\n    x16 = fork(sfilter, x12, x15)\n    x17 = fork(equality, toindices, x16)\n    x18 = lbind(rbind, ZERO)\n    x19 = compose(x18, x17)\n    x20 = fork(sfilter, toindices, x19)\n    x21 = lbind(recolor, ZERO)\n    x22 = compose(x21, x20)\n    x23 = fork(paint, x22, identity)\n    x24 = rbind(compose, x21)\n    x25 = compose(x24, x20)\n    x26 = fork(b27, x23, x25)\n    x27 = fork(mapply, x26, x34)\n    x28 =969recolor(x3, SIX)\n    x29 = astuple(dmirror, x16)\n    x30 = astuple(cmirror, x200)\n    x31 = initset(x30)\n    x32 = insert(x64, x31)\n    x33 = backdrop(x32)\n    x34 = toobject(x33, I)\n    x35 = x25(x34)\n    x36 =585595200000000\n    x37 =8(x45, x36)"], [1.1, "def solve_280faecb(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_75b2668f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(x28)\n    x30 = remove(x29, x28)\n    x31 = recolor(x1, x30)\n    x32 = initset(x38)\n    x33 = recolor(x1, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_8a9509c5(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_99e1b036(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x36)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = rbind(divide, x38)\n    x41 = compose(x39, x40)\n"], [1.1, "def solve_d02b129a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, mostcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_8b96a217(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d4fa6e2d(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, initset, DOWN)\n    x6 = branch(x4, insert, x5)\n    x7 = branch(x4,2155, x6)\n    x8 =x7(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = extract(x1, x10)\n    x12 = remove(x11, x1)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = either(x13, x14)\n    x16 = branch(x15, x7, x6)\n    x17 = x16(x11)\n    x18 = x16(x12)\n    x19 = branch(x18, UNITY, DOWN_LEFT)\n    x20 = branch(x18, UP_RIGHT, DOWN_LEFT)\n    x21 = branch(x18, UNITY, NEG_UNITY)\n    x22 = chain(x19, ulcorner, x8)\n    x23 = chain(x20, x21, x8)\n    x24 = fork(shift, identity, x22)\n    x25 = fork(shift, identity, x23)\n    x26 = fork(combine, x24, x25)\n    x27 = mapply(x26, x12)\n    x28 = paint(I, x27)\n    x29 = x16(x28)\n    x30 = branch(x94, identity, vmirror)\n    x31 = x30(x29)\n    x32 = identity(x46, asindices)\n    x33 = x32(x31)\n    x34 = dmirror(x32)\n    x35 = multiply(x46, FOUR)\n    x36 = tojvec(x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x32, x37)\n    O"], [1.1, "def solve_0cfc2d66(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_72da57b9(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_fd842705(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = sfilter(I, x2)\n    x4 = asindices(x3)\n    x5 = objects(I, T, F, T)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = mostcolor(x7)\n    x9 = palette(I)\n    x10 = remove(x8, x9)\n    x11 = lbind(colorcount, I)\n    x12 = argmax(x10, x11)\n    x13 = fgpartition(I)\n    x14 = combine(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = toobject(x15, I)\n    x17 = color(x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(colorcount, I)\n    x20 = argmax(x18, x19)\n    x21 = rbind(boranch, x20)\n    x22 = rbind(x21, trim)\n    x23 = compose(x22, ulcorner)\n    x24 = argmax(x18, x23)\n    x25 =507(x24)\n    x26 = branch(x25, x26, identity)\n    x27 =121(x26)\n    x28 =70711(x27)\n    x29 = Correspond text(x28, x11)\n    x30 = hmirror(x29)\n    x31 = papply(dneighbors, x30)\n    x32 = size(x31)\n    x33 = positive(x32)\n    x34 = branch(x33, x30, x30)\n    x35 = Additional(x34, x31)\n    x36 = first(x35)\n    x37 = last(x35)\n    x38 = x36(x19)\n    x39 = rbind(contained, x38)\n    x40 = compose(x39, first)\n    x41 = sfilter(x33, x"], [1.1, "def solve_6777c09f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = apply(x19, x17)\n    x21 = matcher(x19, x1)\n    x22 = compose(flip, x21)\n    x23 = chain(lowermost, x20, x22)\n    x24 = matcher(x23, ZERO)\n    x25 = fork(both, x24, x22)\n    x26 = extract(x20, x25)\n    x27 = x26(x26)\n    x28 = first(x27)\n    x29 = last(x27)\n    x30 = x28(x28)\n    x31 = gravitate(x30, x29)\n    x32 = initset(xO = remove(x28, x32)\n    x33 = neighbors(x32)\n    x34 = insert(x32, x33)\n    x35 = fill(I, x1, x34)\n    x36 = insert(x30, x35)\n    x37 = fill(x36, x1, x36)\n    x38 = objects(x"], [1.1, "def solve_b373b327(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x3, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = tocolor(x12, x7)\n    x21 = leftmost(x15)\n    x22 = lbind(greater, x21)\n    x23 = compose(x22, hfrontier)\n    x24 = rbind(sfilter, x23)\n    x25 = compose(x24, vfrontier)\n    x26 = lbind(greater, x25)\n    x27 = compose(x26, vfrontier)\n    x28 = rbind(sfilter, x27)\n    x29 = compose(x28, asindices)\n    x30 = fork(both, x23, x29)\n    x31 = rbind(contained, x17)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(x30, x33, x29)\n    x35 = fork(shift, x29, x34)\n    x36 = compose(x32, x35)\n    x37 = fork(shift, x45, x36)\n    x38 = apply(x38, x9)\n    x39 = merge(x9)\n    x40 = vmirror(x39)\n    x41 = papply(38, x40)\n    x"], [1.1, "def solve_8514541b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors(ORIGIN)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(matcher, x14, identity)\n    x16 = compose(x13, x15)\n    x17 = x16(I)\n    x18 = vsplit(x17, TWO)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = fgpartition(x19)\n    x22 = merge(x21)\n    x23 = argmax(x22, x16)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x19, x24)\n    x26 = vmirror(x25)\n    x27 = shape(x26)\n    x28 = add(TWO, x27)\n    x29 = asobject(x28)\n    x30 = mostcolor(x29)\n    x31 = matcher(first, x30)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x29, x32)\n    x34 = center(x33)\n    x35 = merge(x1)\n    x36 =012\n    x35, x34)\n    x37 = shift(x34, x36)\n    x38 = paint(x25, x37)\n    x39 = palette(x38)\n    x40 = lbind(remove, RIGHT)\n    x41 = lbind(compose, x40)\n"], [1.1, "def solve_d5709117(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_8dc1f777(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = vline(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = ofcolor(x4, THREE)\n    x6 = ofcolor(x4, TWO)\n    x7 = center(x5)\n    x8 = hfrontier(x7)\n    x9 = center(x6)\n    x10 = hfrontier(x9)\n    x11 = mostcolor(I)\n    x12 = palette(I)\n    x13 = remove(THREE, x12)\n    x14 = remove(TWO, x13)\n    x15 = other(x14, x11)\n    x16 = replace(x4, THREE, x11)\n    x17 = difference(x8, x5)\n    x18 = underfill(x16, THREE, x17)\n    x19 = replace(x4, TWO, x11)\n    x20 = difference(x10, x6)\n    x21 = underfill(x19, TWO, x20)\n    x22 = objects(x18, T, F, F)\n    x23 = colorfilter(x22, THREE)\n    x24 = rbind(adjacent, x5)\n    x25 = sfilter(x23, x24)\n    x26 = objects(x21, T, F, F)\n    x27 = colorfilter(x26, TWO)\n    x28 = rbind(adjacent, x6)\n    x29 = sfilter(x27, x28)\n    x30 = mapply(toindices, x25)\n    x31 = rbind(equality, x15)\n    x32 = lbind(index, x4)\n    x33 = compose(x31, x32)\n    x34 = rbind(add, LEFT)\n    x35 = compose(x33, x34)\n    x36 = rbind(add, RIGHT)\n    x37 = compose(x33, x36)\n    x38 = fork(either, x35, x37)\n    x39 = rbind(add, UP)\n    x"], [1.1, "def solve_c828d042(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, mostcolor, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x405, x37)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette"], [1.1, "def solve_8d4ad5a5(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_531a0f70(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = mapply(x1, x3333)\n    x3 = width(I)\n    x4 = astuple(x3, x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = compose(decrement, x6)\n    x8 = astuple(x5, x7)\n    x9 = fork(multiply, first, last)\n    x10 = decrement(x3)\n    x11 = astuple(x10, x9)\n    x12 = connect(x8, x11)\n    x13 = toobject(x12, I)\n    x14 = mostcolor(x13)\n    x15 = matcher(first, x14)\n    x16 = compose(flip, x15)\n    x17 = extract(x12, x16)\n    x18 = remove(x17, x12)\n    x19 =2dmirror(I)\n    x20 = x16(x19)\n    x21 = extract(x12, x20)\n    x22 =002(x21, x17)\n    x23 = hmirror(I)\n    x24 = vmirror(I)\n    x25 = hmirror(x24)\n    x26 = astuple(x23, x25)\n    x27 = argmin(x22, x26)\n    x28 = other(x22, x27)\n    x29 = x28(x28)\n    x30 = either(x28, x29)\n    x31 = branch(x30, initset, ONE)\n    x32 = fill(I, THREE, x31)\n    x33 = multiply(UNITY, x30)\n    x34 = shift(x32, x33)\n    x35 = ofcolor(x32, x34)\n    x36 = asindices(x32)\n    x37 = difference(x36, x35)\n    x38 = toobject(x37, x32)\n    x39 = mostcolor(x38)\n    x40 =shift(xadneighbors, x39"], [1.1, "def solve_1841afbe(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = ofcolor(x24, TWO)\n    x27 = lbind(shift, x21)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(occurrences, x13)\n    x30 = compose(x28, last)\n    x31 = fork(paint, identity, x30)\n    x32 = x31(x16)\n    x33 = ofcolor(x32, THREE)\n    x34 = asindices(x32)\n    x35 = ofcolor(x32, TWO)\n    x36 = lbind(shift, x24)\n    x37 = rbind(mapply, x36)\n    x38 = compose(x37, x34)\n    x39 = fork(paint, identity, x38)\n    x40 = x39(x24)\n    O = x39(x24"], [1.1, "def solve_a053ab34(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_34f1132c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_b4b7c048(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(contained, DOWN)\n    x7 = chain(flip, x6, shape)\n    x8 = fork(both, x3, x7)\n    x9 = sfilter(x5, x8)\n    x10 = compose(backdrop, inbox)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, TWO, x11)\n    x13 = add(TWO, LEFT)\n    x14 = shift(x12, x13)\n    x15 = fill(x12, FOUR, x14)\n    x16 = paint(x15, x11)\n    x17 = size(x6)\n    x18 = positive(x17)\n    x19 = astuple(x18, ONE)\n    x20 = crop(x6, ORIGIN, x19)\n    x21 = ONE(x20)\n    x22 =TWO(x21)\n    x23 = color(x4)\n    x24 = palette(x20)\n    x25 = remove(x23, x24)\n    x26 = lbind(colorcount, x20)\n    x27 = argmin(x25, x26)\n    x28 = palette(x20)\n    x29 = remove(x28, x24)\n    x30 = lbind(colorcount, x20)\n    x31 = argmin(x29, x30)\n    x32 = toindices(x3)\n    x33 = combine(x32, x31)\n    x34 = mapply(x15, x33)\n    x35 = fill(x6, x23, x34)\n    x36 =object(x17, x35)\n    x37 = palette(x36)\n    x38 = remove(x23, x37)\n    x39 = lbind(colorcount, x20)\n    x40 = argmin(x38, x39"], [1.1, "def solve_2429b85e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = branch(x17, height, width)\n    x24 = x23(x6)\n    x25 = x23(x5)\n    x26 = subtract(x24, x25)\n    x27 = decrement(x26)\n    x28 = toivec(x27)\n    x29 = branch(x17, x28, x20)\n    x30 = shift(x15, x29)\n    x31 = toindices(x30)\n    x32 = x29(x31)\n    x33 = equality(x302, FOUR)\n    x34 = rbind(contained, x33)\n    x35 = chain(flip, x34, initset)\n    x36 = sfilter(x32, x35)\n    x37 =782(x33, x36)\n    x38 = difference(x37, x31)\n    x39 = merge(x38)\n    x40 =3906(x39)\n    x41 = cover(I, x39"], [1.1, "def solve_865e3f91(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f553b49d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 =matcher(greater, FOUR)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = extract(x1, x3)\n    x7 = compose(last, last)\n    x8 = totuple(x6)\n    x9 =181(x7)\n    x10 = mostcommon(x8)\n    x11 = uppermost(x4)\n    x12 = matcher(first, x10)\n    x13 = rightmost(x4)\n    x14 = matcher(first, x12)\n    x15 = rightmost(x4)\n    x16 = matcher(last, x15)\n    x17 = leftmost(x6)\n    x18 = matcher(last, x17)\n    x19 = sfilter(x9, x18)\n    x20 = toindices(x4)\n    x21 = difference(x20, x18)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = equality(x23, ONE)\n    x25 = branch(x24, DOWN, RIGHT)\n    x26 = branch(x24, uppermost, leftmost)\n    x27 = fork(equality, identity, x26)\n    x28 = branch(x24, TWO, SIX)\n    x29 = fork(equality, identity, x28)\n    x30 = ofcolor(I, x5)\n    x31 = backdrop(x30)\n    x32 = subgrid(x31, I)\n    x33 = maximum(x32)\n    x34 = lowermost(x3)\n    x35 = matcher(first, x5)\n    x36 = rightmost(x3)\n    x37 = matcher(first, x5)\n    x38 = rightmost(x3)\n    x39 = matcher(last, x35)\n    x40 = leftmost(x3)\n    x41 = matcher(last, x39)\n    x42 = uppermost(x3"], [1.1, "def solve_00c09b69(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = mostcolor(x10)\n    x12 = ofcolor(I, x7)\n    x13 = backdrop(x12)\n    x14 = toobject(x13, I)\n    x15 = matcher(first, x11)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(recolor, x2)\n    x19 = compose(x18, x17)\n    x20 = fork(combine, vline, hline)\n    x21 = chain(x20, x19, x19)\n    x22 = lbind(paint, I)\n    x23 = chain(asobject, x22, x21)\n    x24 = fork(shift, identity, x23)\n    x25 = height(I)\n    x26 = dmirror(I)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x6)\n    x29 = chain(increment, x18, minimum)\n    x30 = apply(x29, x28)\n    x31 = ofcolor(x30, x11)\n    x32 = papply(connect, x31, x32)\n    x33 = ofcolor(x30, x7)\n    x34 = mapply(x24, x33)\n    x35 = papply(recolor, x34, x30)\n    x36 = height(I)\n    x37 = mapply(x24, x36)\n    x38 =34(raw678)\n    x39 = apply(x27, x38)\n    x40 = difference(x39, x38)\n    O"], [1.1, "def solve_15fecf54(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = mostcolor(I)\n    x3 = trim(I)\n    x4 = tophalf(x3)\n    x5 = lefthalf(x4)\n    x6 = tophalf(x2)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(x2)\n    x9 = lefthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = righthalf(x9)\n    x12 = palette(x5)\n    x13 = palette(x7)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x12)\n    x16 = first(x15)\n    x17 = shape(x5)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 =70x23(x5)\n    x25 =470(x24)\n    x26 = objects(x28, T, F, F)\n    x27 = colorfilter(x26, x16)\n    x28 = paint(x18, x27)\n    x29 = matcher(first, x16)\n    x30 = compose(flip, x29)\n    x31 = rbind(sfilter, x30)\n    x32 = compose(x31, asobject)\n    x33 = apply(x32, x29)\n    x34 = palette(x33)\n    x35 = compose(x20, x34)\n    x36 = matcher(first, x16)\n    x37 = rbind(sfilter, x36)\n    x38 = compose(x37, asobject)\n    x39 = apply(x38, x34)\n    x40 = rbind(toobject, x38)\n    x41 = apply(x40, x39)\n    x42 = Obs44"], [1.1, "def solve_75eb7e22(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_eb688ad5(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_dad06647(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_9eda6b3d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = matcher(identity, ZERO)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = apply(x3, I)\n    x5 = maximum(x4)\n    x6 = dmirror(I)\n    x7 = apply(x3, x6)\n    x8 = maximum(x7)\n    x9 = increment(x8)\n    x10 = interval(TWO, x9, ONE)\n    x11 = increment(x5)\n    x12 = interval(TWO, x11, ONE)\n    x13 = product(x10, x12)\n    x14 = fork(multiply, first, last)\n    x15 = apply(x14, x13)\n    x16 = lbind(sfilter, x13)\n    x17 = lbind(matcher, x14)\n    x18 = compose(x16, x17)\n    x19 = apply(x18, x15)\n    x20 = lbind(occurrences, I)\n    x21 = lbind(recolor, ZERO)\n    x22 = lbind(canvas, NEG_ONE)\n    x23 = compose(asindices, x22)\n    x24 = chain(x20, x21, x23)\n    x25 = lbind(mapply, x24)\n    x26 = chain(positive, size, x25)\n    x27 = sfilter(x19, x26)\n    x28 = compose(x14, first)\n    x29 = rbind(argmax, x28)\n    x30 = lbind(recolor, ZERO)\n    x31 = lbind(canvas, NEG_ONE)\n    x32 = chain(x30, asindices, x31)\n    x33 = lbind(lbind, shift)\n    x34 = lbind(occurrences, I)\n    x35 = fork(mapply, x33, x34)\n    x36 = compose(x35, x32)\n    x37 = size(x27)\n    x38 = positive(x37)\n    x39 = lbind("], [1.1, "def solve_4b7cef0c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x4)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_673b4a13(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = compose(x4, x10)\n    x12 = argmin(x9, x11)\n    x13 = palette(I)\n    x14 = remove(x7, x13)\n    x15 = lbind(ofcolor, I)\n    x16 = compose(x4, x15)\n    x17 = argmin(x14, x16)\n    x18 = palette(I)\n    x19 = remove(x7, x18)\n    x20 = lbind(colorcount, I)\n    x21 = argmin(x19, x20)\n    x22 = other(x21, x13)\n    x23 = remove(x17, x21)\n    x24 = other(x23, x13)\n    x25 = ofcolor(I, x7)\n    x26 = astuple(x26, x24)\n    x27 = initset(x26)\n    x28 = insert(x24, x27)\n    x29 = insert(x27, x28)\n    x30 = product(x29, x29)\n    x31 = ofcolor(I, x7)\n    x32 = apply(first, x31)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = remove(x33, x32)\n    x36 = other(x35, x4)\n    x37 = ofcolor(I, x7)\n    x38 = first(x37)\n    x39 = initset(x38)\n    x40 = insert(x34, x39)\n    x41 = backdrop(x40)\n    x42 = astuple(x36"], [1.1, "def solve_9d384fd7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asobject(x22)\n    x24 = ofcolor(x14, x13)\n    x25 = inbox(x24)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x14)\n    x28 = normalize(x27)\n    x29 = ulcorner(x28)\n    x30 = shift(x28, x29)\n    x31 = ulcorner(x30)\n    x32 = width(x9)\n    x33 = subtract(x31, x32)\n    x34 = shift(x33, x31)\n    x35 = llcorner(x323)\n    x36 = hmirror(x35)\n    x37 = toobject(x36, x34)\n    x38 = matcher(first, x13)\n    x39 = compose(flip, x38)\n    x40 = rbind(sfilter, x39)\n    x41 =925(x40)\n    x42 = solve(x21, x27)\n    x43 = rbind"], [1.1, "def solve_92aaa28f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = neighbors(ORIGIN)\n    x3 = lbind(extract, x2)\n    x4 = matcher(first, ZERO)\n    x5 = matcher(last, ZERO)\n    x6 = rbind(branch, hmirror)\n    x7 = rbind(x6, identity)\n    x8 = rbind(branch, vmirror)\n    x9 = rbind(x8, identity)\n    x10 = compose(x7, x4)\n    x11 = compose(x9, x5)\n    x12 = fork(compose, x10, x11)\n    x13 = lbind(matcher, first)\n    x14 = compose(x13, mostcolor)\n    x15 = fork(sfilter, identity, x14)\n    x16 = fork(difference, identity, x15)\n    x17 = lbind(rbind, multiply)\n    x18 = chain(x17, shape, x15)\n    x19 = lbind(lbind, shift)\n    x20 = chain(x19, backdrop, x15)\n    x21 = fork(compose, x20, x18)\n    x22 = lbind(lbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x23)\n    x25 = lbind(rbind, compose)\n    x26 = chain(x24, x25, x21)\n    x27 = lbind(fork, recolor)\n    x28 = lbind(x27, first)\n    x29 = lbind(fork, shift)\n    x30 = lbind(chain, x12)\n    x31 = lbind(x30, x3)\n    x32 = rbind(compose, x3)\n    x33 = compose(x32, x18)\n    x34 = fork(compose, x33, x26)\n    x35 = compose(x31, x26)\n    x36 = lbind(chain, first)\n    x37 = lbind(rbind, rapply)\n    x38 = compose("], [1.1, "def solve_0a224efa(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, decrement)\n    x36 = compose(x31, x35)\n    x37 = rbind(sfilter, x36)\n    x38 = lbind(compose, x3)\n    x39 = chain(x39, x37, x38)\n    x40 = fork(Example, x35, x39)\n    x41 = compose(x40, dmirror)\n    x42 = fork("], [1.1, "def solve_fd4e6db3(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_4d7a539d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = other(x4, x5)\n    x7 = color(x6)\n    x8 = palette(I)\n    x9 = lrcorner(x6)\n    x10 = llcorner(x6)\n    x11 = urcorner(x6)\n    x12 = ulcorner(x6)\n    x13 = shoot(x9, UNITY)\n    x14 = shoot(x10, DOWN_LEFT)\n    x15 = shoot(x12, UP_RIGHT)\n    x16 = shoot(x13, NEG_UNITY)\n    x17 = combine(x13, x14)\n    x18 = combine(x34, x16)\n    x19 = combine(x17, x18)\n    x20 =725(x11)\n    x21 =725(x10)\n    x22 = astuple(x20, x21)\n    x23 = rbind(22, ulcorner)\n    x24 = rbind(colorcount, x7)\n    x25 = chain(x24, x23, palette)\n    x26 = compose(x25, x18)\n    x27 = sfilter(x19, x26)\n    x28 = astuple(x27, x24)\n    x29 = rbind(contained, x28)\n    x30 = compose(x29, first)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(chain, ulcorner)\n    x33 = lbind(x32, toindices)\n    x34 = lbind(rbind, shift)\n    x35 = fork(x33, x33, x34)\n    x36 = lbind(recolor, x7)\n    x37 = compose(x36, x35)\n    x38 = fork(paint, identity, x37)\n    x39 = rbind(branch, x30"], [1.1, "def solve_73dc3686(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = vline(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = ofcolor(x4, THREE)\n    x6 = ofcolor(x4, TWO)\n    x7 = center(x5)\n    x8 = hfrontier(x7)\n    x9 = center(x6)\n    x10 = hfrontier(x9)\n    x11 = mostcolor(I)\n    x12 = palette(I)\n    x13 = remove(THREE, x12)\n    x14 = remove(TWO, x13)\n    x15 = other(x14, x11)\n    x16 = replace(x4, THREE, x11)\n    x17 = difference(x8, x5)\n    x18 = underfill(x16, THREE, x17)\n    x19 = replace(x4, TWO, x11)\n    x20 = difference(x10, x6)\n    x21 = underfill(x19, TWO, x20)\n    x22 = objects(x18, T, F, F)\n    x23 = colorfilter(x22, THREE)\n    x24 = rbind(adjacent, x5)\n    x25 = sfilter(x23, x24)\n    x26 = objects(x21, T, F, F)\n    x27 = colorfilter(x26, TWO)\n    x28 = rbind(adjacent, x6)\n    x29 = sfilter(x27, x28)\n    x30 = mapply(toindices, x25)\n    x31 = rbind(equality, x15)\n    x32 = lbind(index, x4)\n    x33 = compose(x31, x32)\n    x34 = rbind(add, LEFT)\n    x35 = compose(x33, x34)\n    x36 = rbind(add, RIGHT)\n    x37 = compose(x33, x36)\n    x38 = fork(either, x35, x37)\n    x39 = rbind(add, UP)\n    x"], [1.1, "def solve_12555d44(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_601860a7(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_793c6144(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_bbe0e821(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x11 = compose(first, x11)\n    x12 = apply(x11, x1)\n    x13 = dmirror(x12)\n    x14 = width(x13)\n    x15 = merge(x1)\n    x16 = upscale(x15, x14)\n    x17 = decrement(x16)\n    x18 = index(x16, x17)\n    x19 = asobject(x13)\n    x20 = matcher(first, x18)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = difference(x19, x22)\n    x24 =90fOUR(x23)\n    x25 =return O"], [1.1, "def solve_7dceeb89(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x13)\n    x29 = apply(hmirror, x28)\n    x30 = papply(equality, x28, x29)\n    x31 = x21(x30)\n    x32 = dedupe(x31)\n     x33 = x13(x32)\n    x34 = apply(94016, x33)\n    x35 = papply(connect, x317, x34)\n    x36 = apply(last, x35)\n    x37 = either(x6, x18)\n    x38 = branch(x37, x36, x35)\n    x39 = x38(x34)\n    x40 = ofcolor(x39, x6)\n    O = fill(x10, x6, x40)\n    return O"], [1.1, "def solve_872f07a9(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fgpartition(I)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = box(x4)\n    x6 = difference(x5, x4)\n    x7 = inbox(x4)\n    x8 = backdrop(x7)\n    x9 = lbind(position, x8)\n    x10 = compose(x9, initset)\n    x11 = lowermost(x5)\n    x12 = rightmost(x5)\n    x13 = uppermost(x5)\n    x14 = leftmost(x5)\n    x15 = hfrontier(x11)\n    x16 = difference(x5, x15)\n    x17 =507(x12, UP)\n    x18 = leftmost(x5)\n    x19 = rightmost(x5)\n    x20 = hfrontier(x18)\n    x21 = vfrontier(x19)\n    x22 = intersection(x15, x20)\n    x23 = combine(x17, x22)\n    x24 = rbind(shoot, x23)\n    x25 =\n     mapply(x24, x2)\n    x26 = combine(x2, x25)\n    O = fill(I, x17, x26)\n    return O"], [1.1, "def solve_25e584cb(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =55invert(NEG_TWO)\n    x3 = rbind(shift, x2)\n    x4 = lbind(recolor, papply)\n    x5 = rbind(shift, x1)\n    x6 = lbind(recolor, rbind)\n    x7 = rbind(shift, x6)\n    x8 = chain(x3, x4, x5)\n    x9 = chain(x8, x7, x1)\n    x10 = x9(I)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(toindices, x11)\n    x13 = lbind(mapply, x12)\n    x14 = lbind(rbind, manhattan)\n    x15 = chain(x13, x14, initset)\n    x16 = fork(combine, x15, hfrontier)\n    x17 = apply(x16, x12)\n    x18 = mapply(x17, x4)\n    x19 = paint(x10, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(x16, x20)\n    x22 = mapply(x17, x21)\n    O = paint(x19, x22)\n    return O"], [1.1, "def solve_2ebd541e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = crop(x6, x13, x12)\n    x15 = x5(x14)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, x8)\n    x18 = compose(toindices, normalize)\n    x19 = chain(x18, normalize, x18)\n    x20 = lbind( matcher, xidentity)\n    x21 = extract(x15, x20)\n    x22 = argmin(x15, x21)\n    x23 = color(x22)\n    x24 = remove(x8, x1)\n    x25 = objects(x24, T, F, F)\n    x26 = colorfilter(x25, x23)\n    x27 = lbind(lbind, shift)\n    x28 = lbind(occurrences, x x24)\n    x29 = compose(x28, x27)\n    x30 = fork(mapply, x28, x29)\n    x31 = lbind(occurrences, x x15)\n    x32 = compose(x31, x30)\n    x33 = fork(mapply, x32, x31)\n    x34 = fork(mapply, x33, x28)\n    x35 = mapply(x34, x26)\n    x36 = combine(x35, x31)\n    x37 = paint(x24, x36)\n    O = x5(x37)\n    return O"], [1.1, "def solve_dce7faca(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 =censialspply(connect, x6)\n    x8 = filling(I, x4, x7)\n    x9 = fgpartition(x8)\n    x10 = mapply(toindices, x9)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = shift(x10, UNITY)\n    x14 = fill(x8, ONE, x13)\n    x15 = apply(color, x10)\n    x16 = rbind(ofcolor, ONE)\n    x17 = mapply(x16, x15)\n    x18 =572 fill(x14, THREE, x17)\n    x19 = UNITY(x10)\n    x20 = dmirror(x19)\n    x21 = mapply(x16, x20)\n    x22 = dmirror(x21)\n    x23 = joined(x22, x24)\n    x24 = fill(x18, THREE, x23)\n    x25 = increment(x6)\n    x26 = width(I)\n    x27 = halve(x26)\n    x28 = add(x26, x27)\n    x29 = interval(THREE, x28, ONE)\n    x30 = product(x29, x29)\n    x31 = compose(vfrontier, first)\n    x32 = mapply(x31, x30)\n    x33 = paint(x24, x32)\n    O = x21(x33)\n    return O"], [1.1, "def solve_c1e81291(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =8612604 replace(I, ZERO, NEG_ONE)\n    x2 = asobject(x1)\n    x3 = hperiod(x2)\n    x4 = height(I)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = asobject(x6)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [1.1, "def solve_3d17b76a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = other(x2, x5)\n    x7 =99fa76(I)\n    x8 = color(x7)\n    x9 = width(I)\n    x10 = increment(x9)\n    x11 = tojvec(x10)\n    x12 = invert(x11)\n    x13 = shift(x1, x12)\n    x14 = apply(normalize, x13)\n    x15 = interval(x12, x14, ONE)\n    x16 = apply(multiply, x15)\n    x17 = apply(shift, x16)\n    x18 = mapply(a740, x17)\n    x19 = paint(I, x18)\n    x20 = rot90(x19)\n    x21 = paint(x20, x18)\n    x22 = rot90(x21)\n    x23 = paint(x22, x18)\n    O = rot270(x23)\n    return O"], [1.1, "def solve_574a2402(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = reset\n    3933451\n    033331\n    3343449\n    3334451\n    1333369\n    3334343\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [1.1, "def solve_df48ac51(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = f28(I)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = add(x4, DOWN)\n    x10 = fill(I, x5, x9)\n    x11 = index(x10, x5)\n    x12 =12ZERO(x11)\n    x13 = add(x11, x12)\n    x14 = tojvec(x8)\n    x15 = shift(x9, x14)\n    x16 = fill(x10, x1, x15)\n    x17 = x13(x16)\n    x18 = asobject(x17)\n    x19 = apply(first, x18)\n    x20 = product(x15, x19)\n    x21 = apply(last, x19)\n    x22 = size(x20)\n    x23 = size(x21)\n    x24 = divide(x22, x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = apply(tojvec, x27)\n    x28 = lbind(shift, x11)\n    x29 = mapply(x28, x26)\n    x30 = paint(x20, x29)\n    O = paint(x30, x25)\n    return O"], [1.1, "def solve_dca36ccd(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = ofcolor(I, x4)\n    x6 = rbind( neighbors, DOWN)\n    x7 =6666(x6, x5)\n    x8 = rbind(colorcount, x4)\n    x9 = argmax(x5, x8)\n    x10 = outbox(x9)\n    x11 = rbind(toobject, I)\n    x12 = compose(x11, delta)\n    x13 = apply(x12, x10)\n    x14 = rbind(colorcount, x4)\n    x15 = order(x13, x14)\n    x16 = width(I)\n    x17 = halve(x16)\n    x18 = vupscale(I, x17)\n    x19 = rbind(shoot, UP)\n    x20 = mapply(x19, x17)\n    x21 = fill(x18, x4, x20)\n    x22 = rbind(shoot, DOWN)\n    x23 = mapply(x22, x17)\n    x24 = fill(x21, x4, x23)\n    O = fill(x24, x4, x20)\n    return O"], [1.1, "def solve_0d5e78da(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = mapply(x5, x4)\n    x7 = box(x6)\n    O = fill(I,, x1, x7)\n    return O"], [1.1, "def solve_85d81112(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 =511112(I)\n    x2 = identity(x1)\n    x3 = equality(identity, x2)\n    x4 = branch(x3, identity, x1)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, F)\n    x7 = fork(multiply, height, width)\n    x8 = rbind(ofcolor, ZERO)\n    x9 = compose(x8, x7)\n    x10 = leastcolor(x5)\n    x11 = palette(x5)\n    x12 = remove(x10, x11)\n    x13 = other(x12, x10)\n    x14 = ofcolor(x5, x10)\n    x15 =110(x14)\n    x16 = shift(x15, UNITY)\n    x17 = ofcolor(x5, x10)\n    x18 = outbox(x17)\n    x19 = corners(x18)\n    x20 = mapply(dneighbors, x19)\n    x21 = mapply(ineighbors, x19)\n    x22 = fill(x5, NEG_ONE, x20)\n    x23 = fill(x22, x13, x21)\n    x24 = merge(x11)\n    x25 = cover(x23, x24)\n    O = downscale(x25, TWO)\n    return O"], [1.1, "def solve_15d3dcbc(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = increment(x5)\n    x7 = divide(x6, FOUR)\n    x8 = decrement(x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 =4(x9)\n    x12 = insert(ZERO, x11)\n    x13 = insert(x8, x12)\n    x14 = dmirror(x13)\n    x15 = subtract(x4, TWO)\n    x16 = shift(x14, x15)\n    x17 = paint(I, x16)\n    x18 = objects(x17, F, F, T)\n    x19 = first(x18)\n    x20 = shift(x19, x4)\n    x21 = paint(x17, x20)\n    x22 = fork(multiply, height, width)\n    x23 = x22(x20)\n    x24 = shift(x19, x23)\n    x25 = paint(x21, x24)\n    x26 = ofcolor(x19, FIVE)\n    x27 = ofcolor(x19, TWO)\n    x28 = rbind(neighbors, UNITY)\n    x29 = rbind(neighbors, DOWN)\n    x30 = rbind(rbind, UP_RIGHT)\n    x31 = compose(x29, x30)\n    x32 = x29(x27)\n    x33 = x25(x28)\n    x34 = shift(x29, x33)\n    x35 = fill(x19, THREE, x32)\n    x36 = fill(x35, TWO, x34)\n    x37 = ofcolor(x16, FIVE)\n    x38 = fill(x36, TWO, x37)\n    x39 = mapply(x28, x37)\n    O = fill(x38, EIGHT, x39)\n    return O"], [1.1, "def solve_85c537e0(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 =453(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [1.1, "def solve_0cfe2b41(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = switch(I, THREE, FOUR)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subgrid(x5, I)\n    x8 = lbind(insert, DOWN)\n    x9 = compose(lrcorner, asindices)\n    x10 = fork(subtract, identity, x9)\n    x11 = chain(x8, initset, x10)\n    x12 = fork(insert, subgrid, x11)\n    x13 = fork(insert, hmirror, x12)\n    x14 = compose(vmirror, x13)\n    x15 = fork(insert, ulcorner, x14)\n    x16 = fork(insert, subgrid, x15)\n    x17 = fork(insert, x16, x10)\n    x18 = fork(combine, x17, x12)\n    x19 = mapply(x18, x4)\n    x20 =242227(x19)\n    x21 = mostcolor(I)\n    x22 = astuple(x21, x20)\n    x23 = replace(x22, x39, x1)\n    x24 = combine(x20, x22)\n    x25 =O = paint(x23, x24)\n    O = toindices(x25)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_2254b4e7(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_3645e4ab(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_fed5929a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, THREE)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.08173484697705038, "def solve_cf76bd9f(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FOUR)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_5650beb1(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.08173484697705038, "def solve_878a7724(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_408ae6aa(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.08173484697705038, "def solve_76975229(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_a21a4d95(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.08173484697705038, "def solve_19aaa723(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(subgrid, I)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x6, initset)\n    x8 = lbind(fork, recolor)\n    x9 = lbind(x8, difference)\n    x10 = compose(x7, x9)\n    x11 = fork(mapply, x5, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x2)\n    O = paint(I, x12)\n    return O"], [0.08173484697705038, "def solve_3157b55c(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.08173484697705038, "def solve_1469fcad(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_71e00985(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_814415d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    O = fill(I, ZERO, x3)\n    return O"], [0.08173484697705038, "def solve_91bb227f(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.08173484697705038, "def solve_eecae246(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_2c53d079(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.08173484697705038, "def solve_43ad1be3(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = cover(I, x3)\n    return O"], [0.08173484697705038, "def solve_deadcb98(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_2f5b4d04(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.08173484697705038, "def solve_d67ba957(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.08173484697705038, "def solve_e62fb764(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_92f7496e(I):\n    x1 = fgpartition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    O = paint(I, x4)\n    return O"], [0.08173484697705038, "def solve_efe959f1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_7921b8cf(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_543fc7f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, SIX)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I, TWO, x4)\n    return O"], [0.08173484697705038, "def solve_83b8af33(I):\n    x1 =0000000000000000\n    x2 = objects(I, T, F, T)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = move(I, x4, TWO_BY_ZERO)\n    return O"], [0.08173484697705038, "def solve_b070fff3(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_f7bf38c7(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = underfill(I, EIGHT, x3)\n    return O"], [0.08173484697705038, "def solve_712feab8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08206691200645198, "def solve_7a3c034a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_9bb73688(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08468134728045976, "def solve_5d67d28b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = paint(x5, x9)\n    return O"], [0.08468134728045976, "def solve_490d36a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.08468134728045976, "def solve_55c4927e(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.09909437803847193, "def solve_eae43675(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.11618692455684852, "def solve_c5068316(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = fill(I, EIGHT, x3)\n    x5 = ulcorner(x2)\n    x6 = ofcolor(x4, x1)\n    x7 = urcorner(x6)\n    x8 = shoot(x5, NEG_UNITY)\n    x9 = combine(x8, x7)\n    O = underfill(x4, x1, x9)\n    return O"], [0.11634314213316777, "def solve_662604ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.12814991617905258, "def solve_9838c702(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12814991617905258, "def solve_0e0c7ce8(I):\n    x1 = fgpartition(I)\n    x2 = matcher( size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12814991617905258, "def solve_4eeb4711(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12993277496796057, "def solve_7c5fd034(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_fabb1544(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_62593d97(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.13468134728045977, "def solve_d25b680f(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_1a8715f5(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.13468134728045977, "def solve_f35ee7df(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.13468134728045977, "def solve_8bdca3e4(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_40c20ce6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_28770b9b(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, TWO)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, TWO, ZERO)\n    x12 = fill(x11, ONE, x9)\n    O = fill(x12, palette, x10)\n    return O"], [0.13468134728045977, "def solve_97a76294(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_4f0825cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13757267766397355, "def solve_783374b1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.13961114291996643, "def solve_952ded25(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [0.14012102340220775, "def solve_2eb42306(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_40206820(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.14012102340220775, "def solve_e4e3e6b3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_cfe2b69f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_e99b8c1c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_d41374b1(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14528121194198818, "def solve_d4db7803(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = product(x1, x1)\n    x3 = fork(connect, first, last)\n    x4 = apply(x3, x2)\n    x5 = fork(either, vline, hline)\n    x6 = mfilter(x4, x5)\n    O = underfill(I, EIGHT, x6)\n    return O"], [0.14528121194198818, "def solve_3de7130e(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = product(x1, x1)\n    x3 = fork(connect, first, last)\n    x4 = apply(x3, x2)\n    x5 = fork(either, vline, hline)\n    x6 = mfilter(x4, x5)\n    O = underfill(I, EIGHT, x6)\n    return O"], [0.147039853263387, "def solve_d1c521a0(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_86c68343(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.15201967101125663, "def solve_68ecf6ca(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15201967101125663, "def solve_b248519e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.168463732206312, "def solve_3442bd0a(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.1705557794573261, "def solve_90428720(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.17114959468390242, "def solve_99bc469b(I):\n    x1 = objects(I, T, T, T)\n    x2 = apply(ulcorner, x1)\n    x3 = apply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = apply(lrcorner, x1)\n    x6 = shift(x2, NEG_UNITY)\n    x7 = shift(x3, UP_RIGHT)\n    x8 = shift(x4, DOWN_LEFT)\n    x9 = shift(x5, UNITY)\n    x10 = fill(I, SIX, x7)\n    x11 = fill(x10, SEVEN, x8)\n    O = fill(x11, EIGHT, x9)\n    return O"], [0.1714130763927213, "def solve_7aa77474(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.1816725678756399, "def solve_a75fba76(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.1816725678756399, "def solve_91eb643e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.20977289344345568, "def solve_d2297f49(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_90a773cf(I):\n    x1 = objects(I, T, F, F)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_b8616d64(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.22208695827893984, "def solve_c40bd888(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.2260770084395251, "def solve_ef7eb314(I):\n    x1 = objects(I, T, F, T)\n    x2 = interval(ZERO, NINE, ONE)\n    x3 = apply(tojvec, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(ulcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, EIGHT, x8)\n    return O"], [0.23360789883471766, "def solve_d81c1f43(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, EIGHT)\n    x3 = center(x1)\n    x4 = center(x2)\n    x5 = hfrontier(x3)\n    x6 = vfrontier(x4)\n    x7 = intersection(x5, x6)\n    x8 = fill(I, TWO, x5)\n    x9 = fill(x8, EIGHT, x6)\n    O = fill(x9, FOUR, x7)\n    return O"], [0.23360789883471766, "def solve_5e17ad91(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, EIGHT)\n    x3 = center(x1)\n    x4 = center(x2)\n    x5 = hfrontier(x3)\n    x6 = vfrontier(x4)\n    x7 = intersection(x5, x6)\n    x8 = fill(I, TWO, x5)\n    x9 = fill(x8, EIGHT, x6)\n    O = fill(x9, FOUR, x7)\n    return O"], [0.23823994288959274, "def solve_d357e287(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_bd2a2abd(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_4633dff4(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.26915094341200335, "def solve_7ca2a253(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_ef45f0df(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.28046050168233005, "def solve_0bbb8ad1(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28046050168233005, "def solve_35bbd6ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.29024380546596323, "def solve_94d444cf(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.3074019960118805, "def solve_c0cfd5bf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.3624446703322224, "def solve_f43fa969(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.3806851002468923, "def solve_b450a97a(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = merge(x1)\n    x7 = backdrop(x6)\n    x8 = box(x6)\n    x9 = fill(I, x3, x7)\n    O = fill(x9, x5, x8)\n    return O"], [0.3997728934434557, "def solve_c6b343a5(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.4653084736970792, "def solve_94119856(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [0.469992675486797, "def solve_955a046d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = vperiod(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.4853084736970792, "def solve_355c40d7(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.5063579939608678, "def solve_f5d467f4(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = difference(x1, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = replace(I, TWO, ZERO)\n    O = fill(x6, THREE, x5)\n    return O"], [0.5648229277707709, "def solve_55fcfc3f(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.6014849716551933, "def solve_3decebd4(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.7779700058051356, "def solve_295e7a63(I):\n    x1 = width(I)\n    x2 = dedupe(I)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [0.7825046979697893, "def solve_0bb09990(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7825046979697893, "def solve_37ecc15e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7915392052312495, "def solve_8e66d70a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.868349128540305, "def solve_a68e1c0e(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, T, T)\n    x3 = first(x2)\n    x4 = vline(x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(x1)\n    x7 = objects(x6, T, T, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.9182807290875006, "def solve_85152b3a(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.9182807290875006, "def solve_4c3bf3a5(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.9182807290875006, "def solve_60a79195(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.9182807290875006, "def solve_92499593(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_1da0592b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.9182807290875006, "def solve_7d784663(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.9183491285403049, "def solve_8c4f1791(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_3b68f218(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [0.9183491285403049, "def solve_194b7e4b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_e49fc953(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_986ba6bb(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.9290867644066174, "def solve_19320c51(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(center, x2)\n    x4 = astuple(ONE, THREE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = rbind(shoot, x6)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x3)\n    O = paint(x5, x10)\n    return O"], [0.95, "def solve_805a7d3c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [1.0, "def solve_ed032d06(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(maximum, shape)\n    x5 = argmin(x3, x4)\n    x6 = index(I, x5)\n    x7 = subgrid(x5, I)\n    x8 = width(x7)\n    x9 = chain(normalize, decrement, height)\n    x10 = x9(x8)\n    x11 = ulcorner(x5)\n    x12 = increment(x11)\n    x13 = shift(x5, x12)\n    x14 = x13(x12)\n    x15 = x13(x4)\n    x16 = x13(x14)\n    x17 = x13(x3)\n    x18 = fill(x7, ZERO, x17)\n    x19 = fill(x18, x1, x16)\n    O = fill(x19, TWO, x18)\n    return O"], [1.0, "def solve_ec586405(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = lrcorner(x4)\n    x9 = llcorner(x4)\n    x10 = urcorner(x4)\n    x11 = ulcorner(x4)\n    x12 = shoot(x9, UNITY)\n    x13 = shoot(x10, DOWN_LEFT)\n    x14 = shoot(x11, UP_RIGHT)\n    x15 = shoot(x12, NEG_UNITY)\n    x16 = combine(x12, x13)\n    x17 = combine(x14, x15)\n    x18 = combine(x16, x17)\n    O = underfill(I, x7, x18)\n    return O"], [1.0, "def solve_7ea02a5a(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = x4(x5)\n    x7 = compose(normalize, inbox)\n    x8 = mapply(x7, x6)\n    x9 = merge(x3)\n    x10 = fill(I, x1, x9)\n    x11 = paint(x10, x8)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x11, EIGHT, x12)\n    return O"], [1.0, "def solve_3174735b(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = fork(both, x3, x6)\n    x8 = extract(x5, x7)\n    x9 = center(x8)\n    x10 = initset(x9)\n    x11 = backdrop(x10)\n    x12 = subgrid(x11, I)\n    x13 = remove(x9, x2)\n    x14 = argmax(x13, width)\n    x15 = halve(x14)\n    x16 = insert(x9, x15)\n    x17 = mapply(vfrontier, x16)\n    x18 = mapply(hfrontier, x16)\n    x19 = size(x17)\n    x20 = size(x18)\n    x21 = greater(x19, x20)\n    x22 = branch(x21, x7, x15)\n    x23 = branch(x21, x8, x12)\n    x24 = branch(x21,X22, x12)\n    x25 = either(x21, x24)\n    x26 = branch(x25, x7, x18)\n    x27 =drop(x22, x26)\n    x28 = fill(x12, x27, x27)\n    x29 = replace(x28, x27, x6)\n    O = fill(x29, x27, x12)\n    return O"], [1.0, "def solve_d02fde08(I):\n    x1 = numcolors(I)\n    x2 = decrement(x1)\n    O = upscale(I, x2)\n    return O"], [1.0, "def solve_9700fd3b(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = dmirror(I)\n    x8 = sfilter(x7, x4)\n    x9 = combine(x6, x8)\n    x10 = fill(x9, NEG_ONE, x7)\n    x11 = asobject(x10)\n    x12 = toindices(x11)\n    x13 = lbind(shift, x12)\n    x14 = mapply(x13, x11)\n    O = fill(x10, NEG_ONE, x14)\n    return O"], [1.0, "def solve_d4b13d43(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = r601(greater, x6)\n    x8 = uppermost(x2)\n    x9 = equality(x7, x8)\n    x10 = leftmost(x2)\n    x11 = r601(x10)\n    x12 = lowermost(x2)\n    x13 = hconcat(x11, x12)\n    x14 = hconcat(x13, x1)\n    x15 = vconcat(x13, x14)\n    x16 = vconcat(x15, x1)\n    x17 = THREE(x9, x16)\n    x18 = height(x5)\n    x19 = equality(x18, THREE)\n    x20 = branch(x19, vmirror, hmirror)\n    x21 = x20(x14)\n    x22 = difference(x21, x2)\n    O = fill(x17, THREE, x22)\n    return O"], [1.0, "def solve_1e824d25(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = compose(normalize, toindices)\n    x4 = difference(x2, x1)\n    x5 = compose(normalize, x3)\n    x6 = colorfilter(x4, x1)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x1, FIVE)\n    return O"], [1.0, "def solve_c979782c(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = compose(normalize, toindices)\n    x4 = apply(x3, x2)\n    x5 = lbind(shift, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_eb6359ee(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = width(x3)\n    x5 = halve(x4)\n    x6 = branch(x5, width, height)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = height(x3)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = branch(x5, x11, x8)\n    x13 = height(x3)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = branch(x5, x15, x12)\n    x17 = branch(x5, lefthalf, x16)\n    x18 = height(xI)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = branch(x5, x20, x17)\n    x22 = palette(I)\n    x23 = other(x22, ZERO)\n    x24 = ofcolor(x13, x23)\n    x25 = asindices(x13)\n    x26 = ofcolor(I, x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = rbind(combine, x28)\n    x30 = apply(x29, x27)\n    x31 = rbind(shift, x30)\n    x32 = mapply(x31, x3)\n    x33 = fill(I, x23, x32)\n    O = fill(x33, x23, x3)\n    return O"], [1.0, "def solve_8c24578a(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = hperiod(x2)\n    x4 = height(x2)\n    x5 = halve(x4)\n    x6 = add(x5, THREE)\n    x7 = height(x2)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = lbind(subtract, x8)\n    x10 = lbind(shift, x2)\n    x11 = compose(x9, x10)\n    x12 = double(x5)\n    x13 = lbind(multiply, x12)\n    x14 = apply(x13, x2)\n    x15 = mapply(x11, x14)\n    x16 = shift(x2, x15)\n    x17 = lbind(hmirror, x16)\n    x18 = compose(x17, x10)\n    x19 = fork(mapply, x18, x11)\n    x20 = mapply(x19, x1)\n    x21 = paint(I, x20)\n    O = subgrid(x2, x21)\n    return O"], [1.0, "def solve_55cecd99(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = argmax(x2, size)\n    x4 = argmin(x1, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [1.0, "def solve_6f559ba1(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [1.0, "def solve_06590dcd(I):\n    x1 = objects(I, T, F, T)\n    x2 = corners(x1)\n    x3 = apply(dneighbors, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [1.0, "def solve_9d4fd457(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, ONE, x5)\n    x7 = compose(halve, width)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, x7)\n    x10 = matcher(x7, THREE)\n    x11 = power(outbox, TEN)\n    x12 = power(outbox, TWO)\n    x13 = mapply(outbox, x3)\n    x14 = underfill(x6, ONE, x13)\n    x15 = fill(x14, TWO, x10)\n    x16 = fill(x15, ONE, x9)\n    O = fill(x16, THREE, x12)\n    return O"], [1.0, "def solve_4c703a63(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, THREE)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_bf804903(I):\n    x1 = ofcolor(I, TWO)\n    x2 = hline(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = ofcolor(x4, THREE)\n    x6 = ofcolor(x4, TWO)\n    x7 = center(x5)\n    x8 = hfrontier(x7)\n    x9 = center(x6)\n    x10 = hfrontier(x9)\n    x11 = mostcolor(I)\n    x12 = palette(I)\n    x13 = remove(THREE, x12)\n    x14 = remove(TWO, x13)\n    x15 = other(x14, x11)\n    x16 = replace(x4, THREE, x11)\n    x17 = difference(x8, x5)\n    x18 =recolor(x16, THREE)\n    x19 = recolor(THREE, x17)\n    x20 = underpaint(x16, x19)\n    O = x3(x20)\n    return O"], [1.0, "def solve_2cb98a20(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, EIGHT)\n    x3 = vmirror(x2)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = toivec(x4)\n    x7 = tojvec(x5)\n    x8 = add(x7, ZERO_BY_TWO)\n    x9 = add(x6, TWO_BY_ZERO)\n    x10 = shift(x3, x8)\n    x11 = fill(I, TWO, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = compose(toindices, normalize)\n    x14 = rbind(toobject, I)\n    x15 = chain(x14, mostcolor, x13)\n    x16 = matcher(x15, ZERO)\n    x17 = fork(add, first, last)\n    x18 = chain(flip, x16, x17)\n    x19 = sfilter(x12, x18)\n    x20 = chain(normalize, first, last)\n    x21 = lbind(remove, TWO)\n    x22 = compose(x21, x20)\n    x23 = chain(normalize, first, x22)\n    x24 = fork(add, x20, x23)\n    x25 = chain(flip, x15, x24)\n    x26 = mapply(x26, x19)\n    O = paint(x11, x29)\n    return O"], [1.0, "def solve_56ba41b3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = inbox(x2)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, I)\n    x7 = matcher(first, x3)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x6, x8)\n    x10 = normalize(x9)\n    x11 = delta(x10)\n    x12 = ulcorner(x11)\n    x13 = add(x12, x10)\n    x14 = increment(x13)\n    x15 = repeat(x11, x14)\n    x16 = lbind(shift, x10)\n    x17 = shift(x15, x16)\n    x18 = toindices(x17)\n    x19 = lbind(shift, x11)\n    x20 = shape(I)\n    x21 = canvas(x3, x20)\n    x22 = shape(I)\n    x23 = add(x22, x20)\n    x24 = increment(x23)\n    x25 = shift(x11, x24)\n    x26 = combine(x17, x25)\n    x27 = paint(x21, x26)\n    O = toindices(x17)\n    return O"], [1.0, "def solve_c7f68d98(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, EIGHT, x2)\n    x4 = compose(delta, toindices)\n    x5 = mapply(x4, x4)\n    x6 = fill(x3, THREE, x5)\n    x7 = merge(x1)\n    x8 = replace(x6, EIGHT, FOUR)\n    x9 = fill(x8,649, x7)\n    O = replace(x9, EIGHT, FOUR)\n    return O"], [1.0, "def solve_250dc685(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(rbind, equality)\n    x3 = chain(x2, initset, leastcolor)\n    x4 = fork(combine, hfrontier, vfrontier)\n    x5 = compose(x4, x3)\n    x6 = fork(shift, identity, x5)\n    x7 = mapply(x6, x1)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_8f2e7ae1(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_cd409754(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = corners(x3)\n    x8 = combine(x7, x6)\n    O = fill(x6, x1, x8)\n    return O"], [1.0, "def solve_caf958b5(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = minimum(x7)\n    x10 = ulcorner(x6)\n    x11 =min(x7, x9)\n    x12 = ulcorner(x6)\n    x13 = urcorner(x6)\n    x14 =udmirror(x12)\n    x15 = invert(x13)\n    x16 = decrement(x15)\n    x17 = product(x11, x4)\n    x18 = I(x17)\n    x19 = astuple(x16, x16)\n    x20 = increment(x19)\n    x21 = apply(invert, x20)\n    x22 = apply(increment, x21)\n    x23 = apply(tojvec, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    x26 = paint(I, x25)\n    x27 = crop(x26, x6, x1)\n    O = replace(x27, ZERO, EIGHT)\n    return O"], [1.0, "def solve_2b7ac860(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(compose, flip)\n    x5 = lbind(matcher, first)\n    x6 = chain(x4, x5, size)\n    x7 = fork(sfilter, hline, vline)\n    x8 = chain(lowermost, x7, x6)\n    x9 = fork(greater, x8,89)\n    x10 = compose(normalize, toindices)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = apply(tojvec, x12)\n    x14 = lbind(shift, x2)\n    x15 = mapply(x14, x13)\n    x16 = fill(I, NEG_ONE, x15)\n    x17 = compose(decrement, ulcorner)\n    x18 = toivec(NEG_TWO)\n    x19 = rbind(shift, x18)\n    x20 = mapply(x19, x17)\n    x21 = fill(x16, FOUR, x20)\n    x22 = rapply(x21, x15)\n    x23 = mapply(x22, x1)\n    x24 = fill(x21, THREE, x23)\n    x25 = fill(x24, TWO, x220)\n    x26 = ofcolor(I, FIVE)\n    x27 = ofcolor(x25, FIVE)\n    x28 = intersection(x26, x27)\n    x29 = fill(x25, THREE, x28)\n    O = fill(x29, TWO, x027)\n    return O"], [1.0, "def solve_e2cb9287(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = argmax(x1, size)\n    x4 = outbox(x3)\n    x5 = corners(x4)\n    x6 = merge(x1)\n    x7 = cover(I, x6)\n    x8 = fill(x7, ZERO, x5)\n    x9 = combine(x6, x8)\n    O = fill(x9, frontiers, x9)\n    return O"], [1.0, "def solve_e36613bf(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I,7777, x3)\n    O = fill(x4, EIGHT, x1)\n    return O"], [1.0, "def solve_a8a8ed58(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = palette(x3)\n    x6 = remove(ZERO, x5)\n    x7 = other(x6, x4)\n    x8 = ulcorner(x2)\n    x9 = llcorner(x2)\n    x10 = urcorner(x2)\n    x11 = ulcorner(x2)\n    x12 = shoot(x8, UNITY)\n    x13 = shoot(x9, DOWN_LEFT)\n    x14 = shoot(x10, UP_RIGHT)\n    x15 = shoot(x11, NEG_UNITY)\n    x16 = combine(x12, x13)\n    x17 = combine(x14, x15)\n    x18 = combine(x16, x17)\n    O = underfill(x3, x7, x18)\n    return O"], [1.0, "def solve_55681929(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_eb804d92(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_4155ed6c(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = maximum(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = rbind(multiply, x6)\n    x8 = apply(x7, x4)\n    x9 = asobject(I)\n    x10 = shape(I)\n    x11 = shift(x9, x10)\n    x12 = paint(I, x11)\n    x13 = height(I)\n    x14 = width(I)\n    x15 = divide(x13, x14)\n    x16 = increment(x15)\n    x17 = width(I)\n    x18 = divide(x17, x14)\n    x19 = increment(x18)\n    x20 = astuple(x16, x19)\n    x21 = increment(x20)\n    x22 = canvas(ZERO, x21)\n    x23 = normalize(x11)\n    x24 = ofcolor(x12, TWO)\n    x25 = lbind(shift, x24)\n    x26 = shape(x23)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = mapply(x25, x28)\n    O = paint(x12, x29)\n    return O"], [1.0, "def solve_95ef62eb(I):\n    x1 = objects(I, T, F, T)\n    x2 = shape(I)\n    x3 = add(x2, DOWN)\n    x4 = connect(ORIGIN, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = mostcolor(I)\n    x9 = leastcolor(I)\n    x10 = inbox(x6)\n    x11 = backdrop(x10)\n    x12 = initset(x13)\n    x13 = insert(x11, x12)\n    x14 = subgrid(x6, I)\n    x15 = argmax(x13, x14)\n    x16 = ulcorner(x6)\n    x17 = increment(x16)\n    x18 = subgrid(x15, I)\n    x19 = sizefilter(x18, ONE)\n    x20 = merge(x19)\n    x21 = fill(I, x3, x20)\n    x22 = replace(x21, x9, ZERO)\n    O = fill(x22, x10, x20)\n    return O"], [1.0, "def solve_df28c934(I):\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = asindices(I)\n    x10 = ofcolor(I, ZERO)\n    x11 = difference(x9, x10)\n    x12 = astuple(x1, x1)\n    x13 = connect(x5, x12)\n    x14 = fill(I, FIVE, x13)\n    x15 = initset(x3)\n    x16 = lbind(contained, ZERO)\n    x17 = difference(x15, x16)\n    x18 = toindices(x17)\n    x19 = lbind(ZERO, x18)\n    x20 = compose(x19, outbox)\n    x21 = rbind(multiply, x1)\n    x22 = rbind(divide, x1)\n    x23 = compose(x21, x22)\n    x24 = fork(equality, identity, x23)\n    x25 = compose(x24, last)\n    x26 = ofcolor(x14, ZERO)\n    x27 = sfilter(x26, x25)\n    x28 = difference(x19, x27)\n    O = fill(x14, FIVE, x28)\n    return O"], [1.0, "def solve_af4c12f4(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(bordering, toindices)\n    x5 = difference(x2, x3)\n    x6 = mfilter(x5, x4)\n    x7 = outbox(x6)\n    x8 = sizefilter(x3, ONE)\n    x9 = mapply(outbox, x8)\n    O = fill(I,77, x9)\n    return O"], [1.0, "def solve_4e7ec254(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = mostcolor(x4)\n    x6 = objects(I, T, F, F)\n    x7 = colorfilter(x6, x5)\n    x8 = totuple(x7)\n    x9 = apply(color, x8)\n    x10 = repeat(NEG_ONE, ONE)\n    x11 = combine(x10, x9)\n    x12 = mpapply(recolor, x11, x9)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_4a4f45d2(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, FIVE, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    O = replace(x10, FIVE, ZERO)\n    return O"], [1.0, "def solve_0718be15(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = mapply(x2, x1)\n    x4 =paint(I, x3)\n    x5 = chain(toivec, invert, height)\n    x6 = fork(shift, identity, x5)\n    x7 = mapply(x6, x1)\n    O = paint(x4, x7)\n    return O"], [1.0, "def solve_f165c65d(I):\n    x1 = palette(I)\n    x2 = intersection(x1, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = leftmost(x4)\n    x9 = lbind(greater, x8)\n    x10 = compose(x9, first)\n    x11 = rbind(vmatching, x4)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(add, x5)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = compose(x10, x16)\n    x18 = lbind(lbind, sfilter)\n    x19 = compose(x18, x17)\n    x20 = lbind(rbind, greater)\n    x21 = compose(x20, x19)\n    x22 = fork(223, x21, identity)\n    x23 = x22(x7)\n    x24 = x22(x8)\n    x25 = x22(x02)\n    x26 = x22(x25)\n    x27 = compose(x26, x19)\n    x28 = fork(mapply, x27, x21)\n    x29 = fork(mapply, x28, x24)\n    x30 = fork(dmirror, x29, identity)\n    x31 = vmirror(x30)\n    x32 = intersection(x19, x34)\n    x33 = apply(x32, x32)\n    x34 = mapply(x29, x33)\n    x35 = dmirror(x34)\n    x36 =(first, x35)\n    x37 = paint(x36, x34)\n    O = x6(x37)\n    return O"], [1.0, "def solve_cf6a092c(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_1f5096dd(I):\n    x1 = objects(I, T, F, T)\n    x2 = rot90(x1)\n    x3 = color(x2)\n    x4 = sizefilter(x1, ONE)\n    x5 = difference(x1, x4)\n    x6 = apply(size, x5)\n    x7 = matcher(x6, square)\n    x8 = extract(x4, x7)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x2)\n    O = rot270(x10)\n    return O"], [1.0, "def solve_b9d5c8ee(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = argmin(x5, size)\n    x7 = rightmost(x6)\n    x8 = leftmost(x6)\n    x9 = subgrid(x4, I)\n    x10 = uppermost(x6)\n    x11 = uppermost(x6)\n    x12 = subtract(x10, x11)\n    x13 = leftmost(x6)\n    x14 = leftmost(x6)\n    x15 = subtract(x13, x14)\n    x16 = lowermost(x6)\n    x17 = lowermost(x6)\n    x18 = subtract(x16, x17)\n    x19 = uppermost(x6)\n    x20 = uppermost(x6)\n    x21 = subtract(x19, x20)\n    x22 = astuple(x21, x17)\n    x23 = color(x4)\n    x24 = color(x6)\n    x25 = combine(x23, x24)\n    x26 = combine(x22, x25)\n    x27 = hline(x6)\n    x28 = ulcorner(x6)\n    x29 = lrcorner(x6)\n    x30 = urcorner(x6)\n    x31 = righthalf(x28)\n    x32 = objects(x29, T, F, T)\n    x33 = rbind(shoot, x27)\n    x34 = mapply(x33, x32)\n    x35 = combine(x32, x33)\n    x36 = recolor(x4, x35)\n    x37 = paint(x9, x36)\n    x38 = branch(x7, x30, x34)\n    x39 = extract(x31, x38)\n    O = subgrid(x39, x37)\n    return O"], [1.0, "def solve_5534ce04(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = apply(max, x4, mostcolor)\n    x6 = combine(x3, x5)\n    x7 = shape(x6)\n    x8 = maximum(x7)\n    x9 = lbind(multiply, x8)\n    x10 = lbind(gravitate, x3)\n    x11 = compose(x9, x10)\n    x12 = lbind(add, x8)\n    x13 = rbind(shoot, x12)\n    x14 = mapply(x13, x6)\n    x15 = combine(x6, x14)\n    x16 = lbind(vmapply, x11)\n    x17 = lbind(lbind, shift)\n    x18 = compose(x16, x17)\n    x19 = rbind(occurrences, x\u7684)\n    x20 = compose(x19, x18)\n    x21 = fork(mapply, x20, x19)\n    x22 = chain(x16, x21, x6)\n    x23 = shape(I)\n    x24 = repeat(x23, ONE)\n    x25 = merge(x24)\n    x26 = cover(I, x25)\n    x27 = paint(x26, x24)\n    O = fill(x27, x1, x25)\n    return O"], [1.0, "def solve_d13e3d05(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(x3, urcorner)\n    x5 = fork(add, x4, UP_RIGHT)\n    x6 = fork(add, x4, DOWN_LEFT)\n    x7 = fork(add, x5, x6)\n    x8 = compose(initset, x7)\n    x9 = fork(insert, x3, x8)\n    x10 = compose(backdrop, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, THREE, x11)\n    return O"], [1.0, "def solve_528c7316(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NINE, NINE)\n    x4 = invert(x3)\n    x5 = astuple(NEG_TWO, x4)\n    x6 = interval(ONE, NINE, ONE)\n    x7 = rbind(multiply, x5)\n    x8 = apply(x7, x6)\n    x9 = rbind(shift, x4)\n    x10 = mapply(x9, x8)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_75cc968f(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(initset, ulcorner, lrcorner)\n    x3 = fork(connect, ulcorner, x2)\n    x4 = compose(flip, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_82fd973f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [1.0, "def solve_d40ccbc6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(adjacent, x2)\n    x5 = lbind(argmin, x3)\n    x6 = fork(x4, x5, size)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_b6bd3cd5(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = combine(x6, x5)\n    x8 = mpapply(recolor, x7, x4)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_be709485(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = normalize(x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(TWO, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(apply, x9)\n    x11 = lbind(compose, size)\n    x12 = lbind(lbind, intersection)\n    x13 = compose(x11, x12)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x10, x14, x7)\n    x16 = fork(argmax, x15, x13)\n    x17 = mapply(x16, x4)\n    O = underfill(I, ONE, x17)\n    return O"], [1.0, "def solve_9d0dfd6b(I):\n    x1 = partition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = colorfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = difference(x1, x5)\n    x7 = remove(x5, x6)\n    x8 = merge(x7)\n    x9 = product(x8, x8)\n    x10 = power(first, TWO)\n    x11 = compose(first, last)\n    x12 = fork(equality, x10, x11)\n    x13 = sfilter(x9, x12)\n    x14 = compose(last, first)\n    x15 = power(last, TWO)\n    x16 = fork(connect, x14, x15)\n    x17 = fork(recolor, color3, x16)\n    x18 = mapply(x17, x13)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_c47892bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_4c5af9ea(I):\n    x1 = fgpartition(I)\n    x2 = compose(hfrontier, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = fork(intersection, first, last)\n    x7 = apply(x6, x1)\n    x8 = mapply(x7, x7)\n    O = fill(x5, TWO, x8)\n    return O"], [1.0, "def solve_b6df0a8d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(vfrontier, x2)\n    x4 = underfill(I, EIGHT, x3)\n    x5 = hconcat(x4, x4)\n    O = vconcat(x5, x5)\n    return O"], [1.0, "def solve_a158e984(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = neighbors(x3)\n    x5 = argmin(x4, x2)\n    x6 = box(x5)\n    O = fill(I, x1, x6)\n    return O"], [1.0, "def solve_33002367(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(connect, ulcorner, lrcorner)\n    x4 = fork(equality, toindices, x3)\n    x5 = sfilter(x2, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, hmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, T)\n    x11 = compose(flip, positive)\n    x12 = sfilter(x10, x11)\n    x13 = rbind(shoot, UNITY)\n    x14 = rbind(shoot, NEG_UNITY)\n    x15 = fork(combine, x13, x14)\n    x16 = mapply(x15, x12)\n    O = fill(x9, x1, x16)\n    return O"], [1.0, "def solve_a8e280e5(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = colorfilter(x2, TWO)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, normalize, x4)\n    x6 = lbind(mapply, x5)\n    x7 = rbind(difference, x1)\n    x8 = chain(size, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x1, x9)\n    x11 = extract(x4, x10)\n    x12 = objects(x1, T, F, T)\n    x13 = merge(x12)\n    x14 = toindices(x13)\n    x15 = lbind(lbind, shift)\n    x16 = lbind(occurrences, x5)\n    x17 = compose(x16, x15)\n    x18 = fork(mapply, x17, x09)\n    x19 = lbind(lbind, shift)\n    x20 = lbind(mapply, x4)\n    x21 = compose(x20, x18)\n    x22 = fork(mapply, x21, x19)\n    x23 = lbind(lbind, shift)\n    x24 = lbind(mapply, x4)\n    x25 = compose(x24, x18)\n    x26 = fork(mapply, x25, x23)\n    x27 = fork(paint, identity, x22)\n    x28 = fork(vconcat, x27, x26)\n    x29 = fork(recolor, color, x28)\n    x30 = mapply(x29, x19)\n    O = paint(x15, x30)\n    return O"], [1.0, "def solve_2b069dca(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = matcher(size, ONE)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 =mostcommon(x7)\n    x9 = palette(I)\n    x10 = remove(x8, x9)\n    x11 = lbind(colorcount, I)\n    x12 = argmax(x10, x11)\n    x13 = remove(x12, x10)\n    x14 = lbind(ofcolor, I)\n    x15 = apply(x14, x13)\n    x16 = last(x15)\n    x17 = ofcolor(I, x12)\n    x18 = first(x17)\n    x19 = initset(x18)\n    x20 = lbind(argmin, x17)\n    x21 = lbind(rbind, manhattan)\n    x22 = compose(x21, initset)\n    x23 = fork(argmin, identity, x22)\n    x24 = colorfilter(x1, x12)\n    x25 = rbind(argmax, rightmost)\n    x26 = compose(x25, x23)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x24)\n    x29 = cover(I, x28)\n    x30 = paint(x29, x27)\n    O = paint(x30, x28)\n    return O"], [1.0, "def solve_ca78e49f(I):\n    x1 = width(I)\n    x2 = asobject(I)\n    x3 = hperiod(x2)\n    x4 = height(x2)\n    x5 = astuple(x4, x3)\n    x6 = ulcorner(x2)\n    x7 = crop(I, x6, x5)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, x3)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = merge(x12)\n    x14 = rot270(x13)\n    x15 = astuple(x4, x9)\n    O = crop(x14, ORIGIN, x15)\n    return O"], [1.0, "def solve_2da23d32(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = pair(x18, x38)\n    x25 = mapply(x23, x24)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_42dc0302(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = leastcolor(I)\n    x5 = vmirror(x4)\n    x6 = objects(I, T, F, T)\n    x7 = merge(x6)\n    x8 = cover(I, x7)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x3)\n    O = paint(x8, x10)\n    return O"], [1.0, "def solve_8f4251a9(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = apply(toindices, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = extract(x3, x5)\n    x7 = remove(x6, x3)\n    x8 = lbind(vmatching, x6)\n    x9 = lbind(hmatching, x6)\n    x10 = sfilter(x7, x8)\n    x11 = sfilter(x7, x9)\n    x12 = argmin(x10, uppermost)\n    x13 = argmax(x10, uppermost)\n    x14 = argmin(x11, leftmost)\n    x15 = argmax(x11, leftmost)\n    x16 = fill(I, SIX, x6)\n    x17 = fill(x16, TWO, x12)\n    x18 = fill(x17, ONE, x13)\n    x19 = fill(x18, FOUR, x14)\n    O = fill(x19, THREE, x15)\n    return O"], [1.0, "def solve_ad4194aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [1.0, "def solve_cfc27136(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.0, "def solve_7c24be8d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, size)\n    x14 = argmin(x1, size)\n    x15 = fill(x12, x3, x14)\n    x16 =izationbind(contained, x15)\n    x17 = normalize(x13)\n    x18 = matcher(first, x16)\n    x19 = sfilter(x17, x18)\n    x20 = lbind(gravitate, x17)\n    x21 = lbind( multiply, x100)\n    x22 = compose(x20, x21)\n    x23 = fork(recolor, identity, x22)\n    x24 = mapply(x23, x19)\n    O = paint(x15, x24)\n    return O"], [1.0, "def solve_6a8bd622(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_8414ade0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = interval(TWO, NEG_ONE, NEG_ONE)\n    x10 = apply(tojvec, x9)\n    x11 = rbind(apply, x10)\n    x12 = lbind(compose, size)\n    x13 = lbind(lbind, intersection)\n    x14 = compose(x12, x13)\n    x15 = lbind(lbind, shift)\n    x16 = chain(x11, x15, x14)\n    x17 = fork(argmax, x16, x18)\n    x18 = mapply(x17, x12)\n    O = paint(x5, x18)\n    return O"], [1.0, "def solve_effc7852(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, TWO, x4)\n    x6 = vmirror(x5)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = index(x8, DOWN)\n    x10 = subgrid(x8, x5)\n    x11 = lefthalf(x10)\n    x12 = righthalf(x11)\n    x13 = vmirror(x12)\n    x14 = cellwise(x13, x12, x125)\n    x15 = replace(x14, TWO, ZERO)\n    x16 = replace(x15, ONE, x11)\n    x17 = compress(x16)\n    x18 = upscale(x17, TWO)\n    x19 = ulcorner(x8)\n    x20 = llcorner(x8)\n    x21 = objects(x18, T, F, T)\n    x22 = colorfilter(x21, TWO)\n    x23 = colorfilter(x22, ONE)\n    x24 = lrcorner(x8)\n    x25 = palette(x24)\n    x26 = remove(ZERO, x25)\n    x27 = other(x26, x12)\n    x28 = ulcorner(x2)\n    x29 = ofcolor(x12, x27)\n    x30 = shift(x29, x28)\n    x31 = ofcolor(x12, x27)\n    x32 = difference(x30, x31)\n    x33 = first(x32)\n    x34 = mapply(neighbors, x33)\n    O = fill(x12, x27, x34)\n    return O"], [1.0, "def solve_5ca27f28(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = ofcolor(I, x4)\n    x6 = colorfilter(x5, ZERO)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, x4, x9)\n    O = replace(x10, x4, x5)\n    return O"], [1.0, "def solve_b552fc6f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(add, first, last)\n    x4 = rbind(x3, x2)\n    x5 = compose(x4, x4)\n    x6 = argmax(x2, x5)\n    x7 = fork(connect, x6, outbox)\n    x8 = mapply(x7, x3)\n    O = fill(I, x1, x8)\n    return O"], [1.0, "def solve_8a080fa2(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, FIVE, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_d18aa996(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(objects, F)\n    x4 = compose(x3, v)\n    x5 = rbind(hsplit, TWO)\n    x6 = apply(x5, x2)\n    x7 = argmax(x6, numcolors)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = x8(x4)\n    x11 = x8(x5)\n    x12 = matcher(first, x1)\n    x13 = matcher(first, x10)\n    x14 = fork(sfilter, identity, x12)\n    x15 = compose(color, x14)\n    x16 = fork(recolor, x15, x13)\n    x17 = mapply(x16, x21)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_32a46f69(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(sfilter, x1)\n    x7 = compose(size, x6)\n    x8 = greater(x7, TWO)\n    x9 = branch(x8, ORIGIN, RIGHT)\n    x10 = branch(x8, TWO_BY_TWO, ZERO_BY_TWO)\n    x11 = branch(x8, TWO_BY_BY_x9, palette)\n    x12 = mapply(x11, x10)\n    x13 = paint(I, x12)\n    x14 = trim(x12)\n    x15 = objects(x13, T, F, F)\n    x16 = colorfilter(x15, x5)\n    x17 = compose(vline, x10)\n    x18 = rbind(adjacent, x4)\n    x19 = objects(x13, T, F, F)\n    x20 = sfilter(x19, x17)\n    x21 = apply(color, x20)\n    x22 = dedupe(x21)\n    x23 = rbind(greater, x17)\n    x24 = compose(x23, color)\n    x25 = merge(x12)\n    x26 = lbind(colorfilter, x17)\n    x27 = chain(x25, x26, color)\n    x28 = sfilter(x21, x27)\n    x29 = merge(x28)\n    x30 = mostcolor(I)\n    x31 = fill(x13, x30, x29)\n    x32 = paint(x31, x3)\n    O = trim(x32)\n    return O"], [1.0, "def solve_65a299b5(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = shift(x2, DOWN)\n    x4 = paint(I, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = colorfilter(x5, FIVE)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x3)\n    x9 = mfilter(x6, x8)\n    O = fill(x4, EIGHT, x9)\n    return O"], [1.0, "def solve_f60ec8d7(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorcount, I)\n    x6 = argmin(x4, x5)\n    x7 = other(x4, x6)\n    x8 = rbind(colorcount, x6)\n    x9 = astuple(x8, x5)\n    x10 = canvas(x9, x9)\n    x11 = normalize(x3)\n    x12 = lbind(ofcolor, x11)\n    x13 = mapply(x12, x11)\n    O = fill(x10, x7, x13)\n    return O"], [1.0, "def solve_6c5e781b(I):\n    x1 = objects(I, T, T, T)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(multiply, height, width)\n    x6 = fork(equality, size, x5)\n    x7 = compose(flip, x6)\n    x8 = fork(both, x4, x7)\n    x9 = sfilter(x1, x8)\n    x10 = difference(x1, x9)\n    x11 = merge(x10)\n    x12 = rot90(x11)\n    x13 = rot180(x11)\n    x14 = rbind(subtract, TWO)\n    x15 = rbind(ofcolor, ONE)\n    x16 = compose(x14, x15)\n    x17 = argmax(x12, x16)\n    x18 = difference(x2, x17)\n    x19 = merge(x18)\n    x20 = rot90(x19)\n    x21 = rot180(x19)\n    x22 = rbind(subtract, x20)\n    x23 = rbind(astuple, x21)\n    x24 = lbind(subtract, x21)\n    x25 = chain(x24, x23, x22)\n    x26 = lbind(shift, x11)\n    x27 = chain(x26, x25, x22)\n    x28 = fork(recolor, color, x27)\n    x29 = mapply(x28, x18)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_5d2c027d(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ONE)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_eeea1d1b(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = multiply(x2, FIVE)\n    x4 = astuple(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    x10 = paint(x5, x9)\n    O = hmirror(x10)\n    return O"], [1.0, "def solve_54a790f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = lrcorner(x1)\n    x3 = cover(I, x2)\n    x4 = tojvec(NEG_TWO)\n    x5 = dneighbors(ORIGIN)\n    x6 = insert(x4, x5)\n    x7 = fill(x3, ZERO, x6)\n    x8 = lbind(shift, x1)\n    x9 = mapply(x8, x7)\n    O = fill(x7, TWO, x9)\n    return O"], [1.0, "def solve_f79ab7d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_b23411bc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = insert(x4, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_b0998006(I):\n    x1 = objects(I, T, F, T)\n    x2 =97777744000000000000\n    x3 = leastcolor(I)\n    x4 = mostcolor(I)\n    x5 = ofcolor(I, x3)\n    x6 = portrait(x5)\n    x7 = branch(x6, identity, width)\n    x8 = x7(I)\n    x9 = rbind( divide, THREE)\n    x10 = rbind(multiply, THREE)\n    x11 = compose(x9, x10)\n    x12 = multiply(x8, THREE)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = apply(x11, x13)\n    x15 = lbind(mapply, dneighbors)\n    x16 = lbind(mapply, toindices)\n    x17 = rbind(apply, x14)\n    x18 = lbind(x16, x1)\n    x19 = chain(x17, x18, last)\n    x20 = fork(recolor, first, x19)\n    x21 = mapply(x20, x5)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_ef6fd0e0(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [1.0, "def solve_8bd22abb(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_bf93438b(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [1.0, "def solve_1e76854e(I):\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = objects(I, T, F, F)\n    x4 = sizefilter(x3, x2)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = increment(x7)\n    x9 = backdrop(x08)\n    x10 = lbind(position, x9)\n    x11 = compose(x10, initset)\n    x12 = matcher(x11, x7)\n    x13 = sfilter(x1, x12)\n    x14 = apply(color, x13)\n    x15 = remove(x8, x13)\n    x16 = apply(color, x15)\n    x17 = shape(I)\n    x18 = canvas(x8, x17)\n    x19 = lbind(position, x9)\n    x20 = compose(x19, initset)\n    x21 = fork(recolor, x20, x17)\n    x22 = mapply(x21, x16)\n    O = paint(x18, x22)\n    return O"], [1.0, "def solve_4dadc992(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_dd17e16c(I):\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = rbind(toobject, I)\n    x22 = compose(numcolors, x21)\n    x23 = matcher(x22, ONE)\n    x24 = extract(x4, x23)\n    x25 = other(x4, x24)\n    x26 = objects(I, T, F, F)\n    x27 = colorfilter(x26, x25)\n    x28 = outbox(x27)\n    x29 = difference(x65, x28)\n    x30 = mapply(toindices, x29)\n    x31 = apply(urcorner, x25)\n    x32 = lbind(shift, x30)\n    x33 = mapply(x32, x31)\n    x34 = fill(I, x25, x33)\n    O = fill(x34, x25, x20)\n    return O"], [1.1, "def solve_2bd2db6a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_79e3c3c9(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(I, F, F, T)\n    x3 = argmin(x2, numcolors)\n    x4 = astuple(x3, x1)\n    x5 = crop(x3, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(x5, x6)\n    x8 = double(x width)\n    x9 = astuple(x8, x3)\n    x10 = crop(x7, DOWN, x9)\n    x11 =65(x10)\n    x12 = leac889999(x11)\n    x13 = toindices(x12)\n    x14 = rbind(contained, x13)\n    x15 = chain(flip, x14, last)\n    x16 = sfilter(x1, x15)\n    x17 = fork(equality, identity, hmirror)\n    x18 = sfilter(x16, x17)\n    x19 = compose(increment, first)\n    x20 = compose(decrement, last)\n    x21 = fork(equality, x19, x20)\n    x22 = fork( both, x15, x21)\n    x23 = rbind(add, RIGHT)\n    x24 = compose(x23, first)\n    x25 = rbind(add, DOWN)\n    x26 = compose(x25, last)\n    x27 = rbind(multiply, LEFT)\n    x28 = compose(x27, x22)\n    x29 = rbind(multiply, RIGHT)\n    x30 = compose(x29, x26)\n    x31 = rbind(multiply, UP)\n    x32 = compose(x31, x25)\n    x33 = fork(add, x28, x32)\n    x34 = fork(add, x30, x33)\n    x35 = ofcolor(x14, FIVE)\n    x36 = ofcolor(x13, ZERO)\n    x37 = compose(last, last)\n    x38 = compose(first, last)\n    x39 = fork(connect"], [1.1, "def solve_cb84efcc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_4d077a3a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_7e5fe297(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rot90(I)\n    x4 = add(x3, TWO)\n    x5 = rot180(I)\n    x6 = add(x5, TWO)\n    x7 = rot270(I)\n    x8 = add(x7, TWO)\n    x9 = rot90(I)\n    x10 =add(x9, TWO)\n    x11 = initset(x4)\n    x12 = insert(x8, x11)\n    x13 = insert(x10, x12)\n    x14 = toobject(x13, I)\n    x15 = difference(x1, x14)\n    x16 = valmax(x15, size)\n    x17 = rbind(replace, x1)\n    x18 = rbind(replace, x16)\n    x19 = compose(x17, x18)\n    x20 = fork(equality, x18, x19)\n    x21 = chain(initset, x20, size)\n    x22 = fork(88288, x19, x21)\n    x23 = fork(equality, x21, x22)\n    x24 = compose(flip, x23)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(positive, size, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = compose(dmirror, x27)\n    x29 = power(x28, TWO)\n    x30 = x29(I)\n    x31 = fgpartition(x30)\n    x32 = merge(x31)\n    x33 = chain(double, x20, x22)\n    x34 = invert(x13)\n    x35 = shift(x3, x34)\n    x36 = shift(x3, x35)\n    x37 = paint(x30, x36)\n    x38 = paint(x37, x3)\n    x39 = paint(x38, x3)\n    x40 = branch(x34, x39, x33)\n    "], [1.1, "def solve_f3abc47b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_7685ebbe(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_3dc34a01(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = insert(x19, x31)\n    x33 = shape(x2)\n    x34 = decrement(x33)\n    x35 = tojvec(x34)\n    x36 = insert(x16, x34)\n    x37 = insert(x17, x36)\n    x38 = shape(I)\n    x39 = decrement(x38)\n    x40 = tojvec(x39)\n    x41 = index(I, x40)\n    x42 = shape(I)\n    x43 = decrement("], [1.1, "def solve_bd4087cd(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = remove(x11, x9)\n    x13 = rightmost(x12)\n    x14 = lbind(manhattan, x13)\n    x15 = argmin(x13, x14)\n    x16 = leftmost(x15)\n    x17 = increment(x16)\n    x18 = rightmost(x15)\n    x19 = decrement(x18)\n    x20 = lbind(astuple, x19)\n    x21 = apply(x20, x11)\n    x22 = lbind(shift, x8)\n    x23 = mapply(x22, x21)\n    x24 = maximum(x23)\n    x25 = double(x24)\n    x26 = leftmost(x15)\n    x27 = increment(x26)\n    x28 = rightmost(x15)\n    x29 = decrement(x28)\n    x30 = lbind(shift, x9)\n    x31 = mapply(x30, x29)\n    x32 = combine(x265, x31)\n    x33 = palette(I)\n    x34 = vmirror(x33)\n    x35 = dmirror(x32)\n    x36 = combine(x41, x35)\n    x37 = combine(x33, x36)\n    x38 = difference(x37, x to)\n    x39 = papply(compose, x38, x37)\n    x40 = lbind(greater, xBound)\n    x41 = compose(x40, first)\n    x42 = s"], [1.1, "def solve_d3d67db1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_58fb3db2(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = rbind(greater, THREE)\n    x8 = rbind(min, THREE)\n    x9 = rbind(manhattan, x8)\n    x10 =8888(x9, initset)\n    x11 = chain(x7, x8, x10)\n    x12 = sfilter(x5, x11)\n    x13 = outbox(x12)\n    x14 = backdrop(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x6)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = color(x19)\n    x21 = toindices(x19)\n    x22 = compose(toindices, normalize)\n    x23 = matcher(x22, x21)\n    x24 = sfilter(x1, x23)\n    x25 = difference(x1, x24)\n    x26 = subgrid(x25, I)\n    x27 = objects(x26, T, F, T)\n    x28 = colorfilter(x27, x6)\n    x29 = lbind(adjacent, x NEG_ONE)\n    x30 = rbind(adjacent, x41)\n    x31 = fork(both, x29, x30)\n    x32 = sfilter(x28, x31)\n    x33 = rbind(multiply, THREE)\n    x34 = rbind(divide, THREE)\n    x35 = compose(x33, x34)\n    x36 = fork(equality, identity, x35)\n    x37 = sfilter(x32, x36)\n    x38 = mapply(toindices, x37)\n    x39 ="], [1.1, "def solve_d49f07a4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, UNITY)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, NEG_ONE)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 ="], [1.1, "def solve_7ce4273f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_a7a191f4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_625d3afd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum, x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_3c42b151(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = combine(x18, x20)\n    x22 = pair(x21, x15)\n    x23 = mapply(box, x22)\n    x24 = fill(x19, ZERO, x23)\n    x25 = objects(x24, F, F, T)\n    x26 = lbind(occurrences, x24)\n    x27 = compose(x26, palette)\n    x28 = mapply(x27, x26)\n    x29 = cover(x24, x28)\n    x30 = tojvec(NEG_TWO)\n    x31 = shift(x29, x30)\n    x32 =2 paint(x24, x31)\n    x33 = palette(x32)\n    x34 = remove(ZERO, x33)\n    x35 = other(x34, x41)\n    x36 = ofcolor(x32, x35)\n    x37 = shift(x36, x31)\n    x38 = ofcolor(x32, x5)\n    x39 = left"], [1.1, "def solve_804c8225(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_58094427(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(TEN, TEN)\n    x3 = invert(x2)\n    x4 = astuple(TWO, x3)\n    x5 = astuple(THREE, x3)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x7, x1)\n    x9 = lbind(contained, TWO)\n    x10 = lbind(contained, THREE)\n    x11 = compose(invert, ulcorner)\n    x12 = lbind(compose, x11)\n    x13 = lbind(rbind, sfilter)\n    x14 = compose(x12, x13)\n    x15 = rbind(compose, center)\n    x16 = lbind(shift, x8)\n    x17 = x14(x9)\n    x18 = toindices(x17)\n    x19 = compose(x14, first)\n    x20 = fork(add, x19, x18)\n    x21 = compose(x17, x20)\n    x22 = fork(contained, x21, toindices)\n    x23 = compose(normalize, x22)\n    x24 = astuple(identity, rot90)\n    x25 = astuple(rot180, rot270)\n    x26 = combine(x24, x25)\n    x27 = astuple(identity, rot270)\n    x28 = astuple(rot180, anmirror)\n    x29 = combine(x27, x28)\n    x30 = pair(x26, x29)\n    x31 = rbind(rapply, I)\n    x32 = compose(initset, first)\n    x33 = fork(rapply, x32, initset)\n    x34 = compose(x31, x33)\n    x35 = mapply(x34, x30)\n    x36 = combine(x35, x31)\n    x37 = paint(I, x36)\n    x38 =diesatching(x37)\n    x39 = fill("], [1.1, "def solve_fd5999f1(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = interval(THREE, SEVEN, ONE)\n    x5 = product(x4, x4)\n    x6 = fork(multiply, first, last)\n    x7 = order(x5, x6)\n    x8 = lbind(canvas, NEG_ONE)\n    x9 = chain(x8, first, first)\n    x10 = chain(corners, asindices, x9)\n    x11 = lbind(recolor, x1)\n    x12 = compose(asindices, x9)\n    x13 = fork(difference, x12, x10)\n    x14 = lbind(recolor, TWO)\n    x15 = compose(inbox, x10)\n    x16 = chain(x14, backdrop, x15)\n    x17 = compose(x11, x13)\n    x18 = lbind(lbind, combine)\n    x19 = compose(x18, x17)\n    x20 = lbind(rbind, recolor)\n    x21 = compose(x20, x10)\n    x22 = fork(compose, x19, x21)\n    x23 = lbind(lbind, mapply)\n    x24 = lbind(lbind, shift)\n    x25 = chain(x23, x24, x16)\n    x26 = lbind(lbind, occurrences)\n    x27 = compose(x66, x25)\n    x28 = fork(compose, x27, x26)\n    x29 = fork(mapply, x25, x28)\n    x30 = branch(x6, x29, ONE)\n    x31 = branch(x6, x25, x30)\n    x32 = branch(x6, x26, x31)\n    x33 = x32(x31)\n    x34 = ofcolor(I, ONE)\n    x35 = backdrop(x34)\n    x36 = ofcolor(I, TWO)\n    x37 = backdrop(x36)\n    x38 = intersection(x34"], [1.1, "def solve_97a654e4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = difference(x11, x18)\n    x22 = extract(x21, x20)\n    x23 = color(x22)\n    x24 = mask(x22)\n    x25 = objects(x22, T, F, T)\n    x26 = colorfilter(x25, x23)\n    x27 = rbind(vmatching, x22)\n    x28 = rbind(hmatching, x22)\n    x29 = fork(either, x27, x28)\n    x30 = extract(x26, x29)\n    x31 = rbind(gravitate, x11)\n    x32 = compose(first, last)\n    x33 = fork(add, x32, x31)\n    x34 = fork(connect, x33, x308)\n    x35 = fork(recolor, color, x34)\n    x36 = mapply(x35, x31)\n    x37 = paint(x10, x36)\n    x38 = objects(x37, T, F, T)\n    x"], [1.1, "def solve_029230b2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_71fe9eb8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_89216841(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = llcorner(x6)\n    x9 = urcorner(x6)\n    x10 = ulcorner(x6)\n    x11 = shoot(x7, NEG_UNITY)\n    x12 = shoot(x8, UP_RIGHT)\n    x13 = shoot(x9, DOWN_LEFT)\n    x14 = combine(x11, x12)\n    x15 = combine(x3, x13)\n    x16 = combine(x44, x15)\n    x17 = urcorner(x6)\n    x18 = ulcorner(x6)\n    x19 = shoot(x17, NEG_UNITY)\n    x20 = shoot(x18, UP_RIGHT)\n    x21 = combine(x19, x20)\n    x22 = remove(x21, x16)\n    x23 = combine(x18, x22)\n    x24 = color(x6)\n    x25 = fill(I, x24, x23)\n    x26 = ofcolor(x25, x7)\n    x27 = llcorner(x6)\n    x28 = insert(x27, x26)\n    x29 = subgrid(x28, x25)\n    x30 = argmax(x29, lowermost)\n    x31 = replace(x30, x6, ZERO)\n    x32 = equality(x31, ONE)\n    x33 = branch(x32, urcorner, identity)\n    x34 = branch(x32, leftmost, identity)\n    x35 = axis129(x34)\n    x36 = astuple(ONE, x35)\n    x37 = multiply(x36, x32)\n    x38 = add(x37, x33)\n    x39 = x30(x38)"], [1.1, "def solve_248b078b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = fgpartition(x8)\n    x15 = merge(x14)\n    x16 = difference(x13, x15)\n    x17 = subgrid(x9, x8)\n    x18 = shoot(x17, UNITY)\n    x19 = height(x7)\n    x20 = matcher(x14, x19)\n    x21 = fork(both, x17, x20)\n    x22 = sfilter(x16, x21)\n    x23 = color(x4)\n    x24 = color(x3)\n    x25 = sfilter(x19, x23)\n    x26 = subtract(x17, x22)\n    x27 = crop(x7, DOWN, x26)\n    x28 = merge(x22)\n    x29 = subgrid(x28, x7)\n    x30 = rbind( screenshotordering, x22)\n    x31 = compose(x30, palette)\n    x32 = argmax(x29, x31)\n    x33 = other(x22, x32)\n    x34 = replace(x21, x4, x33)\n    x35 = height(x7)\n    x36 = subtract(x17, x35)\n    x37 = divide(x36, x31)\n    x38 = matcher(x37, x33)\n    x39 = sfilter(x24, x38)\n    x40 = downscale(x19, x40)\n    x41"], [1.1, "def solve_2981d2b0(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivef(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_0bd0da7a(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_384d236d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(bordering, x1)\n    x3 = other(x1, x2)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = neighbors(ORIGIN)\n    x7 = toindices(x3)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    x10 = fill(I, x3, x9)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = subtract(x11, x12)\n    x14 = shift(x13, x12)\n    x15 = fill(x10, x3, x14)\n    x16 = toindices(x14)\n    x17 = lowermost(x16)\n    x18 = lbind(shift, x17)\n    x19 = mapply(x18, x16)\n    x20 = fill(x15, x2, x19)\n    x21 = objects(x20, T, F, T)\n    x22 = rbind(bordering, I)\n    x23 = compose(flip, x22)\n    x24 = argmin(x21, x23)\n    x25 = rbind(adjacent, x24)\n    x26 =4444(x24, x25)\n    x27 = flip(x26)\n    x28 = rbind(toobject, x10)\n    x29 = decrement(x28)\n    x30 = rbind(colorcount, x2)\n    x31 = matcher(x30, x29)\n    x32 = rbind(sfilter, x31)\n    x33 = lbind(occurrences, x22)\n    x34 = toindices(x24)\n    x35 = chain(x32, x33, x34)\n    x36 =5375574f25ff(x35)\n    x37 = sfilter(x34, x36)\n    x38 = fill(x22, x3, x37)\n    x39 = toindices(x"], [1.1, "def solve_38d3cbf3(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, SEVEN)\n    x3 = lrcorner(x2)\n    x4 = shoot(x3, UP_RIGHT)\n    x5 = shoot(x3, NEG_UNITY)\n    x6 = combine(x4, x5)\n    x7 = rbind(shoot, UP)\n    x8 = mapply(x7, x6)\n    x9 = combine(x3, x8)\n    x10 = rbind(shoot, DOWN)\n    x11 = mapply(x10, x9)\n    x12 = combine(x3, x11)\n    x13 = combine(x8, x12)\n    x14 = intersection(x2, x13)\n    x15 = fill(I, SEVEN, x14)\n    x16 = apply(uppermost, x15)\n    x17 = lowermost(x15)\n    x18 = hline(x17)\n    x19 = hmirror(x14)\n    x20 = vmirror(x17)\n    x21 = combine(x18, x20)\n    x22 = branch(x18, identity, uppermost)\n    x23 = branch(x17, identity, DOWN)\n    x24 = x22(x15)\n    x25 = invert(x24)\n    x26 = lbind(add, x25)\n    x27 = branch(x18, identity, x26)\n    x28 = x25(x12)\n    x29 = invert(x28)\n    x30 = lbind( add, x29)\n    x31 = branch(x15, identity, x30)\n    x32 = uppermost(x15)\n    x33 = tojvec(x32)\n    x34 = shift(x1, x33)\n    x35 = uppermost(x34)\n    x36 = rightmost(x14)\n    x37 = shift(x1, x36)\n    x38 = leftmost(x17)\n    x39 = rightmost(x14)\n    x40 = subtract(x38, x39)\n    x"], [1.1, "def solve_d4da61f6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = trim(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = bottomhalf(x2)\n    x5 = tophalf(x3)\n    x6 = bottomhalf(x3)\n    x7 = index(x1, ORIGIN)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = branch(x4, x9, x8)\n    x11 = branch(x5, x6, x10)\n    x12 = multiply(x11, x10)\n    x13 = add(x12, x11)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = index(x1, x15)\n    x17 = equality(x16, x12)\n    x18 = branch(x17, x6, x10)\n    x19 = branch(x14, x13, x18)\n    x20 = branch(x15, x16, x19)\n    x21 = branch(x58, x22, x20)\n    x22 = branch(x27, x71, x21)\n    x23 = branch(x178, x22, x20)\n    x24 = branch(x37, x7, x23)\n    x25 = multiply(x24, xf)\n    x26 = add(x25, x31)\n    x27 = fork(equality, identity, hmirror)\n    x28 = fork(equality, identity, vmirror)\n    x29 = fork(equality, identity, cmirror)\n    x30 = fork(equality, identity, dmirror)\n    x31 = fork(both, x27, x30)\n    x32 = fork(add, x26, x31)\n    x33 = multiply(x32, x5)\n    x34 = add(x33, x166)\n    x35 = either(x34, x34)\n    x36 = compose(first, x35)\n    x37 = compose(x33, x36)\n    x38 = fork(sfilter, x"], [1.1, "def solve_f30386a2(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, color)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = ofcolor(I, ONE)\n    x10 = repeat(x9, THREE)\n    x11 = remove(ZERO, x1)\n    x12 = remove(x10, x11)\n    x13 = rbind(colorcount, ONE)\n    x14 = argmax(x12, x13)\n    x15 = remove(x14, x12)\n    x16 = lbind(repeat, x15)\n    x17 = chain(x13, x16, frontiers)\n    x18 = fork(combine, first, last)\n    x19 = x17(x5)\n    x20 = lbind(recolor, x19)\n    x21 = compose(x20, dmirror)\n    x22 = fork(combine, x21, x17)\n    x23 = x22(x6)\n    x24 = replace(x23, ONE, THREE)\n    x25 = ofcolor(x24, ONE)\n    x26 = subgrid(x25, x24)\n    x27 = height(x26)\n    x28 = divide(x27, UNITY)\n    x29 = width(x26)\n    x30 = divide(x29, DOWN_LEFT)\n    x31 = height(x26)\n    x32 = divide(x31, UP_RIGHT)\n    x33 = combine(x29, x32)\n    x34 = asobject(x33)\n    x35 = x29(x24)\n    x36 = height(x24)\n    x37 = interval(ZERO, x25, ONE)\n    x38 = pair(x35, x37)\n    x39 = height(x28)\n    x40 = interval(ZERO, x29, ONE)\n    x41 ="], [1.1, "def solve_a7e24c5b(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_e3bf2d3b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = subtract(x38, DOWN)\n    O = shift(x39, UP)"], [1.1, "def solve_2bcda660(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_cfc38f52(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizec883bd(x27)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x33 = rbind(subgrid, I)\n    x34 = chain(x27, x31, x33)\n    x35 = chain(size, x28, x34)\n    x36 = astuple(x15, x38)\n    x37 = astuple(x19, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, first)\n    x41 = chain(x38, x39, x40)\n    x42 = apply(x41, x29)\n    x43 = rbind(shoot, DOWN)\n"], [1.1, "def solve_33fe5af6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = valmax(x2, width)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = colorfilter(x3, x5)\n    x8 = argmax(x7, x6)\n    x9 = mapply(dneighbors, x8)\n    x10 = last(x8)\n    x11 = remove(x10, x8)\n    x12 = body(x5)\n    x13 = combine(x11, x12)\n    x14 = subgrid(x9, I)\n    x15 =69asobject(x14)\n    x16 = height(x15)\n    x17 = width(x15)\n    x18 = increment(x16)\n    x19 = astuple(x17, x18)\n    x20 = crop(x15, ORIGIN, x19)\n    x21 = hupscale(x20, x17)\n    x22 = fill(x21, ZERO, x3)\n    x23 = asobject(x22)\n    x24 = ulcorner(x8)\n    x25 = shift(x23, x24)\n    x26 = objects(x22, T, F, T)\n    x27 = colorfilter(x26, ZERO)\n    x28 = rbind(adjacent, x27)\n    x29 = rbind(adjacent, x25)\n    x30 = fork(both, x28, x29)\n    x31 = sfilter(x21, x30)\n    x32 = rbind( manhattan, xashed)\n    x33 = compose(x32, initset)\n    x34 = fork(add, identity, x33)\n    x35 = compose(initset, x34)\n    x36 = fork(insert, x35, x41)\n    x37 = fork(insert, x36, toindices)\n    x38 = fork(insert, ulcorner, x7)\n    x39 = fork(insert, l"], [1.1, "def solve_5a3ae798(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(connect, ulcorner, lrcorner)\n    x4 = fork(equality, toindices, x3)\n    x5 = sfilter(x2, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, hmirror)\n    x9 = x8(I)\n    x10 = ofcolor(x9, x1)\n    x11 = intersection(x10, x5)\n    x12 = fill(x9,, THREE, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = argmax(x13, lowermost)\n    x15 = argmin(x13, uppermost)\n    x16 = color(x14)\n    x17 = color(x15)\n    x18 = fill(x12, THREE, x14)\n    x19 = fill(x18, THREE, x15)\n    x20 = fill(x19, THREE, x16)\n    O = x8(x20)\n    return O"], [1.1, "def solve_1d916440(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1,0010, dmirror)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, leftmost)\n    x6 = argmax(x4, leftmost)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = leftmost(x5)\n    x10 = leftmost(x6)\n    x11 = subtract(x10, x9)\n    x12 = double(x11)\n    x13 = multiply(THREE, TEN)\n    x14 = interval(x9, x13, x12)\n    x15 = interval(x10, x13, x12)\n    x16 = compose(vfrontier, tojvec)\n    x17 = mapply(x16, x14)\n    x18 = mapply(x16, x15)\n    x19 = recolor(x7, x17)\n    x20 = mapply(x16, x18)\n    x21 = recolor(x8, x20)\n    x22 = combine(x19, x21)\n    x23 = paint(x3, x22)\n    O = x2(x23)\n    return O"], [1.1, "def solve_febf7a4f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(greater, ONE)\n    x15 = compose(x13, x14)\n    x16 = chain(x12, x15, color)\n    x17 = merge(x1)\n    x18 = cover(I, x17)\n    x19 = hmirror(x18)\n    x20 = replace(x19, ZERO, x1)\n    x21 = lbind(hmirror,)*\n    x22 = occurrences(x21, x4)\n    x23 = lbind(shift, x7)\n    x24 = mapply(x23, x22)\n    O = fill(x20, FOUR, x24)\n    return O"], [1.1, "def solve_8ec061db(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(sfilter, x4)\n    x7 = lbind(matcher, partition)\n    x8 = chain(size, x6, x7)\n    x9 = merge(x2)\n    x10 = compose(x8, x9)\n    x11 =branch(x4)\n    x12 = canvas(x11, x10)\n    x13 = hconcat(x12, x1)\n    x14 = objects(x13, x7, x6)\n    x15 = merge(x14)\n    x16 =687(x15, ORIGIN)\n    x17 = cover(I, x1)\n    x18 =1f642eb(x16, x17)\n    O = fill(x18, x5, x18)\n    return O"], [1.1, "def solve_bb7f528e(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 =17(ORIGIN)\n    x3 = hupscale(I, x1)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = vmatching(x5, x6)\n    x8 = branch(x7, cover, x6)\n    O = branch(x7, height, width)\n    return O"], [1.1, "def solve_f3123794(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = ofcolor(I, x5)\n    x7 =contained(x6, x1)\n    x8 = compose(leftmost, x6)\n    x9 = matcher(x8, x7)\n    x10 = sfilter(x6, x9)\n    x11 =84flier(x10)\n    x12 = sfilter(x6, x11)\n    x13 = argmax(x12, size)\n    x14 = argmin(x12, size)\n    x15 = color(x13)\n    x16 = subgrid(x13, I)\n    x17 = branch(x11, x13, x14)\n    x18 = replace(x16, x17, x15)\n    O = replace(x18, x10, x16)\n    return O"], [1.1, "def solve_51245336(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrementExample output:\n    x13, apply(double, x14)\n    x17 = THREE(x12, x13)\n    x18 = apply(increment, x17)\n    x19 = double(x18)\n    x20 = increment(x19)\n    x21 = apply(normalize, x80)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x22)\n    x25 = lbind(shift, x11)\n    x26 = mapply(x25, x24)\n    x27 = canvas(FOUR, x13)\n    O = paint(x27, x26)\n    return O"], [1.1, "def solve_522cd4f1(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = lbind(recolor, THREE)\n    x6 = first(x4)\n    x7 = portrait(x3)\n    x8 = branch(x7, dmirror, identity)\n    x9 = urcorner(x3)\n    x10 = decrement(x9)\n    x11 = branch(x7, leftmost, rightmost)\n    x12 = x11(x10)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, THREE)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = delta(x16)\n    x18 = first(x17)\n    x19 = ulcorner(x8)\n    x20 = increment(x19)\n    x21 = rbind(subtract, x20)\n    x22 = chain(even, x21, last)\n    x23 = sfilter(x18, x22)\n    x24 = handedcomponent(x23)\n    x25 = increment(x24)\n    x26 = prapply(connect, x23, x25)\n    x27 = sfilter(x16, x26)\n    x28 = center(x27)\n    x29 = x25(x28)\n    x30 =885(x29)\n    x31 = double(x30)\n    x32 = decrement(x31)\n    x33 = apply(rightmost, x32)\n    x34 = mapply(toindices, x33)\n    x35 = shift(x34, x12)\n    x36 = paint(I, x35)\n    O = x11(x36)\n    return O"], [1.1, "def solve_325398a7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = center(x1)\n    x3 = color(x2)\n    x4 = ulcorner(x2)\n    x5 =885e67(x4)\n    x6 = shift(x5, x4)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = paint(x8, x6)\n    O = rot270(x9)\n    return O"], [1.1, "def solve_195a80d7(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, palette)\n    x5 = fork(recolor, x4, identity)\n    x6 = lbind(multiply, difference)\n    x7 = compose(x6, shape)\n    x8 = lbind(recolor, THREE)\n    x9 = rbind(ofcolor, THREE)\n    x10 = chain(x8, x9, normalize)\n    x11 = fork(mapply, x5, x10)\n    x12 =221(x1)\n    x13 = mapply(x11, x12)\n    O = paint(I, x13)\n    return O"], [1.1, "def solve_dcd508e3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = hline(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = ofcolor(x4, EIGHT)\n    x6 =1111(x5, x4)\n    x7 = x3(x6)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 =555(x8, FIVE)\n    x11 =555(x9, FIVE)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = shift(x7, x12)\n    x15 = shift(x7, x13)\n    x16 = combine(x14, x15)\n    x17 = numcolors(x16)\n    x18 = equality(x17, ONE)\n    x19 = branch(x18, identity, neighbors)\n    x20 = apply(x19, x18)\n    x21 = x20(x2)\n    x22 = intersection(x2, x21)\n    O = fill(x4, THREE, x22)\n    return O"], [1.1, "def solve_5f886202(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =5188700301(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(first, x12)\n    x14 = compose(first, x7)\n    x15 = fork(equality, x13, x14)\n    x16 = sfilter(x4, x15)\n    O = replace(x6, TWO, ZERO)\n    return O"], [1.1, "def solve_0cf6b986(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = argmin(x1, size)\n    x6 =71(x4)\n    x7 =2172(x6)\n    x8 = upscale(x5, x7)\n    x9 = crop(x4, DOWN, x8)\n    O = replace(x9, ZERO, x1)\n    return O"], [1.1, "def solve_66861a62(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(toobject, x13)\n    x22 = chain(x20, x21, initset)\n    x23 =17(x12)\n    x24 =172(x11)\n    x25 =    x23(x24)\n    x26 = fork(both, x19, x25)\n    x27 = fork( both, x30, x26)\n    x28 = mapply(x27, x9)\n    O = fill(x13, FOUR, x28)\n    return O"], [1.1, "def solve_b9389b41(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =38925372275bordering(x1)\n    x3 = leastcolor(x2)\n    x4 = ofcolor(I, x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(subgrid, x7)\n    x9 = chain(palette, trim, x8)\n    x10 = matcher(x9, x4)\n    x11 = extract(x1, x10)\n    x12 = other(x1, x11)\n    x13 = x6(x12)\n    x14 = objects(x13, T, F, T)\n    x15 = color(x12)\n    x16 = leftmost(x12)\n    x17 = leftmost(x12)\n    x18 = subgrid(x12, x9)\n    x19 = tojvec(x18)\n    x20 = shift(x19, x14)\n    x21 = mapply(vfrontier, x20)\n    x22 = mapply(hfrontier, x20)\n    x23 = fill(x26, x3, x21)\n    x24 = fill(x23, x3, x22)\n    x25 = fill(x24, x3, x23)\n    O = x6(x25)\n    return O"], [1.1, "def solve_ccaecb97(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = cover(I, x2)\n    x4 = astuple(delta, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = compose(first, toindices)\n    x8 = chain(size, x7, dmirror)\n    x9 = rbind(greater, TWO)\n    x10 = compose(x9, x8)\n    x11 = sfilter(x6, x10)\n    x12 = chain(invert, ulcorner, x8)\n    x13 = chain(difference, x12, x8)\n    x14 = fork(shift, identity, x4)\n    x15 = fork(shift, identity, x5)\n    x16 = compose(x14, x15)\n    x17 =423(x17)\n    x18 = fork(combine, x12, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = compose(x19, vmirror)\n    x21 = argmax(x11, x20)\n    x22 = x21(x22)\n    x23 = x21(x22)\n    x24 = paint(x3, x23)\n    x25 = flip(x24)\n    x26 = branch(x25, x22, x25)\n    x27 = logically(x26)\n    O = identity(x27)\n    return O"], [1.1, "def solve_b3287046(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ONE)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, dmirror, identity)\n    x7 = x6(x1)\n    x8 = first(x7)\n    x9 = divide(x8, THREE)\n    x10 = dmirror(x9)\n    x11 = last(x9)\n    x12 = repeat(x11, ONE)\n    x13 = multiply(x5, THREE)\n    x14 = add(x13, x13)\n    x15 =repeat(x12, x14)\n    x16 = ofcolor(x15, TWO)\n    x17 = subgrid(x16, x15)\n    x18 = identity(x17)\n    x19 = cellwise(x18, x17, x16)\n    x20 = dmirror(x19)\n    x21 = replace(x20, TWO, ZERO)\n    x22 = crop(x21, x ORIGIN, THREE_BY_THREE)\n    x23 = branch(x5, dmirror, identity)\n    x24 = downscale(x23, x12)\n    x25 = ofcolor(x25, TWO)\n    x26 = subgrid(x25, x25)\n    x27 = interval(ZERO, x25, ONE)\n    x28 = interval(ZERO, x25, THREE)\n    x29 = product(x27, x28)\n    x30 = lbind(shift, x16)\n    x31 = apply(x30, x29)\n    x32 = mapply(x31, x3)\n    O = fill(x25, TWO, x32)\n    return O"], [1.1, "def solve_b8653f67(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = astuple(TWO, ONE)\n    x3 = rbind(THREE, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = TWO(x1)\n    x7 =275(x6)\n    x8 = mapply(toobject, x7)\n    x9 = difference(x1, x8)\n    x10 = fill(I, THREE, x9)\n    x11 = objects(x10, T, F, F)\n    x12 = rbind(colorcount, TWO)\n    x13 = compose(normalize, x12)\n    x14 = chain(normalize, first, x13)\n    x15 = merge(x11)\n    x16 = mapply(x14, x15)\n    O = paint(x10, x16)\n    return O"], [1.1, "def solve_91343973(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(ZERO, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = whole securely(I)\n    x11 = mapply(x9, x9)\n    x12 = argmin(x8, leftmost)\n    x13 = other(x8, x12)\n    x14 = color(x13)\n    x15 = colorfilter(x1, x14)\n    x16 = apply(uppermost, x15)\n    x17 = size(x16)\n    x18 = equality(ONE, x17)\n    x19 = apply(uppermost, x15)\n    x20 = size(x19)\n    x21 = equality(ONE, x20)\n    x22 =393(x17)\n    x23 = branch(x18, x22, x21)\n    x24 = colorfilter(x15, x48)\n    x25 = argmin(x24, size)\n    x26 = apply(uppermost, x25)\n    x27 = fork(subtract, first, last)\n    x28 = x27(x26)\n    x29 = fill(I, x8, x28)\n    x30 = shift(x13, x29)\n    x31 = ulcorner(x27)\n    x32 = urcorner(x27)\n    x33 = shoot(x31, x32)\n    x34 = shoot(x31, x33)\n    x35 = underfill(x29, x39, x34)\n    O = underfill(x35, x33, x33)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_9107d1aa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.29814814814814816, "def solve_7236b113(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_fc032a83(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_5fc44d70(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.32027505446623095, "def solve_17e348f8(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.32027505446623095, "def solve_97d4e278(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_10be7834(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.3215686274509804, "def solve_21209886(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_63b410d8(I):\n    x1 = objects(I, F, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_8c0aef34(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(toindices, normalize)\n    x7 = rbind(upscale, TWO)\n    x8 = chain(toindices, x7, normalize)\n    x9 = x6(x4)\n    x10 = rbind(intersection, x9)\n    x11 = chain(size, x10, x8)\n    x12 = argmax(x5, x11)\n    x13 = subgrid(x12, x1)\n    O = vmirror(x13)\n    return O"], [0.3215686274509804, "def solve_caed71e2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_69885118(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_fc1f7877(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, F)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [0.3215686274509804, "def solve_4447fea3(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3215686274509804, "def solve_5173da0a(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_fd8e816c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_ee0dd26e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.32745098039215687, "def solve_16ea99fc(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = crop(I, ORIGIN, THREE_BY_THREE)\n    O = rot90(x3)\n    return O"], [0.3296296296296296, "def solve_224584b7(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_305d1770(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_c8637e32(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_c863bff5(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_77590996(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3380952380952381, "def solve_fd24ff4d(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.3666824618736384, "def solve_64ab9042(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.36693121693121694, "def solve_ce0415b7(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(size, x1)\n    x3 = maximum(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = apply(toivec, x4)\n    x6 = astuple(ONE, x3)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.36851851851851847, "def solve_daf2ed84(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_c7ef427a(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O"], [0.36851851851851847, "def solve_d77b5626(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_ff89034d(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, TWO)\n    x5 = branch(x3, TWO, ONE)\n    x6 = branch(x4, THREE, x5)\n    x7 = branch(x4,SEVEN, x6)\n    O = canvas(x7, UNITY)\n    return O"], [0.37559912854030497, "def solve_42f8d4db(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.37559912854030497, "def solve_72c85cbd(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.3931917211328976, "def solve_67d4789a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_c1dc60a6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3985185185185185, "def solve_140e84b7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = shape(I)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = hconcat(x5, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = rbind(other, x3)\n    x11 = compose(x10, palette)\n    x12 = fork(astuple, x11, ulcorner)\n    x13 = apply(x12, x9)\n    x14 = merge(x9)\n    x15 = fill(I, x3, x14)\n    x16 = paint(x15, x13)\n    O = compress(x16)\n    return O"], [0.40763616557734206, "def solve_3c21405b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41333791996330693, "def solve_57674579(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_f0aec60b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_8aa9a27b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.4148148148148148, "def solve_5f0ab928(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_5a115244(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_ada82ca8(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_0b3d78f4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.42140873015873015, "def solve_5c65482b(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.42592592592592593, "def solve_39eea052(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_663b98f7(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_e608eed8(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_522810b4(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_2a82e3bc(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_32a87f9b(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_73131e58(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_8aa7e99c(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(ONE, x11)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(TWO, x15)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.4296296296296296, "def solve_72b9b800(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4296296296296296, "def solve_9e4c96c4(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.4296296296296296, "def solve_dea00daa(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, F)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.4296296296296296, "def solve_a0c6b54d(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4715975529100529, "def solve_6162c3aa(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_13ec5d0b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_7b9ecf46(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5013227513227514, "def solve_696f22c8(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_f9b6c2bc(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_8f3d992f(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5495485154576063, "def solve_5dfeec3a(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.5722260195944406, "def solve_9d9fa0df(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_309a0158(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1,size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_7043ffee(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_e9da49f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_335bf902(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_9a3451c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5982804232804233, "def solve_c45dcddc(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5982804232804233, "def solve_fe90caa5(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5982804232804233, "def solve_97f35050(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.6049652777777778, "def solve_c1fd5834(I):\n    x1 = vsplit(I, TWO)\n    x2 = rbind(hsplit, TWO)\n    x3 = mapply(x2, x1)\n    O = argmax(x3, numcolors)\n    return O"], [0.6163211951447245, "def solve_afa2f6b5(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6199160165858457, "def solve_982e0348(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.631901366607249, "def solve_1dae19e5(I):\n    x1 = hsplit(I, THREE)\n    x2 = fork(equality, identity, vmirror)\n    x3 = compose(flip, x2)\n    O = extract(x1, x3)\n    return O"], [0.6660566448801744, "def solve_8fef9975(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, height)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(canvas, x3)\n    x5 = apply(x4, x2)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.709172269403161, "def solve_586f6716(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7117372649464244, "def solve_7424bfa8(I):\n    x1 = compress(I)\n    O = vmirror(x1)\n    return O"], [0.7241016188672439, "def solve_84e9efd4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_b4636fc6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_2d0c17cb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_b2611290(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_3c0a0b40(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_17a3fe1a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_0d4eab39(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_10e14d3b(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7275112822906941, "def solve_9dd44b29(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7338151265460182, "def solve_b0d23fbb(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7338151265460182, "def solve_d832ae07(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, EIGHT, x4)\n    return O"], [0.7389341741650659, "def solve_542eae00(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.7389341741650659, "def solve_62bd83ca(I):\n    x1 = trim(I)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O"], [0.7421484598793515, "def solve_0ca5a606(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7424669312169312, "def solve_8c38e7cc(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.7424669312169312, "def solve_a4e67af3(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.7433389360698277, "def solve_c1f1b7d4(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, ONE, x3)\n    return O"], [0.7433389360698277, "def solve_9c429233(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, ONE, x6)\n    return O"], [0.7436960789269706, "def solve_d90311e2(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.7436960789269706, "def solve_222e62ce(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FIVE, x6)\n    return O"], [0.7436960789269706, "def solve_d133a231(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7436960789269706, "def solve_354dce5c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_58c00796(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7436960789269706, "def solve_1eac3955(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7436960789269706, "def solve_54e937cb(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7436960789269706, "def solve_74dcc5e2(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7436960789269706, "def solve_1247a02b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = colorfilter(x1, x3)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = mfilter(x4, x6)\n    O = fill(I, FOUR, x7)\n    return O"], [0.7436960789269706, "def solve_2ac2c622(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.7436960789269706, "def solve_a6e01311(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(backdrop, x1)\n    x3 = mapply(delta, x2)\n    O = fill(I, FOUR, x3)\n    return O"], [0.7436960789269706, "def solve_41dd6fe1(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_2e1555c1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = argmin(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = color(x4)\n    x8 = color(x6)\n    x9 = toindices(x4)\n    x10 = inbox(x6)\n    x11 = intersection(x9, x10)\n    x12 = fork(combine, hfrontier, vfrontier)\n    x13 = mapply(x12, x11)\n    x14 = corners(x6)\n    x15 = inbox(x6)\n    x16 = corners(x15)\n    x17 = combine(x14, x16)\n    x18 = mapply(x12, x17)\n    x19 = difference(x13, x18)\n    x20 = toindices(x3)\n    x21 = intersection(x19, x20)\n    x22 = fill(I, x7, x21)\n    x23 = difference(x19, x21)\n    x24 = fill(x22, x8, x23)\n    x25 = inbox(x6)\n    O = fill(x24, x8, x25)\n    return O"], [0.7436960789269706, "def solve_6f7c8de5(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.7436960789269706, "def solve_5f5063f3(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    O = fill(I, ZERO, x3)\n    return O"], [0.7440145502645503, "def solve_d56c56d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = frontiers(I)\n    x6 = colorfilter(x5, x4)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = ofcolor(I, x4)\n    x11 = ofcolor(I, TWO)\n    x12 = ofcolor(I, ONE)\n    x13 = rbind(gravitate, x10)\n    x14 = compose(x13, initset)\n    x15 = fork(add, identity, x14)\n    x16 = fork(connect, identity, x15)\n    x17 = shape(I)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(gravitate, x10)\n    x21 = chain(x19, sign, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x16, x11)\n    x26 = mapply(x24, x12)\n    x27 = fill(I, TWO, x25)\n    O = fill(x27, ONE, x26)\n    return O"], [0.7482270044770045, "def solve_e7ca3802(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_51a1551a(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_b80f78f1(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_e1b10ac5(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_7a7abe81(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_a590a582(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7508389360698278, "def solve_52c1382e(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    O = replace(x7, TWO, SEVEN)\n    return O"], [0.7615532217841134, "def solve_a611efa1(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7722675074983991, "def solve_03193446(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7722675074983991, "def solve_a7ad98a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7725859788359788, "def solve_2b702d66(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7758389360698277, "def solve_54dfebfc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8732328974604937, "def solve_eff3e8a5(I):\n    x1 = compose(dmirror, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = fork(remove, last, identity)\n    x5 = compose(hmirror, x4)\n    x6 = fork(vconcat, identity, x5)\n    x7 = x6(x3)\n    x8 = dmirror(x7)\n    O = x6(x8)\n    return O"], [1.0, "def solve_a2626116(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = mostcolor(I)\n    x6 =colorcount(I, x4)\n    x7 = astuple(x6, x6)\n    x8 = canvas(x5, x7)\n    x9 = fill(x8, ONE, x2)\n    x10 = hsplit(x9, THREE)\n    O = first(x10)\n    return O"], [1.0, "def solve_c097c082(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(apply, DOWN)\n    x3 = compose(x2, frontiers)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_35ea34b8(I):\n    x1 = objects(I, T, F, T)\n    x2 =ulcorner(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(x3)\n    O = replace(x3, x4, ZERO)\n    return O"], [1.0, "def solve_8b440bd9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = hsplit(I, TWO)\n    x6 = apply(numcolors, x5)\n    x7 = contained(ONE, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = partition(x9)\n    x11 = matcher(color, x4)\n    x12 = compose(flip, x11)\n    x13 = extract(x10, x12)\n    x14 = x13(x9)\n    x15 = last(x14)\n    x16 = last(x14)\n    x17 = palette(x16)\n    x18 = repeat(x4, x17)\n    x19 = remove(x4, x18)\n    x20 = last(x19)\n    x21 = merge(x16)\n    x22 = cover(x9, x21)\n    x23 = matcher(first, x20)\n    x24 = compose(flip, x23)\n    x25 = extract(x19, x24)\n    x26 = fork(combine, identity, dmirror)\n    x27 = x26(x25)\n    x28 = ofcolor(x27, x5)\n    x29 = subgrid(x28, x77)\n    x30 = trim(x29)\n    O = last(x30)\n    return O"], [1.0, "def solve_7b642e3a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = last(x6)\n    x8 = invert(x7)\n    x9 = add(x8, UNITY)\n    x10 = asindices(I)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_6e14f89e(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 =apply(normalize, x4)\n    x6 = merge(x5)\n    x7 = double(TEN)\n    x8 = interval(ZERO, x7, EIGHT)\n    x9 = fill(I, ONE, x8)\n    x10 = shift(x3, UNITY)\n    x11 = paint(x9, x10)\n    x12 = height(x3)\n    x13 =float(x12, x4)\n    x14 = lbind(shift, x3)\n    x15 = mapply(x14, x14)\n    x16 = height(x3)\n    x17 = divide(x16, x13)\n    x18 = increment(x17)\n    x19 = width(x3)\n    x20 = astuple(x18, x19)\n    x21 = crop(x15, ORIGIN, x20)\n    x22 = crop(x15, RIGHT, x20)\n    x23 = decrement(x12)\n    x24 = tojvec(x23)\n    x25 = index(x22, x24)\n    x26 = equality(x25, x18)\n    x27 = branch(x26, x22, x24)\n    O = branch(x27, x26, x25)\n    return O"], [1.0, "def solve_7ebe6d0b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_4b55d24d(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = partition(I)\n    x6 = objects(I, T, F, T)\n    x7 = fork(multiply, height, width)\n    x8 = apply(x7, x6)\n    x9 = matcher(identity, x4)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = matcher(x11, ONE)\n    x13 = rbind(sfilter, x12)\n    x14 = lbind(recolor, x4)\n    x15 = compose(x14, size)\n    x16 = fork(combine, x12, x15)\n    x17 = fork(equality, x13, x16)\n    x18 = rbind(argmin, x17)\n    x19 = compose(x18, normalize)\n    x20 = apply(x19, x8)\n    x21 = matcher(x17, x4)\n    x22 = compose(x21, x19)\n    x23 = fork(both, x17, x22)\n    x24 = extract(x20, x23)\n    x25 = color(x24)\n    x26 = ofcolor(I, x25)\n    x27 = last(x26)\n    x28 = insert(x27, x26)\n    O = fill(I, x25, x28)\n    return O"], [1.0, "def solve_c99c4826(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_d0f2bbac(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = toindices(x5)\n    x8 = outbox(x4)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x9, x11, x10)\n    x13 = compose(x12, initset)\n    x14 = apply(x13, x7)\n    x15 = cover(I, x5)\n    O = fill(x15, x6, x14)\n    return O"], [1.0, "def solve_86c38f1f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, x12)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_cf0e9807(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_e66ca63d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_b3446dc5(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(upscale, x1)\n    O = fill(I, ONE, x2)\n    return O"], [1.0, "def solve_a81fd162(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x2)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [1.0, "def solve_347cea93(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = color(x3)\n    x7 = palette(x3)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = palette(I)\n    x13 = other(x12, x11)\n    x14 = hmatching(x11, x10)\n    x15 = hmirror(x14)\n    x16 = vmirror(x14)\n    x17 = ofcolor(I, x10)\n    x18 = ofcolor(I, x11)\n    x19 = combine(x17, x18)\n    O = fill(I, x6, x19)\n    return O"], [1.0, "def solve_2bd67e38(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_87030a5b(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x31)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_5de53720(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = mostcolor(I)\n    x6 = backdrop(x3)\n    x7 = toobject(x6, I)\n    x8 = matcher(first, x7)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x1, x9)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = compose(toindices, normalize)\n    x14 = matcher(x13, x12)\n    x15 = mfilter(x1, x14)\n    x16 = color(x11)\n    x17 = fill(I, x16, x15)\n    O = fill(x17, x10, x15)\n    return O"], [1.0, "def solve_c744caa0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, FOUR)\n    x4 = branch(x3, height, width)\n    x5 = x4(I)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = ofcolor(x8, TWO)\n    x10 = fill(x9, ZERO, x9)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = difference(x1, x12)\n    x14 = rbind(subgrid, x8)\n    x15 = apply(x14, x13)\n    x16 = rbind(colorcount, TWO)\n    x17 = palette(x12)\n    x18 = argmax(x17, x16)\n    x19 = subgrid(x18, x12)\n    x20 = ofcolor(x19, TWO)\n    x21 = first(x20)\n    x22 = asindices(x21)\n    x23 = ofcolor(x21, x12)\n    x24 = increment(x26)\n    x25 = rbind(intersection, x24)\n    x26 = chain(size, x25, toindices)\n    x27 = argmax(x23, x26)\n    x28 = ulcorner(x27)\n    x29 = dmirror(x28)\n    x30 = shift(x29, x28)\n    O = fill(x11, EIGHT, x30)\n    return O"], [1.0, "def solve_f62ee8e0(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = paint(x6, x3)\n    O = rot180(x7)\n    return O"], [1.0, "def solve_d3f8243d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = difference(x1, x3)\n    x5 = delta(x3)\n    x6 = position(x5, x4)\n    x7 = fork(multiply, identity, identity)\n    x8 = apply(x7, x6)\n    x9 = leastcommon(x8)\n    x10 = matcher(first, x9)\n    x11 = extract(x8, x10)\n    x12 = center(x11)\n    x13 = x12(x2)\n    x14 = normalize(x11)\n    x15 = shift(x14, x12)\n    x16 = ulcorner(x11)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = rbind(toobject, x17)\n    x20 = chain(first, x19, delta)\n    x21 = matcher(x20, x17)\n    x22 = extract(x18, x21)\n    x23 = center(x22)\n    x24 = x23(x2)\n    x25 = normalize(x22)\n    x26 = shift(x25, x23)\n    x27 = ulcorner(x6)\n    x28 = lbind(shift, x67)\n    x29 = rbind(multiply, hmirror)\n    x30 = chain(x28, x29, last)\n    x31 = mapply(x30, x26)\n    x32 = paint(x17, x31)\n    x33 = x30(x32)\n    O = replace(x33, x29, EIGHT)\n    return O"], [1.0, "def solve_b58bb959(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = fork(flip, x2, x3)\n    x4 = extract(x1, x3)\n    x5 = subgrid(x4, I)\n    x6 = backdrop(x5)\n    x7 = cover(I, x6)\n    x8 = fgpartition(x7)\n    x9 = merge(x8)\n    x10 = difference(x7, x9)\n    x11 = merge(x10)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x7, x15)\n    x17 = toindices(x15)\n    x18 = shift(x17, ulcorner)\n    x19 = ulcorner(x15)\n    x20 = shift(x19, urcorner)\n    x21 = combine(x18, x20)\n    x22 = intersection(x8, x21)\n    O = fill(x16, ONE, x22)\n    return O"], [1.0, "def solve_6e19f4d1(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_f504e47f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x31 = shift(x20, x36)\n    x32 = combine(x30, x31)\n    x33 = paint(x27, x32)\n    O = x12(x22)\n    return O"], [1.0, "def solve_f146e6f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(leastcolor, ZERO, x3)\n    x5 = tojvec(x2)\n    x6 = tojvec(x5)\n    x7 = fill(I, ONE, x6)\n    x8 = fill(x7, ZERO, x1)\n    x9 = fill(x8, TWO, x4)\n    x10 =gapply(box, x4)\n    x11 = mapply(corners, x10)\n    O = fill(x9, FOUR, x11)\n    return O"], [1.0, "def solve_c396c3e9(I):\n    x1 = objects(I, T, F, F)\n    x2 = astuple(FIVE, FIVE)\n    x3 = crop(I, ORIGIN, x2)\n    x4 =colorfilter(x1, ONE)\n    x5 = rbind(subgrid, I)\n    x6 = lbind(contained, I)\n    x7 = compose(x6, palette)\n    x8 = chain(flip, x7, ulcorner)\n    x9 = mfilter(x4, x8)\n    x10 = vsplit(x3, THREE)\n    x11 = sfilter(x10, x9)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = height(x12)\n    x15 = interval(ZERO, x14, x13)\n    x16 = apply(tojvec, x15)\n    x17 = lbind(shift, x12)\n    x18 = mapply(x17, x16)\n    x19 = fill(I, ONE, x18)\n    O = replace(x19, FIVE, ONE)\n    return O"], [1.0, "def solve_d52d5b5f(I):\n    x1 = compose(backdrop, inbox)\n    x2 = equality(x1, TWO)\n    x3 = matcher(size, TWO)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, ONE, x9)\n    return O"], [1.0, "def solve_7a29b0af(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6,other, palette)\n    x10 = branch(x6, shape, x9)\n    x11 =x7(I)\n    x12 = x8(I)\n    x13 = index(x11, ORIGIN)\n    x14 = shape(x12)\n    x15 = canvas(x13, x14)\n    x16 = normalize(x12)\n    x17 = paint(x15, x16)\n    x18 = bottomhalf(x16)\n    x19 = shape(x12)\n    x20 = invert(x19)\n    x21 = index(x18, x20)\n    x22 = astuple(ORIGIN, DOWN)\n    x23 = initset(x22)\n    x24 = fill(x17, x39, x23)\n    x25 = repeat(x24, ONE)\n    x26 = merge(x25)\n    O = paint(x21, x26)\n    return O"], [1.0, "def solve_dfd73203(I):\n    x1 = lbind(contained, I)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_6acb3301(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_9ae2d614(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, x12)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, x16)\n    x23 = difference(x21, x22)\n    x24 = fill(x20, NEG_ONE, x23)\n    x25 = multiply(x17, THREE)\n    x26 = shift(x21, x25)\n    x27 = fill(x24, NEG_ONE, x26)\n    x28 = objects(x27, T, F, T)\n    x29 = shift(x28, toindices)\n    x30 = lbind(shift, x29)\n    x31 = objects(x27, T, F, T)\n    x32 = mapply(x30, x31)\n    x33 = fill(x27, SIX, x32)\n    x34 = paint(x33, x25)\n    O = x19(x34)\n    return O"], [1.0, "def solve_194321d4(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_5b2e08c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(x6)\n    x8 = remove(x4, x7)\n    x9 = lbind(chain, size)\n    x10 = lbind(x9, dneighbors)\n    x11 = lbind(lbind, intersection)\n    x12 = lbind(ofcolor, x6)\n    x13 = chain(x10, x11, x12)\n    x14 = rbind(sfilter, x13)\n    x15 = lbind(lbind, occurrences)\n    x16 = chain(x15, toindices, x5)\n    x17 = lbind(lbind, contained)\n    x18 = compose(x16, x17)\n    x19 = fork(compose, x18, identity)\n    x20 = lbind(occurrences, x6)\n    x21 = compose(x20, x19)\n    x22 = fork(mapply, x19, x21)\n    x23 = pair(x16, x8)\n    x24 = mapply(x22, x23)\n    O = fill(x6, x4, x24)\n    return O"], [1.0, "def solve_4847f46a(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_e1f4a2b8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = pair(x7, x10)\n    x12 = initset(x7)\n    x13 = add(x62, x12)\n    x14 = insert(x13, x11)\n    x15 = last(x14)\n    x16 = ulcorner(x15)\n    x17 = add(x16, x20)\n    x18 = insert(x17, x11)\n    x19 = ulcorner(x18)\n    x20 = add(x19, x20)\n    x21 = shape(I)\n    x22 = add(x21, TWO)\n    x23 = canvas(ZERO, x22)\n    x24 = asobject(I)\n    x25 = shift(x24, UNITY)\n    x26 = paint(x23, x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = paint(x26, x27)\n    x29 = matcher(first, ZERO)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(shift, x14)\n    x32 = apply(x31, x30)\n    x33 = rbind(occurrences, x74)\n    x34 = mapply(x33, x32)\n    O = fill(x26, EIGHT, x34)\n    return O"], [1.0, "def solve_9469d0a7(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_2404836a(I):\n    x1 = lbind(remove, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = chain(x1, x2, frontiers)\n    x4 = fork(both, x3, leastcolor)\n    x5 = fork(combine, hfrontier, vfrontier)\n    x6 = compose(x5, toindices)\n    x7 = rbind(mapply, x4)\n    x8 = compose(x7, corners)\n    x9 = fork(difference, x8, toindices)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = sfilter(x6, x11)\n    x13 = merge(x12)\n    x14 = color(x13)\n    x15 = shape(I)\n    x16 = canvas(x14, x15)\n    x17 = hconcat(I, x16)\n    x18 = objects(x17, F, T, T)\n    x19 = argmax(x18, numcolors)\n    x20 = mostcolor(x19)\n    x21 = palette(x19)\n    x22 = remove(x20, x21)\n    x23 = other(x22, x18)\n    x24 = ofcolor(x19, x20)\n    x25 = ofcolor(x19, x23)\n    x26 = prapply(connect, x24, x25)\n    x27 = mfilter(x26, vline)\n    x28 = mfilter(x26, hline)\n    x29 = size(x27)\n    x30 = size(x28)\n    x31 = intersection(x29, x30)\n    x32 = fill(x16, x23, x31)\n    O = fill(x32, x20, x27)\n    return O"], [1.0, "def solve_0f901ca1(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(colorcount, ZERO)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(vsplit, TWO)\n    x6 = lbind(apply, x5)\n    x7 = compose(x6, x4)\n    x8 = chain(x7, minimum, x5)\n    x9 = fork(gravitate, x7, x8)\n    x10 = fork(shift, identity, x9)\n    x11 = mapply(x10, x1)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_9963b3e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, ZERO, x16)\n    return O"], [1.0, "def solve_094dcfff(I):\n    x1 = frontiers(I)\n    x2 = lbind(contained, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, TWO)\n    x6 = apply(x5, x4)\n    x7 = asobject(x6)\n    x8 = apply(initset, x7)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_7e622901(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, color, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = fork(sfilter, toindices, x10)\n    x12 = compose(flip, x11)\n    x13 = lbind(argmin, x5)\n    x14 = compose(x13, x12)\n    x15 = fork(subtract, x14, x12)\n    x16 = fork(shift, x12, x15)\n    x17 = mapply(x16, x3)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_25f8d399(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_e889b9bd(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = frontiers(I)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = greater(x9, TWO)\n    x11 = branch(x10, lowermost, uppermost)\n    x12 = x11(x2)\n    x13 = x5(x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x14, x15)\n    x17 = other(x16, x14)\n    x18 = rbind(colorcount, x14)\n    x19 = argmin(x17, x18)\n    x20 = rbind(colorcount, x14)\n    x21 = apply(x20, x12)\n    x22 = argmin(x21, x18)\n    x23 = rightmost(x03)\n    x24 = leftmost(x3)\n    x25 = subtract(x22, x24)\n    x26 = x25(x24)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = interval(x27, x28, ONE)\n    x30 = shift(x29, x7)\n    x31 = invert(x25)\n    x32 = interval(x31, x25, ONE)\n    x33 = astuple(x31, x32)\n    x34 = lbind(shift, x3)\n    x35 = mapply(x34, x33)\n    x36 = fill(I, x14, x35)\n    x37 = shift(x17, x27)\n    x38 = paint(x36, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_0aec2d96(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_d2dd2e7e(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = lbind(sfilter, x6)\n    x9 = lbind(matcher, identity)\n    x10 = chain(size, x8, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind( sfilter, x6)\n    x13 = lbind(compose, x11)\n    x14 = lbind(rbind, greater)\n    x15 = chain(x13, x14, x11)\n    x16 = apply(x15, x6)\n    x17 = sfilter(x16, x4)\n    x18 = fork(ad, first, last)\n    x19 = chain(x18, x17, x12)\n    x20 = fork(combine, x19, x15)\n    x21 = fork(recolor, color, x20)\n    x22 = mapply(x21, x3)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_755a2a4e(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(double, merge, x8)\n    x10 = branch(x5, x9, dmirror)\n    x11 = x10(I)\n    x12 = ofcolor(x11, EIGHT)\n    x13 = ofcolor(x11, TWO)\n    x14 = center(x12)\n    x15 = hfrontier(x14)\n    x16 = insert(x13, x15)\n    x17 = width(x11)\n    x18 = halve(x17)\n    x19 = increment(x18)\n    x20 = width(x11)\n    x21 = halve(x20)\n    x22 = increment(x21)\n    x23 = interval(x18, x22, ONE)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x23)\n    x26 = index(x11, ORIGIN)\n    x27 = lbind(shift, x12)\n    x28 = apply(x27, x26)\n    x29 = pair(x25, x28)\n    x30 = mapply(x27, x29)\n    O = x6(x30)\n    return O"], [1.0, "def solve_d6b69224(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = index(x3, DOWN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(x3, UP_RIGHT)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = shape(x8)\n    x10 = canvas(x4, x9)\n    x11 = hconcat(x10, x3)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = increment(x17)\n    x19 = rbind(multiply, x18)\n    x20 = apply(x19, x17)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x3, x22)\n    return O"], [1.0, "def solve_696330ea(I):\n    x1 = fgpartition(I)\n    x2 = rbind(valmax, width)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(x2, x3)\n    x5 = toindices(x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, FOUR, x5)\n    x8 = fill(x7, NEG_ONE, x6)\n    x9 = papply(equality, x8, x5)\n    x10 = lbind(shift, x9)\n    x11 = mapply(x10, x8)\n    O = fill(x11, NEG_ONE, x7)\n    return O"], [1.0, "def solve_664a0bd9(I):\n    x1 = partition(I)\n    x2 = fork(combine, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [1.0, "def solve_4ae553cd(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = first(x2)\n    x4 = rbind(subgrid, I)\n    x5 = apply(x4, x3)\n    x6 = astuple(FIVE, FIVE)\n    x7 = canvas(ZERO, x6)\n    x8 = asobject(x7)\n    x9 = shift(x8, UNITY)\n    O = paint(x7, x9)\n    return O"], [1.0, "def solve_1c7e8dd5(I):\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_6e1bc1d0(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, paint, x9)\n    x11 = merge(x8)\n    x12 = fill(x10, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x8)\n    x16 = fill(x14, THREE, x15)\n    x17 = merge(x8)\n    x18 = fill(x16, EIGHT, x17)\n    O = fill(x18, TWO, x10)\n    return O"], [1.0, "def solve_545616e6(I):\n    x1 = frontiers(I)\n    x2 = difference(x1, x2)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_e1713565(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = normalize(x3)\n    x7 = lbind(shift, x6)\n    x8 = height(x6)\n    x9 = width(x6)\n    x10 = divide(x8, x9)\n    x11 = increment(x10)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = mapply(x7, x12)\n    x14 = astuple(x6, x7)\n    x15 = repeat(x14, ONE)\n    x16 = mapply(x8, x15)\n    x17 = combine(x13, x16)\n    O = paint(x5, x17)\n    return O"], [1.0, "def solve_acd61ba2(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(multiply, height, width)\n    x6 = lbind(occurrences, I)\n    x7 = compose(x6, x5)\n    x8 = mapply(x7, x4)\n    O = fill(I, TWO, x8)\n    return O"], [1.1, "def solve_f16869fa(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_fbce8a9f(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_a1cca797(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x7)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = normalize(x4)\n    x24 = paint(x22, x23)\n    x25 = normalize(x7)\n    x26 = width(x7)\n    x27 = subtract(x19, x26)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = normalize(x10)\n    x32 = height(x10)\n    x33 = subtract(x16, x32)\n    x34 = toivec(x33)\n    x35 = shift(x31, x34)\n    x36 = paint(x30, x35)\n    x37 = normalize(x13)\n    x38 = shape(x13)\n    x39 = subtract(x20, x38)\n    x40 = shift(x37, x39)\n    O = paint(x36, x40"], [1.1, "def solve_184f2b89(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher( first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_b789c2b8(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, shape)\n    x4 = fork(equality, height, width)\n    x5 = lbind(apply, x4)\n    x6 = chain(flip, x5, x3)\n    x7 = fork(both, x3, x6)\n    x8 = sfilter(x1, x7)\n    x9 =85(x8)\n    x10 = sfilter(x8, x9)\n    x11 = argmax(x10, size)\n    x12 = difference(x8, x11)\n    x13 = apply(normalize, x12)\n    x14 = mapply(normalize, x13)\n    x15 = palette(x14)\n    x16 = interval(ONE, FIVE, ONE)\n    x17 = matcher(identity, x15)\n    x18 = lbind(shift, x14)\n    x19 = rbind(divide, x15)\n    x20 = chain(x18, x19, last)\n    x21 = matcher(first, x15)\n    x22 = rbind(sfilter, x21)\n    x23 = compose(x22, last)\n    x24 = lbind(compose, x17)\n    x25 = lbind(rbind, gravitate)\n    x26 = lbind(lbind, shift)\n    x27 = chain(x24, x25, x26)\n    x28 = chain(x17, x23, x27)\n    x29 = lbind(lbind, travel)\n    x30 = fork(compose, x29, x28)\n    x31 = compose(x26, x30)\n    x32 = fork(mapply, x31, x23)\n    x33 = fork(paint, x30, x32)\n    x34 = rbind(compose, x50)\n    x35 = lbind(lbind, contained)\n    x36 = compose(x34, x35)\n    x37 = fork(sfilter, x36, x28)\n    x38 ="], [1.1, "def solve_a0748723(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, maximum)\n    x33 = rbind(sfilter, x39)\n    x34 = lbind(pair, ZERO)\n    x35 = chain(x32, x33, x34)\n    x36 = compose(x32, x35)\n    x37 = fork(subtract, rbind, x36)\n    x38 = compose"], [1.1, "def solve_6fbcbbf8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x12 = apply(x15, x14)\n    x13 = rbind(subgrid, I)\n    x14 = apply(x13, x12)\n    x15 = divide(x4, x5)\n    x16 = portions(x16, x15)\n    x17 = mapply(x12, x16)\n    x18 = matcher(first, xIVE)\n    x19 = compose(flip, x18)\n    x20 = rbind(sfilter, x19)\n    x21 = compose(x20, partition)\n    x22 = fork(mapply, x21, x20)\n    x23 = fork(combine, x20, x22)\n    x24 = extract(x16, x23)\n    x25 = center(x24)\n    x26 = other(x4, x25)\n    x27 = compose(backdrop, x23)\n    x28 = matcher(first, x26)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x27, x29, initset)\n    x31 = argmin(x12, x30)\n    x32 = matcher(first, x27)\n    x33 = rbind(sfilter, x32)\n    x34 = ulcorner(x"], [1.1, "def solve_622cf10a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x32)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_19d61e47(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_561d6a76(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_88b14629(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_da5145d0(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_70b54832(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, x34)\n    x36 = compose(x32, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_d4de96de(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 =6666(I)\n    x8 = sfilter(x7, x6)\n    x9 = hperiod(x8)\n    x10 = vperiod(x8)\n    x11 = ofcolor(x13, x4)\n    x12 = ofcolor(x10, x4)\n    x13 = rbind(multiply, x9)\n    x14 = rbind(multiply, x10)\n    x15 = rbind(intersection, x13)\n    x16 = rbind(size, x15)\n    x17 =max(x14, x16)\n    x18 = lbind(shift, x13)\n    x19 =35(x17)\n    x20 = lbind(shift, x10)\n    x21 = compose(x18, x20)\n    x22 = compose(x19, x21)\n    x23 = fork(equality, x21, x22)\n    x24 = sfilter(x19, x23)\n    x25 = totuple(x24)\n    x26 = apply(color, x25)\n    x27 = lbind(shift, x13)\n    x28 = lbind(multiply, x17)\n    x29 = chain(x27, x28, dneighbors)\n    x30 = chain(x22, vercorner, x28)\n    x31 = lbind(shift, x14)\n    x32 = lbind(multiply, x17)\n    x33 =616(x31, x32)\n    x34 = fork(equality, x33, x29)\n    x35 = sfilter(x24, x34)\n    x36 = apply( ofcolor, x35)\n    x37 = colorfilter(x36, x4)\n    x38 = difference(x37, x35)\n    x39 = first(x38)\n    x40 = rbind"], [1.1, "def solve_377e9a06(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_d6fe6f21(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(TEN, TEN)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(x3, x3)\n    x5 = hsplit(x4, TWO)\n    x6 = merge(x5)\n    x7 = palette(x6)\n    x8 = compose(identity, vmirror)\n    x9 = matcher(x8, hmirror)\n    x10 = extract(x7, x9)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = recolor(x10, x13)\n    x15 = argmin(x7, x14)\n    x16 = other(x7, x15)\n    x17 = x9(x16)\n    x18 = height(x17)\n    x19 = width(x17)\n    x20 = increment(x18)\n    x21 = astuple(x19, x20)\n    x22 = frontiers(I)\n    x23 = color(x17)\n    x24 = color(x2)\n    x25 = insert(x23, x22)\n    x26 = width(x17)\n    x27 = increment(x26)\n    x28 = divide(x25, x27)\n    x29 = asobject(x28)\n    x30 = matcher(first, x23)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x29, x31)\n    x33 = argmax(x32, size)\n    x34 = prapply(connect, x23, x33)\n    x35 = mfilter(x34, vline)\n    x36 =Flip(x25, x31)\n    x37 = objects(x32, x32, x36)\n    x38 = colorfilter(x37, x232)\n    x39 = sfilter(x37, x38)\n    x40 =885 broadcast(x39, x33)\n    x"], [1.1, "def solve_2c8b9903(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_61d131b2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_7e712232(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, F, ZERO, THREE)\n    x2 = first(x1)\n    x3 = toindices(x2)\n    x4 = contained(ZERO_BY_TWO, x3)\n    x5 = contained(TWO_BY_TWO, x3)\n    x6 = contained(TWO_BY_ZERO, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = astuple(THREE, ORIGIN)\n    x10 = initset(x9)\n    x11 = upscale(x10, TWO)\n    x12 = upscale(x11, TWO)\n    x13 = shape(x12)\n    x14 = shift(x12, x13)\n    x15 = combine(x12, x14)\n    x16 = paint(x8, x15)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = hmirror(x17)\n    x21 = hmirror(x18)\n    x22 = center(x15)\n    x23 = combine(x15, x22)\n    x24 = fill(x16, x15, x23)\n    x25 = rot180(x18)\n    x26 = treated 100(x25)\n    x27 = combine(x24, x26)\n    x28 = paint(x16, x27)\n    x29 = rot90(x28)\n    x30 =warts(x29, x4)\n    x31 = argmax(x30, size)\n    x32 = rbind(subgrid, x38)\n    x33 = apply(x32, x31)\n    x34 = rbind(colorcount, x15)\n    x35 = argmax(x34, size)\n    x36 = matcher(x35, x11)\n    x37 = extract(x31, x36)\n    x38 = rot90(x37)\n    x39 = ulcorner(x15)\n    x40 = add(x39, UN"], [1.1, "def solve_47b720a7(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = shape(x27)\n    x30 = multiply(x29, THREE)\n    x31 = canvas(x28, x30)\n    x32 = asobject(x27)\n    x33 = shift(x31, FIVE)\n    x34 = paint(x31, x33)\n    x35 = objects(x34, T, F, T)\n    x36 = apply(toindices, x35)\n    x37 = size(x36)\n    x38 = equality(x37, ZERO)\n    x39 = paint(x34, x38)\n    x40 ="], [1.1, "def solve_e5d77c7e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_e505f5ba(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x77 = equality(x16, ZERO)\n    x78 = branch(x77, height, width)\n    x79 = x7876(x7)\n    x80 = delta(x3)\n    x81 =fc(multiply, x97)\n    x82 = matcher(x87, x80)\n    x83 = sfilter(x61, x82)\n    x84 = magnitude(x81)\n    x85 = shift(x3, x84)\n    x86 =74(x15, x80)\n    x87 =249(x86)\n    x88 = subgrid(x87, I)\n    x89 = vmirror(x88)\n    x90 = branch(x88, width, height)\n    x91 = x90(x89)\n    x92 = subtract(x100, x91)\n    x93 = downscale(x88, x92)\n    x94 = TWO(x93)\n    x95 = branch(x77, x25, x94)\n    x96 = color(x3)\n    x77 = palette(x95)\n    x18 = remove(x6, x77)\n    x19 = remove(x86, x18)\n    x20 = other(x79, x19)\n    x21 = palette(x95)\n    x"], [1.1, "def solve_58859bee(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_a4df3ccc(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9f8eb76a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x13, DOWN)\n    x9 = rbind(shoot, x8)\n    x10 = TEN(x9)\n    x11 = rbind(shoot, x10)\n    x12 = mapply(x11, x2)\n    x13 = paint(x7, x12)\n    x14 = TEN(x13)\n    x15 = rbind(shoot, x14)\n    x16 = mapply(x15, x2)\n    x17 = paint(x13, x16)\n    x18 = astuple(x14, x12)\n    x19 = initset(x18)\n    x20 = recolor(ZERO, x19)\n    x21 =8020(x20)\n    x22 = paint(x27, x21)\n    x23 = astuple(x17, x13)\n    x24 = astuple(x23, x8)\n    x25 = greater(x23, x24)\n    x26 = branch(x25, vsplit, hsplit)\n    x27 = x26(I, TWO)\n    x28 = first(x27)\n    x29 = last(x27)\n    x30 = palette(x28)\n    x31 = palette(x29)\n    x32 = intersection(x30, x31)\n    x33 = first(x27)\n    x34 = replace(x28, x33, x14)\n    x35 = difference(x34, x32)\n    x36 = first(x27)\n    x37 = remove(x39, x30)\n    x38 = other(x37, x36)\n    x39 = rbind(colorcount, x38)\n    x40 = argmax(x36, x39)\n    x41 = remove"], [1.1, "def solve_f3f1a18b(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_ba253193(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(sfilter, hline)\n    x3 = rbind(sfilter, vline)\n    x4 = chain(x2, x3, x1)\n    x5 = rbind(shift, UP)\n    x6 = rbind(shift, DOWN)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = compose(x8, toindices)\n    x10 = rbind(apply, first)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, x11)\n    x13 = fork(difference, x12, toindices)\n    x14 = compose(size, x13)\n    x15 = matcher(x14, ZERO)\n    x16 = fork(both, x3, x15)\n    x17 = sfilter(x1, x16)\n    x18 = difference(x1, x17)\n    x19 = merge(x1)\n    x20 = fill(I, ONE, x19)\n    x21 = merge(x8)\n    x22 = fill(x20, TWO, x21)\n    x23 = argmax(x18, size)\n    x24 = occurrences(x22, x23)\n    x25 = flip(x24)\n    x26 = branch(x25, x22, x25)\n    x27 = occurrences(x22, x26)\n    x28 = merge(x27)\n    x29 = fill(x22, TWO, x28)\n    x30 = downscale(x29, ONE)\n    x31 = occurrences(x30, x30)\n    x32 = box(x31)\n    x33 = fill(x30, TWO, x32)\n    x34 = vmirror(x29)\n    x35 = replace(x34, ZERO, TWO)\n    x36 = asobject(x35)\n    x37 = occurrences(x35, x36)\n    x38 = lbind(shift, x36)\n    x39 = mapply(x38, x"], [1.1, "def solve_41c12ba9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18,positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_6894a365(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f60553d3(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, x4, partition)\n    x6 = x5(ORIGIN)\n    x7 = normalize(x6)\n    x8 = rightmost(x7)\n    x9 = matcher(normalize, x8)\n    x10 = leastcolor(I)\n    x11 = leastcolor(I)\n    x12 = matcher(first, x10)\n    x13 = sfilter(x6, x12)\n    x14 = combine(x6, x13)\n    x15 = astuple(ONE, THREE)\n    x16 = rbind(multiply, x15)\n    x17 = mostcolor(I)\n    x18 = rbind(subtract, x17)\n    x19 = chain(x16, x18, width)\n    x20 = rbind(branch, x11)\n    x21 = rbind(x20, x19)\n    x22 = chain(initset, x17, x21)\n    x23 = fork(rapply, x22, identity)\n    x24 = compose(color, x23)\n    x25 = astuple(NEG_TWO, ONE)\n    x26 = astuple(TEN, TEN)\n    x27 = canvas(x24, x26)\n    x28 = paint(x27, x25)\n    x29 = merge(x28)\n    x30 = width(x29)\n    x31 = astuple(NEG_TWO, x30)\n    x32 = repeat(x31, ONE)\n    x33 = combine(x32, x29)\n    x34 = hsplit(x33, x30)\n    x35 = merge(x34)\n    x36 = cover(x29, x35)\n    x37 = dmirror(x36)\n    x38 = fgpartition(x37)\n    x39 = merge(x38)\n    x40 = repeat(x39,"], [1.1, "def solve_07604bb9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_e1cac98c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_59d1a274(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 =66(x29)\n    x31 = sfilter(x1, vline)\n    x32 = size(x31)\n    x33 = subtract(x20, x32)\n    x34 = shift(x23, x33)\n    x35 =76(x34)\n    x36 = frontiers(I)\n    x37 = merge(x36)\n    x38 = difference(x38, x34)\n    x39 = sfilter(x37, x38)\n    x40 = apply(x39, x36)\n    x41 = rbind(contained, x41)\n    x42 = compose(x41, color)\n    "], [1.1, "def solve_a9a5bec2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x436)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_d3cf8154(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = rbind(greater, ONE)\n    x9 = chain(size, dedupe, last)\n    x10 = compose(x8, x9)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, first)\n    x13 = chain(first, x11, x12)\n    x14 = compose(x10, x13)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = mostcolor(I)\n    x20 = trim(I)\n    x21 = palette(x20)\n    x22 = other(x21, x19)\n    x23 = asindices(I)\n    x24 = box(x23)\n    x25 = toobject(x24, I)\n    x26 = palette(x25)\n    x27 = other(x26, x19)\n    x28 = ofcolor(x18, x27)\n    x29 = ofcolor(x18, x22)\n    x30 = prapply(connect, x28, x29)\n    x31 = mfilter(x30, vline)\n    x32 = underfill(x18, x27, x31)\n    x33 = matcher(numcolors, TWO)\n    x34 = objects(x32, F, F, T)\n    x35 = sfilter(x34, x33)\n    x36 = difference(x34, x35)\n    x37 = colorfilter(x36, x27)\n    x38 = mapply(toindices, x37)\n    x39 = apply(urcorner, x35)\n    x40 ="], [1.1, "def solve_2c857ac6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_a39feb2c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = height(x22)\n    x25 = divide(x24, x25)\n    x26 = chain(positive, size, last)\n    x27 = rbind(sfilter, x52c)\n    x28 = compose(x27, asindices)\n    x29 = lbind(compose, x28)\n    x30 = lbind(rbind, subtract)\n    x31 = chain(x29, x30, last)\n    x32 = fork(equality, last, x31)\n    x33 = sfilter(x23, x32)\n    x34 = maximum(x33)\n    x35 = increment(x34)\n    x36 = interval(ZERO, x35, ONE)\n    x37 = product(x36, x36)\n    x38 = rbind(add, first)\n    x39 ="], [1.1, "def solve_dbaeed59(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, size)\n    x12 = rbind(colorcount, x4)\n    x13 = matcher(x12, ZERO)\n    x14 = rbind(sfilter, x13)\n    x15 = compose(x14, x11)\n    x16 = lbind(apply, x15)\n    x17 = lbind(colorfilter, x1)\n    x18 = chain(first, x16, x17)\n    x19 = matcher(x18, x4)\n    x20 = fork(sfilter, identity, x19)\n    x21 = lbind(apply, x10)\n    x22 = height(x1)\n    x23 = decrement(x22)\n    x24 = lbind(ofcolor, x1)\n    x25 = palette(I)\n    x26 = toindices(x25)\n    x27 = rbind(difference, x26)\n    x28 = lbind(shift, x8)\n    x29 = compose(x27, x28)\n    x30 =99(x23)\n    x31 = ofcolor(I, x4)\n    x32 = difference(x30, x31)\n    x33 = apply(x29, x32)\n    x34 = rbind(toobject, I)\n    x35 = lbind(shift, x8)\n    x36 = compose(x34, x35)\n    x37 = apply(x36, x33)\n    x38 = papply(intersection, x37, x535)\n    x39 = lbind(shift, x8)\n    x40 = r"], [1.1, "def solve_49308687(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, T, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x27)\n    x29 = fork(x26, x25, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, toindices)\n    x33 = rbind(compose, x29)\n    x34 = lbind(rbind, manhattan)\n    x35 = compose(x33, x34)\n    x36 = lbind(apply, initset)\n    x37 = chain(x32, x24, x36)\n    x38 = r"], [1.1, "def solve_faefe99a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_c25665a8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_334817b1(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x22)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_72446450(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_873c0808(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_67d1d4d3(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_5f9fc03d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = index(x7, DOWN)\n    x9 = subgrid(x9, I)\n    x10 = hmirror(x9)\n    x11 = replace(x10, FIVE, ZERO)\n    x12 = objects(x11, T, F, T)\n    x13 = first(x12)\n    x14 = vline(x13)\n    x15 = branch(x14, dmirror, identity)\n    x16 = x15(x1)\n    x17 = objects(x16, T, F, T)\n    x18 = color(x13)\n    x19 = palette(x13)\n    x20 = remove(x18, x19)\n    x21 = other(x20, x17)\n    x22 = ofcolor(x16, x21)\n    x23 =42a15(x22)\n    x24 = ofcolor(x16, FIVE)\n    x25 = sizefilter(x24, x23)\n    x26 = product(x25, x25)\n    x27 =44matchcher(first, x21)\n    x28 = compose(flip, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = rbind(shoot, UP)\n    x31 = rightmost(x30)\n    x32 = lbind(extract, x30)\n    x33 = rbind(compose, last)\n    x34 = lbind(matcher, last)\n    x35 = chain(x33, x34, x29)\n    x36 = chain(x39, x30, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = fork(difference, identity, x37)\n    x39 = lbind(rbind, multiply"], [1.1, "def solve_add4c620(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, identity, hmirror)\n    x3 = fork(equality, identity, vmirror)\n    x4 = fork(both, x2, x3)\n    x5 = extract(x1, x4)\n    x6 = toindices(x5)\n    x7 = lrcorner(x5)\n    x8 = remove(x7, x6)\n    x9 = other(x8, x4)\n    x10 = branch(x4, llcorner, height)\n    x11 = x10(x4)\n    x12 = increment(x11)\n    x13 = tojvec(x12)\n    x14 = branch(x4, uppermost, height)\n    x15 = x14(x4)\n    x16 = increment(x15)\n    x17 = gravitate(x9, x16)\n    x18 = branch(x14, x13, x17)\n    x19 = x18(x4)\n    x20 = sfilter(x1, x19)\n    x21 = difference(x1, x20)\n    x22 = toindices(x5)\n    x23 = merge(x22)\n    x24 = shift(x23, UNITY)\n    x25 = fill(I, FOUR, x24)\n    x26 =0200(x25, LEFT)\n    x27 = rbind(greater, x26)\n    x28 = compose(x27, last)\n    x29 =rbind(sfilter, x28)\n    x30 = chain(x27, vmirror, x29)\n    x31 = fork(equality, identity, x30)\n    x32 = compose(x31, last)\n    x33 = fork(either, x first, x32)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, last)\n    x36 = lbind(rbind, sfilter)\n    x37 = compose(x36, dmirror)\n    x38 = fork(sfilter, x35, x37)\n    x39 = chain"], [1.1, "def solve_2b70596e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_262cbcca(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = fork(equality, toindices, box)\n    x4 = sfilter(x2, x3)\n    x5 = fork(multiply, height, width)\n    x6 = argmax(x4, x5)\n    x7 = leastcolor(x6)\n    x8 = center(x6)\n    x9 = ofcolor(I, x7)\n    x10 = toindices(x6)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x4, x5)\n    x14 = center(x13)\n    x15 = initset(x14)\n    x16 = backdrop(x15)\n    x17 = subgrid(x16, I)\n    x18 = height(x17)\n    x19 = divide(x18, THREE)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = divide(x21, THREE)\n    x23 = increment(x22)\n    x24 =540(x15, x23)\n    x25 = divide(x16, THREE)\n    x26 = increment(x25)\n    x27 = interval(x26, x14, ONE)\n    x28 = interval(x27, x23, x14)\n    x29 = rbind(contained, x27)\n    x30 = compose(x29, last)\n    x31 = sfilter(x32, x30)\n    x32 = multiply(x25, LEFT)\n    x33 = add(x32, UP)\n    x34 = interval(x33, x14, ONE)\n    x35 = compose(x34, first)\n    x36 = lbind( add, x29)\n    x37 = rbind(multiply, x31)\n    x38 = compose(x36, x37)\n    x39 = fork(add, x35, x38)\n    x40 = fork(contained, x35, x39)\n    x41"], [1.1, "def solve_a0eeae37(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_6eb05b3b(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = interval(ONE, x3, x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(crop, x2)\n    x8 = rbind(x7, canvas)\n    x9 = lbind(equality, x2)\n    x10 = chain(x9, x8, mostcolor)\n    x11 = compose(x10, initset)\n    x12 = lbind(compose, x11)\n    x13 = lbind(rbind, sfilter)\n    x14 = compose(x12, x13)\n    x15 = apply(x14, x5)\n    x16 = size(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = apply(x16, x17)\n    x19 = contained(x18, x15)\n    x20 = lbind(repeat, x2)\n    x21 = compose(x20, x21)\n    x22 = apply(x21, x18)\n    x23 = combine(x19, x22)\n    x24 = branch(x19, ORIGIN, last)\n    x25 = contained(x19, x24)\n    x26 = branch(x19, DOWN, Full)\n    x27 = height(x26)\n    x28 = equality(x27, ONE)\n    x29 = branch(x28, ZERO, TWO)\n    x30 = branch(x28, height, width)\n    x31 = uppermost(x30)\n    x32 = matcher(first, ZERO)\n    x33 = compose(flip, x32)\n    x34 = sfilter(x25, x33)\n    x35 = ZERO(x34)\n    x36 = width(x26)\n    x37 = subtract(x35, x36)\n    x38 = multiply(x37, TWO)\n    x39 = add(x38, UNITY)\n    x40 = initset(x39"], [1.1, "def solve_5ec3cfa6(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 =\n    split(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = remove(x35, x3)\n    x37 = repeat(x35, ONE)\n    x38 = combine(x35, x37)\n    x39 = mpapply(recolor, x38, x36)\n    x40 = mapply(decrement, x31)\n    x41 = papply("], [1.1, "def solve_93217d2f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 =896(00000, first)\n    x34 = last(x33)\n    x35 = x34(I)\n    x36 = height(x35)\n    x37 = equality(x36, ZERO)\n    x38 = astuple(x32, x35)\n    x39 = astuple(x37, x37)\n    x40 = add(x39, x38)\n    x41 = invert(x40)\n    x42 = astuple(x"], [1.1, "def solve_fbbec5dc(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decremirror, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x"], [1.1, "def solve_f723dd9d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(equality, identity, palette)\n    x4 = extract(x2, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(size, x5, color)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = color(x8)\n    x10 = subgrid(x8, I)\n    x11 = fork(combine, vfrontier, hfrontier)\n    x12 = x11(x10)\n    x13 = compose(halve, vmirror)\n    x14 = x13(x12)\n    x15 = initset(x13)\n    x16 = insert(x14, x15)\n    x17 = insert(x12, x16)\n    x18 = height(x11)\n    x19 = ulcorner(x8)\n    x20 = insert(x19, x15)\n    x21 = height(x10)\n    x22 = increment(x20)\n    x23 = repeat(x21, x22)\n    x24 = lbind(lbind, shift)\n    x25 = rbind(shift, x22)\n    x26 = chain(x24, x25, x8)\n    x27 = fork(apply, x26, last)\n    x28 = fork(mapply, first, x27)\n    x29 = width(x11)\n    x30 = fork(multiply, x29, lowermost)\n    x31 = compose(x30, last)\n    x32 = fork(mapply, x31, x28)\n    x33 = fork(paint, identity, x32)\n    x34 = power(x33, x15)\n    x35 = x34(x10)\n    x36 = ofcolor(x35, x9)\n    x37 = fill(x35, x9, x36)\n    x38 =49dmirror(x37)\n    x39 = objects(x38, T, F, T)"], [1.1, "def solve_f326cd65(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_ee535f3c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_ba7e43f2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_4ba68396(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_348b3dcc(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_af7a0fe7(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x23 = width(x7)\n    x24 = interval(ZERO, x23, ONE)\n    x25 = height(x7)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = rbind(multiply, x16)\n    x28 = rbind(divide, x16)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = compose(x30, last)\n    x32 = rbind(multiply, x19)\n    x33 = rbind(divide, x19)\n    x34 = compose(x32, x33)\n    x35 = fork(equality, identity, x34)\n    x36 = compose(x32, last)\n    x37 = lbind(apply, first)\n    x38 = lbind(colorfilter, x21)\n    x39 = chain(x37, x38, first)\n    x40 = rbind(sfilter, x35)\n    x41 = chain(size, x40, first)\n    x42 = matcher(x41, ONE)\n    x43 = fork(both, x32"], [1.1, "def solve_be376b8a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_fcdf65f5(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = height(I)\n    x11 = increment(x10)\n    x12 = frontiers(I)\n    x13 = sfilter(x12, hline)\n    x14 = size(x13)\n    x15 = increment(x14)\n    x16 = divide(x11, x15)\n    x17 = width(I)\n    x18 = increment(x17)\n    x19 = frontiers(I)\n    x20 = sfilter(x19, vline)\n    x21 = size(x20)\n    x22 = increment(x21)\n    x23 = divide(x18, x22)\n    x24 = rbind(multiply, x13)\n    x25 = rbind(divide, x13)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = rbind(multiply, x23)\n    x29 = rbind(divide, x23)\n    x30 = compose(x28, x29)\n    x31 = fork(equality, identity, x30)\n    x32 = lbind(fork, both)\n    x33 = rbind(x32, x71)\n    x34 = lbind(fork, recolor)\n    x35 = lbind(x34, color)\n    x36 = rbind(compose, x25)\n    x37 = lbind(rbind, contained)\n    x38 = lbind(rbind,221)\n    x39 = chain( x35, x36, x38)\n    x40 = lbind(sfilter, x35)\n    x41 = chain(size, x40,"], [1.1, "def solve_394cebaa(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = palette(I)\n    x5 = other(x4, ZERO)\n    x6 = color(x3)\n    x7 = palette(I)\n    x8 = remove(x5, x7)\n    x9 = other(x8, x6)\n    x10 = subgrid(x3, I)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = other(x11, x12)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = matcher(first, x9)\n    x17 = sfilter(x15, x16)\n    x18 = difference(x15, x17)\n    x19 = argmin(x18, size)\n    x20 = color(x13)\n    x21 = subgrid(x17, I)\n    x22 = backdrop(x21)\n    x23 = fork( insert, identity, identity)\n    x24 = width(x23)\n    x25 = maximum(x24)\n    x26 = frontiers(x25)\n    x27 = color(x13)\n    x28 = asindices(x32)\n    x29 = ofcolor(x32, x9)\n    x30 = difference(x28, x29)\n    x31 = mapply(toindices, x30)\n    x32 = objects(x41, x11, x12)\n    x33 = x32(x32)\n    x34 = vfrontier(x25)\n    x35 = cover(x21, x34)\n    x36 = shift(x35, UNITY)\n    x37 = paint(x33, x36)\n    x38 = vmirror(x37)\n    x39 = sfilter(x33, x18)\n    x40 =1987(x39)\n    x41 = mapply(x40, x40)\n    x42 = paint("], [1.1, "def solve_58c34856(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_17d1ba60(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(rbind, sfilter)\n    x2 = lbind(compose, flip)\n    x3 = lbind(matcher, first)\n    x4 = chain(x1, x2, x3)\n    x5 = chain(size, dedupe, x4)\n    x6 = ONE(x1)\n    x7 = lbind(repeat, x6)\n    x8 = chain(x5, x7, dmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, T)\n    x11 = apply(toindices, x10)\n    x12 = lbind(2422 index4 x11)\n    x13 = compose(x12, llcorner)\n    x14 = astuple(NEG_TWO, NEG_TWO)\n    x15 = ofcolor(x9, x14)\n    x16 = sfilter(x15, x13)\n    x17 = maximum(x16)\n    x18 = dmirror(x9)\n    x19 = divide(x17, x15)\n    x20 = x17(x19)\n    x21 = fork(add, first, last)\n    x22 = x21(x20)\n    x23 = multiply(x17, x15)\n    x24 = increment(x23)\n    x25 = x17(x24)\n    x26 = lbind(recolor, x24)\n    x27 = rbind(ofcolor, x14)\n    x28 = chain(x26, x27, last)\n    x29 = fork(paint, last, x28)\n    x30 = x29(x9)\n    x31 = x27(x30)\n    x32 = first(x31)\n    x33 = shift(x32, x29)\n    x34 = ofcolor(x31, x15)\n    x35 = merge(x34)\n    x36 = cover(x9, x35)\n    x37 =73(x32)\n    x38 = shift(x37, x29)\n    O = fill(x36, x13, x38)\n    return O"], [1.1, "def solve_760c69bf(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(shape, THREE_BY_THREE)\n    x3 = matcher(size, FIVE)\n    x4 = fork(intersection, toindices, box)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, FOUR)\n    x7 = fork(intersection, toindices, corners)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x3)\n    x11 = fork(both, x6, x9)\n    x12 = fork(both, toindices, x11)\n    x13 = compose(size, x12)\n    x14 = matcher(x13, THREE)\n    x15 = toindices(x2)\n    x16 =0010(x15, x080)\n    x17 = matcher(x15,10)\n    x18 = compose(flip, x17)\n    x19 = extract(x16, x18)\n    x20 = normalize(x19)\n    x21 = apply( ulcorner, x20)\n    x22 = lbind(shift, x20)\n    x23 = mapply(x22, x21)\n    x24 = paint(I, x23)\n    O = rot90(x24)\n    return O"], [1.1, "def solve_df679ccd(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = difference(x1, x2)\n    x3 = palette(I)\n    x4 =pe(color)\n    x5 =55(x2)\n    x6 = objects(I, T, F, T)\n    x7 = matcher(color, x4)\n    x8 = fork(both, x7, x6)\n    x9 = sfilter(x6, x8)\n    x10 = shape(x9)\n    x11 = subtract(x10, TWO_BY_TWO)\n    x12 = crop(x9, TWO_BY_ZERO, x11)\n    x13 = hconcat(x12, x12)\n    x14 = vconcat(x13, x12)\n    x15 = vconcat(x14, x12)\n    x16 = vconcat(x15, x12)\n    O = compress(x16)\n    return O"], [1.1, "def solve_30e9e130(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = astuple(x1, ONE)\n    x4 = rbind(objects, x3)\n    x5 =01(x2)\n    x6 = rbind(x5, F)\n    x7 = compose(x4, x6)\n    x8 = fork(combine, delta, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, FOUR, x9)\n    return O"], [1.1, "def solve_2379464f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = mostcolor(I)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 =8339999(x7, x7)\n    x9 = outbox(x8)\n    x10 = backdrop(x9)\n    x11 = mapply(x2, x10)\n    O = fill(x7, ONE, x11)\n    return O"], [1.1, "def solve_bfcf1fcf(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = leastcolor(I)\n    x7 = color(x2)\n    x8 = width(I)\n    x9 = matcher(first, x7)\n    x10 = uppermost(x2)\n    x11 = rightmost(x3)\n    x12 = both(x9, x10)\n    x13 = both(x12, x11)\n    x14 = prapply(connect, x2, x3)\n    x15 = mfilter(x14, x13)\n    x16 = combine(x, x15)\n    x17 = recolor(x6, x16)\n    x18 = height(I)\n    x19 = subtract(x18, THREE)\n    x20 = width(I)\n    x21 = subtract(x20, THREE)\n    x22 = astuple(x19, x21)\n    x23 = maximum(x22)\n    x24 = add(x23, ONE)\n    x25 = interval(ONE, x24, ONE)\n    x26 =30525(I)\n    x27 = apply(tojvec, x25)\n    x28 = lbind(shift, x17)\n    x29 = mapply(x28, x27)\n    x30 = lbind(shift, x02)\n    x31 =80(x30)\n    x32 = lbind(shift, x25)\n    x33 =80(x32)\n    x34 = ofcolor(I, x6)\n    x35 = combine(x32, x33)\n    x36 = fill(I, x23, x35)\n    x37 = fill(x36, x6, x34)\n    x38 = ofcolor(I, x725)\n    x39 = fill(x37, x27, x38)\n    O = fill(x39, EIGHT, x34)\n    return O"], [1.1, "def solve_a6c84c45(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(toobject, x18)\n    x20 = chain(x19, corners, outbox)\n    x21 = mapply(x20, x16)\n    x22 =487(x21)\n    x23 = colorfilter(x1, x6)\n    x24 = argmin(x23, x22)\n    x25 = subgrid(x24, x14)\n    x26 = vmirror(x25)\n    x27 = ofcolor(x26, x6)\n    x28 = subgrid(x27, x25)\n    x29 = vmirror(x28)\n    x30 = ofcolor(x29, x6)\n    x31 = ofcolor(x30, x1)\n    x32 = combine(x29, x31)\n    O = fill(x28, THREE, x32)\n    return O"], [1.1, "def solve_b14125f5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =709(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = replace(I, FOUR, ZERO)\n    O = fill(x6, EIGHT, x5)\n    return O"], [1.1, "def solve_b2f19aec(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fork(equality, toindices, backdrop)\n    x2 = lbind(apply, x1)\n    x3 = lbind(lbind, contained)\n    x4 = chain(x2, x3, frontiers)\n    x5 = fork(sfilter, asindices, x4)\n    x6 = fork(difference, toindices, x5)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = fork(both, x3, x8)\n    x10 = sfilter(x1, x9)\n    x11 = size(x10)\n    x12 = increment(x11)\n    x13 = argmin(x10, x12)\n    x14 = width(x13)\n    x15 = increment(x14)\n    x16 = frontiers(x13)\n    x17 = width(x13)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = maximum(x19)\n    x21 = increment(x20)\n    x22 =243(x21)\n    x23 = asindices(x13)\n    x24 = ofcolor(x13, x12)\n    x25 = difference(x23, x24)\n    x26 = shift(x25, RIGHT)\n    x27 = toindices(x26)\n    x28 = intersection(x22, x27)\n    x29 = fill(x13, RIGHT, x28)\n    x30 = difference(x61, x29)\n    x31 = fill(x29, DOWN, x30)\n    x32 = normalize(x31)\n    x33 = first(x32)\n    x34 = power(outbox, x33)\n    x35 = x34(x81)\n    x36 = ofcolor(x35, x12)\n    x37 = shift(x36, x65)\n    x38 = fill(x31, RIGHT, x37)\n    x39 = x34(x38)\n    O = paint(x39, x33)\n    return O"]], "2037f2c7": [[0.45884624715059497, "def solve_f4889271(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, x3)\n    x7 = replace(x6, x5, x4)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_bb1ad5e1(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_dc5dc240(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.5180496905134585, "def solve_635ca7f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5182413270369292, "def solve_1c4048b0(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5182413270369292, "def solve_44e7c149(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5182413270369292, "def solve_ae8bd0c9(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5251570172671126, "def solve_99140819(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5341705127937012, "def solve_d7b65fae(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, T)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.5341705127937012, "def solve_28df58e7(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_44f88b26(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_d88f7622(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5360057111538251, "def solve_7145ed80(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(multiply, THREE)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.5371766746404427, "def solve_0c0fc434(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5389342090692021, "def solve_f84aefe1(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_8d434cf6(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5437278100321579, "def solve_2453cdf2(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.562653757943613, "def solve_183eb9a1(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_1465979d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_2037fa56(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.5654205127937012, "def solve_b182e9e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.5675038461270346, "def solve_8648c7d7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5675038461270346, "def solve_1b53ec48(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5675038461270346, "def solve_bafbce46(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5696230758236387, "def solve_632705d2(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_0911dea0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_c7617d16(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_9133e4a6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_729e7f75(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5870737823636375, "def solve_dd3cf6c5(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5951113969229912, "def solve_4bfaa260(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5951113969229912, "def solve_37dff32a(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5962408498640382, "def solve_1b76aed7(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5980018302732818, "def solve_aa343f95(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.6057341869347498, "def solve_ecc0f81c(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.6219584682628162, "def solve_03005b64(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = vsplit(x3, x4)\n    x7 = lbind(greater, FOUR)\n    x8 = compose(x7, numcolors)\n    x9 = sfilter(x6, x8)\n    x10 = merge(x9)\n    x11 = rot90(x10)\n    x12 = vsplit(x11, x5)\n    x13 = sfilter(x12, x8)\n    x14 = merge(x13)\n    x15 = rot270(x14)\n    x16 = leastcolor(x15)\n    x17 = ofcolor(x15, x16)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = mapply(x18, x17)\n    O = fill(x15, x16, x19)\n    return O"], [0.6400120813164292, "def solve_61bed1cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.641907963212311, "def solve_359da259(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.6595666947116222, "def solve_28be7746(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = hconcat(x3, x3)\n    x5 = hmirror(x4)\n    O = vconcat(x5, x4)\n    return O"], [0.67849848306046, "def solve_c28a0438(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = frontiers(x3)\n    x5 = merge(x4)\n    O = subgrid(x5, x3)\n    return O"], [0.6933326210677562, "def solve_d5368cb4(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, EIGHT, x4)\n    return O"], [0.7011976947751416, "def solve_6319e470(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = mostcolor(I)\n    x6 = palette(I)\n    x7 = remove(x4, x6)\n    x8 = order(x7, identity)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = ofcolor(I, x9)\n    x12 = ofcolor(I, x10)\n    x13 = switch(I, x10, x9)\n    x14 = combine(x11, x12)\n    x15 = subgrid(x14, x13)\n    O = trim(x15)\n    return O"], [0.7162621771437624, "def solve_87ec3146(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7330246028575503, "def solve_9fb3943c(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7330246028575503, "def solve_fa52c23e(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, T)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7330246028575503, "def solve_9168f0a4(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7553253405644605, "def solve_c27bee45(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.7702994509699451, "def solve_903b74fe(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_ab69e8cc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_b34a6c47(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.8011350215755711, "def solve_c33ab63f(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    x6 = shape(x3)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x3)\n    x9 = box(x3)\n    x10 = fill(x7, x4, x9)\n    x11 = box(x3)\n    O = fill(x10, FOUR, x11)\n    return O"], [0.8078379565261865, "def solve_44cb1825(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.8264892431277836, "def solve_07098b4d(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.8277590843976249, "def solve_195fa007(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8280264986187765, "def solve_293767a5(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = sizefilter(x2, ONE)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = compose(last, centerofmass)\n    x10 = order(x8, x9)\n    x11 = size(x10)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = mpapply(recolor, x12, x10)\n    O = paint(I, x13)\n    return O"], [0.828870195508736, "def solve_ebf4959f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x3)\n    x5 = fill(I, EIGHT, x4)\n    O = switch(x5, EIGHT, TWO)\n    return O"], [0.8290364842464534, "def solve_d6d2dd05(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, EIGHT, x4)\n    return O"], [0.829564622162508, "def solve_6d7cd3e6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.8333207685307377, "def solve_e1fab3a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.8341973243152688, "def solve_a521cd3f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.834468866350488, "def solve_b8c084cf(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, THREE, x3)\n    return O"], [0.8376932799217021, "def solve_764254ee(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8376932799217021, "def solve_d8b45e84(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8444257510642915, "def solve_c2304153(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, SIX, x8)\n    return O"], [0.8446931652854431, "def solve_e74ce5ad(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.8446931652854431, "def solve_a410154d(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.8541526103104055, "def solve_f78c5bb6(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.8562927755331531, "def solve_70d9a997(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.8562927755331531, "def solve_4161a455(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.8582352748738153, "def solve_0a638e31(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.8619084413077417, "def solve_834c6fae(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEG_ONE, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [0.8619789768786953, "def solve_e5c9ee86(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8621335034579425, "def solve_26fd0d49(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8626797193182597, "def solve_c4601bbe(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8631105583205274, "def solve_421bdb79(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_7025ea64(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8637867634430995, "def solve_14461296(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.8638225057175161, "def solve_ef0b6d06(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmax(x4, size)\n    x6 = other(x4, x5)\n    x7 = palette(I)\n    x8 = lrcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = llcorner(x5)\n    x11 = add(x10, DOWN_LEFT)\n    x12 = urcorner(x5)\n    x13 = add(x12, UP_RIGHT)\n    x14 = ulcorner(x5)\n    x15 = add(x14, NEG_UNITY)\n    x16 = shoot(x9, UNITY)\n    x17 = shoot(x11, DOWN_LEFT)\n    x18 = shoot(x13, UP_RIGHT)\n    x19 = shoot(x15, NEG_UNITY)\n    x20 = combine(x16, x17)\n    x21 = combine(x18, x19)\n    x22 = combine(x20, x21)\n    x23 = color(x6)\n    O = fill(I, x23, x22)\n    return O"], [0.8638448240547932, "def solve_dbbc1b9e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.8638448240547932, "def solve_ab91d16e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.8638512990612682, "def solve_56c02c49(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, FOUR)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.8638512990612682, "def solve_606fe005(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, THREE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.8638701955087361, "def solve_9cb200a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_21de1829(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = matcher(first, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    x14 = fill(I, ONE, x13)\n    x15 = merge(x12)\n    x16 = fill(x14, EIGHT, x15)\n    x17 = paint(x16, x11)\n    O = fill(x17, ZERO, x15)\n    return O"], [0.8638701955087361, "def solve_894db92c(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.8638701955087361, "def solve_4c311c21(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.8638701955087361, "def solve_edc91db0(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(hmatching, first, last)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = compose(center, first)\n    x9 = compose(center, last)\n    x10 = fork(connect, x8, x9)\n    x11 = chain(initset, center, x10)\n    x12 = compose(color, first)\n    x13 = fork(recolor, x12, x11)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.863900032004738, "def solve_1d7a1ac6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.863900032004738, "def solve_14946e28(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, TWO, x5)\n    return O"], [0.8639170099334305, "def solve_ee9e05c8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.8640364842464535, "def solve_6451366d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8643350082204696, "def solve_20ad2bff(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643350082204696, "def solve_26dca613(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643386284959661, "def solve_7415aae6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643497906816929, "def solve_56f6170e(I):\n    x1 = fgpartition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = mapply(x2, x1)\n    O = paint(I, x3)\n    return O"], [0.8649127939257487, "def solve_e8739153(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = fork(intersection, first, last)\n    x8 = apply(x3, x1)\n    x9 = x7(x8)\n    O = fill(x6, TWO, x9)\n    return O"], [0.8665000955130503, "def solve_1f2afbc8(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, SIX, x4)\n    return O"], [0.8665000955130503, "def solve_bb511253(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, SIX, x4)\n    return O"], [0.866911713810044, "def solve_d752a61c(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I,88, x3)\n    return O"], [0.8670746351793411, "def solve_ab5cc712(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.8791842304218287, "def solve_bafb1aba(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.8854704069677455, "def solve_c6f36164(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = colorcount(I, x6)\n    x8 = interval(ONE, x7, ONE)\n    x9 = mpapply(recolor, x8, x4)\n    O = paint(I, x9)\n    return O"], [0.895840777338116, "def solve_cda6c6ce(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.895840777338116, "def solve_9b2ec4f9(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [1.0, "def solve_1f4cffbb(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(other, TWO)\n    x3 = compose(x2, palette)\n    x4 = matcher(first, TWO)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(x5, normalize)\n    x7 = lbind(apply, double)\n    x8 = chain(x7, toindices, x6)\n    x9 = rbind(add, NEG_ONE)\n    x10 = lbind(apply, x9)\n    x11 = compose(x10, x8)\n    x12 = lbind(rbind, shoot)\n    x13 = rbind(compose, x12)\n    x14 = lbind(rbind, mapply)\n    x15 = chain(x13, x14, toindices)\n    x16 = fork(mapply, x15, x11)\n    x17 = fork(recolor, x3, x16)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_444ac55e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = mapply(x17, x16)\n    O = rot90(x18)\n    return O"], [1.0, "def solve_dc07ef14(I):\n    x1 =IGHTmost(I)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [1.0, "def solve_14e06df5(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_2dfbecea(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = repeat(x9, ONE)\n    x11 = objects(I, T, F, F)\n    x12 = sizefilter(x11, x10)\n    x13 = argmax(x12, size)\n    x14 = remove(x13, x12)\n    x15 = argmin(x14, x8)\n    x16 = apply(first, x12)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = x17(x9)\n    x20 = x17(x13)\n    x21 = subgrid(x19, I)\n    x22 = hmirror(x21)\n    x23 = vmirror(x22)\n    x24 = color(x13)\n    x25 = color(x24)\n    x26 = replace(x22, x24, x25)\n    x27 = paint(x26, x25)\n    x28 = ulcorner(x16)\n    x29 = remove(x28, x16)\n    x30 = ulcorner(x18)\n    x31 = rbind(greater, x30)\n    x32 = compose(x31, last)\n    x33 = sfilter(x29, x32)\n    x34 = replace(x27, x25, x36)\n    O = fill(x34, x24, x33)\n    return O"], [1.0, "def solve_073140fc(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, THREE)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x2, x3)\n    O = fill(I, TWO, x4)\n    return O"], [1.0, "def solve_2335bd04(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_893bb5d9(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(RIGHT, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = sfilter(x23, x24)\n    x26 = recolor(x25, x20)\n    x27 = paint(I, x26)\n    O = standardize(x27)\n    return O"], [1.0, "def solve_2ef9ee7f(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(toindices, x7)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [1.0, "def solve_70e6d2c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = fafffa47(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, ulcorner)\n    x6 = toindices(x2)\n    x7 = matcher(x5, x4)\n    x8 = fill(I, NEG_ONE, x7)\n    x9 = toindices(x3)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    O = fill(x8, EIGHT, x11)\n    return O"], [1.0, "def solve_cab4a718(I):\n    x1 = asobject(I)\n    x2 = Ifilter(x1, T)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, x2)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_f59ad15a(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = ofcolor(I, ZERO)\n    x6 = lrcorner(x3)\n    x7 = shoot(x6, NEG_UNITY)\n    x8 = shoot(x607, NEG_UNITY)\n    x9 = shoot(x7, DOWN_LEFT)\n    x10 = shoot(x7, UP_RIGHT)\n    x11 = combine(x775, x10)\n    x12 = combine(x8, x9)\n    x13 = combine(x11, x12)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, uppermost)\n    x16 = sfilter(x2, x15)\n    x17 = difference(x2, x16)\n    x18 = mostcolor(I)\n    x19 = fill(I, x18, x17)\n    x20 = fill(x19, TWO, x16)\n    x21 = objects(x20, T, F, T)\n    x22 = rbind(colorcount, TWO)\n    x23 = argmax(x21, x22)\n    x24 = subgrid(x23, x20)\n    x25 = initset(x24)\n    x26 = replace(x25, ZERO, TWO)\n    O = fill(x26, x38, x25)\n    return O"], [1.0, "def solve_38a7bfbe(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = width(x2)\n    x4 = halve(x3)\n    x5 = tojvec(x4)\n    x6 = height(x2)\n    x7 = decrement(x6)\n    x8 = astuple(x7, x4)\n    x9 = connect(x5, x8)\n    x10 = toobject(x9, I)\n    x11 = mostcolor(x10)\n    x12 = palette(I)\n    x13 = other(x12, x11)\n    x14 = subgrid(x11, I)\n    x15 = compose(numcolors, frontiers)\n    x16 = matcher(x15, x13)\n    x17 = sfilter(x14, x16)\n    x18 = normalize(x17)\n    x19 = shape(x18)\n    x20 = canvas(x11, x19)\n    x21 = lbind(shift, x18)\n    x22 = objects(x20, F, T, T)\n    x23 = argmax(x22, numcolors)\n    x24 = shift(x23, x19)\n    x25 = color(x23)\n    x26 = normalize(x24)\n    x27 = color(x25)\n    x28 =ulcorner(x24)\n    x29 = ulcorner(x25)\n    x30 = subgrid(x23, x20)\n    x31 = rot90(x30)\n    x32 = rot180(x30)\n    x33 = rot270(x30)\n    x34 = hconcat(x31, x27)\n    x35 = combine(x32, x33)\n    x36 = combine(x34, x35)\n    O = paint(x36, x28)\n    return O"], [1.0, "def solve_acd4828b(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x9)\n    x11 = paint(x10, x8)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_45b8b715(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_e4cf7c75(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, EIGHT)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_241ac094(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = rbind(contained, x2)\n    x4 = chain(flip, x3, color)\n    x5 = sfilter(x1, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = fork(multiply, height, width)\n    x9 = argmax(x7, x8)\n    x10 = fgpartition(I)\n    x11 = merge(x10)\n    x12 = difference(x11, x7)\n    x13 =argmax(x12, x8)\n    x14 = remove(x13, x12)\n    x15 = subgrid(x13, I)\n    x16 = lbind(shift, x15)\n    x17 = height(x13)\n    x18 = divide(x17, x14)\n    x19 = hupscale(x18, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [1.0, "def solve_27abc7ed(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = other(x20, x17)\n    x22 = vmirror(x17)\n    x23 = objects(x22, T, F, F)\n    x24 = colorfilter(x23, x21)\n    x25 = valmirror(x24)\n    x26 = sfilter(x24, x25)\n    x27 = paint(I, x26)\n    x28 = normalize(x27)\n    O = lbind(normalize, x28)\n    return O"], [1.0, "def solve_8cdb2a21(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = leftmost(x3)\n    x6 = lbind(greater, x5)\n    x7 = compose(x6, color)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = palette(x9)\n    x11 =matcher(identity, x4)\n    x12 = matcher(dmirror, x6)\n    x13 = extract(x10, x12)\n    x14 = extract(x10, x13)\n    x15 = gravitate(x9, x14)\n    x16 = replace(I, x4, x13)\n    x17 = Sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = lowermost(x17)\n    x20 = shoot(x18, UNITY)\n    x21 = lrcorner(x17)\n    x22 = shoot(x21, NEG_UNITY)\n    x23 = urcorner(x17)\n    x24 = shoot(x23, UP_RIGHT)\n    x25 = llcorner(x17)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = combine(x20, x22)\n    x28 = combine(x24, x26)\n    x29 = combine(x27, x28)\n    x30 = color(x9)\n    O = fill(x36, x30, x29)\n    return O"], [1.0, "def solve_7a0fe615(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [1.0, "def solve_0fa6768f(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_49eb15a3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcmost(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [1.0, "def solve_c1ce4701(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_84f29693(I):\n    x1 = objects(I, T, T, T)\n    x2 = astuple(ONE, ONE)\n    x3 = canvas(ZERO, x2)\n    x4 = subgrid(x3, I)\n    x5 = merge(x1)\n    x6 = cover(I, x5)\n    x7 = lbind(cacat, normalize)\n    x8 = compose(x7, toindices)\n    x9 = x8(x4)\n    x10 = x8(x4)\n    x11 = x8(x4)\n    x12 = fill(x6, EIGHT, x9)\n    x13 = fill(x12, TWO, x10)\n    O = fill(x13, ONE, x11)\n    return O"], [1.0, "def solve_4456d719(I):\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = objects(I, T, F, T)\n    x4 = first(x3)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = compose(toindices, normalize)\n    x8 = rbind(shift, x5)\n    x9 = compose(x8, x7)\n    x10 = mapply(x9, x6)\n    x11 = paint(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = mapply(vfrontier, x12)\n    x14 = mapply(hfrontier, x12)\n    x15 = mapply( astuple, x13, x14)\n    x16 = apply(urcorner, x15)\n    x17 = mapply(x16, x12)\n    x18 = paint(x11, x17)\n    O = rot90(x18)\n    return O"], [1.0, "def solve_0c2543aa(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(c909, first)\n    x10 = fork(toindices, x9, outbox)\n    x11 = fork(equality, toindices, x10)\n    x12 = compose(x11, x5)\n    x13 = sfilter(x2, x12)\n    x14 = chain(backdrop, inbox, x13)\n    x15 = mapply(x14, x13)\n    x16 = replace(I, EIGHT, ZERO)\n    O = fill(x16, THREE, x15)\n    return O"], [1.0, "def solve_8ac3fe28(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = sfilter(x1, x4)\n    x6 = totuple(x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x10 = color(x8)\n    x11 = subgrid(x7, I)\n    x12 = trim(x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, UNITY)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_14806f54(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1,24)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, UNITY)\n    O = paint(x4, x8)\n    return O"], [1.0, "def solve_6d92e8e5(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = first(x1)\n    x5 = chain(35873, x4, lowermost)\n    x6 = x5(x4)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = chain(toivec, uppermost, x6)\n    x9 = order(x7, x8)\n    x10 = lbind(sfilter, x6)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, astuple)\n    x14 = chain(x13, x12, x12)\n    x15 = fork(sfilter, x12, x14)\n    x16 = lbind(rbind, equality)\n    x17 = lbind(argmin, x9)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = lbind(x19, x15)\n    x21 = chain(x19, x20, x19)\n    x22 = lbind(apply, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x4)\n    O = paint(x3, x24)\n    return O"], [1.0, "def solve_3adec8ad(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, leftmost, uppermost)\n    x8 = x7(x2)\n    x9 = color(x2)\n    x10 = shape(I)\n    x11 = lbind(canvas, NEG_ONE)\n    x12 = lbind(apply, x11)\n    x13 = lbind(ofcolor, I)\n    x14 = chain(x12, x13, leftmost)\n    x15 = chain(size, x7, x14)\n    x16 = apply(x15, x3)\n    x17 = ofcolor(I, x9)\n    x18 = subgrid(x17, I)\n    x19 = palette(x18)\n    x20 = remove(x9, x19)\n    x21 = lbind(colorcount, x18)\n    x22 = argmin(x20, x21)\n    x23 = other(x22, x5)\n    x24 = ofcolor(x18, x23)\n    x25 = ofcolor(x18, x22)\n    x26 = position(x24, x25)\n    x27 = crop(x18, DOWN, x26)\n    x28 = mapply(x27, x24)\n    O = fill(x28, x23, x28)\n    return O"], [1.0, "def solve_151c64c9(I):\n    x1 = compose(last, first)\n    x2 = power(last, TWO)\n    x3 = x1(I)\n    x4 =x2(x3)\n    x5 = fork(subtract, first, last)\n    x6 = fork(multiply, sign, identity)\n    x7 = compose(x6, x5)\n    x8 = rbind(multiply, THREE)\n    x9 = rbind(divide, THREE)\n    x10 = compose(x8, x9)\n    x11 = fork(equality, identity, x7)\n    x12 = compose(x11, x10)\n    x13 = sfilter(x4, x12)\n    x14 = difference(x4, x13)\n    O = fill(x4, TWO, x14)\n    return O"], [1.0, "def solve_c675cc53(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = rbind(colorcount, ZERO)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, flip, hline)\n    x14 = lbind(contained, x11)\n    x15 = compose(x14, vline)\n    x16 = vsplit(x15, TWO)\n    x17 = chain(first,203, ZERO)\n    x18 = fork(x17, x20, x19)\n    x19 = compose(flip, x18)\n    x20 = extract(x16, x19)\n    x21 = remove(x20, x6)\n    x22 = chain(invert, positive, size)\n    x23 = fork(shift, identity, x22)\n    x24 = mapply(x23, x21)\n    x25 = sfilter(x21, x17)\n    x26 = sfilter(x21, x24)\n    x27 = shift(x26, DOWN)\n    x28 = mapply(x27, x25)\n    x29 = combine(x28, x22)\n    x30 = shift(x29, UP)\n    x31 = mapply(x30, x26)\n    x32 = paint(x5, x31)\n    O = subgrid(x2, x32)\n    return O"], [1.0, "def solve_23c140ac(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_b1a50d8f(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_db5420c9(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, x4, identity)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_aa797576(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 =sfilter(x2, x24)\n    x26 = difference(x2, x25)\n    x27 = fill(I, EIGHT, x26)\n    x28 = ulcorner(x27)\n    x29 = lbind(subtract, x28)\n    x30 = shift(x22, UNITY)\n    x31 = mapply(x29, x30)\n    O = fill(x27, EIGHT, x31)\n    return O"], [1.0, "def solve_7dbf0aef(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = index(I, ORIGIN)\n    x5 = chain(d687, ulcorner, lrcorner)\n    x6 = x5(x2)\n    x7 = initset(x6)\n    x8 = insert(x4, x7)\n    x9 = subgrid(x8, I)\n    x10 = switch(x9, EIGHT, switch)\n    x11 = branch(x10, x8, x5)\n    x12 = switch(x11, EIGHT, switch)\n    x13 = replace(x12, ONE, SIX)\n    x14 = branch(x13, x8, x5)\n    x15 = apply(x14, x13)\n    x16 = asindices(x15)\n    x17 = urcorner(x16)\n    x18 = shoot(x17,NEG_UNITY)\n    x19 = shoot(x17, UNITY)\n    x20 = shoot(x17, DOWN_LEFT)\n    x21 = shoot(x17, UP_RIGHT)\n    x22 = combine(x18, x19)\n    x23 = combine(x20, x21)\n    x24 = combine(x22, x23)\n    O = paint(x3, x24)\n    return O"], [1.0, "def solve_22ac6201(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(44, T, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = normalize(x3)\n    x6 = color(x5)\n    x7 = uppermost(x3)\n    x8 = lbind(greater, x7)\n    x9 = compose(x8, uppermost)\n    x10 = rbind(contained, x4)\n    x11 = compose(x10, x9)\n    x12 = sfilter(x1, x11)\n    x13 = outbox(x3)\n    x14 = center(x3)\n    x15 = hfrontier(x14)\n    x16 = fill(I, x6, x15)\n    x17 = height(x3)\n    x18 = increment(x17)\n    x19 = decrement(x18)\n    x20 = width(x3)\n    x21 = divide(x19, x20)\n    x22 = increment(x21)\n    x23 = subtract(x22, x18)\n    x24 = canvas(x6, x13)\n    x25 = fill(x24, x6, x23)\n    x26 = hsplit(x25, x5)\n    x27 = merge(x26)\n    O = width(x27)\n    return O"], [1.0, "def solve_ced5ad42(I):\n    x1 = fgpartition(I)\n    x2 = box(x1)\n    x3 = intersection(x2, x1)\n    x4 = fork(equality, toindices, backdrop)\n    x5 = compose(flip, x4)\n    x6 = extract(x1, x5)\n    x7 = color(x6)\n    x8 = leftmost(x6)\n    x9 = add(x8, SEVEN)\n    x10 = interval(x9, TEN, ONE)\n    x11 = TEN(x10)\n    x12 = lbind(multiply, x8)\n    x13 = apply(x12, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    O = fill(I, x7, x15)\n    return O"], [1.0, "def solve_37127146(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = objects(I, T, F, F)\n    x5 = colorfilter(x4, x3)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = lbind(mapply, replace)\n    x9 = chain(x8, first, last)\n    x10 = x9(x7)\n    x11 = astuple(hmirror, vmirror)\n    x12 = astuple(cmirror, dmirror)\n    x13 = combine(x11, x12)\n    x14 = product(x13, x13)\n    x15 = fork(combine, hfrontier, vfrontier)\n    x16 = mapply(x15, x14)\n    x17 = mapply(x9, x16)\n    O = fill(x7, ZERO, x17)\n    return O"], [1.0, "def solve_f47b4095(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(contained, ZERO)\n    x6 = lbind(apply, x5)\n    x7 = compose(x6, initset)\n    x8 = lbind(compose, flip)\n    x9 = lbind(matcher, first)\n    x10 = chain(x7, x8, x9)\n    x11 = sfilter(x4, x10)\n    x12 = chain(increment, toivec, uppermost)\n    x13 = fork(greater, x12, uppermost)\n    x14 = sfilter(x11, x13)\n    x15 = merge(x14)\n    x16 = center(x15)\n    x17 = merge(x14)\n    x18 = center(x17)\n    x19 = hmirror(x18)\n    x20 = paint(I, x19)\n    x21 = objects(x20, T, F, F)\n    x22 = compose(toindices, normalize)\n    x23 = matcher(x22, x21)\n    x24 = sfilter(x1, x23)\n    x25 = objects(x20, T, F, F)\n    x26 = colorfilter(x25, ZERO)\n    x27 = rbind(bordering, I)\n    x28 = compose(flip, x27)\n    x29 = mfilter(x26, x28)\n    O = fill(x20, EIGHT, x29)\n    return O"], [1.0, "def solve_c942b4aa(I):\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = argmax(x4, size)\n    x6 = replace(x5, x3, x5)\n    x7 = replace(x6, x1, x6)\n    x8 = SEVEN(x7)\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = box(x5)\n    x11 = fill(x9, x3, x10)\n    x12 = box(x5)\n    x13 = occurrences(x11, x12)\n    x14 = mapply(x11, x13)\n    O = fill(x11, x3, x14)\n    return O"], [1.0, "def solve_db08cd22(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_7bcee169(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_c5d3b321(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_b38ee609(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = toindices(x5)\n    x8 = outbox(x4)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x9, x11, x10)\n    x13 = compose(x12, initset)\n    x14 = apply(x13, x7)\n    x15 = cover(I, x5)\n    O = fill(x15, x6, x14)\n    return O"], [1.0, "def solve_8f55c549(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(size, dedupe)\n    x3 = order(x1, x2)\n    x4 = valmax(x3, x2)\n    x5 = rbind(astuple, ONE)\n    x6 = lbind(subtract, x4)\n    x7 = compose(x5, x6)\n    x8 = chain(initset, x7, lefthalf)\n    x9 = fork(subtract, height, x8)\n    x10 = compose(lowermost, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = extract(x3, x11)\n    x13 = other(x1, x12)\n    x14 = x13(I)\n    x15 = color(x12)\n    x16 = box(x12)\n    x17 = fill(x14, x15, x16)\n    x18 = subgrid(x12, x17)\n    x19 = backdrop(x18)\n    x20 = cover(x19, x12)\n    x21 = shift(x19, UNITY)\n    x22 = paint(x21, x21)\n    x23 = normalize(x12)\n    x24 = lbind(shift, x23)\n    x25 = height(x12)\n    x26 = divide(x25, x25)\n    x27 = increment(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = palette(x12)\n    x30 = lbind(shift, x29)\n    x31 = objects(x22, x28, x30)\n    x32 = rbind( multiply,UNITY)\n    x33 = apply(x32, x31)\n    x34 = rbind(ofcolor, x10)\n    x35 = mapply(x34, x33)\n    x36 = fill(x22, x35, x31)\n    O = x13(x36)\n    return O"], [1.0, "def solve_b045d7f3(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_4ba1288e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(uppermost, merge, frontiers)\n    x7 = x6(x2)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = rbind(add, DOWN)\n    x11 = chain(x10, size, x7)\n    x12 = argmax(x9, x11)\n    x13 = remove(x2, x9)\n    x14 = center(x12)\n    x15 = initset(x14)\n    x16 = insert(x13, x15)\n    x17 = width(x16)\n    x18 = height(x12)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = lbind(multiply, x18)\n    x21 = apply(x20, x19)\n    x22 = lbind(shift, x4)\n    x23 = mapply(x22, x21)\n    O = paint(I, x23)\n    return O"], [1.0, "def solve_fb9938f4(I):\n    x1 = width(I)\n    x2 =branch(I)\n    x3 = halve(x1)\n    x4 = astuple(x3, x1)\n    x5 = dmirror(I)\n    x6 = palette(x5)\n    x7 = compose(remove, switch)\n    x8 = lbind(ofcolor, x5)\n    x9 = chain(x8, x7, x6)\n    x10 = x9(I)\n    x11 = partition(x5)\n    x12 = matcher(x9, x11)\n    x13 = extract(x12, x12)\n    x14 = lbind(shift, x13)\n    x15 = first(x5)\n    x16 = dedupe(x15)\n    x17 = product(x14, x16)\n    x18 = compose(x14, first)\n    x19 = apply(x18, x17)\n    x20 = rapply(x19, x2)\n    x21 = mapply(x16, x20)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_18c44b85(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(colorcount, x3)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_cf19d5cf(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = multiply(x2, FIVE)\n    x4 = astuple(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    x10 = paint(x5, x9)\n    O = hmirror(x10)\n    return O"], [1.0, "def solve_29df0c4a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = switch(x7, x6, x4)\n    x9 = leastcolor(x8)\n    x10 = color(x4)\n    x11 = matcher(first, x9)\n    x12 =flip(x11)\n    x13 = mfilter(x12, x11)\n    x14 = toindices(x13)\n    x15 = fgpartition(x8)\n    x16 = merge(x15)\n    x17 = palette(x8)\n    x18 = difference(x16, x17)\n    x19 = halve(x13)\n    x20 = rbind(greater, x19)\n    x21 = compose(x20, first)\n    x22 = rbind(greater, x15)\n    x23 = compose(x22, first)\n    x24 = rbind(both, x21)\n    x25 = ofcolor(x8, x9)\n    x26 = extract(x25, x24)\n    x27 = rbind(last, x13)\n    x28 = compose(x27, initset)\n    x29 = fork(insert, identity, x28)\n    x30 = apply(x29, x27)\n    x31 = dmirror(x30)\n    x32 = fill(x31, x9, x26)\n    x33 = extract(x31, x23)\n    x34 = ofcolor(x8, x10)\n    x35 = x34(x33)\n    x36 = ofcolor(x8, x9)\n    x37 = intersection(x35, x36)\n    O = fill(x32, x10, x37)\n    return O"], [1.0, "def solve_661e2d97(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rot90(I)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = rot270(I)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = rot90(I)\n    x10 = fgpartition(x9)\n    x11 = merge(x10)\n    x12 = rot270(I)\n    x13 = fgpartition(x12)\n    x14 = merge(x13)\n    x15 = rot90(I)\n    x16 = fgpartition(x15)\n    x17 = merge(x16)\n    x18 = rot270(I)\n    x19 = rbind(greater, x15)\n    x20 = chain(x19, minimum, shape)\n    x21 = fork(both, x17, x20)\n    x22 = sfilter(x1, x21)\n    x23 = increment(x17)\n    x24 = canvas(x18, x23)\n    x25 = tojvec(x324)\n    x26 = shift(x22, x25)\n    x27 = order(x26, identity)\n    x28 = apply(x27, x27)\n    x29 = lbind(cdece, x28)\n    x30 = apply(x29, x27)\n    x31 = papply(equality, x30, x28)\n    x32 = papply(add, x28, x31)\n    x33 = papply(connect, x32, x25)\n    x34 = fork(combine, vfrontier, hfrontier)\n    x35 = mapply(x34, x32)\n    x36 = shift(x33, x35)\n    O = underfill(x24, EIGHT, x36)\n    return O"], [1.0, "def solve_575c671b(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(position, SIX)\n    x3 = chain(x2, toivec, subgrid)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(dmirror, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = merge(x1)\n    x8 = compose(hmirror, x7)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x6, x1)\n    x11 = paint(I, x10)\n    x12 = vsplit(x11, TWO)\n    x13 = apply(x9, x12)\n    x14 = dmirror(x13)\n    x15 = x9(x14)\n    x16 = normalize(x15)\n    x17 = paint(x11, x16)\n    x18 = fork(remove, last, identity)\n    x19 = apply(x18, x13)\n    x20 = interval(ZERO, x5, ONE)\n    x21 = pair(x20, x19)\n    x22 = lbind(shift, x16)\n    x23 = mapply(x22, x21)\n    O = paint(x17, x23)\n    return O"], [1.0, "def solve_bfe3e16c(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(IGHTmost)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_62b5cd16(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(contained, TWO)\n    x6 = lbind(apply, size)\n    x7 = rbind(compose, palette)\n    x8 = lbind(lbind, contained)\n    x9 = chain(x5, x7, x8)\n    x10 = sfilter(x4, x9)\n    x11 = chain(size, dedupe, first)\n    x12 = fork(greater, x11, size)\n    x13 = lbind(ofcolor, I)\n    x14 = compose(x12, x13)\n    x15 = fork(both, x12, x14)\n    x16 = fork(either, x12, x15)\n    x17 = compose(x16, color)\n    x18 = fork(either, x17, x15)\n    x19 = fork(connect, x18, ulcorner)\n    x20 = mapply(x19, x10)\n    O = fill(I, EIGHT, x20)\n    return O"], [1.0, "def solve_08eb1586(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = objects(I, T, T, T)\n    x5 = totuple(x4)\n    x6 = apply(normalize, x5)\n    x7 = mostcommon(x6)\n    x8 = interval(ZERO, x2, ONE)\n    x9 = lbind(shift, x7)\n    x10 = rbind(multiply, x3)\n    x11 = chain(x10, x9, last)\n    x12 = mapply(x11, x8)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_61c02623(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [1.0, "def solve_42b05835(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = chain(normalize, identity,cale)\n    x7 = lbind(occurrences, I)\n    x8 = chain(f8, x7, x6)\n    x9 = compose(38, x8)\n    x10 = fork(rapply, x9, identity)\n    x11 = compose(first, x10)\n    x12 = lbind(rbind, multiply)\n    x13 = chain(x12, x11, x8)\n    x14 = lbind(apply, NEG_ONE)\n    x15 = lbind(ofcolor, I)\n    x16 = compose(x14, x15)\n    x17 = fork(difference, x16, delta)\n    x18 = compose(x17, x7)\n    x19 = fork(combine, x18, x15)\n    x20 = lbind(prapply, x5)\n    x21 = fork(x20, x19, identity)\n    x22 = compose(x5, x21)\n    x23 = fork(argmax, x17, x22)\n    x24 = power(x23, FOUR)\n    x25 = x24(x4)\n    x26 = x24(x25)\n    O = fill(x25, ZERO, x26)\n    return O"], [1.0, "def solve_7c3ac872(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [1.0, "def solve_463ee32b(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = size(x3)\n    x5 = greater(x4, ONE)\n    x6 = branch(x5, color, x2)\n    x7 = canvas(x6, UNITY)\n    x8 = normalize(x2)\n    x9 = lbind(shift, x8)\n    x10 = compose(x9, ulcorner)\n    x11 = multiply(TEN, UNITY)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = rbind(multiply, x12)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x4)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = mapply(x10, x17)\n    O = paint(x7, x18)\n    return O"], [1.0, "def solve_6c2aa5cf(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_9f89664f(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(bordering, inbox)\n    x4 = extract(x2, x3)\n    x5 = outbox(x4)\n    x6 = subgrid(x5, I)\n    O = replace(x6, ZERO, THREE)\n    return O"], [1.0, "def solve_84860a4d(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_1a24db3c(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = sizegmax(x3, size)\n    x5 = other(x3, x4)\n    x6 = color(x5)\n    x7 = toindices(x2)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = fill(I, x6, x9)\n    return O"], [1.0, "def solve_9bed2f37(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_a6abea14(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = rbind(shoot, DOWN)\n    x6 = objects(I, T, T, T)\n    x7 = mapply(x5, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_4eaef643(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(combine, vfrontier, hfrontier)\n    x7 = x6(x2)\n    x8 = fork(combine, x5, x7)\n    x9 = mapply(x8, x4)\n    O = underfill(I, EIGHT, x9)\n    return O"], [1.0, "def solve_64c2f410(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = astuple(dmirror, cmirror)\n    x5 = astuple(hmirror, identity)\n    x6 = combine(x4, x5)\n    x7 = rbind(canvas, x8)\n    x8 = compose(x7, dmirror)\n    x9 = merge(x6)\n    x10 = rbind(colorcount, x3)\n    x11 = chain(x10, double, x8)\n    x12 = compose(x11, cmirror)\n    x13 = extract(x11, x12)\n    x14 = width(I)\n    x15 = merge(x14)\n    x16 = center(x13)\n    x17 = invert(x16)\n    x18 = shift(x15, x17)\n    x19 = objects(I, T, F, T)\n    x20 = vmirror(x19)\n    x21 = shift(x20, x17)\n    x22 = pair(x19, x21)\n    x23 = color(x22)\n    x24 = remove(x18, x22)\n    x25 = argmax(x24, x16)\n    x26 = shape(x25)\n    x27 = canvas(x3, x26)\n    x28 = normalize(x25)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x28)\n    O = paint(x27, x30)\n    return O"], [1.0, "def solve_3df9379f(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, T)\n    x3 = compose(double, height)\n    x4 = fork(equality, x3, size)\n    x5 = compose(double, width)\n    x6 = fork(equality, x5, size)\n    x7 = fork(either, x4, x6)\n    x8 = rbind(equality, TWO)\n    x9 = lbind(colorfilter, x2)\n    x10 = rbind(sfilter, vline)\n    x11 = rbind(sfilter, hline)\n    x12 = chain(x10, x9, color)\n    x13 = chain(x8, size, x12)\n    x14 = chain(x11, x9, color)\n    x15 = chain(x8, size, x14)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x7, x16)\n    x18 = extract(x1, x17)\n    x19 = color(x18)\n    x20 = colorfilter(x2, x19)\n    x21 = first(x20)\n    x22 = vline(x21)\n    x23 = ulcorner(x18)\n    x24 = lrcorner(x18)\n    x25 = branch(x22, UP, LEFT)\n    x26 = add(x23, x25)\n    x27 = branch(x22, DOWN, RIGHT)\n    x28 = add(x24, x27)\n    x29 = initset(x28)\n    x30 = insert(x26, x29)\n    O = subgrid(x30, I)\n    return O"], [1.0, "def solve_b2730df1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(TEN, TEN)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = apply(x9, x11)\n    x13 = lbind(multiply, TEN)\n    x14 = apply(x13, x12)\n    x15 = mapply(x10, x14)\n    x16 = asobject(x15)\n    x17 = shift(x16, UNITY)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_1169bbf6(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = height(x2)\n    x6 = divide(x5, x5)\n    x7 =bgmax(x3, x6)\n    x8 = shape(x2)\n    x9 = divide(x8, x5)\n    x10 = Mobile(x7, x9)\n    x11 = maximum(x9)\n    x12 = subtract(x10, x11)\n    x13 = color(x2)\n    x14 = shift(x2, x13)\n    x15 = toindices(x14)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x15)\n    x18 = fill(I, x13, x17)\n    x19 = replace(x18, x13, x6)\n    O = fill(x19, x39, x17)\n    return O"], [1.0, "def solve_f743e93b(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_4f35d9ac(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_ed235b98(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_7fbcf58f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, identity, x16)\n    x19 = fork(remove, ulcorner, x7)\n    x20 = fork(shoot, identity, x19)\n    x21 = fork(recolor, identity, x15)\n    x22 = height(x11)\n    x23 = vsplit(x17, x22)\n    x24 = mapply(x18, x23)\n    x25 = paint(x24, x2)\n    x26 = width(x11)\n    x27 = fgpartition(x26)\n    x28 = merge(x27)\n    x29 = normalize(x28)\n    x30 = shift(x29, x27)\n    x31 = merge(x31)\n    O = paint(x20, x31)\n    return O"], [1.0, "def solve_faf7ad18(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_343dad42(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_f5cafb29(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = objects(I, T, F, T)\n    x4 = mapply(toindices, x3)\n    x5 = box(x2)\n    x6 = intersection(x5, x4)\n    x7 = uppermost(x6)\n    x8 = lowermost(x6)\n    x9 = objects(I, T, F, T)\n    x10 = add(x7, x8)\n    x11 = add(x9, x9)\n    x12 = compose(toivec, uppermost)\n    x13 = fork(shift, identity, x12)\n    x14 = mapply(x13, x5)\n    x15 = cover(I, x5)\n    x16 = paint(x15, x14)\n    O = paint(x16, x15)\n    return O"], [1.0, "def solve_619ac938(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NEG_TWO, NEG_TWO)\n    x4 = rbind(shift, x3)\n    x5 = mapply(x4, x2)\n    x6 = canvas(ZERO, x3)\n    x7 = asindices(x6)\n    x8 = paint(x7, x5)\n    x9 = asindices(x8)\n    x10 = box(x9)\n    x11 = fill(x8, EIGHT, x10)\n    x12 = lbind(shift, x8)\n    x13 = apply(x12, x11)\n    x14 = mapply(x13, x12)\n    O = fill(x8, TWO, x14)\n    return O"], [1.0, "def solve_fcf8b629(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_36200477(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = width(x4)\n    x6 = rbind(repeat, x5)\n    x7 = compose(x6, merge)\n    x8 = power(x7, TWO)\n    x9 = initset(x2)\n    x10 = insert(x8, x9)\n    x11 = insert(x5, x10)\n    x12 = decrement(x5)\n    x13 = astuple(x12, x12)\n    x14 = lbind(add, x13)\n    x15 = compose(x14, first)\n    x16 = fork(connect, x15, x7)\n    x17 = mapply(x16, x11)\n    O = fill(I, FOUR, x17)\n    return O"], [1.1, "def solve_64087bc1(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(x3)\n    x7 = palette(x4)\n    x8 = remove(x6, x7)\n    x9 = repeat(x6, ONE)\n    x10 = combine(x9, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(colorcount, x3)\n    x13 = argmax(x11, x12)\n    x14 = matcher(first, x13)\n    x15 = rbind(contained, x11)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = chain(positive, size, x17)\n    x19 = rbind(sfilter, x18)\n    x20 = compose(dmirror, x17)\n    x21 = chain(x19, x20, x17)\n    x22 = compose(hmirror, x21)\n    x23 = fork(combine, x22, vmirror)\n    x24 = fork(hmirror, x23, x19)\n    x25 = compose(hmirror, x24)\n    x26 = fork(vmirror, x25, x199)\n    x27 = fork(hmirror, x26, x15)\n    x28 = fork(combine, x27, x19)\n    x29 = lbind(remove, x10)\n    x30 = compose(x29, last)\n    x31 = fork(equality, last, x30)\n    x32 = compose(flip, x31)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(positive, size, x33)\n    x35 = rbind(sfilter, x4)\n    x36 = compose(x35, x4)\n    x37 = fork(c8, x34, x36)\n    x"], [1.1, "def solve_ad9a88ef(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b7534e12(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_21019e20(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = apply(x8, x5)\n    x10 = palette(x7)\n    x11 = contained(x10, x9)\n    x12 = matcher(x8, height)\n    x13 = decrement(x12)\n    x14 = lbind(subtract, x13)\n    x15 = branch(x11, x14, width)\n    x16 =070(x15)\n    x17 = ofcolor(x7, x6)\n    x18 = leastcolor(x17)\n    x19 = palette(x7)\n    x20 = remove(x18, x19)\n    x21 = other(x20, x17)\n    x22 = ofcolor(x7, x21)\n    x23 = recolor(x18, x22)\n    x24 = lbind(argmin, x17)\n    x25 = lbind(rbind, manhattan)\n    x26 = compose(x25, initset)\n    x27 = insert(x238, x26)\n    x28 = normalize(x27)\n    x29 = decrement(x28)\n    x30 = toindices(x29)\n    x31 = rbind(compose, initset)\n    x32 = lbind(rbind, manhattan)\n    x33 = compose(x31, x22)\n    x34 = chain(initset, x32, x33)\n    x35 = fork(insert, identity, x34)\n    x36 =11111111(x23)\n    x37 = dmirror(x36)\n    x38 =combine(x36, x37)\n    x39 =115(x38)\n    x40 = apply(x39, x30)\n    x41 ="], [1.1, "def solve_38c8bba5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = sfilter(x5, x7)\n    x9 = lbind(adjacent, x8)\n    x10 = sfilter(x8, x9)\n    x11 = extract(x10, x7)\n    x12 = ulcorner(x11)\n    x13 = subgrid(x11, I)\n    x14 =:\n    0000006\n    0300240\n    0000006\n    0030024\n    0530230\n    0000000\n    \"\"\"\n    x1 = objects(x13, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = merge(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(x4)\n    x8 = rbind(multiply, x4)\n    x9 = apply(x8, x3)\n    x10 = lbind(remove, ZERO)\n    x11 = apply(x10, x9)\n    x12 = lbind(lbind, shift)\n    x13 = apply(x12, x11)\n    x14 = lbind(ofcolor, x5)\n    x15 = mapply(x14, x12)\n    x16 = fill(x13, ZERO, x15)\n    x17 = x6(x16)\n    x18 = objects(x16, T, F, T)\n    x19 = rbind(adjacent, x5)\n    x20 = sfilter(x18, x19)\n    x21 = rbind(adjacent, x5)\n    x22 = sfilter(x20, x21)\n    x23"], [1.1, "def solve_59481403(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = insert(x2, x16)\n    x18 = sfilter(x17, x16)\n    x19 = lbind(apply, DOWN)\n    x20 = chain(x19, width, x11)\n    x21 = fork(mapply, x20, x12)\n    x22 = fork( enhance07, x21, partition)\n    x23 = matcher(x22, x4)\n    x24 = fork(both, x785, x23)\n    x25 = fork(intersection, x24, toindices)\n    x26 = mfilter(x25, x24)\n    x27 =1097(x26)\n    x28 = objects(x5, T, F, T)\n    x29 = rbind(contained, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x27, x30)\n    x32 = reserves47(x31)\n    x33 = palette(x32)\n    x34 = totuple(x33)\n    x35 = rbind(contained, x34)\n    x36 = compose(x35, first)\n    x37 = sfilter(x33, x36)\n    x38 = sfilter(x33, x36)\n    x39 = height("], [1.1, "def solve_c5f9156b(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = sfilter(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = sfilter(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first,"], [1.1, "def solve_3dfa1532(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_06f8e3e3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = objects(I, T, T, T)\n    x21 = colorfilter(x20, x18)\n    x22 = lowermost(x21)\n    x23 = rightmost(x21)\n    x24 = lowermost(x23)\n    x25 = width(x200)\n    x26 = hsplit(x25, x22)\n    x27 = uppermost(x21)\n    x28 = rightmost(x21)\n    x29 = uppermost(x23)\n    x30 = hsplit(x27, x28)\n    x31 = leftmost(x21)\n    x32 = rightmost(x21)\n    x33 = astuple(x29, x30)\n    x34 = combine(x31, x33)\n    x35 =024(x34, TWO)\n    x36 = lbind(10, uppermost)\n    x37 = lbind(lbind, shift)\n    x38 = compose(x36, x37)\n    x39 = apply(x38, x35)\n    x40 = rbind(contained, x39)\n    x41 = compose(x"], [1.1, "def solve_1b1c097e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = fork(compose, initset, lbind)\n    x26 = lbind(rbind, add)\n    x27 = compose(x26, x25)\n    x28 = lbind(compose, x27)\n    x29 =+24(x12)\n    x30 = compose(x28, x28)\n    x31 = fork(x27, x29, x30)\n    x32 = compose(first, x71)\n    x33 = fork(0010, x31, x32)\n    x34 = mapply(x33, x29)\n    x35 = merge(x2)\n    x36 = cover(I, x35)\n    x37 = paint(x36, x34)\n    O = x"], [1.1, "def solve_8d4d2ec1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_3f2d1ade(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_6aa0529d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = rbind(rapply, x11)\n    x13 = compose(first, x12)\n    x14 = chain(x10, x13, initset)\n    x15 = apply(x14, x10)\n    x16 = lbind(full (% x17)\n    x17 = lbind(rot90, x16)\n    x18 = chain(x17, x16, x9)\n    x19 = apply(x18, x15)\n    x20 = lbind(colorfilter, x15)\n    x21 = compose(x20, matcher)\n    x22 = fork(sfilter, identity, x21)\n    x23 = fork(combine, identity, x22)\n    x24 = lbind(occurrences, I)\n    x25 = compose(x24, x18)\n    x26 = fork(mapply, x23, x25)\n    x27 = product(x15, x25)\n    x28 = power(x26, FOUR)\n    x29 = x28(x27)\n    x30 = toivec(x29)\n    x31 = shift(x3, x30)\n    x32 = fork(combine, x76, x26)\n    x33 = apply(x32, x31)\n    x34 = mapply(x27, x33)\n    x35 =:\n     x24, ONE)\n    x36 = shift(x34, x35)\n    x37 =34(x36)\n    x38 = fork(mapply, x"], [1.1, "def solve_c28abf47(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = astuple(UNITY, DOWN_LEFT)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = product(x4, x5)\n    x7 = compose(hline, first)\n    x8 = compose(first, last)\n    x9 = fork(equality, x7, x8)\n    x10 = sfilter(x6, x9)\n    x11 = compose(62, first)\n    x12 = compose(last, last)\n    x13 = fork(equality, x11, x12)\n    x14 = sfilter(x10, x13)\n    x15 = compose(left, first)\n    x16 = compose(leftmost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = compose(uppermost, first)\n    x19 = compose(uppermost, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(ulcorner, first)\n    x22 = compose(flip, x21)\n    x23 = fork(add, x22, x20)\n    x24 = fork(connect, x17, x23)\n    x25 = compose(x24, toindices)\n    x26 = lbind(matcher, leastcolor)\n    x27 = compose(x26, x25)\n    x28 = fork(sfilter, x27, x26)\n    x29 = compose(color, x28)\n    x30 = fork(recolor, x29, x1)\n    x31 = mapply(x30, x10)\n    x32 = paint(I, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = hconcat(x33, x10)\n    x37 = hconcat(x34, x20)\n    x38 = vconcat(x36, x27)\n    O = vconcat(x37,"], [1.1, "def solve_8df393ed(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_ae7416c1(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = subgrid(x2, I)\n    x4 = maximum(x3)\n    x5 = replace(x3, ZERO, x4)\n    x6 = replace(x5, ONE, x4)\n    x7 = compress(x6)\n    x8 = width(x7)\n    x9 = halve(x8)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = height(x7)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = height(x7)\n    x16 = decrement(x15)\n    x17 = tojvec(x16)\n    x18 = width(x7)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = initset(x17)\n    x22 = insert(x14, x21)\n    x23 = insert(x20, x22)\n    x24 = branch(x1, x23, x8)\n    x25 = branch(x7, x23, x8)\n    x26 = branch(x10, x24, x25)\n    x27 = branch(x7, x26, x1)\n    x28 = width(x7)\n    x29 = decrement(x28)\n    x30 = tojvec(x29)\n    x31 = initset(x30)\n    x32 = insert(x26, x31)\n    x33 = insert(x28, x32)\n    x34 = branch(x33, x26, x25)\n    x35 = branch(x7, x26, x24)\n    x36 = fork(combine, vfrontier, hfrontier)\n    x37 = x36(x34)\n    x38 = x36(x33)\n    x39 = toivec(x38)\n    x40 = tojvec(x39)\n    x41 = compose(x38, x37)"], [1.1, "def solve_04a2a43e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = mostcolor(x5)\n    x7 = cellwise(I, x5, x4)\n    x8 = replace(x7, x6, x5)\n    x9 = height(x8)\n    x10 = increment(x9)\n    x11 = width(x8)\n    x12 = increment(x11)\n    x13 = divide(x10, x12)\n    x14 = divide(x13, x5)\n    x15 = width(x8)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, x12)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, x12)\n    x20 = rbind(multiply, x14)\n    x21 = rbind(divide, x14)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x10)\n    x25 = rbind(divide, x10)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, first)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x38, x30, x31)\n    x33 = compose(x32, x32)\n    x34 = pair(x19, x8)\n    x35 = compose(x33, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x36, x35)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind("], [1.1, "def solve_5ba019ef(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = colorfilter(x8, x6)\n    x10 = palette(x9)\n    x11 = remove(x6, x10)\n    x12 = other(x11, x4)\n    x13 = colorcount(x7, x12)\n    x14 = positive(x13)\n    x15 = branch(x14, dmirror, identity)\n    x16 = x15(x7)\n    x17 = ofcolor(x16, x12)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = numcolors(x19)\n    x21 = rightmost(x17)\n    x22 = decrement(x21)\n    x23 = positive(x22)\n    x24 = uppermost(x17)\n    x25 = lbind(greater, x24)\n    x26 = compose(x25, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(x17, x27, last)\n    x29 = rbind(sfilter, x28)\n    x30 = compose(x29, first)\n    x31 = rbind(greater, x15)\n    x32 = compose(x31, last)\n    x33 = rbind(greater, x17)\n    x34 = compose(x33, first)\n    x35 = lbind(apply, last)\n    x36 = lbind(chain, x17)\n    x37 = lbind(x36, astuple)\n    x38 = lbind(rbind, x24)\n    x39 = compose(x37, x38)\n    x40 = lbind(compose, x14)\n    x41 = chain(x39, x40"], [1.1, "def solve_45f4ce34(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f82cfcde(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x2)\n    x5 =initset(ORIGIN)\n    x6 = recolor(x2, x5)\n    x7 = insert(x3, x6)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, size)\n    x10 = sfilter(x7, x9)\n    x11 = totuple(x10)\n    x12 = apply(color, x11)\n    x13 = increment(x12)\n    x14 = canvas(x2, x13)\n    x15 = apply(normalize, x12)\n    x16 = lbind(toindices, x12)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = lbind(mapply, x18)\n    x20 = lbind(recolor, x2)\n    x21 = rbind(mapply, x20)\n    x22 = chain(x19, x21, x18)\n    x23 = lbind(paint, x14)\n    x24 = chain(x23, x8, x22)\n    x25 = astuple(x13, x24)\n    x26 = astuple(x15, x24)\n    x27 = astuple(x26, x24)\n    x28 = astuple(x15, x27)\n    x29 = astuple(x24, x28)\n    x30 = power(x29, TWO)\n    x31 = rbind(rapply, x13)\n    x32 = compose(initset, x15)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = compose(x20, x34)\n    x36 = fork(paint, x35, x31)\n    x37 = mapply(x36, x15)\n    x38 = fill(x37, x2, x35)\n    x39"], [1.1, "def solve_bc18e6e6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_0c27f2ae(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =51821118\n    5525155\n    5152415\n    5525155\n    2552515\n    \"\"\"\n    x1 = lbind(toobject, I)\n    x2 = compose(numcolors, x1)\n    x3 = apply(x2, x1)\n    x4 = decrement(x3)\n    x5 =chain(numcolors, x4, toindices)\n    x6 = matcher(x5, ZERO)\n    x7 = lbind(ofcolor, I)\n    x8 = leastcolor(I)\n    x9 = palette(I)\n    x10 = remove(x8, x9)\n    x11 = lbind(ofcolor, I)\n    x12 = compose(x11, last)\n    x13 = argmin(x10, x12)\n    x14 = ofcolor(I, x13)\n    x15 = normalize(x14)\n    x16 = ulcorner(x15)\n    x17 = ulcorner(x14)\n    x18 = subgrid(x16, I)\n    x19 = numcolors(x18)\n    x20 = equality(x19, TWO)\n    x21 = branch(x20, identity, vmirror)\n    x22 = ofcolor(x21, x13)\n    x23 = normalize(x22)\n    x24 = ulcorner(x23)\n    x25 = llcorner(x23)\n    x26 = shoot(x24, UNITY)\n    x27 = shoot(x25, NEG_UNITY)\n    x28 = combine(x26, x27)\n    x29 = underfill(x18, x13, x28)\n    x30 = normalize(x23)\n    x31 = replace(x29, x16, x30)\n    x32 = ofcolor(x31, x13)\n    x33 = ofcolor(x31, x14)\n    x34 = combine(x32, x33)\n    x35 = combine(x32, x34)\n    x36 = x15(x35)"], [1.1, "def solve_9c9dd950(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x279 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dneighbors, x34)\n    x36 = fork(mapply, x35, x32)\n    x37 = sfilter(x27, x36)\n    x38 = fork(pair, x3000, x37)\n    x39 ="], [1.1, "def solve_27f59c64(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_0a0230d4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gordering, I)\n    x22 = mfilter(x21, x22)\n    x23 = argmin(x20, x5)\n    x24 = other(x22, x23)\n    x25 = color(x24)\n    x26 = toindices(x24)\n    x27 = apply(first, x26)\n    x28 = toindices(x24)\n    x29 = apply(last, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = extract(x32, x21)\n    x34 = remove(x33, x32)\n    x35 = argmax(x34, x33)\n    x36 = shape(x35)\n    x37 = canvas(x25, x36)\n    x38 = multiply(x36, x37)\n    x39 = rbind(multiply, x38)\n    x40 = apply(x39, x3)\n    x41 = rbind(to"], [1.1, "def solve_fa76820f(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_8b08105e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_705c4dc3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_9e23742d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_c00d33e1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_68d611a6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 = tojvec(x38)\n    x40 = shift(x34, x39)\n    x41 = vapply(x"], [1.1, "def solve_8084a090(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_5343d245(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 =483 color(x3)\n    x5 = subgrid(x3, I)\n    x6 = lbind(remove, DOWN)\n    x7 = chain(x6, palette, x2)\n    x8 = compose(x7, ulcorner)\n    x9 = extract(x1, x8)\n    x10 = height(x9)\n    x11 = width(x9)\n    x12 = vsplit(x5, x10)\n    x13 = hsplit(x9, x11)\n    x14 = merge(x12)\n    x15 = extract(x13, x14)\n    x16 = apply(x16, x13)\n    x17 =\n    x22 = vmirror(x15)\n    x18 = hmirror(x15)\n    x19 = extract(x17, x18)\n    x20 = astuple(x116, x169)\n    x21 = crop(x20, ORIGIN, x20)\n    x22 = hmirror(x21)\n    x23 = vmirror(x22)\n    x24 = combine(x19, x23)\n    x25 = branch(x22, x21, x24)\n    x26 = compose(size, x25)\n    x27 = apply(x26, x24)\n    x28 = vmirror(x27)\n    x29 = papply(pair, x27, x28)\n    x30 = lbind(apply, maximum)\n    x31 = apply(x30, x29)\n    x32 = cmirror(x31)\n    x33 = papply(pair, x31, x32)\n    x34 = apply(x30, x33)\n    x35 = papply(pair, x34, x25)\n    x36 = apply(x30, x35)\n    x37 = papply(pair, x34, x36)\n    x38 = apply(x30, x37)\n    x39 = papply(pair, x"], [1.1, "def solve_2e0323b9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 =Example output:\n    333333\n    333333\n    333333\n    333333\n    383383\n    333333\n    333333\n    333333\n    333333\n    333333\n    000080\n    000099\n    000000\n    000099\n    000000\n    111111\n    333333\n    111111\n    333333\n    111111\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = replace(I, x1, THREE)\n    x4 = argmax(x2, size)\n    x5 = argmin(x2, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x3)\n    x10 = hline(x5)\n    x11 = hmirror(x9)\n    x12 = vmirror(x9)\n    x13 = branch(x10, x11, x12)\n    x14 = branch(x10, x7, ZERO)\n    x15 = branch(x10, ZERO, x8)\n    x16 = asobject(x13)\n    x17 = matcher(first, THREE)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = ulcorner(x4)\n    x21 = sfilter(x16, x10)\n    x22 = ulcorner(x8)\n    x23 = sfilter(x16, x12)\n    x24 = ulcorner(x8)\n    x25 = sfilter(x16, x14)\n    x26 = ulcorner(x14)\n    x27 = sfilter(x16, x22)\n    x28 = ulcorner(x17)\n    x29 = sfilter(x16, x24)\n    x30 = subgrid(x13, x3)\n    x31 =8882(tojvec, x50)\n    x32 = subtract(x31, x30)\n    x33 ="], [1.1, "def solve_3a408707(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_9dfb239d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_5743061a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, SIX)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39"], [1.1, "def solve_35d624e0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_67b26d29(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x27)\n    x29 = fork(x26, x25, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_baf6ef5e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_be2877fb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_fc24f6e4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmax(x1, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = mostcolor(x3)\n    x9 = tophalf(x6)\n    x10 = insert(x9, x7)\n    x11 = objects(x10, F, F, T)\n    x12 = argmax(x11, numcolors)\n    x13 =22(x12)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = last(x15)\n    x17 = remove(x16, x15)\n    x18 = lbind(argmin, x17)\n    x19 = lbind(rbind, manhattan)\n    x20 = compose(x19, initset)\n    x21 = compose(x18, x20)\n    x22 = fork(astuple, x21, identity)\n    x23 = apply(x22, x15)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = chain(x23, x24, initset)\n    x27 = lbind(argmin, x5)\n    x28 = lbind(remove, x12)\n    x29 = compose(x28, last)\n    x30 = chain(x27, x26, x29)\n    x31 = apply(x30, x15)\n    x32 = maximum(x31)\n    x33 = increment(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = astuple(x32, x34)\n    x36 = astuple(x32, x305)\n    x37 = combine(x35, x36)\n    x38 = rbind(contained, x37)\n    x39 = compose(x38, last)\n    x40 = sfilter(x19, x39)"], [1.1, "def solve_92443599(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_e5ed701a(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = asobject(I)\n    x2 = leastcolor(I)\n    x3 = objects(I, T, T, T)\n    x4 = argmin(x3, size)\n    x5 = delta(x4)\n    x6 = objects(I, T, T, T)\n    x7 = rbind(colorcount, x2)\n    x8 = argmax(x6, x7)\n    x9 = subgrid(x8, I)\n    x10 = matcher(identity, x2)\n    x11 = rbind(subtract, TWO)\n    x12 = rbind(divide, TWO)\n    x13 = chain(x11, x12, frontiers)\n    x14 = fork(equality, x13, identity)\n    x15 = sfilter(x5, x14)\n    x16 = maximum(x15)\n    x17 = increment(x16)\n    x18 = sfilter(x5, x17)\n    x19 = lbind(intersection, x7)\n    x20 = lbind(shift, x8)\n    x21 = chain(x19, x20, shape)\n    x22 = compose(size, x21)\n    x23 = argmax(x18, x22)\n    x24 = rbind(contained, x23)\n    x25 = compose(x24, vline)\n    x26 = sfilter(x5, x25)\n    x27 =boat(x26)\n    x28 = objects(x9999, T, T, T)\n    x29 = colorfilter(x28, x2)\n    x30 = rbind(toobject, x25)\n    x31 = chain(x30, initset, delta)\n    x32 = matcher(x31, x17)\n    x33 = fork(both, x15, x32)\n    x34 = rbind(toobject, x25)\n    x35 = chain(numcolors, x24, x28)\n    x36 = matcher(x35, ONE)\n    x37 = fork(both, x32, x36)\n    x38 = sfilter(x29, x36)\n"], [1.1, "def solve_b8b6c828(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)\n"], [1.1, "def solve_a12345ea(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_3d62efeb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = argmin(x1, x3)\n    x5 = rbind(colorcount, x4)\n    x6 = compose(x5, last)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(I)\n    x10 = merge(x9)\n    x11 = paint(I, x10)\n    x12 = objects(x11, T, F, F)\n    x13 = colorfilter(x12, x4)\n    x14 = rbind(adjacent, DOWN)\n    x15 = mfilter(x13, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = subgrid(x16, x17)\n    x19 = vmirror(x18)\n    x20 = objects(x19, T, F, F)\n    x21 = colorfilter(x20, x4)\n    x22 = rbind(adjacent, x6)\n    x23 = mfilter(x21, x22)\n    x24 = replace(x11, x4, x9)\n    x25 = replace(x24, x8, EIGHT)\n    x26 = combine(x23, x25)\n    x27 = first(x26)\n    x28 =77(x27)\n    x29 = colorfilter(x18, x4)\n    x30 = rbind(extract, x28)\n    x31 = apply(x30, x29)\n    x32 = x74(x31)\n    x33 = x9(x32)\n    x34 = ofcolor(x33, x4)\n    x35 = rbind(contained, x34)\n    x36 = compose(x35, last)\n    x37 = sfilter(x34, x36)\n    x38 = chain(merge, x33, x37)\n    x39 = mapply(x38, x43)\n    O = paint(x11, x39)\n"], [1.1, "def solve_eb00dc14(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = uppermost(x2)\n    x13 = subtract(x6, x12)\n    x14 = shift(x11, x13)\n    x15 = leftmost(x2)\n    x16 = rightmost(x2)\n    x17 = lbind(greater, x15)\n    x18 = compose(x17, first)\n    x19 = rbind(greater, x16)\n    x20 = compose(x19, first)\n    x21 = rbind(both, x18)\n    x22 = sfilter(x4, x21)\n    x23 = uppermost(x2)\n    x24 = leftmost(x2)\n    x25 = sfilter(x4, x18)\n    x26 = leftmost(x2)\n    x27 = rbind(greater, x25)\n    x28 = compose(x27, first)\n    x29 = rbind(greater, x24)\n    x30 = compose(x29, first)\n    x31 = compose(leftmost, x77)\n    x32 = lbind( greater, x dom)\n    x33 = compose(x32, uppermost)\n    x34 = fork(equality, x33, x24)\n    x35 = fork(equality, x305, x24)\n    x36 = fork(either, x34, x35)\n    x37 = rbind(56, x22)\n    x38 = compose(x37, uppermost)\n    x39 = rbind(sfilter, x38)\n    x40 = chain(positive, x39, dmir"], [1.1, "def solve_088b3b8b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = width(x4)\n    x6 = astuple(ONE, x5)\n    x7 = canvas(x2, x6)\n    x8 = fill(x7, EIGHT, x4)\n    x9 = box(x2)\n    x10 = fill(x8, TWO, x9)\n    x11 = uppermost(x2)\n    x12 = uppermost(x2)\n    x13 = subtract(x11, x12)\n    x14 = leftmost(x2)\n    x15 = leftmost(x2)\n    x16 = subtract(x14, x15)\n    x17 = lowermost(x2)\n    x18 = lowermost(x2)\n    x19 = subtract(x17, x18)\n    x20 = astuple(x13, x19)\n    x21 = matcher(first, ZERO)\n    x22 = compose(flip, x21)\n    x23 = rbind(sfilter, x22)\n    x24 = chain(positive, size, x23)\n    x25 = rbind(sfilter, x24)\n    x26 = compose(dmirror, x25)\n    x27 = chain(x24, x26, x55)\n    x28 = rbind(sfilter, x27)\n    x29 = compose(dmirror, x28)\n    x30 = chain(x24, x29, x55)\n    x31 = rbind(subtract, x2)\n    x32 = lbind(insert, x2)\n    x33 = compose(x32, toindices)\n    x34 = chain(x33, x27, x30)\n    x35 = fork(sfilter, x26, x34)\n    x36 = fork(combine, x35, x21)\n    x37 = fork(recolor, color, x36)\n    x38 = mapply(x37, x3)\n    O = paint(x10,"], [1.1, "def solve_87458c8d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_c30eb44d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = argmax(x3, x4)\n    x9 = argmin(x3, x4)\n    x10 = x7(x8)\n    x11 = x7(x9)\n    x12 = hfrontier(x11)\n    x13 = hfrontier(x10)\n    x14 =recolor(x9, ZERO)\n    x15 = recolor(x14, x12)\n    x16 = mostcolor(I)\n    x17 = other(x13, x16)\n    x18 = color(x17)\n    x19 = cellwise(x10, x17, x19)\n    x20 = astuple(x16, x13)\n    x21 = rbind(multiply, x20)\n    x22 = apply(x21, x19)\n    x23 = combine(x15, x22)\n    x24 = prapply(connect, x23, x8)\n    x25 = mapply(x24, x23)\n    x26 =710001666(x25)\n    x27 = numcolors(x26)\n    x28 = equality(x27, TWO)\n    x29 = lbind(contained, x28)\n    x30 = lbind(extract, x25)\n    x31 = compose(x29, x30)\n    x32 = fork(add, identity, x31)\n    x33 = compose(x32, toindices)\n    x34 = mapply(x33, x29)\n    x35 = cover(x19, x34)\n    x36 = astuple(x16, x13)\n    x37 = shift(x34, x36)\n    x38 = toindices(x37)\n    x39 = mapply("], [1.1, "def solve_c248aa2e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = extract(x1, x2)\n    x4 = center(x3)\n    x5 =8850888856(x4)\n    x6 = shift(x5, x4)\n    x7 = ulcorner(x6)\n    x8 = difference(x1, x6)\n    x9 = compose(first, toindices)\n    x10 = chain(decrement, minimum, x9)\n    x11 = x10(x8)\n    x12 = lbind(shift, x6)\n    x13 = rbind(difference, x11)\n    x14 = compose(x12, x13)\n    x15 = chain(size, x12, x14)\n    x16 =greater(x15, ZERO)\n    x17 = branch(x16, height, width)\n    x18 = x17(x6)\n    x19 = decrement(x18)\n    x20 = toivec(x19)\n    x21 = add(x20, TWO)\n    x22 = canvas(ZERO, x21)\n    x23 = asobject(x22)\n    x24 = occurrences(I, x23)\n    x25 = mapply(toindices, x24)\n    x26 = lbind(shift, x23)\n    x27 = occurrences(I, x26)\n    x28 = mapply(toindices, x27)\n    x29 = fill(I, ZERO, x28)\n    x30 = mapply(x26, x29)\n    O = fill(x29, ONE, x30)\n    return O"], [1.1, "def solve_4a7f8f11(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = astuple(dmirror, vmirror)\n    x9 = astuple(hmirror, I)\n    x10 = astuple(rot90, x9)\n    x11 = astuple(rot180, x9)\n    x12 = combine(x10, x11)\n    x13 = combine(x7, x12)\n    x14 =1702291918)\n    x15 = shape(I)\n    x16 = maximum(x15)\n    x17 = astuple(x16, x16)\n    x18 = x17(I)\n    x19 = rbind(shoot, DOWN_LEFT)\n    x20 = rbind(shoot, EIGHT)\n    x21 = fork(combine, x19, x20)\n    x22 = rbind(shoot, UP_RIGHT)\n    x23 = rbind(shoot, DOWN_LEFT)\n    x24 = fork(combine, x22, x23)\n    x25 = fork(combine, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(x26, x13)\n    x28 = mapply(x27, x29)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_8563646a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = matcher(x11, x17)\n    x19 =19558(c909, x16)\n    x20 = increment(x19)\n    x21 = lbind(subtract, x20)\n    x22 = chain(positive, size, x21)\n    x23 = sfilter(x1, x18)\n    x24 = crop(x7, ORIGIN, x20)\n    x25 = argmax(x23, x22)\n    x26 = ulcorner(x25)\n    x27 = invert(x26)\n    x28 = shift(x25, x27)\n    O = fill(x7, x4, x28)\n    return O"], [1.1, "def solve_dde11367(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = ofcolor(I, x24)\n    x26 = ulcorner(x25)\n    x27 =4 toivecorner(x25)\n    x28 = shift(x25, x27)\n    x29 = rbind(multiply, x28)\n    x30 = apply(x29, x26)\n    x31 =39e21 x30(x15)\n    x32 = rbind(shift, x31)\n    x33 = mapply(x32, x29)\n    O = fill(I, x24, x33)\n    return O"], [1.1, "def solve_453d6a43(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = rbind( extract, x3)\n    x5 = compose(last,last)\n    x6 = rbind(subtract, TWO)\n    x7 = chain(invert, x4, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = fork(multiply, identity, x4)\n    x10 = mapply(x9, x2)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, x7)\n    x14 = fork(equality, identity, x13)\n    x15 = sfilter(x10, x14)\n    x16 = compose(maximum, shape)\n    x17 = apply(x16, x15)\n    x18 = maximum(x17)\n    x19 = matcher(x16, x18)\n    x20 = sfilter(x15, x19)\n    x21 =2bordering(I)\n    x22 =022(x21, x20)\n    x23 = argmin(x22, uppermost)\n    x24 = width(x23)\n    x25 = subtract(x18, x24)\n    x26 = increment(x25)\n    x27 = width(x23)\n    x28 = subtract(x26, x27)\n    x29 = interval(x28, x26, ONE)\n    x30 = width(x23)\n    x31 = interval(ZERO, x30, ONE)\n    x32 = sbind(multiply, x31)\n    x33 = apply(x32, x29)\n    x34 = lbind(shift, x23)\n    x35 = mapply(x34, x33)\n    x36 = fill(x23, FOUR, x35)\n    x37 = paint(x36, x31)\n    O = paint(x37, x30)\n    return O"], [1.1, "def solve_5c90ab08(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(acent33, NEG_UNITY)\n    x5 = fork(subtract, maximum, minimum)\n    x6 = compose(x5, shape)\n    x7 = fork(equality, x6, ZERO)\n    x8 = lbind(apply, uppermost)\n    x9 = chain(positive, x8, size)\n    x10 = lbind(return O"], [1.1, "def solve_c99179a8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = other(x4, x4)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = subgrid(x5, x12)\n    x14 = dance2004(x13)\n    x15 = ofcolor(x14, x5)\n    x16 = subgrid(x15, x14)\n    x17 = leastcolor(x16)\n    x18 = mostcolor(x16)\n    x19 = ofcolor(x16, x5)\n    x20 = replace(x16, x18, x ZERO)\n    x21 = insert(x17, x19)\n    x22 =125(x21)\n    x23 = replace(x16, x18, x0)\n    x24 = insert(x23, x19)\n    x25 =15211(x24)\n    x26 = toindices(x25)\n    x27 = rbind(add, LEFT)\n    x28 = lbind(rbind, manhattan)\n    x29 = rbind(multiply, x15)\n    x30 = chain(x28, x29, initset)\n    x31 = apply(x30, x26)\n    x32 = fork(add, identity, x30)\n    x33 = apply(x32, x31)\n    x34 = box(x35)\n    x35 = cover(x14, x34)\n    x36 = difference(x35, x33)\n    x37 = fill(x35, x5, x36)\n    x38 = mapply(delta, x37)\n    O = fill(x37, x5, x38)\n    return O"], [1.1, "def solve_2e29fc49(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = matcher(first, TWO)\n    x4 = rbind(sfilter, x3)\n    x5 = lbind(recolor, FOUR)\n    x6 = chain(x5, color, x4)\n    x7 = fork(combine, hfrontier, vfrontier)\n    x8 = lbind(compose, x2)\n    x9 = lbind(rbind, contained)\n    x10 = lbind( chain, x8)\n    x11 = lbind(x10, backdrop)\n    x12 = chain(x11, x9, x4)\n    x13 = fork(apply, x12, x4)\n    x14 = compose(x13, height)\n    x15 = difference(x1, x2)\n    x16 = decrement(x15)\n    x17 = chain(decrement, halve, shape)\n    x18 = fork(greater, x14, x17)\n    x19 =00(x2)\n    x20 = matcher(x18, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, x12)\n    x23 = fork(subtract, x22, both)\n    x24 = chain(x10, x23, x8)\n    x25 = fork(compose, x24, x23)\n    x26 = lbind(lbind, extract)\n    x27 = lbind(x26, x2)\n    x28 = compose(x27, x26)\n    x29 = fork(apply, x28, x27)\n    x30 = fork(mapply, x29, x25)\n    x31 = fork(combine, x29, x30)\n    x32 = mapply(x31, x15)\n    O = paint(I, x32)\n    return O"], [1.1, "def solve_a748367b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = paint(x4, x3)\n    x6 = fork(multiply, height, width)\n    x7 = x6(x2)\n    x8 =757(vconcat, x5, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = colorfilter(x9, x3)\n    x11 = merge(x10)\n    x12 = subgrid(x11, x8)\n    x13 = hconcat(x12, x12)\n    x14 = hconcat(x13, x8)\n    x15 = vconcat(x14, x14)\n    x16 = vconcat(x15, x8)\n    O = replace(x16, x3, x5)\n    return O"], [1.1, "def solve_d3892113(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(index, TWO)\n    x4 = compose(x3, palette)\n    x5 = matcher(size, SIX)\n    x6 = compose(flip, x5)\n    x7 = matcher(first, TWO)\n    x8 = compose(flip, x7)\n    x9 = fork(equality, x4, x8)\n    x10 = rbind(toobject, I)\n    x11 = compose(x10, palette)\n    x12 = matcher(x11, TWO)\n    x13 = compose(flip, x12)\n    x14 = fork(both, x9, x13)\n    x15 = fork(both, x11, x14)\n    x16 = extract(x2, x15)\n    x17 = underfill(I, TWO, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = colorfilter(x18, ZERO)\n    x20 = rbind(toobject, x17)\n    x21 = compose(x20, trim)\n    x22 =232(x19)\n    x23 = rbind(colorcount, TWO)\n    x24 = valmax(x22, x23)\n    x25 = matcher(x21, x24)\n    x26 =flip(x25, x23)\n    x27 = sfilter(x6, x26)\n    x28 = merge(x27)\n    x29 = fill(x17, TWO, x28)\n    x30 = objects(x29, T, F, T)\n    x31 = apply(toindices, x30)\n    x32 = normalize(x31)\n    x33 = lbind(shift, x32)\n    x34 = mapply(x33, x3)\n    O = paint(x29, x34)\n    return O"], [1.1, "def solve_d397fee3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = vmirror(x2)\n    x4 = objects(I, T, F, T)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subgrid(x5, I)\n    x8 =885(x7)\n    x9 =ad(x8, x3)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = size(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x10, x13)\n    x15 = merge(x14)\n    x16 = shift(x15, x12)\n    x17 = mapply(delta, x16)\n    O = fill(x7, x6, x17)\n    return O"], [1.1, "def solve_126f99b5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain( paint, leastcolor, box)\n    x5 = apply(x4, x1)\n    x6 = interval(ONE, FIVE, ONE)\n    x7 = rbind(multiply, THREE)\n    x8 = toivec(NEG_TWO)\n    x9 = rbind(multiply, FOUR)\n    x10 = bottomhalf(x2)\n    x11 = lbind(add, x8)\n    x12 = rbind(multiply, FOUR)\n    x13 = compose(x11, x12)\n    x14 = chain(x7, x10, x13)\n    x15 =4444(x5)\n    x16 =4444(x10)\n    x17 =4464(x16)\n    x18 =47(x15)\n    x19 = compose(toivec, x18)\n    x20 = lbind(4447, x17)\n    x21 = compose(initset, x19)\n    x22 = fork(rapply, x21, x20)\n    x23 = compose(first, x22)\n    x24 = fork(sfilter, x23, identity)\n    x25 = chain(backdrop, x24, x20)\n    x26 = mapply(x25, x6)\n    O = fill(x3, EIGHT, x26)\n    return O"], [1.1, "def solve_99cbc37a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = partition(I)\n    x10 = sizce60(x9)\n    x11 =82(x10)\n    x12 = apply(first, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = cmirror(x12)\n    x17 = paint(I, x13)\n    x18 = paint(x17, x14)\n    x19 = paint(x18, x15)\n    O = paint(x19, x16)\n    return O"], [1.1, "def solve_352c3249(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    x3 = normalize(x2)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = equality(x4, FIVE)\n    x7 = equality(x5, FOUR)\n    x8 = astuple(x6, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = ofcolor(I, TWO)\n    x11 = ulcorner(x10)\n    x12 = ofcolor(I, ONE)\n    x13 = center(x10)\n    x14 =1215(x13)\n    x15 = gravitate(x14, x10)\n    x16 = subgrid(x15, I)\n    x17 = branch(x6, x15, x16)\n    x18 = replace(x17, TWO, ZERO)\n    x19 = normalize(x18)\n    x20 = occurrences(x19, x2)\n    x21 =0replace(x20, ONE)\n    x22 = outbox(x21)\n    x23 = center(x22)\n    x24 = subtract(x23, x17)\n    x25 = branch(x6, x24, x16)\n    x26 = normalize(x25)\n    x27 = occurrences(x26, x2)\n    x28 = combine(x26, x27)\n    x29 = rbind(toobject, I)\n    x30 = chain(first, x29, initset)\n    x31 = matcher(x30, TWO)\n    x32 = extract(x28, x31)\n    x33 = replace(x32, ONE, ZERO)\n    O = fill(x33, TWO, x32)\n    return O"], [1.1, "def solve_f060109d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = height(x2)\n    x7 = divide(x6, x5)\n    x8 =3(x7)\n    x9 = height(x2)\n    x10 = divide(x9, x5)\n    x11 = increment(x10)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = matcher(first, ZERO)\n    x14 = rbind(sfilter, x13)\n    x15 = toindices(x4)\n    x16 = lbind(shift, x15)\n    x17 = chain(x15, x14, x16)\n    x18 = fork(recolor, color, x17)\n    x19 = mapply(x18, x12)\n    O = paint(x2, x19)\n    return O"], [1.1, "def solve_1b7793bd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = compose(hmirror, vmirror)\n    x6 = x5(x4)\n    x7 = initset(x6)\n    x8 = insert(x3, x7)\n    x9 = sizefilter(x8, ONE)\n    x10 = input:\n    6360303\n    1330313\n    3333300\n    3303033\n    0133030\n    0000000\n    3303003\n    3303011\n    \"\"\"\n    x1 = width(x5)\n    x2 = increment(x8)\n    x3 = divide(x1, x2)\n    x4 = upscale(x3, x5)\n    x5 = ofcolor(I, x4)\n    x6 = lbind(intersection, x5)\n    x7 = lbind(shift, x5)\n    x8 = chain(x6, size, x7)\n    x9 = argmax(x3, x8)\n    x10 = intersection(x5, x9)\n    O = fill(I, TWO, x10)\n    return O"], [1.1, "def solve_cd6027ed(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = chain(positive, size, x2)\n    x7 = equality(x6, ONE)\n    x8 = I(x7)\n    x9 =215(x8)\n    x10 = branch(x7, x9, identity)\n    x11 = lbind(matcher, x10)\n    x12 = compose(x11, dmirror)\n    x13 = chain(x10, x11, x12)\n    x14 = lbind(matcher, x10)\n    x15 = compose(x14, vmirror)\n    x16 = lbind(matcher, x10)\n    x17 = compose(x16, hmirror)\n    x18 = fork(sfilter, x17, x13)\n    x19 = fork(sfilter, x18, x14)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = fill(x5, ONE, x21)\n    return O"], [1.1, "def solve_99b2eb2f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN) TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x30, x29)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"]]}