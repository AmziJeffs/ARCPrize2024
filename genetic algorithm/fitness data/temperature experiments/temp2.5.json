{"d56f2372": [[0.2743476810143477, "def solve_72d2ee5e(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_72c349c6(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2900804967886427, "def solve_ace1c120(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, size)\n    x3 = other(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.29037478188052895, "def solve_afa42bab(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_0ba05a9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_00f02f57(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_0bedf9a2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_9057c26d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29706172839506173, "def solve_e6494d6f(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.31036002669336005, "def solve_9b895305(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3700056407469819, "def solve_344a2f74(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3777100134739886, "def solve_ce0c7787(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_61d0c73c(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_f0a00cce(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_cf48096e(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.41617597321745253, "def solve_06fdc894(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_df5fb24a(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.41617597321745253, "def solve_cbfb6d61(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, TWO)\n    return O"], [0.41617597321745253, "def solve_b48897bd(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.41617597321745253, "def solve_dfa69e4e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_8925d611(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41699831998382725, "def solve_9b8cf18b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.41699831998382725, "def solve_76d4da3d(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(colorcount, TWO)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.4204508671590131, "def solve_569bd878(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_3b1fb12c(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_7fc29aab(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_d8a83ed9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_ffa3f40b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x18 = extract(x1, x11)\n    O = subgrid(x18, I)\n    return O"], [0.4204508671590131, "def solve_401bd3fd(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4245388866968078, "def solve_9b65314b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_8b590454(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_4b45cc80(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_1b728fbb(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_3a979e65(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_530ac126(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_b6cdd6e6(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_e9009a7a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_66464398(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_8bebaa4d(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = objects(I, T, T, T)\n    x4 = argmin(x3, size)\n    O = subgrid(x4, I)\n    return O"], [0.42820595992983485, "def solve_4bce474b(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = switch(x3, ONE, THREE)\n    O = rot180(x4)\n    return O"], [0.4344277755856966, "def solve_b82056de(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4427027559297416, "def solve_418e315d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = leastcolor(x7)\n    x9 = merge(x1)\n    x10 = leastcolor(x9)\n    O = replace(x7, x9, x10)\n    return O"], [0.4519109258964331, "def solve_7a747f7a(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.45420349399449317, "def solve_42119a6b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_2c3b2d0f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4592676912459521, "def solve_d82ea475(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x19 = hsplit(x8, THREE)\n    O = merge(x19)\n    return O"], [0.4608305049754325, "def solve_568fb45c(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.4647004005119946, "def solve_97888e43(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [0.46924601939094696, "def solve_bdf811d9(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4838495551165023, "def solve_bfbe3227(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4838495551165023, "def solve_49cf1896(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4869187922819764, "def solve_324d1321(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.4954775600294643, "def solve_f4a62ee3(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, T, T)\n    x3 = first(x2)\n    x4 = vline(x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(x1)\n    x7 = objects(x6, T, T, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.49611068641503425, "def solve_7bd796ef(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [0.49680581361740783, "def solve_50c4d55f(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49704719435154215, "def solve_5abe4f2d(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_1984d674(I):\n    x1 = hmirror(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5207138610182089, "def solve_5cf34134(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, T, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [0.5334775359496384, "def solve_d32ed4a2(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    x9 = cellwise(x4, x8, ZERO)\n    O = downscale(x9, THREE)\n    return O"], [0.5603234709466594, "def solve_d8262c24(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5652441058672942, "def solve_b589bf09(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.5652441058672942, "def solve_22d7608e(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.6195255835046275, "def solve_a7d0e27b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6195255835046275, "def solve_10a20238(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6291436647232063, "def solve_b6e3b80d(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6936462095470336, "def solve_368ae444(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(ineighbors, last, first)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = vconcat(x7, x7)\n    O = vconcat(x7, x8)\n    return O"], [0.6955752018051657, "def solve_3c44c1e9(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7008428445311226, "def solve_2144b7f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(backdrop, x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7017562383211805, "def solve_71368b47(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7174237451014522, "def solve_4e3b034e(I):\n    x1 = width(I)\n    x2 = astuple(ONE, TWO)\n    x3 = astuple(TWO, TWO)\n    x4 = astuple(TWO, ONE)\n    x5 = astuple(THREE, ONE)\n    x6 = canvas(THREE, UNITY)\n    x7 = upscale(x6, FOUR)\n    x8 = initset(DOWN)\n    x9 = insert(UNITY, x8)\n    x10 = insert(x2, x9)\n    x11 = insert(x3, x10)\n    x12 = fill(x7, ZERO, x11)\n    x13 = vupscale(x6, FIVE)\n    x14 = hupscale(x13, THREE)\n    x15 = insert(x4, x9)\n    x16 = insert(x5, x15)\n    x17 = fill(x14, ZERO, x16)\n    x18 = even(x1)\n    x19 = branch(x18, x12, x17)\n    x20 = canvas(ZERO, UNITY)\n    x21 = lbind(hupscale, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = rbind(hconcat, x6)\n    x24 = compose(x23, x22)\n    x25 = lbind(hupscale, x6)\n    x26 = compose(x25, height)\n    x27 = fork(vconcat, x24, rot90)\n    x28 = fork(vconcat, x26, x27)\n    x29 = subtract(x1, FOUR)\n    x30 = power(x28, x29)\n    O = x30(x19)\n    return O"], [0.7280653147455469, "def solve_bb5aec49(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, EIGHT, x6)\n    return O"], [0.7286997024901773, "def solve_c26553af(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = box(x5)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x3, x11)\n    O = fill(x6, x1, x12)\n    return O"], [0.7294009383759793, "def solve_b28a1ea1(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(box, x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = matcher(size, ZERO)\n    x5 = objects(x3, T, F, T)\n    x6 = difference(x5, x5)\n    x7 = compose(invert, size)\n    x8 = order(x6, x7)\n    x9 = apply(center, x8)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(x3, x12)\n    return O"], [0.7303543036004746, "def solve_14af913a(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7323782585048276, "def solve_7ea63236(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(x4)\n    O = fill(x5, x7, x6)\n    return O"], [0.7346483141124492, "def solve_1c48bc1e(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.7347271745065118, "def solve_67362931(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, outbox)\n    x4 = argmax(x2, x3)\n    x5 = apply(ulcorner, x2)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x4)\n    return O"], [0.7358683159313282, "def solve_07bd6595(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.737990666615944, "def solve_0ae0e338(I):\n    x1 = ofcolor(I, ONE)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(dneighbors, x1)\n    x4 = mapply(ineighbors, x2)\n    x5 = fill(I, SEVEN, x3)\n    O = fill(x5, FOUR, x4)\n    return O"], [0.7403016058295065, "def solve_208088d0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_cb108eee(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_93840f43(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_cdcb5cde(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403362304522162, "def solve_b958a9d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = replace(I, TWO, ZERO)\n    x5 = recolor(ONE, x2)\n    x6 = recolor(TWO, x3)\n    x7 = combine(x5, x6)\n    O = paint(x4, x7)\n    return O"], [0.7414131271298864, "def solve_bdee8171(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    O = move(I, x4, TWO_BY_ZERO)\n    return O"], [0.7414217191724711, "def solve_73e4840f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414345790655789, "def solve_0d3598d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.7414355847808533, "def solve_0c694998(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414654147115858, "def solve_8229e004(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toobject, first)\n    x14 = lbind(argmin, x13)\n    x15 = lbind(rbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = fork(shift, x7, x16)\n    x18 = mapply(x17, x12)\n    O = paint(I, x18)\n    return O"], [0.7414654147115858, "def solve_b06464c4(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, ONE, x4)\n    return O"], [0.7414654147115858, "def solve_fccde30c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [0.7414654147115858, "def solve_6b634204(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.7414654147115858, "def solve_b73dad1f(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.7414654147115858, "def solve_5462807a(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.7414654147115858, "def solve_f8507c0a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x4)\n    O = paint(I, x6)\n    return O"], [0.7414654147115858, "def solve_86473077(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    O = move(I, x4, DOWN)\n    return O"], [0.7414654147115858, "def solve_e6d109ad(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.7415156912324505, "def solve_498726ab(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.7416506506126929, "def solve_1a015b0d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7420912623840632, "def solve_0dd0d13c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(subgrid, I)\n    x6 = chain(halve, x5, shape)\n    x7 = compose(outbox, outbox)\n    x8 = mapply(x7, x2)\n    O = fill(I, ONE, x8)\n    return O"], [0.7421026463828913, "def solve_51111c11(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x2)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7424392989833423, "def solve_7cae05e5(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = rbind(hmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O"], [0.7427043838829858, "def solve_18b23550(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.744052835815385, "def solve_fcbbcf08(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = mapply(delta, x1)\n    O = fill(x4, FOUR, x5)\n    return O"], [0.7446400178861889, "def solve_9422cf57(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.7446400178861889, "def solve_5b89daa1(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.7450712646640288, "def solve_1f1ee1c1(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7452938391810585, "def solve_250a544d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.7454291044528212, "def solve_8d974e3b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7460089092777782, "def solve_871b2d3a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = vmirror(x2)\n    x7 = combine(x3, x4)\n    x8 = combine(x5, x6)\n    x9 = paint(I, x7)\n    O = fill(x9, FOUR, x8)\n    return O"], [0.7476524937041399, "def solve_dc792cd3(I):\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = shift(x1, NEG_UNITY)\n    x4 = fill(x2, THREE, x3)\n    x5 = shift(x1, UP_RIGHT)\n    x6 = fill(x4, SIX, x5)\n    x7 = shift(x1, DOWN_LEFT)\n    x8 = fill(x6, EIGHT, x7)\n    x9 = shift(x1, UNITY)\n    O = fill(x8, SEVEN, x9)\n    return O"], [0.7478164823808123, "def solve_634ed59f(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEG_ONE, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [0.7480057468975833, "def solve_a84d2c71(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7480057468975833, "def solve_c2c2e941(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7482124012198592, "def solve_1bb4c34f(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = mfilter(x1, x2)\n    x4 = replace(I, THREE, ZERO)\n    O = replace(x4, ONE, x3)\n    return O"], [0.7487022635082722, "def solve_f4b29c3e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7488659023144327, "def solve_57435978(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7488659023144327, "def solve_584094a0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7488659023144327, "def solve_666f639d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7491210583733974, "def solve_529cd1d2(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.7498499462550435, "def solve_12061ddd(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7498948998515579, "def solve_bd6a1022(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7506555399929836, "def solve_d103446f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = leftmost(x3)\n    x6 = interval(x5, TEN, TWO)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x5)\n    x11 = add(x5, THREE)\n    x12 = interval(x10, TEN, FOUR)\n    x13 = interval(x11, TEN, FOUR)\n    x14 = lbind(astuple, NINE)\n    x15 = apply(tojvec, x12)\n    x16 = apply(x14, x13)\n    x17 = fill(I, x4, x9)\n    x18 = fill(x17, FIVE, x15)\n    O = fill(x18, FIVE, x16)\n    return O"], [0.751298918490794, "def solve_954672e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = apply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = apply(lrcorner, x1)\n    x6 = shift(x2, NEG_UNITY)\n    x7 = shift(x3, UP_RIGHT)\n    x8 = shift(x4, DOWN_LEFT)\n    x9 = shift(x5, UNITY)\n    x10 = fill(I, ONE, x6)\n    x11 = fill(x10, TWO, x7)\n    x12 = fill(x11, THREE, x8)\n    O = fill(x12, FOUR, x9)\n    return O"], [0.7516087933992682, "def solve_a979321c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7518910756552866, "def solve_5ec88005(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(urcorner, x1)\n    x3 = apply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = apply(lrcorner, x1)\n    x6 = shift(x2, NEG_UNITY)\n    x7 = shift(x3, UP_RIGHT)\n    x8 = shift(x4, DOWN_LEFT)\n    x9 = shift(x5, UNITY)\n    x10 = fill(I, ONE, x6)\n    x11 = fill(x10, TWO, x7)\n    x12 = fill(x11, THREE, x8)\n    O = fill(x12, FOUR, x9)\n    return O"], [0.7568826415277337, "def solve_289f453a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, ONE, x3)\n    O = switch(x4, EIGHT, ONE)\n    return O"], [0.7582273697592505, "def solve_408f10cb(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O"], [0.764902815024833, "def solve_a78549f9(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.778825885555178, "def solve_f6b5a076(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = shape(I)\n    x6 = add(x5, TWO)\n    x7 = canvas(ZERO, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x5)\n    x16 = increment(x15)\n    x17 = branch(x3, x14, x16)\n    x18 = shift(x9, x17)\n    O = paint(x10, x18)\n    return O"], [1.0, "def solve_19cfd702(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner,ulcorner)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_67c8fb6b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_0e190956(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, T, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = enclilter(x1, TWO)\n    return O"], [1.0, "def solve_d75a2e35(I):\n    x1 = rbind(compose, last)\n    x2 = lbind(rbind, contained)\n    x3 = chain(x1, x2, palette)\n    x4 = chain(size, dedupe, x3)\n    x5 = matcher(x4, ONE)\n    x6 = compose(x5, trim)\n    x7 = chain(size, dedupe, x6)\n    x8 = matcher(x7, ONE)\n    x9 = lbind(contained77, ONE)\n    x10 = compose(x9, vupscale)\n    x11 = fork(equality, identity, x10)\n    x12 = chain(x11, sfilter, x5)\n    x13 = compose(dmirror, x12)\n    x14 = astuple(cmirror, dmirror)\n    x15 = x13(x14)\n    x16 = lbind(multiply, x11)\n    x17 = apply(x16, x15)\n    x18 = lbind(add, x15)\n    x19 = rbind(add, x18)\n    x20 = chain(x16, x19, TWO_BY_TWO)\n    x21 = apply(x20, x17)\n    x22 = Tuple(x21, x17)\n    x23 = argmax(x22, size)\n    x24 = apply(color, x23)\n    x25 = x20(x24)\n    x26 = cover(x25, x23)\n    x27 = fill(x26, TWO, x22)\n    O = x20(x27)\n    return O"], [1.0, "def solve_e5f37e20(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    x8 = fill(x7, x3, x4)\n    O = fill(x8, x5, x5)\n    return O"], [1.0, "def solve_29cbd7b3(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 =ukoefilter(x1, x4)\n    x7 = double(x5)\n    x8 = interval(x7, x6, equality)\n    x9 = add(x4, x5)\n    x10 = fill(I, x3, x9)\n    x11 = astuple(x10, x3)\n    x12 = canvas(ZERO, x11)\n    x13 = asindices(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x15, x7)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x12)\n    O = fill(x15, x13, x18)\n    return O"], [1.0, "def solve_3153041b(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = mapply(x2, x1)\n    x4 = replace(I, SIX, ONE)\n    O = fill(x4, THREE, x3)\n    return O"], [1.0, "def solve_a4e34534(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_56dcd1d9(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(compose, flip)\n    x3 = lbind(matcher, first)\n    x4 = chain(x2, x3, mostcolor)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(box, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = lbind(apply, x5)\n    x11 = chain(x10, palette, x7)\n    x12 = argmax(x1, x9)\n    x13 = remove(x12, x1)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(recolor, x14, identity)\n    x16 = apply(x15, x13)\n    x17 = fork(connect, ulcorner, lrcorner)\n    x18 = fork(connect, ulcorner, llcorner)\n    x19 = fork(combine, x17, x18)\n    x20 = fork(recolor, x4, x19)\n    x21 = fork(recolor, x4, x18)\n    x22 = fork(combine, x20, x21)\n    x23 = fork(combine, x19, x22)\n    x24 = fork(astuple, x20, x13)\n    x25 = fork(shoot, x26, x24)\n    x26 = fork(recolor, x4, x25)\n    x27 = fork(recolor, x4, x16)\n    x28 = fork(combine, x26, x27)\n    x29 = fork(Recommendedcolor, x27, x28)\n    x30 = mapply(x29, x23)\n    O = paint(I, x30)\n    return O"], [1.0, "def solve_7bd50362(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = upscale(x2, THREE)\n    x4 = rot90(x3)\n    x5 = hofcolor(x4, ONE)\n    x6 = hconcat(x4, x5)\n    x7 = ply(add, x6, rot270)\n    x8 = add(x7, THREE)\n    O = compress(x8)\n    return O"], [1.0, "def solve_88c96934(I):\n    x1 = objects(I, T, F, T)\n    x2 = ONE(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [1.0, "def solve_3c333659(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(FIVE, FIVE)\n    x4 = canvas(ZERO, x3)\n    x5 = paint(x4, x2)\n    x6 = order(x5, leftmost)\n    x7 = last(x6)\n    x8 = remove(x7, x6)\n    x9 = interval(ZERO, TEN, ONE)\n    x10 = lbind(multiply, x5)\n    x11 = apply(x10, x9)\n    x12 = lbind(shift, x7)\n    x13 = mapply(x12, x11)\n    o = fill(x5, FOUR, x13)\n    return O"], [1.0, "def solve_844ba93e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(cmirror, x12)\n    x14 = insert(hmirror, x13)\n    x15 = insert(vmirror, x14)\n    x16 = shape(x2)\n    x17 = add(urcorner, x16)\n    x18 = lbind(8, x17)\n    x19 = add(urcorner, x15)\n    x20 = add(x18, x19)\n    x21 = shoot(x17, x20)\n    x22 = shoot(x17, x21)\n    x23 = combine(x61, x22)\n    x24 = paint(I, x23)\n    x25 = branch(x7, x18, x20)\n    x26 = interval(ONE, FIVE, ONE)\n    x27 = product(x26, x26)\n    x28 = fork(compose, first, last)\n    x29 = lbind(matcher, first)\n    x30 = compose(x28, x29)\n    x31 = lbind(matcher, numcolors)\n    x32 = compose(x31, first)\n    x33 = fork(sfilter, x30, x32)\n    x34 = pair(x27, x23)\n    x35 = mapply(f5, x34)\n    x36 = double(x38)\n    x37 = shift(x35, x36)\n    O = paint(x24, x37)\n    return O"], [1.0, "def solve_ad3e5cfb(I):\n    x1 = replace(I, THREE, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, THREE)\n    O = subgrid(x15, x14)\n    return O"], [1.0, "def solve_8c8f1064(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(flip, v)\n    x4 = sfilter(x2, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 =difference(x6)\n    x8 = rbind(adjacent, x7)\n    x9 = merge(x8)\n    x10 = rot90(x6)\n    x11 = sfilter(x6, x5)\n    x12 =(combine, x10)\n    x13 = argindices(x12)\n    x14 = center(x13)\n    x15 = x5(x14)\n    x16 = subtract(x15, x6)\n    x17 = hfrontier(x16)\n    x18 = mapply(x17, x4)\n    x19 = center(x18)\n    x20 = x5(x19)\n    x21 = subtract(x20, x6)\n    x22 = vfrontier(x21)\n    x23 = mapply(x22, x4)\n    x24 = center(x23)\n    x25 = subtract(x24, x6)\n    x26 = hfrontier(x25)\n    x27 = mostcolor(I)\n    x28 = fill(I, x27, x28)\n    x29 = vfrontier(x18)\n    x30 = hfrontier(x18)\n    x31 = insert(x29, x30)\n    x32 = fill(x28, x31, x29)\n    x33 = vfrontier(x21)\n    x34 = box(x33)\n    O = fill(x32, x33, x34)\n    return O"], [1.0, "def solve_cf29cdba(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(sfilter, x1)\n    x7 = lbind(matcher, connect)\n    x8 = chain(x6, x7, lrcorner)\n    x9 = chain(UNITY, xce22, x8)\n    x10 = chain(NEG_LEFT, x9, outbox)\n    x11 = chain(invert, x10, x8)\n    x12 = fork(shift, identity, x11)\n    x13 = fork(connect, ulcorner, x12)\n    x14 = chain(normalize, toindices, x13)\n    x15 = fork(shift, identity, x14)\n    x16 = fork(combine, x12, x15)\n    x17 = mapply(x16, x4)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_9f0972f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = apply(x2, x1)\n    x4 = decrement(x3)\n    x5 = apply(x2, x1)\n    x6 = connect(numcolors, x4)\n    x7 = equality(x6, x5)\n    x8 = extract(x3, x7)\n    O = center(x8)\n    x4 = difference(x1, x5)\n    x5 = center(x4)\n    x6 = subtract(x5, x6)\n    x7 = shift(x4, x6)\n    x8 = shift(x7, x6)\n    x9 = paint(I, x7)\n    O = paint(x9, x8)\n    return O"], [1.0, "def solve_ca94abd7(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = apply(decide, x4)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = apply(double, x4)\n    x11 = fork(astuple, x9, x10)\n    x12 = lbind(canvas, ZERO)\n    x13 = compose(x12, x11)\n    x14 = fork(hconcat, identity, x13)\n    x15 = compose(center, x14)\n    x16 = lbind(recolor, ZERO)\n    x17 = compose(x16, x15)\n    x18 = fork(paint, center, x17)\n    x19 = compose(ulcorner, x15)\n    x20 = fork(subtract, last, x19)\n    x21 = fork(shift, first, x20)\n    x22 = mapply(x21, x5)\n    O = paint(x7, x22)\n    return O"], [1.0, "def solve_6c91cd45(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = replace(x4, DOWN, ZERO)\n    x6 = asobject(x5)\n    x7 = shift(x6, x3)\n    O = mapply(first, x7)\n    return O"], [1.0, "def solve_9b01e7db(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = normalize(x4)\n    x6 = width(x5)\n    x7 = normalize(x5)\n    x8 =ulcorner(x7)\n    x9 = lbind(shift, x3)\n    x10 = occurrences(I, x8)\n    x11 = mapply(x9, x10)\n    O = fill(I, ZERO, x11)\n    return O"], [1.0, "def solve_8071c756(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(solcolor, I)\n    x3 = compose(x2, color)\n    x4 = fork(paint, identity, x3)\n    x5 = compose(rot180, x4)\n    x6 = power(x5, TWO)\n    x7 = lefthalf(I)\n    x8 = righthalf(I)\n    x9 = rbind(ofcolor, ZERO)\n    x10 = chain(lowermost, x9, palette)\n    x11 = fork(greater, x10, rot90)\n    x12 = compose(x11, x9)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x1, x13)\n    x15 = center(x14)\n    x16 = subgrid(x14, I)\n    x17 = lefthalf(x16)\n    O = uppermost(x17)\n    return O"], [1.0, "def solve_d3cc1b2a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b1edfc31(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(add, first, last)\n    x4 = halve(x3)\n    x5 = add(x4, x4)\n    x6 = lbind(subtract, x5)\n    x7 = compose(x6, totuple)\n    x8 = rbind(colorcount, x1)\n    x9 = argmax(x2, x8)\n    x10 = mostcolor(I)\n    x11 = initset(x9)\n    x12 = insert(x10, x11)\n    x13 = toobject(x12, I)\n    x14 = colorfilter(x13, x1)\n    x15 = objects(I, T, F, F)\n    x16 = size(x15)\n    x17 = positive(x16)\n    x18 = branch(x17,)\n    x19 = rbind(colorcount, x1)\n    x20 = compose(d9, x19)\n    x21 = argmin(x15, x20)\n    x22 = replace(I, x1, x7)\n    x23 = insert(x21, x15)\n    x24 = colorfilter(x23, x1)\n    x25 = apply(urcorner, x24)\n    x26 = size(x25)\n    x27 = equality(x26, x24)\n    x28 = mmirror(x27)\n    x29 = branch(x27, x25, x28)\n    x30 = apply(llcorner, x24)\n    x31 = mapply(lrcorner, x30)\n    x32 = combine(x29, x31)\n    x33 = rbind(manhattan, x38)\n    x34 = argmin(x32, x33)\n    O = subgrid(x34, xI)\n    return O"], [1.0, "def solve_f6df16e9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = mfilter(x3, x6)\n    x8 = ofcolor(I, x7)\n    x9 = lbind(adjacent, x8)\n    x10 = compose(rot90, x9)\n    x11 = power(x10, FOUR)\n    x12 = x11(x8)\n    x13 = x11(x4)\n    x14 = fork(either, x12, x13)\n    x15 = compose(rot180, x14)\n    x16 = power(x15, FOUR)\n    O = x16(x8)\n    return O"], [1.0, "def solve_84e33a7a(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = lbind(vmatching, x2)\n    x4 = toindices(x2)\n    x5 = chain(x3, x4, x9)\n    x6 = fork(greater, vline, hline)\n    x7 = lbind(shift, x2)\n    x8 = compose(x6, x7)\n    x9 = order(x1, x8)\n    x10 = apply(last, x9)\n    x11 = cover(I, x10)\n    x12 = size(x2)\n    x13 = gravitate(x12, x2)\n    O = move(x11, x10, x13)\n    return O"], [1.0, "def solve_071ebc25(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = normalize(x2)\n    x5 = fork(equality, identity, vmirror)\n    x6 = sfilter(x4, x5)\n    x7 = difference(x4, x6)\n    x8 = compose(hmirror, vmirror)\n    x9 = rbind(shift,180)\n    x10 = lbind(compose, uppermost)\n    x11 = lbind(rbind, intersection)\n    x12 = chain(x10, x9, x11)\n    x13 = rbind(argmin, x8)\n    x14 = chain(first, x13, x12)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, xd6)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_a3273def(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(subtract, decrement, shape)\n    x3 = fork(greater, first, x2)\n    x4 = chain(increment, center, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = canvas(ZERO, THREE_BY_THREE)\n    x7 = mapply(x5, x1)\n    x8 = shift(x7, UNITY)\n    O = paint(x6, x8)\n    return O"], [1.0, "def solve_6ad08eec(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = color(x2)\n    x5 = color(x3)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = x7(x2)\n    x9 = x7(x3)\n    x10 = x7(x4)\n    x11 = x7(x5)\n    x12 = fill(I, x8, x9)\n    x13 = fill(x12, x10, x11)\n    O = paint(x13, x2)\n    return O"], [1.0, "def solve_c70d0287(I):\n    x1 = objects(I, T, F, T)\n    x2 = difference(x1, x1)\n    O = subgrid(x2, I)\n    return O"], [1.0, "def solve_547f00ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_2c6e3e07(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = astuple(TWO, ONE)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, frontiers)\n    x6 = sfilter(x1, x5)\n    x7 = color(NEG_TWO)\n    x8 = remove(x2, x1)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = fill(I, x7, x10)\n    return O"], [1.0, "def solve_8bd9a385(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9b226038(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_2fa7271f(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_a7d574e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x05 = cover(I, x4)\n    x06 = fill(x5, ONE, x2)\n    O = fill(x06, TWO, x3)\n    return O"], [1.0, "def solve_b5bce3ad(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, leastcolor)\n    x3 = mostcolor(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, x3)\n    x7 = replace(x6, x5, x3)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [1.0, "def solve_288d252e(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_8b96af83(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(be94b410, x1)\n    x3 = paint(I, x2)\n    x4 = objects(x3, T, F, T)\n    x5 = apply(toindices, x4)\n    x6 = lbind(rbind, contained)\n    x7 = compose(x6, last)\n    x8 = sfilter(x5, x7)\n    O = fill(x3, ZERO, x8)\n    return O"], [1.0, "def solve_8cba60b3(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, x2)\n    x7 = replace(x6, x3, x2)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [1.0, "def solve_26995020(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(subgrid, I)\n    x5 = compose(x4, decrement)\n    x6 = apply(x5, x3)\n    x7 = matcher(palette,437)\n    x8 = compose(x7, palette)\n    x9 = extract(x6, x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = switch(I, x10, x11)\n    x13 = switch(x12, x11, x10)\n    x14 = replace(x13, x10, x11)\n    x15 = difference(x6, x9)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = switch(x14, x16, x17)\n    x19 = merge(x3)\n    x20 = cover(I, x19)\n    x21 = fill(x20, THREE, x18)\n    O = fill(x21, astuple, x15)\n    return O"], [1.0, "def solve_faaee1df(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(rot90, x13)\n    x15 = insert(rot180, x14)\n    x16 = insert(rot270, x15)\n    x17 = shape(x2)\n    x18 = canvas(ZERO, x17)\n    x19 = center(x2)\n    x20 = lbind(shift, x3)\n    x21 = occurrences(x18, x10)\n    x22 = mapply(x20, x21)\n    x23 = paint(x18, x22)\n    x24 = interval(ZERO, FOUR, ONE)\n    x25 = pair(x24, x24)\n    x26 = apply(x21, x25)\n    x27 = rot90(x26)\n    x28 = occurrences(x23, x27)\n    x29 = mapply(x21, x28)\n    O = pair(x29, x28)\n    return O"], [1.0, "def solve_dba15dd6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_3c577062(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, RIGHT)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = objects(I, T, F, T)\n    x7 = compose(increment, uppermost)\n    x8 = order(x6, x7)\n    x9 = apply(color, x8)\n    x10 = lbind(sfilter, x6)\n    x11 = lbind(matcher, SEVEN)\n    x12 = compose(x10, x11)\n    x13 = lbind(lbind, contained)\n    x14 = rbind(extract, x12)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_16788a35(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x5, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, first, last)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_f9c5c6bd(I):\n    x1 = maximum(I)\n    x2 = astuple(ONE, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x1)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [1.0, "def solve_5c65dcf1(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, EIGHT)\n    x5 = rbind(shoot, UNITY)\n    x606 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, EIGHT)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, urcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_4d73fd55(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = mapply(dneighbors, x2)\n    x4 = mapply(ineighbors, x2)\n    x5 = fill(I, ONE, x3)\n    x6 = fill(x5, TWO, x4)\n    O = fill(x6, THREE, x1)\n    return O"], [1.0, "def solve_90889c40(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(toindices, normalize)\n    x4 = apply(x3, x2)\n    x5 = lbind(shift, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = fill(x7, ZERO, x8)\n    O = paint(x9, x7)\n    return O"], [1.0, "def solve_88a163e3(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = normalize(x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, shape)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = mapply(x8, x2)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_1e514b08(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, lowermost)\n    x3 = argmax(x1, rightmost)\n    x4 = color(x2)\n    x5 = color(x3)\n    x6 = merge(x1)\n    x7 = fill(I, x4, x6)\n    x8 = mapply(uppermost, x1)\n    O = fill(x7, x5, x8)\n    return O"], [1.0, "def solve_7bf49949(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = first(x2)\n    x4 = ulcorner(x3)\n    x5 = subgrid(x3, I)\n    x6 = replace(x5, ONE, ZERO)\n    x7 = hconcat(x6, x5)\n    O = vconcat(x7, x7)\n    return O"], [1.0, "def solve_5179236e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(rbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x6)\n    x14 = chain(first, x13, x12)\n    x15 = fork(contained, x14, identity)\n    x16 = compose(normalize, x15)\n    x17 = astuple(x13, x16)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = interval(ONE, x19, ONE)\n    x21 = lbind(jbind, astuple)\n    x22 = rbind(multiply, x18)\n    x23 = chain(x21, x22, initset)\n    x24 = fork( insert, identity, x23)\n    x25 = compose(backdrop, x24)\n    x26 = mapply(x25, x20)\n    O = fill(I, EIGHT, x26)\n    return O"], [1.0, "def solve_d47e988c(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x4)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [1.0, "def solve_07ac6588(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(maximum, shape)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = lbind(sfilter, x5)\n    x7 = lbind(matcher, identity)\n    x8 = chain(VERatching, x6, x7)\n    x9 = lbind(apply, shape)\n    x10 = chain(corners, x9, leastcolor)\n    x11 = fork(shift, identity, x8)\n    x12 = compose(crement, x11)\n    x13 = chain( status, x9, x12)\n    x14 = mapply(x13, x4)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_336098eb(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = order(size, last)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(toindices, normalize)\n    x7 = compose(x6, last)\n    x8 = mapply(x7, x5)\n    O = fill(x1, FOUR, x8)\n    return O"], [1.0, "def solve_91bd180f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, canvas, hconcat)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, ZERO)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.0, "def solve_b46cbead(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = normalize(x2)\n    x5 = shape(x2)\n    x6 = normalize(x2)\n    x7 = canvas(FIVE, x5)\n    x8 = paint(x7, x4)\n    O = fill(x8, FIVE, x3)\n    return O"], [1.0, "def solve_e8e5d012(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, identity, x4)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_6b3b043c(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(invert, halve, shape)\n    x4 = fork(combine, hfrontier, vfrontier)\n    x5 = compose(x2, vmirror)\n    x6 = fork(shift, x5, x3)\n    x7 = compose(decrement, x6)\n    x4 = fork(shift, toindices, x7)\n    x5 = fork(combine, x4, x6)\n    x6 = mapply(x50, x1)\n    x7 = mapply(x55, x1)\n    x8 = combine(x6, x5)\n    x9 = paint(I, x8)\n    O = fill(x9, EIGHT, x3)\n    return O"], [1.0, "def solve_d1b56233(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, T)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = Argumentmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [1.0, "def solve_cce12b44(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = shoot(NEG_UNITY, UNITY)\n    x6 = shoot(x50, UP_RIGHT)\n    x7 = combine(x5, x6)\n    x8 = rbind(shoot, DOWN)\n    x9 = mapply(x8, x7)\n    x10 = combine(x3, x9)\n    x11 = recolor(ZERO, x10)\n    x12 = paint(I, x11)\n    x13 = objects(x12, T, F, T)\n    x14 = rbind(other, DOWN)\n    x15 = compose(x14, palette)\n    x16 = extract(x13, x15)\n    x17 = numcolors(x16)\n    x18 = equality(x17, TWO)\n    x19 = invert(x17)\n    x20 = shift(x16, x19)\n    x21 = insert(x20, x4)\n    x22 = mapply(x21, x4)\n    O = fill(x12, ONE, x22)\n    return O"], [1.0, "def solve_e6172019(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(rbind, manhattan)\n    x8 = rbind(compose, initset)\n    x9 = chain(x6, x7, x8)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(rot90, x12)\n    x14 = power(x13, FOUR)\n    x15 = astuple(x4, x5)\n    x16 = astuple(x14, x16)\n    x17 = branch(x16, x13, x16)\n    x18 = order(x5, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = switch(x19, NINE, FIVE)\n    x22 = astuple(x4, x5)\n    x23 = astuple(x21, x22)\n    x24 = power(outbox, x23)\n    x25 = fork(combine, x23, x24)\n    x26 = x25(x)\n    x27 = intersection(x2, x26)\n    x28 = fill(I, FOUR, x27)\n    x29 = double(x5)\n    x30 = shift(x3, x29)\n    x31 = lbind(shift, x30)\n    x32 = mapply(x31, x28)\n    x33 = paint(x26, x32)\n    O = x1(x33)\n    return O"], [1.0, "def solve_0b54a83e(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_01c51ab0(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(fafffa7, x1)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I, ZERO, x4)\n    return O"], [1.0, "def solve_c78145bb(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, lement, RIGHT)\n    x5 = branch(x3, equality, size)\n    x6 = branch(x3, x5, x4)\n    x7 = branch(x3, vmirror, hmirror)\n    x8 = x15(x6)\n    x9 = tophalf(x8)\n    x10 = insert(x9, x7)\n    O = double(x10)\n    return O"], [1.0, "def solve_9c34d11e(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = pair(x7, x6)\n    x9 = fill(I, NINE, x8)\n    x10 = increment(x38)\n    x11 = double(x30)\n    x12 = add(intersection, x11)\n    x13 = shift(x8, x12)\n    x14 = shift(x8, x13)\n    x15 = paint(x9, x14)\n    O = fill(x15, FOUR, x5)\n    return O"], [1.1, "def solve_0941833c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = lbind(mapply, dneighbors)\n    x3 = compose(x2, toindices)\n    x4 = fork(recolor, mostcolor, x3)\n    x5 = compose(decrement, ulcorner)\n    x6 = compose(increment, lrcorner)\n    x7 = fork(connect, x5, x6)\n    x8 = compose(hmirror, x7)\n    x9 = fork(combine, x7\n    x10 = compose(vmirror, x9)\n    x11 = fork(equality, identity, x10)\n    x12 = sfilter(x1, x11)\n    x13 = compose(initset, position)\n    x14 = fork(bascher, x13, identity)\n    x15 = compose(decrement, x14)\n    x16 = fork(multiply, gravitate, x15)\n    x17 = fork(add, x5, x16)\n    x18 = fork(insert, x5, x17)\n    x19 = fork(insert, identity, x18)\n    x20 = apply(x19, x12)\n    x21 = argmax(x20, x17)\n    x22 =insert(x21, x20)\n    x23 =Entered(x22)\n    x24 = giving(x23, identity)\n    x25 = width(x24)\n    x26 = apply(most, x24)\n    x27 = ZERO(x26)\n    x28 = apply(ulcorner, x24)\n    x29 = sfilter(x24, x18)\n    x30 = size(x29)\n    x31 = decrement(x30)\n    x32 = height(x24)\n    x33 = subtract(x32, x31)\n    x34 = astuple(ONE, x33)\n    x35 = canvas(ZERO, x34)\n    x36 = numcolors(x35)\n    x37 = equality(x36, x25)\n    x38 =27(x37)\n    x39 = insert(x"], [1.1, "def solve_2d575450(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(contained, TWO)\n    x5 = chain(x4, size, shape)\n    x6 = fork(equality, toindices, x5)\n    x7 = equality(x2, lbind)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x3, x8)\n    x10 = lbind(52color, I)\n    x11 = switch(I, x10, x9)\n    x12 = objects(x11, T, T, T)\n    x13 = rbind(colorcount, TWO)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, TWO)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 =240(x17)\n    x19 =rbind(toobject, x18)\n    x20 = chain(x8, x19, neighbors)\n    x21 = apply(x20, x17)\n    x22 = astuple(x12, x18)\n    x23 = shift(x21, x22)\n    x24 =10mirror(x23)\n    x25 = hmirror(x24)\n    x26 = paint(x11, x25)\n    x27 =otineurcorner(x2)\n    x28 = paint(x27, x2)\n    x29 = rbind(multiply, x24)\n    x30 = chain(x29, x28, neighbors)\n    x32 = argmax(x27, x30)\n    x33 = subgrid(x2, x28)\n    x34 = increment(x32)\n    x35 = shift(x33, x34)\n    x36 = combine(x28, x35)\n    x37 = lebordering(x36)\n    x38 = fork(combine, vfrontier, hfrontier)\n    x39 = compose(x38, center)\n"], [1.1, "def solve_b8a2f77c(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, lowermost)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = double(x4)\n    x6 = width(x9)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = interval(ONE, FIVE, ONE)\n    x10 = sfilter(x9, x8)\n    x11 = remove(ZERO, x10)\n    x12 = lbind(apply, first)\n    x13 = lbind(interval, x5)\n    x14 = lbind(x12, x13)\n    x15 = rbind(compose, leftmost)\n    x16 = lbind(lbind,sfilter)\n    x17 = lbind(occurrences, I)\n    x18 = chain(x17, x16, lbind)\n    x19 = lbind( apply, uppermost)\n    x20 = lbind(lbind, remove)\n    x21 = chain(x19, x20, last)\n    x22 = lbind(apply, x2)\n    x23 = chain(x22, x21, x21)\n    x24 = fork(probind, lbind,1977)\n    x25 = compose(x24, last)\n    x26 = lbind(rbind, sfilter)\n    x27 =3214(x12, matcher(first, ZERO)\n    x28 = rbind(sfilter, x27)\n    x29 = compose(x28, last)\n    x30 = lbind(compose, x5)\n    x31 = chain(x30, x29, first)\n    x32 = lbind(fork, minimum)\n    x33 = compose(x32, x31)\n    x34 = fork(add, x29, x33)\n    x35 = compose(x34, first)\n    x36 = fork(intersection, x29, x35)\n    x37 = fork(recolor, color(x16)\n    x38 = mapply("], [1.1, "def solve_4d409f42(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = color(I)\n    x7 = subgrid(x4, I)\n    x8 = fork(multiply, height, width)\n    x9 = divide(x8, THREE)\n    x10 = multiply(x9, thanks)\n    x11 = decrement(x10)\n    x12 = interval(x11, ONE, ONE)\n    x13 = prapply(multiply, DOWN)\n    x14 = rbind(add, x13)\n    x15 = compose(x14, first)\n    x16 = interval(x11, x9, ONE)\n    x17 = apply(x15, x16)\n    x18 = rbind(toobject, I)\n    x19 = compose(x18, last)\n    x20 =527(x17)\n    x21 = palette(I)\n    x22 = lbind(sfilter, x21)\n    x23 = compose(corners, asindices)\n    x24 = lbind(stobject, I)\n    x25 = chain(first, x24, x23)\n    x26 = lbind(colorcount, I)\n    x27 = valmax(x26, x25)\n    x28 = compose(x27, x25)\n    x29 = lbind(hs sfilter, x21)\n    x30 = chain(x29, x27, x585)\n    x31 = fork(difference, identity, x30)\n    x32 = chain(positive, size, x31)\n    x33 = ONE(x27)\n    x34 = rbind(subgrid, x31)\n    x35 = fork(equality, x34, x33)\n    x36 = compose(x32, x35)\n    x37 =245(x36)\n    x38 = rbind(branch, x37)\n    x39 = rbind(chain, x38)\n    x40 = rbind(x"], [1.1, "def solve_e9363098(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_36a5a23b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = rbind( subgrid, I)\n    x4 = remove(x2, x1)\n    x5 = merge(x4)\n    x6 = rot90(x5)\n    x7 = height(x6)\n    x8 = width(x6)\n    x9 = compress(x7)\n    x10 = astuple(x6, x8)\n    x11 = center(x9)\n    x12 = crop(x9, ORIGIN, x10)\n    x13 = hmirror(x12)\n    x14 = hconcat(x12, x13)\n    x15 = rot270(x14)\n    x16 = ofcolor(x15, ZERO)\n    x17 = rbind(subgrid, x15)\n    x18 = astuple(ONE, x16)\n    x19 = portrait(x18)\n    x20 = branch(x19, x17, x14)\n    x21 = crop(x20, DOWN, x7)\n    x22 = hmirror(x21)\n    x23 = vconcat(x23, x22)\n    x24 = branch(x18, x17, x18)\n    x25 = rbind(colorcount, ZERO)\n    x26 = rbind(toobject, x25)\n    x27 = compose(x25, x26)\n    x28 = apply(x27, x23)\n    x29 = chain(x10, initset, x27)\n    x30 = fork(manhattan, identity, x29)\n    x31 = chain(initset, x27, x30)\n    x33 = apply(x31, x28)\n    x34 = fork(upscale, identity, x33)\n    x35 = center(x2)\n    x36 =(x34, x35)\n    x37 = shift(x36, x37)\n    x38 = fork(combine, vfrontier, hfrontier)\n    x39 = mapply(x38, x37)\n    x40 = underfill("], [1.1, "def solve_3e10e211(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = uppermost(x3)\n    x8 = leftmost(x3)\n    x9 = height(x4)\n    x10 = width(x4)\n    x11 = interval(ZERO, x9, x10)\n    x12 = invert(x7)\n    x13 = increment(x8)\n    x14 = interval(x12, x13, x125)\n    x15 = astuple(x11, x14)\n    x16 = invert(x17)\n    x17 = increment(x16)\n    x18 = interval(ZERO, x17,:\n    ZERO, x10)\n    x19 = lbind(apply, tojvec)\n    x20 = lbind(compose, x18)\n    x21 = lbind(compose, x15)\n    x22 = compose(x21, x20)\n    x23 = fork(sfilter, identity, x22)\n    x24 = chain(x19, center, x23)\n    x25 = urcorner(x3)\n    x26 =877 center(x3)\n    x27 = shift(x25, x26)\n    x28 = lbind(shift, x27)\n    x29 = shape(x28)\n    x30 = astuple(x24, x29)\n    x31 = canvas(x15, x30)\n    x32 = fgpartition(x31)\n    x33 = lbind(shift, x277)\n    x34 = apply(x33, x32)\n    x35 = mapply(x28, x34)\n     x36 = width(I)\n    x37 = astuple(x24, x36)\n    x38 = tojvec(x37)\n    x39 = invert(x38)\n    x40 = shift(x35, x39)\n    x41 = lbind(shift"], [1.1, "def solve_a4b2b70a(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 =125(x6)\n    x9 = fill(I, x7, x8)\n    x10 = objects(x9, T, F, F)\n    x11 = colorfilter(x10, TWO)\n    x12 =46line(x11)\n    x13 = apply(sIX, x12)\n    x14 = palette(x13)\n    x15 = compose(backmass, remove)\n    x16 = lbind(ofcolor, x13)\n    x17 = compose(x16, x15)\n    x18 = fork(combine, x17, x14)\n    x19 = lbind( matcher, sfilter)\n    x20 = compose(x19, margin)\n    x21 = fork(add, x20, x14)\n    x22 = sfilter(x1, x21)\n    x23 = lbind(colorcount, x9)\n    x24 = argmax(x22, x23)\n    x25 = matcher(x21, x24)\n    x26 =     extract(x26, x25)\n    x27 = first(x26)\n    x28 = mapply(neighbors, x277)\n    x29 = insert(x28, x27)\n    x30 = toobject(x29, x19)\n    x31 = matcher(first, x4)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 =124colors(x33)\n    x35 = dmirror(x34)\n    x36 = papply(recolor, x35, x28)\n    x37 = apply(x21, x36)\n    x38 = papply(vmirror, x37)\n    x39 = papply(equality, x37, x38)\n    x40"], [1.1, "def solve_5d061f30(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_93f6aac6(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = width(I)\n    x2 = apply(asobject, I)\n    x3 = decrement(x1)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(shift, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(F15, x6, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = objects(I, T, F, T)\n    x11 = merge(x10)\n    x12 = paint(I, x11)\n    x13 = objects(x12, T, F, T)\n    x14 = compose(hmirror, vmirror)\n    x15 = fork(shift, identity, x14)\n    x16 = rapply(x13, x9)\n    x17 = compose(vmirror, dmirror)\n    x18 = fork(shift, identity, x17)\n    x19 = rapply(x16, x9)\n    x20 = compose(vmirror, dmirror)\n    x21 = fork(shift, identity, x20)\n    x22 = fork(apply, x21, x18)\n    x23 = lbind(chain, connect)\n    x24 = lbind(x23, size)\n    x25 = rbind(x24,199)\n    x26 = lbind(compose, x22)\n    x27 = lbind(lbind, intersection)\n    x28 = chain(x26, x27, x25)\n    x29 = apply(x28, x30)\n    x30 = lbind(chain, color)\n    x31 = lbind(x30, shape)\n    x32 = rbind(x31, x19)\n    x33 = lbind(ofcolor, I)\n    x34 = chain(x33, x32, x22)\n    x35 = apply(x34, x29)\n    x36 = ofcolor(x35, ZERO)\n    x37 = palette(x36)\n    x38 = UNITY(x37)\n    x39 =6477"], [1.1, "def solve_d4a9e23f(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, vsplit, hsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = fgpartition(x6)\n    x9 = merge(x8)\n    x10 = palette(x7)\n    x11 =matchcher(identity, x9)\n    x12 = fgpartition(x6)\n    x13 = merge(x12)\n    x14 = DOWNscale(x13, TWO)\n    x15 = objects(x14, T, F, T)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = repeat(x9, ONE)\n    x19 =20628(x18)\n    x20 = rbind(repeat, x19)\n    x21 = apply(x20, x17)\n    x22 = merge(x21)\n    x23 =Appsly(x20, x22)\n    x24 =20(x23)\n    x25 = dmirror(x24)\n    x26 = hupscale(x25, TWO)\n    x27 = asobject(x26)\n    x28 = matcher(first, x12)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x27, x29)\n    x31 =40(x30)\n    x32 = width(x6)\n    x33 = multiply(x32, x32)\n    x34 = astuple(ONE, x33)\n    x35 = canvas(x12, x34)\n    x36 = paint(x35, x26)\n    x37 = upscale(x36, TWO)\n    x38 = paint(x37, x29)\n    x39 = rot90(x38)\n    x40 = paint(x39, x31)\n    x41 = rot90(x40)\n    x42 = paint(x41, x29)\n    x43 = multiply"], [1.1, "def solve_9af65e66(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = color(x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6000)\n    x8 = compose(x7, frontiers)\n    x9 = merge(x8)\n    x10 = d511f76dmirror(x9)\n    x11 = papply(pair, x10, x9)\n    x12 = width(x11)\n    x13 =last(x11)\n    x14 = tojvec(x12)\n    x15 = increment(x14)\n    x16 = height(x11)\n    x17 = decrement(x16)\n    x18 = height(x11)\n    x19 = increment(x18)\n    x20 = interval(ZERO, x17, ZERO)\n    x21 = interval(ZERO, x19, ZERO)\n    x22 = product(x20, x21)\n    x23 = fork(multiply, first, last)\n    x24 = apply(x23, x22)\n    x25 = lbind(sfilter, x6)\n    x26 = lbind(matcher, x21)\n    x27 = chain(x25, lefthalf, x26)\n    x28 = chain(size, dedupe, totuple)\n    x29 = lbind(apply, x28)\n    x30 = lbind(sfilter, x26)\n    x31 = lbind(matcher, x21)\n    x32 = compose(x30, x31)\n    x33 = lbind(6022\n    f76 = lbind(ofcolor, x11)\n    x23 = compose(palette, x76)\n    x24 = lbind(rbind, gravitate)\n    x25 = chain(x39, x24, x initset)\n    x26 = lbind(extract, x22)\n    x27 = lbind(matcher"], [1.1, "def solve_36a0b0ca(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argacent(ORIGIN, TWO)\n    x3 = initset(x2)\n    x4 = subgrid(x3, I)\n    x5 = argmax(x1, width)\n    x6 = uppermost(x5)\n    x7 = subgrid(x5, I)\n    x8 = insert(x6, x7)\n    x9 = leftmost(x8)\n    x10 = rightmost(x8)\n    x11 =lrcorner(x8)\n    x12 = invert(x9)\n    x13 = increment(x12)\n    x14 = power(outbox, x13)\n    x15 = astuple(x11, x14)\n    x16 = ulcorner(x8)\n    x17 = rbind(multiply, x15)\n    x18 = apply(x17, x15)\n    x19 = lbind(sfilter, x17)\n    x20 = lbind(matcher, identity)\n    x21 = lbind(49983, shift)\n    x22 = chain(x19, x21, toindices)\n    x23 = fork(mapply, x22, x21)\n    x24 = fork(FOUR, x23, identity)\n    x25 = width(x4)\n    x26 =TEN(x25)\n    x27 =2dc644(x4)\n    x28 = height(x4)\n    x29 = urcorner(x25)\n    x30 = shoot(x9999, NEG_UNITY)\n    x31 = ulcorner(x25)\n    x32 = recolor(ZERO, x31)\n    x33 = index(x4, x29)\n    x34 = equality(x33, index)\n    x35 = branch(x34, x22, x24)\n    x36 = branch(x34, x25, x28)\n    x37 = branch(x34, x26, x34)\n    x38 = fork(combine, vfrontier, hfrontier)\n    x39 = x38(x36)"], [1.1, "def solve_88cf922d(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = asobject(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract("], [1.1, "def solve_367f5efd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = center(x2)\n    x4 = subgrid(x2, I)\n    x5 = normalize(x2)\n    x6 = color(x2)\n    x7 = objects(x4, F, T, T)\n    x8 = matcher(first, x6)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    x11 = normalize(x10)\n    x12 = color(x11)\n    x13 = toindices22x11)\n    x14 = compose(normalize, initset)\n    x15 =179(x13)\n    x16 = argpply(x15, x14)\n    x17 = apply(x16, x13)\n    x18 = minimum(x17)\n    x19 = compose(vrcorner, x1)\n    x20 = center(x2)\n    x21 = initset(x20)\n    x22 = lbind(shift, x8)\n    x23 = sizefilter(x21, x22)\n    x24 = ulcorner(x2)\n    x25 = insert(x24, x23)\n    x26 = lbind(shift, x17)\n    x27 = mapply(x26, x25)\n    x28 = frontiers(I)\n    x29 =1946666ac64(x28)\n    x30 = objects(x4, T, F, T)\n    x31 = sizefilter(x30, ONE)\n    x32 = merge(x31)\n    x33 = cover(x25, x72)\n    x34 =paste(x33, x12)\n    x35 = crop(x34, x33, x32)\n    x36 = cover(x35, x32)\n    x37 = contained(toindices, x36)\n    x38 = fork(either, hline, vline)\n    x39 = rbind(sfilter, x38)\n    x40 = chain("], [1.1, "def solve_e7df0051(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = chain(double, width, height)\n    x7 = x6(x5)\n    x8 = partition(x3)\n    x9 = argmax(x8, x7)\n    x10 = lefbind(subgrid, x3)\n    x11 = fork(recolor, color, x10)\n    x12 = apply(x11, x1)\n    x13 = asindices(x3)\n    x14 = ofcolor(x3, ZERO)\n    x15 = difference(x13, x14)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x6, x17)\n    x19 = fork(vmatching, first, last)\n    x20 = neighbors(x19)\n    x21 =04(x20)\n    x22 = hmirror(x21)\n    x23 = paint(x3, x22)\n    x24 = rbind(vmatching, x22)\n    x25 = mfilter(x24, x17)\n    x26 = shape(x25)\n    x27 = add(x26, x30)\n    x28 = canvas(ZERO, x27)\n    x29 = asobject(x28)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x3, x30)\n    x32 = rot90(x31)\n    x33 = paint(x32, x30)\n    x34 = rot90(x33)\n    x35 = paint(x34, x30)\n    x36 = rot90(x35)\n    x37 = paint(x36, x30)\n    x38 = rot97(x37)\n    x39 = paint(x38, x30)\n    x40 =rot97(x39)\n    x41 = paint(x40, x30)\n    x48 = rot90"], [1.1, "def solve_f9a398b3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(60, urcorner, toindices)\n    x3 = mapply(x2, x1)\n    x4 = difference(x3, x1)\n    x5 = toobject(x4, I)\n    x6 = palette(I)\n    x7 = other(x6, ZERO)\n    x8 = ofcolor(I, x7)\n    x9 =446bbind(6444446\n    x10 = rbind(difference, x8)\n    x11 = chain(size, x10, toindices)\n    x12 = matcher(x11, ZERO)\n    x13 = hfilter(x8, x12)\n    x14 = ulcorner(x9)\n    x15 = rbind(subtract, x14)\n    x16 = chain(x13, minimum, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = sfilter(x13, x17)\n    x19 = ulcorner(x9)\n    x20 = rbind(subtract, x19)\n    x21 = chain(x15, x20, x20)\n    x22 = sfilter(x13, x21)\n    x23 = llcorner(x9)\n    x24 = rbind(subtract, x23)\n    x25 = chain(x15, x24, x20)\n    x26 = ofcolor(I, x7)\n    x27 = center(x26)\n    x28 = of2(x22, x27)\n    x29 = center(x28)\n    x30 = shoot(x27, UP_RIGHT)\n    x31 = shoot(x27, DOWN_LEFT)\n    x32 = fork(combine, x30, x31)\n    x33 = fork(combine, x32, x32)\n    x34 = lbind(77777026006)\n    x35 =667676600647(x32)\n    x36 = asobject(x35)\n    x37 = UNITY(x36)\n    x38 = difference(x"], [1.1, "def solve_8720c8fe(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = replace(I, FIVE, FOUR)\n    x3 = argmin(x1, size)\n    x4 = argmax(x1, size)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = objects(x13, T, F, T)\n    x15 = argmin(x14, leftmost)\n    x16 = argmax(x14, leftmost)\n    x17 = fgpartition(x13)\n    x18 = merge(x17)\n    x19 = toindices(x18)\n    x20 = lrcorner(x55)\n    x21 = ulcorner(x25)\n    x22 = shoot(x20, UNITY)\n    x23 = shoot(x21, NEG_UNITY)\n    x24 = fill(x17, SIX, x25)\n    x25 = fill(x24, TWO, x12)\n    x26 = fill(x25, ONE, x23)\n    x27 = fill(x26, ZERO, x18)\n    x28 = rbind(order, lefthalf)\n    x29 = rbind(order, righthalf)\n    x30 = lbind(contained, TWO)\n    x31 = compose(x30, palette)\n    x32 = rbind(canvas, fgpartition)\n    x33 = chain(x32, merge, palette)\n    x34 = fork(contained, x33, first)\n    x35 = compose(first, x34)\n    x36 = lbind(gravitate, x245)\n    x37 = compose(x36, x35)\n    x38 = fork(shift, x35, x37)\n"], [1.1, "def solve_9698188c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first110000000000\n    0000000002000000\n    00020211220020200\n    00088811000122200\n    0082228800002000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000774440000000\n    00000707000000000\n    0000077770000000\n    0000777770000000\n    \"\"\"\n    x1 = lbind(shift, x3)\n    x2 = compose(x1, shape)\n    x3 = fork(paint, x2, identity)\n    x4 = x3(I)\n    x5 = objects(x4, T, F, T)\n    x6 = rbind(colorcount, SIX)\n    x7 = palette(x5)\n    x8 = argmax(x7, x6)\n    x9 = remove(x8, x7)\n    x10 = product(x9, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = colorfilter(x2, FOUR)\n    x14 =669(x11)\n    x15 =669(x12)\n    x16 = astuple(x14, x15)\n    x17 = undercolor(x4, x16)\n    x18 = recolor(x8, x17)\n    x19 = objects(x18, T, F, T)\n    x20 = colorfilter(x19, FIVE)\n    x21 = mapply(toindices, x20)\n    x22 = box(x21)\n    x23 = rbind(difference, x22)\n    x24 = rbind(greater, TWO)\n    x25 = chain(x24, size, x23)\n    x26 = compose(x25, x23)\n    x27 = chain(x6, x18, x26)\n    x28 = extract(x21, x27)\n    x29 = subgrid(x28, x4)\n    x30"], [1.1, "def solve_df5d8bcb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = fork(equality, height, width)\n    x4 = sfilter(x2, x3)\n    x5 =merge(x4)\n    x6 = color(x5)\n    x7 = canvas(x6, TWO_BY_TWO)\n    x8 = colorcount(I, ZERO)\n    x9 = dmirror(x8)\n    x10 = hconcat(x7, x9)\n    x11 = I(x10)\n    x12 =18788880x11)\n    x13 = objects(x12, T, F, T)\n    x14 = colorfilter(x13, ZERO)\n    x15 =2b6022200008000000\n    x16 = hbbind(\ufffd Philips, x22)\n    x17 = vmirror(x12)\n    x18 = vconcat(x16, x17)\n    x19 = merge(x18)\n    x20 = dmirror(x19)\n    x21 = papply(pair, x19, x20)\n    x22 = astuple(ONE, THREE)\n    x23 = astuple(TWO, ZERO)\n    x24 = product(x22, x23)\n    x25 = argmax(x24, size)\n    x26 = other(x8, x25)\n    x27 = color(x26)\n    x28 = dedupe(x22)\n    x29 = rbind(rapply, x28)\n    x31 = apply(x29, x18)\n    x32 = x27(x31)\n    x33 = x25(x32)\n    x34 = initset(x33)\n    x35 = insert(x77, x34)\n    x36 = difference(x37, x35)\n    x37 =60 branch(x36, x22, x25)\n    x38 = apply(x37, x32)\n    x39 = lbind(fork, both)\n    x40 = lbind(rbind, difference)\n    x41 = lbind("], [1.1, "def solve_35d37cff(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(compose, normalize)\n    x4 = lbind(extract, x2)\n    x5 = chain(size, x3, x4)\n    x6 = matcher(x5, ONE)\n    x7 = lbind(identrapply, x5)\n    x8 = chain(first, x7, x6)\n    x9 = matcher(x8, TWO)\n    x10 = compose(initset, x0)\n    x11 = fork(rapply, x10, x6)\n    x12 = compose(first, x11)\n    x13 = matcher(x12, TWO)\n    x14 = rbind(212, x5)\n    x15 = compose(last, x14)\n    x16 = lbind(matcher, x13)\n    x17 = compose(x15, x16)\n    x18 =a7946f11376000000\n    x19 = fork(both, x13, x17)\n    x20 = fork(both, x15, x18)\n    x21 = fork(equality, toindices, x19)\n    x22 = lbind(apply, x21)\n    x23 = chain(merge, x22, x15)\n    x24 = lbind(add, RIGHT)\n    x25 = compose(x24, x15)\n    x26 = chain(toivec, x25, x23)\n    x27 = fork(add, last, x23)\n    x28 = fork(astuple, x27, x26)\n    x29 = fork(add, x28, x15)\n    x30 = rbind(shoot, UNITY)\n    x31 = compose(x30, x29)\n    x32 = fork(add, x32, x281)\n    x33 = rbind(apply, vatching)\n    x34 = lbind(rbind, branch)\n    x35 = fork(x33, x34, x31)\n    x36 = compose(x35, x31)\n    x37 = fork("], [1.1, "def solve_2c721111(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(width, merge, fgpartition)\n    x7 = x6(x5)\n    x8 = normalize(x7)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = lbind(compose, x4)\n    x12 = lbind(lbind, manhattan)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(x12, x11, initset)\n    x15 = fork(manhattan, x13, x14)\n    x16 = fork(multiply, x15, x12)\n    x17 = rapply(x10, x16)\n    x18 = ulcorner(x2)\n    x19 = lbind(shift, x2)\n    x20 = mapply(x19, x17)\n    x21 = double(`130)\n    x22 = astuple(x21, x20)\n    x23 = maximum(x22)\n    x24 = dmirror(x23)\n    x25 = x24(x62)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x3)\n    x28 = astuple(x23, x27)\n    x29 = maximum(x28)\n    x30 =. Mach divide(x29, x27)\n    x31 =\n    3decea87x30(x31)\n    x32 = interval(x dom, x40, ONE)\n    x33 = ONE(x32)\n    x34 = cmirror(x32)\n    x35 = leastcolor(x34)\n    x36 = mostcolor(x34)\n    x37 = lbind(recolor, x35)\n    x38 = product(x35, x73)\n    x39 = apply(x37, x38)\n    x40 ="], [1.1, "def solve_00ff7fcd(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = trim(x3)\n    x5 = palette(x4)\n    x6 = other(x5, ZERO)\n    x7 = ofcolor(x4, x6)\n    x8 = vmirror(x3)\n    x9 = asindices(x8)\n    x10 = shift(x9, UNITY)\n    x11 = fill(x1, x6, x10)\n    x12 = vmirror(x11)\n    x13 = shift(x12, ulcorner)\n    x14 = occurrences(x4, x1)\n    x15 = combine(x14, x13)\n    x16 = shift(x15, lrcorner)\n    x17 = fill(x11, x6, x16)\n    x18 = urcorner(x7)\n    x19 = shoot(x18, UNITY)\n    x20 = llcorner(x7)\n    x21 = shoot(x20, UNITY)\n    x22 = fill(x17, x9, x21)\n    x23 = occurrences(x4, x17)\n    x24 = combine(x23, x22)\n    x25 = shift(x24, ulcorner)\n    x26 =irdcorner(x25)\n    x27 = shoot(x26, UP_RIGHT)\n    x28 = llcorner(x25)\n    x29 = shoot(x28, DOWN_LEFT)\n    x30 = fill(x17, x36, x29)\n    x31 = mapply(b7700, x27)\n    x32 = mapply(be946892(x31)\n    x33 = toindices(x52)\n    x34 = combine(x33, x32)\n    x35 = shift(x34, x28)\n    x36 = ulcorner(x25)\n    x37 = shift(x355, x36)\n    x38 = fill(x30, x6, x37)\n    O = mapply("], [1.1, "def solve_61509b47(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = order(x1, x3)\n    x5 = extract(x4, x4)\n    x6 = lbind(([host Regina778887000\n    x7 = compose(ineighbors, last)\n    x8 = rbind(rapply, x7)\n    x9 = chain(first, x8, initset)\n    x10 = branch(x5, identity, x9)\n    x11 = x10(x8)\n    x12 = leastcolor(I)\n    x13 = palette(x11)\n    x14 = remove(x12, x13)\n    x15 = other(x14, x12)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = even(x16)\n    x19 = branch(x18,UNITY, hmirror)\n    x20 = add(UNITY, FOUR)\n    x21 = initset(x20)\n    x22 = insert(x19, x21)\n    x23 = backdrop(x22)\n    x24 = lbind(add, DOWN)\n    x25 = initset(x24)\n    x26 = insert(x23, x25)\n    x27 = urcorner(x23)\n    x28 = llcorner(x23)\n    x29 = compose(last, first)\n    x30 = add(DOWN, x29)\n    x31 = initset(x30)\n    x32 = insert(x27, x31)\n    x33 = lbind(add, DOWN)\n    x34 = initset(x33)\n    x35 = insert(x32, x34)\n    x36 = compose(x19, first)\n    x37 =224(x35)\n    x38 =224(x36)\n    x39 = compose(positive, size)\n    x40 = rbind(toobject, I)\n    x41 = chain(x39, x40, merge)\n    "], [1.1, "def solve_c62918c0(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = subgrid(x1, I)\n    x3 =replace(x2, ZERO, ONE)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = vsplit(x3, x4)\n    x7 = lbind(greater, FOUR)\n    x8 = compose(x7, numcolors)\n    x9 = sfilter(x6, x8)\n    x10 = merge(x9)\n    x11 = dmirror(x10)\n    x12 = fill(x11, ZERO, x9)\n    x13 = merge(x9)\n    x14 = crop(x13, ORIGIN, x12)\n    x15 = increment(x4)\n    x16 = insert(x15, x13)\n    x17 = crop(x x14, DOWN, x16)\n    x18 =5555558873(x17)\n    x19 = crop(x18, ZERO_BY_TWO, x16)\n    x20 = increment(x5)\n    x21 = increment(x14)\n    x22 = astuple(x20, x21)\n    x23 = interval(ZERO, x22, ONE)\n    x24 =315555553(x23)\n    x25 = tojvec(x24)\n    x26 =54077765(add(x25, x23)\n    x27 =17906723(x26)\n    x28 = mostcolor(I)\n    x29 = shape(I)\n    x30 = canvas(x28, x29)\n    x31 = lbind(7329, connect)\n    x32 = compose(x31, initset)\n    x33 = compose(palette, last)\n    x34 = asindices(x50)\n    x35 = lbind(toobject, x50)\n    x36 = compose(x34, x35)\n    x37 = lbind(5, x chain)\n    x38 = chain(x37, lefthalf, trim)\n    x39 = lbind(chain, x38"], [1.1, "def solve_f2c0734e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_440b2413(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = rbind(add, RIGHT)\n    x5 = compose(x4, x3)\n    x6 = chain(toivec, decrement, numcolors)\n    x7 = fork(add, shape, x5)\n    x8 =52222225    00000000000000\n    0000000000000000\n    Example output:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    00880880000200000\n    0000000000000000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = compose(maximum, shape)\n    x3 = lbind(add, ONE)\n    x4 = chain(flip, x3, x2)\n    x5 = lbind(fork, colorcount)\n    x6 = rbind(x5, dmirror)\n    x7 = compose(x6, asobject)\n    x8 = lbind(rbind, colorcount)\n    x9 = chain(positive, center, x8)\n    x10 = lbind(rbind, colorcount)\n    x11 = chain(x9, toivec, x10)\n    x12 = lbind(x11, asobject)\n    x13 =4478154(I)\n    x14 =\n    080010(x13)\n    x15 =740000000(x14)\n    x16 =2100000707(x15)\n    x17 = objects(x, T, F, F)\n    x18 = palette(x17)\n    x19 = compose(flip, asobject)\n    x20 = matcher(x19, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x18, x21)\n    x23 = argmax(x22, size)\n    x24 =000170000000000\n"], [1.1, "def solve_4933671f(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(rbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = initset(x21)\n    x23 = fork(manhattan, identity, shape)\n    x24 = chain(even, maximum, x23\"\"\"\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, x25, x12)\n    x27 = fork(shift, x22, x26)\n    x28 = interval(ZERO, SIX, ONE)\n    x29 = mapply(x27, x28)\n    x30 = apply(x26, x29)\n    x31 = lbind(pf76dmirror)\n    x32 = occurrences(x31, x30)\n    x33 = lbind(shift, x299)\n    x34 = mapply(x33, x32)\n    x35 = combine(x32, x34)\n    x36 = fill(x31, x3, x35)\n    x37 = palette(x supplies)\n    x38 = normalize(x remove)\n    x39 = lbind"], [1.1, "def solve_a82ff463(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = fork( intersection, square, outer)\n    x4 = lbind(mapply, recolor)\n    x5 = lbind(occurrences, I)\n    x6 = chain(x4, x5, leftmost)\n    x7 = chain(size, dedupe, x6)\n    x8 = argmax(x2, x7)\n    x9 = dmirror(x8)\n    x10 = insert(x8, x9)\n    x11 = insert(x9, x10)\n    x12 =773(x11)\n    x13 = subgrid(x12, I)\n    x14 = add(TWO, ONE)\n    x15 = hinsert(x14, x4)\n    x16 = width(x13)\n    x17 = divide(x16, x31)\n    x18 = upscale(x15, x17)\n    x19 = fork(multiply, first, last)\n    x20 = neighbors(x4)\n    x21 = remove(x4, x20)\n    x22 = lbind(extract, x21)\n    x23 = lbind(rbind, greater)\n    x24 = rbind(compose, x19)\n    x25 = chain(x24, x23, x8)\n    x26 = lbind(lbind, greater)\n    x27 = chain(x26, x24, xl)\n    x28 = fork(sfilter, x25, x27)\n    x29 = lbind(remove, x8)\n    x30 = chain(x29, x28, palette)\n    x31 = compose(Example output:\n    41511\n    40151\n    03250\n    10124\n    \"\"\"\n    x1 = leastcolor(x13)\n    x2 = ofcolor(x13, x1)\n    x3 = argmax(x2, x3)\n    x4 = leastcolor(x13)\n    x5 = initset(x3)\n    x6 = cover(x13, x5)\n    x7 ="], [1.1, "def solve_5ac6fdbf(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x2, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmax(x6, x7)\n    x9 = leastcolor(x8)\n    x10 = uppermost(x8)\n    x11 = leftmost(x8)\n    x12 = height(x8)\n    x13 = width(x8)\n    x14 = interval(x10, x12, x13)\n    x15 = uppermost(x8)\n    x16 = interval(x11, x15, ONE)\n    x17 =\n    61466\n    1464\n    r114\n    x17)\n    x18 = astuple(x14, x12)\n    x19 = canvas(x9, x18)\n    x20 = height(x9)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = rbind( product, x21)\n    x23 = lbind(compose, first)\n    x24 = compose(x22, x23)\n    x25 = lbind(rbind, greater)\n    x26 = compose(x25, first)\n    x27 = lbind(compose, last)\n    x28 = compose(x27, last)\n    x29 = fork(x26, x24, x28)\n    x30 = fork(sfilter, x27, x29)\n    x31 = compose(decrement, center)\n    x32 = lbind(apply, x31)\n    x33 = lbind(ofcolor, I)\n    x34 = rbind(product, x30)\n    x35 = chain(x32, x33, x34)\n    x36 = lbind(canvas, ZERO)\n    x37 = compose(x36, x35)\n    x38 = fork(paint, x37, x31)"], [1.1, "def solve_40175042(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(toobject, I)\n    x3 = chain(leastcolor, x2, palette)\n    x4 = remove(ZERO, x1)\n    x5 = compose(halve, numcolors)\n    x6 = fork(add, last, x5)\n    x7 = compose(initset, x6)\n    x8 = order(x4, x7)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = leftmost(x9)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = apply(tojvec, x13)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x12)\n    x17 = rightmost(x9)\n    x18 = increment(x17)\n    x19 = increment(x18)\n    x20 = matcher(last, x598)\n    x21 = rbind(astuple, x19)\n    x22 = compose(last, x21)\n    x23 = compose(greater, x02)\n    x24 = chain(flip, x22, x23)\n    x25 = fork(compose, x23, x24)\n    x26 = lbind(shift, xI)\n    x27 = rbind(multiply, x15)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(mapply, x28, x21)\n    x30 = lbind(compose, x4)\n    x31 = compose(x30, x29)\n    x32 = fork(difference, x31, x26)\n    x33 = compose(x32, x31)\n    x34 = fork(recolor, x21, x33)\n    x35 = astuple(x17, x18)\n    x36 = astuple(x34, x32)\n    x37 = initset(x36)\n    x38 = insert(x45, x37)\n    x39 ="], [1.1, "def solve_01c132be(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = merge(x1)\n    x7 = compose(first, toindices)\n    x8 = chain(size, subgrid, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = argmax(x3, x9)\n    x11 = order(x3, x10)\n    x12 = identity(x11)\n    x13 = x12(I)\n    x14 =x12(I)\n    x15 = fgpartition(x14)\n    x16 = merge(x15)\n    x17 = center(x16)\n    x18 = merge(x15)\n    x19 = center(x18)\n    x20 = vfrontier(x17)\n    x21 = vfrontier(x19)\n    x22 = center(x16)\n    x23 = subtract(x22, x26)\n    x24 = shift(x4, x23)\n    x25 = paint(x13, x24)\n    x26 = subgrid(x5, x25)\n    x27 = frontiers(x26)\n    x28 = mfilter(x27, hline)\n    x29 = mfilter(x27, vline)\n    x30 = add(x28, x29)\n    x31 = ulcorner(x29)\n    x32 = width(x6)\n    x33 = multiply(x32, x30)\n    x34 = shift(x34, x31)\n    x35 = toindices(x34)\n    x36 = lrcorner(x35)\n    x37 = shape(x6)\n    x38 = maximum(x37)\n    x39 = lbind(shift, x35)\n    x40 = power(x39, x38)\n    x41 = fork(intersection, x33, x40)\n    x42 = compose(size, x41)\n    x43 ="], [1.1, "def solve_e299bf50(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = ofcolor(I, THREE)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    x3 = rbind(multiply, THREE)\n    x4 = apply(x3, x1)\n    x5 = astuple(FOUR, FOUR)\n    x6 = shift(x4, x5)\n    x7 = fork(insert, identity, neighbors)\n    x8 = apply(x7, x6)\n    x9 = rbind(toobject, I)\n    x10 = rbind(colorcount, THREE)\n    x11 = chain(x10, x9, difference)\n    x12 = matcher(x11, TWO)\n    x13 =096296970445(I)\n    x14 = subgrid(x13, I)\n    x15 = mostcolor(x14)\n    O = fill(I, x15, x6)\n    return O"], [1.1, "def solve_fd977c7a(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = compose(center, center)\n    x4 = order(x2, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = EIGHT(x1)\n    x7 = compose(x5, x6)\n    x8 = merge(x4)\n    x9 = compose(hmirror, vmirror)\n    x10 = rbind(shoot, UP)\n    x11 =8000(x10, x7)\n    x12 = mapply(x8, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [1.1, "def solve_1f2bcbdb(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = argmax(x1, size)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = lbind(compose, flip)\n    x7 = lbind(matcher, first)\n    x8 = chain(x6, x5, x7)\n    x9 = lbind(colorcount, I)\n    x10 = compose(x9, EIGHT)\n    x11 = fork(equality, identity, x8)\n    x12 = sfilter(x1, x11)\n    x13 = compose(size, last)\n    x14 = totuple(x12)\n    x15 = apply(x13, x14)\n    x16 = x15(x2)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 =44(x21, x17)\n    x20 = uppermost(x19)\n    x21 = matcher(first, x20)\n    x22 = leftmost(x19)\n    x23 = apply(x21, x22)\n    x24 = uppermost(x23)\n    x25 = matcher(first, x24)\n    x26 = shape(x23)\n    x27 = add(DOWN, x26)\n    x28 = upsmost(x23)\n    x29 = color(x3)\n    x30 = canvas(x39, x27)\n    x31 = asobject(x30)\n    x32 = matcher(first, x29)\n    x33 = compose(flip, x32)\n    x34 = sfilter(x31, x33)\n    x35 =70(x34)\n    x36 = sfilter(x92, x35)\n    x37 = center(x35)\n    x38 = merge(x36)\n    x39 = fill(I, x37, x38)\n    x40 = paint(x39, x3)\n    O = subgrid(x3, x40)\n    return O"], [1.1, "def solve_c6d22717(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = colororner(x8)\n    x12 = insert(x11, x8)\n    x13 = insert(x10, x12)\n    x14 = branch(x9, x13, x3)\n    x15 = mapply(x14, x12)\n    891598000af18535\n    00519900049its50\n    0091591000930551\n    \"\"\"\n    x1 = palette(I)\n    x2 = other(x1, x10)\n    x3 = contained(x17, x13)\n    x4 = branch(x6, x2, x3)\n    O = fill(I, x20, x4)\n    return O"], [1.1, "def solve_6e69b3c8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7ond(x4)\n    x10 = matcher(first, x9)\n    x11 = fork(sfilter, identity, x10)\n    x12 = objects(I, T, F, T)\n    x13 = colorfilter(x12, x9)\n    x14 = rbind(toobject, I)\n    x15 = compose(dneighbors, rbind)\n    x16 = fork(recolor, x15, toindices)\n    x17 = mapply(x16, x13)\n    x18 = paint(I, x17)\n    x19 = objects(x18, T, F, T)\n    x20 = objects(x18, T, F, T)\n    x21 = apply(last, x20)\n    x22 =893 order(x21, x17)\n    x23 = rbind(vmmatching, x22)\n    x24 = rbind(hmatching, x22)\n    x25 = fork(either, x23, x24)\n    x26 = extract(x21, x25)\n    x27 = remove(x26, x21)\n    x28 = merge(x27)\n    O = paint(x18, x28)\n    return O"], [1.1, "def solve_50a6596c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = slowlyuffer(x2, UNITY)\n    x24 = lrcorner(x2)\n    x25 = rbind(subtract, x24)\n    x26 = TEN(TWO)\n    x27 = rbind(shift, x26)\n    x28 = chain(x25, x27, ulcorner)\n    x29 = fork(recolor, x color, x28)\n    x30 = mapply(x29, x3)\n    O = paint(x22, x30)\n    return O"], [1.1, "def solve_7eb145a5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = chain(initset,normalize, toindices)\n    x6 = lbind(matcher, x5)\n    x7 = compose(x6, shape)\n    x8 = fork(sfilter, identity, x7)\n    x9 = matcher(x8, ONE)\n    x10 =flip(x9)\n    x11 = lbind(occurrences, I)\n    x12 = compose(x11, x8)\n    x13 =05250(x1)\n    x14 = extract(x10, x12)\n    x15 = extract(x19, x13)\n    x16 =usccorner(x14)\n    x17 = ulcorner(x15)\n    x18 = subgrid(x14, I)\n    x19 = subgrid(x15, I)\n    x20 = hconcat(x18, x16)\n    x21 = hconcat(x19, x17)\n    x22 = vconcat(x20, x21)\n    x23 = vconcat(x22, x18)\n    x24 = asobject(x23)\n    x25 = occurrences(x14, x14)\n    x26 = mapply(b19, x25)\n    x27 = shift(x24, UNITY)\n    x28 = paint(a740, x27)\n    O = rot90(x28)\n    return O"], [1.1, "def solve_960435b6(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sizefilter(x2, ONE)\n    x4 =mer(x3, gravitate)\n    x5 =01(x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [1.1, "def solve_10afbf4c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmer(x1, x1)\n    x3 = remove(x2, x1)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = portrait(x4)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = color(x11)\n    x13 = replace(x10, x12, ZERO)\n    x14 =\n    x15 = dmirror(x13)\n    x16 = x15(x14)\n    x17 = insert(x16, x9)\n    x18 = insert(x16, x17)\n    x19 = ulcorner(x9)\n    x20 = urcorner(x9)\n    x21 = shoot(x19, NEG_UNITY)\n    x22 = shoot(x20, UNITY)\n    x23 = shoot(x21, DOWN_LEFT)\n    x24 = shoot(x22, UP_RIGHT)\n    x25 = combine(x23, x24)\n    x26 = branch(x6,49, height)\n    x27 = branch(x6, difference, width)\n    x28 = ofcolor(x41, x12)\n    x29 = matcher(x31, x1)\n    x30 = extract(x28, x29)\n    x31 = ulcorner(x30)\n    x32 = subtract(x38, x31)\n    x33 = last(x24)\n    x34 = shift(x31, x33)\n    x35 = shift(x34, x28)\n    x36 = paint(x10, x35)\n    O = x7(x36)\n    return O"], [1.1, "def solve_aa8ed92c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(canvas, NEG_ONE)\n    x7 =69760 cover(I, x6)\n    x8 = papply(shift, x2, x7)\n    x9 = lbind(canvas, compose)\n    x10 = compose(x9, cmirror)\n    x11 = fork(vconcat, identity, x10)\n    x12 = compose(asobject, x11)\n    x13 = apply(x12, x8)\n    x14 = shift(x13, UP)\n    x15 = compose(de shift, ulcorner)\n    x16 = fork(shift, identity, x15)\n    x17 = mapply(x16, x14)\n    O = underfill(x7, x5, x17)\n    return O"], [1.1, "def solve_2e23c4c8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = asindices(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = leastcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = mapply(neighbors, x5)\n    x7 = difference(x1, x5)\n    x8 = toobject(x7, I)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(I, x9)\n    x11 = matcher(first, x4)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = shift(x13, UP)\n    x15 = ulcorner(x12)\n    x16 = sfilter(x14, x12)\n    x17 = crop(x16, x14, x15)\n    x18 = fork(equality, identity, urcorner)\n    x19 =36(x18, x17)\n    x20 = dmirror(x19)\n    x21 = papply(pair, x19, x20)\n    x22 = x21(x22)\n    x23 = urcorner(x22)\n    x24 = sfilter(x22, x23)\n    x25 = increment(x24)\n    x26 = rbind(divide, x25)\n    x27 = apply(x26, x24)\n    x28 = tojvec(x27)\n    x29 = shift(x28, x21)\n    x30 = mapply(x26, x29)\n    x31 = fill(I, x9, x30)\n    x32 = replace(x31, x4, SEVEN)\n    O = fill(x32, x4, x31)\n    return O"], [1.1, "def solve_71727c14(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x10)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n     x23 = fork(mapply, first, last)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [1.1, "def solve_ab5b1f91(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 =74(x7, x5)\n    x9 = replace(x8, x4, x5)\n    O = replace(x9, x4, x5)\n    return O"], [1.1, "def solve_54961b5b(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, urcorner)\n    x3 = compose(x2, center)\n    x4 = fork(shift, identity, x3)\n    x5 = apply(x4, x1)\n    x6 = merge(x5)\n    x7 = lbind(colorfilter, x1)\n    x8 = rbind(argmax, rightmost)\n    x9 = compose(x8, x7)\n    x10 = apply(x9, x6)\n    x11 = mapply(x4, x10)\n    x12 = lbind(prapply, connect)\n    x13 = fork(x12, identity, identity)\n    x14 = compose(x13, x11)\n    x15 = fork(78,24x14, identity)\n    x16 = apply(x15, x11)\n    x17 = mapply(vfrontier, x16)\n    x18 = mapply(x17, x6)\n    x19 = fill(I, EIGHT, x18)\n    x20 = fill(x19, TWO, x13)\n    O = fill(x20, ONE, x18)\n    return O"], [1.1, "def solve_8a5ee1f0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = width(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, identity, rot90)\n    x8 = branch(x6, identity, rot270)\n    x9 = x7(x8)\n    x10 = branch(x6, identity, rot270)\n    x11 = branch(x6, identity, except ulcorner)\n    x12 = branch(x6, identity, points_88)\n    x13 = x11(x12)\n    x14 = upscale(x4, TWO)\n    x15 = branch(x6, identity, rot90)\n    x16 = branch(x6, identity, rot270)\n    x17 = x15(x9)\n    x18 = initset(x17)\n    x19 = insert(x13, x18)\n    x20 = insert(x14, x19)\n    x21 = subtract(x20, TWO_BY_ZERO)\n    x22 = branch(x6, asindices, x21)\n    x23 = x15(x22)\n    O = move(x10, x23, x22)\n    return O"], [1.1, "def solve_3c857463(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = divide(x4, x5)\n    x7 = upscale(x3, x6)\n    x8 = sizefilter(x1, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = leastcolor(x10)\n    x12 = ofcolor(x10, x11)\n    x13 = hsplit(x10, DOWN)\n    x14 = merge(x13)\n    x15 = fill(x10, x11, x14)\n    x16 = fgpartition(x15)\n    x17 = merge(x16)\n    x18 = cover(x13, x17)\n    x19 =270(x18)\n    x20 = shift(x495, x19)\n    x21 = merge(x17)\n    x22 = fill(x20, x21, x20)\n    x23 = urcorner(xNEG_UNITY)\n    x24 = ulcorner(x23)\n    x25 = shoot(x22, UP_RIGHT)\n    x26 = shoot(x24, DOWN_LEFT)\n    x27 = underfill(x22, x11, x21)\n    x28 = cover(x27, x25)\n    x29 = combine(x25, x28)\n    x30 = shift(x29, UP_RIGHT)\n    x31 = ulcorner(x30)\n    x32 = mapply(x31, x29)\n    x33 = cover(x32, x30)\n    O = fill(x33, x11, x32)\n    return O"], [1.1, "def solve_dc567e23(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorizet(x3)\n    x5 = sizefilter(x4, ONE)\n    x6 = lbind(contained, TWO)\n    x7 = compose(x6, shape)\n    x8 = rbind(mfilter, hline)\n    x9 = chain(size, x8, x7)\n    x10 = matcher(x9, ZERO)\n    x11 = extract(x5, x10)\n    x12 = other(x5, x11)\n    x13 =412(x11, DOWN)\n    x14 =214(x13, ONE)\n    x15 = rbind(add, LEFT)\n    x16 = chain(x11, x15, x14)\n    x17 = apply(x16, x12)\n    x18 = rbind(add, RIGHT)\n    x19 = chain(x11, x18, x14)\n    x20 = apply(x19, x17)\n    x21 = color(x12)\n    x22 = canvas(x21, THREE_BY_THREE)\n    x23 = equality(x22, EIGHT)\n    x24 = hsplit(x23, ONE)\n    O = merge(x24)\n    return O"], [1.1, "def solve_2da1e09b(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = lefthalf(x4)\n    x7 = righthalf(x4)\n    x8 = objects(x7, T, F, T)\n    x9 = add(x6, TWO_BY_TWO)\n    x10 = T rbind(contained, x9)\n    x11 = compose(x10,20)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x4)\n    x14 = chain(720, x12, palette)\n    x15 = lbind(lbind, shift)\n    x16 = occurrences(x4, x5)\n    x17 = objects(x9, T, F, T)\n    x18 = mapply(x15, x17)\n    x19 = mapply(x16, x18)\n    x20 =0x5(x19)\n    x21 = cover(x4, x20)\n    x22 = fill(x21, EIGHT, x19)\n    O = fill(x22, TWO, x20)\n    return O"], [1.1, "def solve_3a74466d(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I,0000000\n    return O"], [1.1, "def solve_fa4cf902(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(outbox, x2)\n    x4 = fork(difference, x3, toindices)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, ZERO)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = fork( interval, x7, x6)\n    x9 = argmax(x1, x8)\n    x10 = objects(I, T, F, T)\n    x11 = remove(x9, x10)\n    x12 = lbind(chain, size)\n    x13 = lbind(rbind, intersection)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(lbind, shift)\n    x16 = compose(x12, x14)\n    x17 = lbind(compose, x6)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x18)\n    x20 = lbind(rbind, x5)\n    x21 = compose(x20, x19)\n    x22 = fork(apply, x21, x16)\n    x23 = fork(mapply, x18, x19)\n    x24 = fork(difference, x23, x14)\n    x25 = chain(size, x17, x24)\n    x26 = lbind(rbind, intersection)\n    x27 = compose(x26, x252)\n    x28 = fork(compose, x27, x230)\n    x29 = fork(lbind, x177, x28)\n    x30 = lbind(rbind, shift)\n    x31 = chain(x30, x29, x27)\n    x32 = fork(76078, x30, x31)\n    x33 = fork(mass, x32, x32)\n    x34 = fork(return O"], [1.1, "def solve_2a9e2f97(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(SIX, ONE)\n    x3 = palette(I)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = extract(x3, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x8, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(EIGHT, x12)\n    x14 =7increment(xmin)\n    x15 =710004444(x14)\n    x16 = vmirror(x15)\n    x17 = shift(x16, UNITY)\n    x18 = paint(I, x17)\n    x19 = fork( paint, identity, dmirror)\n    x20 = x19(x82)\n    x21 = intersection(x17, x20)\n    O = paint(x18, x21)\n    return O"], [1.1, "def solve_b8bc4eeb(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = fill(I, ZERO, x2)\n    x4 = replace(x3, ONE, ZERO)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = trim(x6)\n    x10 = insert(x6, x9)\n    x11 = insert(x7, x10)\n    x12 = recolor(x8, x11)\n    x13 = remove(x12, x5)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x3, x15)\n    x17 =481(x3)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = compose(x18, center)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x14)\n    O = paint(x16, x21)\n    return O"], [1.1, "def solve_b1545954(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = uppermost(x2)\n    x5 = equality(x4, DOWN)\n    x6 = leftmost(x3)\n    x7 = equality(x6, identity)\n    x8 = color(x2)\n    x9 = canvas(x8, x5)\n    x10 = equality(x9, identity)\n    x11 = rightmost(x3)\n    x12 = equality(x11, identity)\n    x13 = leftmost(x3)\n    x14 = ambitious(x12, x13)\n    x15 = branch(x10, initset, x14)\n    x16 = branch(x11,7, x15)\n    x17 = ulcorner(x2)\n    x18 = decrement(x17)\n    x19 = upscale(x15, x18)\n    x20 = shift(x19, UNITY)\n    x21 = llcorner(x3)\n    x22 = decrement(x21)\n    x23 =158(x15, x22)\n    x24 = shift(x23, x41)\n    x25 = lrcorner(x2)\n    x26 =primaryindices(x25)\n    x27 =727(toindices, x25)\n    x28 = fork(shoot, crement, difference)\n    x29 = product(x27, x26)\n    x30 = fork(shoot, identity, cmirror)\n    x31 = mapply(x30, x29)\n    x32 = paint(x9, x31)\n    x33 = equality(x22, FOUR)\n    x34 = branch(x33, x22, x25)\n    O = paint(x32, x34)\n    return O"], [1.1, "def solve_e76cac47(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove98bordering(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x4)\n    x9 = paint(x7, x8)\n    x10 = height(x4)\n    x11 = width(x4)\n    x12 = increment(x10)\n    x13 = divide(x11, FOUR)\n    x14 = increment(x13)\n    x15 = interval(outbox, x14, ONE)\n    x16 =\n    x17 =\n    86117\n    0660\n    \"\"\"\n    x1 = ofcolor(x9, x5)\n    x2 = fill(x9, ZERO, x1)\n    x3 = normalize(x8)\n    x4 = lbind(shift, x3)\n    x5 = objects(x2, F, F, T)\n    x6 = mapply(x4, x5)\n    O = fill(x9, FOUR, x6)\n    return O"], [1.1, "def solve_4cd4ff24(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, DOWN, RIGHT)\n    x8 = branch(x6, uppermost, leftmost)\n    x9 = x7(x8)\n    x10 = branch(x6, leftmost, rightmost)\n    x11 = x9(x10)\n    x12 = greater(x8, x11)\n    x13 = uppermost(x2)\n    x14 = greater(x8, x13)\n    x15 = height(x9)\n    x16 = equality(x15, x14)\n    x17 = branch(x16, lowermost, uppermost)\n    x18 = x17(x8)\n    x19 = subtract(x18, x12)\n    x20 = decrement(x19)\n    x21 = width(x9)\n    x22 = hsplit(x9, x21)\n    x23 = rbind(rapply, x22)\n    x24 = compose(first, x23)\n    x25 = compose(x24, x12)\n    x26 = apply(x25, x22)\n    x27 =245(x26)\n    x28 = double(x25)\n    x29 = equality(x28, x26)\n    x30 = urcorner(x272)\n    x31 = multiply(x26, x30)\n    x32 =43(x29)\n    x33 = interval(ZERO, x32, x29)\n    x34 = apply(tojvec, x33)\n    x35 = x34(x23)\n    x36 = lbind(shift, x24)\n    x37 = mapply(x36, x35)\n    x38 = paint(I, x37)\n    x39 = cover(x38, x2)\n    O = x3(x39)\n    return O"], [1.1, "def solve_24ba13b7(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(vfrontier, x1)\n    x3 = underfill(I, TWO, x2)\n    x4 = replace(x3, ONE, ZERO)\n    x5 = width(x4)\n    x6 =745(x4)\n    x7 =446(x6, ZERO)\n    x8 = argmin(x1, x7)\n    x9 = x14(x8)\n    x10 = shift(x9, x5)\n    O = fill(x4, x3, x10)\n    return O"], [1.1, "def solve_9d091324(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    xc = matcher(x3, TWO)\n    x09 = extract(x1, x6)\n    x10 = extract(x1, x2)\n    x11 = ulcorner(x9)\n    x12 = ulcorner(x10)\n    x13 = subgrid(x12, I)\n    x14 = subtract(x11, x13)\n    x15 = subtract(x15, x13)\n    x16 = other(x1, x9)\n    x17 = x13(x16)\n    x18 = insert(x16, x17)\n    x19 = lbind(argmin, x18)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(astuple, x21, identity)\n    x23 = apply(x22, x18)\n    x24 = maximum(x23)\n    x25 = branch(x24, x22, x23)\n    x26 = DOWNscale(x25, lowermost)\n    x27 = matcher(first, ZERO)\n    x28 =filter(x23, x27)\n    x29 = double(x28)\n    x30 = tojvec(x29)\n    x31 =8887(x30)\n    x32 = shift(x29, x31)\n    x33 = merge(x82)\n    x34 = cover(I, x33)\n    x35 = mapply(delta, x32)\n    O = fill(x34, ZERO, x35)\n    return O"], [1.1, "def solve_98d3d2df(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = chain(positive, positive, shape)\n    x2 = crop(I, UP, THREE_BY_THREE)\n    x3 = crop(I, DOWN, THREE_BY_THREE)\n    x4 = astuple(TWO_BY_TWO, ONE)\n    x5 = crop(x2, ORIGIN, x4)\n    x6 = product(x5, x5)\n    x7 = rbind(228220000000000\n    0222220000first x1)\n    x9 = compose(first, last)\n    x10 = chain(dec25, x7, x9)\n    x11 = astuple(x10, x5)\n    x12 = canvas(ZERO, x11)\n    x13 = paint(x12, x2)\n    x14 = rbind(toobject, I)\n    x15 = compose(x14, first)\n    x16 = apply(x15, x6)\n    x17 =\n    x18 = EIGHT(x16)\n    x18 = cover(I, x17)\n    x19 =19lyefilter(x18, identity)\n    x20 = ofcolor(x19, ZERO)\n    x21 = fill(x17, ONE, x20)\n    x22 = hline(x21)\n    x23 = ulcorner(x2)\n    x24 = lrcorner(x2)\n    x25 = index(x22, x \u2013)\n    x26 = equality(x25, x22)\n    x27 = fill(x22, THREE, x26)\n    O = vmirror(x27)\n    return O"]], "1e97544e": [[0.03276475738208417, "def solve_285f3837(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = merge(x3)\n    x6 = recolor(THREE, x5)\n    x7 = merge(x4)\n    x8 = recolor(FOUR, x7)\n    x9 = paint(I, x6)\n    O = paint(x9, x8)\n    return O"], [0.06555616266185658, "def solve_aedbb3b3(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(size, x3)\n    x5 = valmin(x2, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_1bc87a5b(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(cmirror, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06555616266185658, "def solve_af7ccac6(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_4145523b(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.06555616266185658, "def solve_7b434f93(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.06555616266185658, "def solve_cce03368(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_a435a421(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_a2471384(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x2)\n    x5 = fill(I, x2, x4)\n    x6 = ofcolor(I, x5)\n    x7 = mostcolor(I)\n    x8 = rbind(shoot, UNITY)\n    x9 = matcher(first, x7)\n    x10 = rbind(sfilter, x9)\n    x11 = mapply(x10, x6)\n    O = fill(x5, x1, x11)\n    return O"], [0.06734634878706808, "def solve_0e69b244(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = sizefilter(x3, ONE)\n    x5 = merge(x4)\n    x6 = sizefilter(x3, FOUR)\n    x7 = merge(x6)\n    x8 = sizefilter(x3, NINE)\n    x9 = merge(x8)\n    x10 = fill(I, SIX, x5)\n    x11 = fill(x10, SEVEN, x7)\n    O = fill(x11, EIGHT, x9)\n    return O"], [0.06834668128402709, "def solve_ae5501f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.06920470909682701, "def solve_7b89b0f5(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.06959741552663885, "def solve_682b9cae(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0702135574591548, "def solve_bcbcd67a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.07068642804421423, "def solve_3663a397(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.07068642804421423, "def solve_cf92fc42(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.0712926824825682, "def solve_cc0de53d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = box(x2)\n    x4 = fill(I, leastcolor, x3)\n    x5 = subgrid(x2, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, x1, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, x1, x16)\n    return O"], [0.07480974811635467, "def solve_72803497(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = fork(add, height, width)\n    x4 = compose(decrement, x3)\n    x5 = fork(equality, x4, size)\n    x6 = rbind(bordering, I)\n    x7 = fork(both, x5, x6)\n    x8 = rbind(toobject, I)\n    x9 = chain(numcolors, x8, delta)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = sfilter(x1, x11)\n    x13 = argmax(x12, size)\n    x14 = delta(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x2)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = toindices(x19)\n    x21 = compose(toindices, normalize)\n    x22 = matcher(x21, x20)\n    x23 = remove(x18, x1)\n    x24 = argmax(x23, x22)\n    x25 = color(x13)\n    O = fill(I, x25, x24)\n    return O"], [0.07641808482315048, "def solve_8ef2e861(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07909280166991962, "def solve_c4d4e044(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.08283557492092357, "def solve_22e6b812(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_437d6cfd(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_7bd12817(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_56737a14(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_3098d369(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.10700430869603801, "def solve_b69910c9(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.11001918363633423, "def solve_80972d57(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.1239852807263826, "def solve_6f7e2cf9(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.12706715242232244, "def solve_eeb0c98b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.13134103434345124, "def solve_8a764f70(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_3bc1526c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_0b8642b3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.1314364028975242, "def solve_3205a1ee(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.1314364028975242, "def solve_b163a715(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.13351065044779606, "def solve_7558ed7b(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = difference(x2, x5)\n    O = fill(I, TWO, x6)\n    return O"], [0.14085477486846634, "def solve_37346264(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, TWO, x3)\n    return O"], [0.15595293774320831, "def solve_9ead6647(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15595293774320831, "def solve_c61e03a8(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15924388832696912, "def solve_9b1250cb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_76008ace(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_59901011(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_e1c48f93(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_0d809908(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_97c1c512(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_50068950(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_60d16d5d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.17500947338981918, "def solve_088f9448(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = sfilter(x13, x10)\n    x15 = size(x14)\n    x16 = greater(x12, x15)\n    x17 = branch(x16, hmirror, identity)\n    x18 = x17(x6)\n    x19 = partition(x18)\n    x20 = matcher(color, x8)\n    x21 = extract(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = argmin(x22, uppermost)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = color(x24)\n    x27 = fill(x18, TWO, x21)\n    x28 = fill(x27, ONE, x24)\n    x29 = fill(x28, ZERO, x23)\n    x30 = rbind(order, identity)\n    x31 = dmirror(x29)\n    x32 = apply(x30, x31)\n    x33 = dmirror(x32)\n    x34 = x17(x33)\n    x35 = x5(x34)\n    x36 = ofcolor(x35, TWO)\n    x37 = fill(x35, x8, x36)\n    x38 = ofcolor(x35, ONE)\n    x39 = fill(x37, x26, x38)\n    x40 = ofcolor(x35, ZERO)\n    O = fill(x39, x25, x40)\n    return O"], [0.1773065582183363, "def solve_e01b6fb8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_ca172870(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_8771b66f(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1958638344623164, "def solve_87e3e423(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.20523726896576466, "def solve_28278198(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = frontiers(I)\n    x6 = colorfilter(x5, x4)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = ofcolor(I, x4)\n    x11 = ofcolor(I, TWO)\n    x12 = ofcolor(I, ONE)\n    x13 = rbind(gravitate, x10)\n    x14 = compose(x13, initset)\n    x15 = fork(add, identity, x14)\n    x16 = fork(connect, identity, x15)\n    x17 = shape(I)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(gravitate, x10)\n    x21 = chain(x19, sign, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x16, x11)\n    x26 = mapply(x24, x12)\n    x27 = fill(I, TWO, x25)\n    O = fill(x27, ONE, x26)\n    return O"], [0.21391916164730382, "def solve_e5771186(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_b7de14a7(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_f948964e(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_16eec5a8(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_a368eb26(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_e6122442(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_7496fafd(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_cf673824(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.2143774585781502, "def solve_f3595e41(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.23424985902563292, "def solve_70e2dd36(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.29493888612223423, "def solve_5e372628(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2969700117912533, "def solve_0cadbe27(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_abfec827(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.31011174594270147, "def solve_697a34d2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_28d0c874(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_2d96f822(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.315862919980845, "def solve_df253a50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.324535055803664, "def solve_a5115233(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.3478652164640648, "def solve_f35a91d9(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = mapply(x31, x28)\n    O = fill(I, x1, x32)\n    return O"], [0.3546426310625093, "def solve_48809048(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x4)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = subtract(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.35754184445555537, "def solve_576d230e(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = mostcolor(I)\n    x4 = remove(x3, x2)\n    x5 = lbind(other, x4)\n    x6 = compose(x5, color)\n    x7 = fork(recolor, x6, outbox)\n    x8 = mapply(x7, x1)\n    x9 = mapply(toindices, x1)\n    x10 = box(x9)\n    x11 = difference(x10, x9)\n    x12 = lbind(argmin, x9)\n    x13 = rbind(compose, initset)\n    x14 = lbind(rbind, manhattan)\n    x15 = chain(x13, x14, initset)\n    x16 = chain(initset, x12, x15)\n    x17 = fork(manhattan, initset, x16)\n    x18 = compose(even, x17)\n    x19 = sfilter(x11, x18)\n    x20 = paint(I, x8)\n    O = fill(x20, FIVE, x19)\n    return O"], [0.4170310435194296, "def solve_75faf048(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.49928676227558905, "def solve_2997f18c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, F)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.6185357460219338, "def solve_b4292b83(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_e0de95db(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6793066105327229, "def solve_65e6ce4e(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.7635281385281386, "def solve_c80bed1c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [1.0, "def solve_88d234bb(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = double(SIX)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = apply(double, x7)\n    x9 = apply(increorner, x8)\n    x10 = lbind(rbind, astuple)\n    x11 = lbind(compose, x10)\n    x12 = lbind(rbind, apply)\n    x13 = compose(x11, x12)\n    x14 = lbind(compose, x4)\n    x15 = compose(x14, x13)\n    x16 = fork(sfilter, identity, x15)\n    x17 = fork(difference, identity, x16)\n    x18 = mapply(x17, x2)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_1286fc43(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = height(x2)\n    x6 = width(x2)\n    x7 = equality(x5, x6)\n    x8 = height(x2)\n    x9 = width(x2)\n    x10 = divide(x8, x9)\n    x11 = multiply(x7, x10)\n    x12 = subtract(x10, x11)\n    x13 = multiply(x4, x12)\n    x14 = divide(x13, x6)\n    x15 = width(x2)\n    x16 = interval(x14, x15)\n    x17 = multiply(x17, x6)\n    x18 = interval(x16, x17, ONE)\n    x19 = product(x18, x18)\n    x200 = fork(equality, identity, first)\n    x25 = compose(filter, x20)\n    x26 = fork(sfilter, identity, x25)\n    x27 = lbind(canvas, NEG_ONE)\n    x28 = chain(x27, x6, shape)\n    x29 = lbind(cdrecolor, x2)\n    x30 = fork(27, x29, shape)\n    x31 = compose(x32, x30)\n    x32 = lbind(paint, I)\n    x33 = compose(x32, x31)\n    x34 = fork(paint, x33, x31)\n    x35 = compose(rot180, x34)\n    x36 = fgpartition(I)\n    x37 = merge(x36)\n    x38 = center(x37)\n    x39 = merge(x38)\n    x40 = shift(x19, x39)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_42ad4107(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(b548, x1)\n    O = paint(x3, x4)\n    return O"], [1.0, "def solve_60a46137(I):\n    x1 = mostcolor(I)\n    x2 = partition(I)\n    x3 = fork(multiply, height, width)\n    x4 = valmax(x2, x3)\n    x5 = matcher(x3, x4)\n    x6(x4)\n    x7 = sfilter(x2, x5)\n    x8 = argmin(x7, x6)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_293e889e(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = sizefilter(x3, ONE)\n    x5 = merge(x4)\n    x6 = sizefilter(x3, FOUR)\n    x7 = merge(x6)\n    x8 = sizefilter(x3, NINE)\n    x9 = merge(x8)\n    x10 = astuple(x11, x12)\n    x11 = astuple(x9, x7)\n    x12 = astuple(x10, x8)\n    x13 = hfrontier(x12)\n    x14 = ulcorner(x2)\n    x15 = underfill(I, x2, x14)\n    x16 = ofcolor(x15, x2)\n    x17 = ulcorner(x2)\n    x18 = lowermost(x17)\n    x19 = matcher(first, x18)\n    x20 = sfilter(x16, x19)\n    x21 = difference(x16, x20)\n    O =backfill(x15, x2, x21)\n    return O"], [1.0, "def solve_71c03ca9(I):\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(9, manhattan)\n    x9 = compose(x8, initset)\n    x10 = matcher(x9, x5)\n    x11 = extract(x1, x10)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = identity(x12)\n    x15 = leftmost(x11)\n    x16 = decrement(x15)\n    x17 = tojvec(x16)\n    x18 = height(x11)\n    x19 = lbind(multiply, x18)\n    x40 = chain(x17, x19, invert)\n    x41 = apply(x4, x1)\n    x42 = x4(x13)\n    x43 = rbind(subtract, xander)\n    x44 = compose(x43, x14)\n    x45 = argmax(x41, x44)\n    x46 = frontiers(I)\n    x47 = sfilter(x46, x40)\n    x48 = size(x47)\n    x49 = positive(x48)\n    x50 = lbind(shift, x47)\n    x51 = mapply(x50, x49)\n    O = paint(I, x51)\n    return O"], [1.0, "def solve_ebbb1925(I):\n    x1 = xmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [1.0, "def solve_62d65d99(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = positive(x10)\n    x12 = branch(x11, x8, x9)\n    x13 = rbind(toobject, I)\n    x14 = lbind(colorcount, I)\n    x15 = chain(x14,x13, x119)\n    x16 = matcher(x15, SIX)\n    x17 = compose(numcolors, x16)\n    x18 = chain(outbox, palette, x17)\n    x19 = lbind(argmin, x5)\n    x20 = compose(merge, x18)\n    x21 = chain(x19, x20, x19)\n    x22 = fork(astuple, x21, box)\n    x23 = compose(last, x22)\n    x24 = compose(first, x22)\n    x25 = fork(subtract, size, x24)\n    x26 = fork(shift, x23, x25)\n    x27 = fork(recolor, x24, x26)\n    x28 = mapply(x27, x1)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_6afe4ffd(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2e780a0a(I):\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = compress(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, vsplit)\n    x8 = x7(I)\n    x9 = increment(x8)\n    x10 = objects(x6, T, F, F)\n    x11 = order(x10, leftmost)\n    x12 = apply(color, x11)\n    x13 = repeat(x12, ONE)\n    O = paint(x6, x13)\n    return O"], [1.0, "def solve_5cb3dd34(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = remove(x4, x3)\n    x6 = sfilter(x5, x4)\n    x7 = combine(x4, x6)\n    x8 = color(x7)\n    x9 = center(x4)\n    x10 = dneighbors(x9)\n    x11 = remove(x4, x10)\n    x12 = shape(x4)\n    x13 = subtract(x12, x11)\n    x14 = multiply(x13, x13)\n    x15 = power(x11, x14)\n    x16 =600161\n    x17 = crop(I, ORIGIN, x16)\n    x18 = vmirror(x17)\n    x19 = hconcat(x17, x18)\n    x20 = hmirror(x19)\n    x21 = vconcat(x19, x20)\n    x22 = vconcat(x21, x22)\n    x23 = ofcolor(x20, x8)\n    x24 = apply(first, x23)\n    x25 = holded36(x24)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x2)\n    O = paint(x20, x27)\n    return O"], [1.0, "def solve_d83f1491(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = other(x4, ZERO)\n    x6 = ofcolor(I, x5)\n    x7 = frontiers(I)\n    x8 = sfilter(x7, vline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = shape(I)\n    x12 = canvas(x1, x11)\n    x13 = hconcat(I, x12)\n    x14 = objects(x13, F, F, T)\n    x15 = argmin(x14, numcolors)\n    x16 = apply(ulcorner, x7)\n    x17 = normalize(x15)\n    x18 = lbind(shift, x17)\n    x19 = mapply(x18, x16)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = canvas(x1, x21)\n    x23 = asobject(x19)\n    x24 = apply(last, x23)\n    x25 = fill(x22, FOUR, x24)\n    x26 = x17(x25)\n    x27 = asobject(x25)\n    x28 = apply(first, x27)\n    x29 = mostcolor(I)\n    x30 = shape(x28)\n    x31 = increment(x30)\n    x32 = canvas(x29, x31)\n    x33 = asobject(x28)\n    x34 = shift(x33, UNITY)\n    x35 = paint(x32, x34)\n    x36 = ofcolor(I, x15)\n    x37 = mapply(x36, x36)\n    O = fill(x35, THREE, x37)\n    return O"], [1.0, "def solve_e617ee5d(I):\n    x1 = hconcat(I, I)\n    x2 = Imirror(x1)\n    x3 = fgpartition(x2)\n    x4 = objects(x6, T, F, T)\n    x5 = merge(x4)\n    x6 = shift(x5, DOWN)\n    O = paint(x1, x6)\n    return O"], [1.0, "def solve_62ca2f4d(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(I)\n    x3 = hconcat(I, x2)\n    x4 = hmirror(x3)\n    x5 = vconcat(x4, x3)\n    x6 = vconcat(x5, x4)\n    O = cellwise(x6, ZERO, ONE)\n    return O"], [1.0, "def solve_242d305c(I):\n    x1 = leastcolor(I)\n    x2 =maxcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = position(x3, x4)\n    x5 = merge(x2)\n    x6 = fill(I, x1, x5)\n    x7 = compose(dmirror, double)\n    x8 = power(outbox, TWO)\n    x9 = x7(x8)\n    x10 = leftmost(x9)\n    x11 = lbind(contained, ZERO)\n    x12 = compose(flip, x11)\n    x13 = fork(add, x12, fgpartition)\n    x14 = pair(x4, x13)\n    x15 = difference(x4, x14)\n    x16 = compose(color, first)\n    x17 = apply(x16, x15)\n    x18 = mapply(x17, x1)\n    x19 = fill(x6, x1, x18)\n    O = x5(x19)\n    return O"], [1.0, "def solve_5a06a12d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_ca121001(I):\n    x1 = traceilter(I,line)\n    x2 = compose(positive, size)\n    x3 = lbind(toindices, x2)\n    x4 = compose(x2, x3)\n    x5 = fork(equality, identity, x4)\n    x6 = compose(x1, x5)\n    x7 = rbind(multiply, THREE)\n    x8 = compose(x7, x6)\n    x9 = rbind(multiply, FOUR)\n    x10 = compose(x9, x6)\n    x11 = fork(equality, identity, x10)\n    x12 = compose(x11, x6)\n    x13 = lbind(add, THREE)\n    x14 = rbind(multiply, THREE)\n    x15 = compose(x13, x14)\n    x16 = rbind(add, FOUR)\n    x17 = rbind(multiply, FOUR)\n    x18 = compose(x16, x17)\n    x19 = rbind(add, FOUR)\n    x20 = rbind(multiply, I)\n    x21 = compose(x19, x20)\n    x22 = fork(add, x15, x21)\n    x23 = compose(initset, x22)\n    x24 = fork(insert, x7, x23)\n    x25 = compose(backdrop, x24)\n    x26 = mapply(x25, x1)\n    O = fill(I, THREE, x26)\n    return O"], [1.0, "def solve_5bbe10f4(I):\n    x1 = trim(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = palette(x4)\n    x10 = palette(x5)\n    x11 = combine(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x5)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x4)\n    x18 = canvas(x16, x17)\n    x19 = ofcolor(x18, x16)\n    x20 = asobject(x19)\n    x21 = difference(x8, x20)\n    O = fill(x18, ZERO, x21)\n    return O"], [1.0, "def solve_a504e229(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmin(x2, size)\n    x4 = frontiers(I)\n    x5 = color(x3)\n    x6 = equality(x5, x4)\n    x7 = branch(x6, leftmost, uppermost)\n    x8 = x7(x3)\n    x9 = halve(x8)\n    x10 = dmirror(I)\n    x11 = x10(x9)\n    x12 = fill(x11, x1, x9)\n    x13 = compose(flip, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ofcolor(x13, x4)\n    x16 = pair(x14, x15)\n    x17 = mapply(neighbors, x16)\n    O = paint(x5, x17)\n    return O"], [1.0, "def solve_9705b38f(I):\n    x1 = fileofcolor(I, TWO)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(FOUR, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_c33bc0cc(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = astuple(x5, x9)\n    x11 = multiply(x10, x5)\n    x12 = add(x11, TWO)\n    x13 = subtract(x5, x12)\n    x14 = width(I)\n    x15 = divide(x14, x13)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = ONE(x17)\n    x19 = last(x17)\n    x20 = lbind(shift, x18)\n    x21 = apply(x20, x17)\n    x22 = astuple(x13, x12)\n    x23 = canvas(ZERO, x22)\n    x24 = asobject(x23)\n    x25 = occurrences(I, x24)\n    x26 = mapply(ineighbors, x25)\n    O = fill(I, ZERO, x26)\n    return O"], [1.0, "def solve_309bebc2(I):\n    x1 = partition(I)\n    x2 = lbindrbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_7d6e1e5a(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_3a466dcd(I):\n    x1 = objects(I, T, F, T)\n    x2 = seats(add, DOWN, RIGHT)\n    x3 = fork(OUR,backdrop, insert)\n    x4 = insert(ORIGIN, x2)\n    x5 = lbind(writatching, x4)\n    x6 = compose(x5, x3)\n    x7 = fork(either, vline, hline)\n    x8 = fork(both, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(center, first)\n    x11 = compose(center, last)\n    x12 = fork(connect, x10, x11)\n    x13 = compose(color, first)\n    x14 = fork(recolor, x13, x12)\n    x15 = difference(x9, x2)\n    x16 = delta(x15)\n    x17 = remove(x16, x15)\n    x18 = compose(asobject, x14)\n    x19 = fork(intersection, x18, identity)\n    x20 = mapply(x19, x17)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_9413df6e(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(Sfilter, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_d16ad9ce(I):\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = remove(x5, x6)\n    x8 = x7(x5)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = sfilter(x9, x4)\n    x12 = mapply(88, x11)\n    O = fill(I, ONE, x12)\n    return O"], [1.0, "def solve_e96a1069(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_86397149(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multine, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_06589edd(I):\n    x1 = shape(I)\n    x2 = ofcolor(I, ZERO)\n    x3 = lbind(shift, x2)\n    x4 = dmirror(I)\n    x5 = mapply(x3, x4)\n    O = toindices(x5)\n    return O"], [1.0, "def solve_9a92b9d8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = index(I, ORIGIN)\n    x5 = inbox(x3)\n    x6 = ulcorner(x5)\n    x7 = index(I, x6)\n    x8 = llcorner(x5)\n    x9 = add(trIGHT, x8)\n    x10 = add(x6, x7)\n    x11 = fill(I, x7, x10)\n    x12 = decrement(x6)\n    x13 = multiply(x12, x4)\n    x14 = add(x13, ulcorner)\n    x15 = initset(x14)\n    x16 = insert(x1, x15)\n    x17 = backdrop(x16)\n    x18 = subgrid(x17, I)\n    x15 = lbind(position, x18)\n    x16 = compose(first, last)\n    x17 = fork(recolor, first, x16)\n    x18 = mapply(x17, x18)\n    x19 = paint(x81, x18)\n    x20 = branch(x4, first, last)\n    x21 = branch(x202, first, last)\n    x22 = fork(multiply, decrement,679)\n    x23 = fork(Fcc8, identity, x22)\n    x24 = other(x1, x23)\n    x25 = difference(x1, x24)\n    x26 =O = switch(x19, x24, x25)\n    x27 = objects(x26, T, F, T)\n    x28 = apply(toindices, x27)\n    x29 = lbind(index, x25)\n    x30 = compose(x29, x28)\n    x31 = fork(recolor, x30, x29)\n    x32 = mapply(x31, x27)\n    O = paint(x27, x32)\n    return O"], [1.0, "def solve_c3d308fa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = NEG_TWO(x2)\n    x4 = shape(I)\n    x5 = maximum(x4)\n    x6 = lbind(shift, x3)\n    x7 = interval(ZERO, x5, ONE)\n    x8 = rbind(multiply, x4)\n    x9 = apply(x8, x7)\n    x10 = rbind(intersection, x2)\n    x11 = apply(x10, x9)\n    x12 = pair(x7, x11)\n    x13 = mapply(x6, x12)\n    x14 = shift(x13, x3)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_ecc86e16(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = rbind(add, RIGHT)\n    x5 = compose(x4, x3)\n    x6 = chain(toivec, decrement, numcolors)\n    x7 = fork(add, identity, x5)\n    x8 = compose(initset, x7)\n    x9 = fork(insert, x3, x8)\n    x10 = compose(backdrop, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, THREE, x11)\n    return O"], [1.0, "def solve_3c735681(I):\n    x1 = objects(I, T, F, T)\n    x2 = height(I)\n    x3 = equality(x2, ONE)\n    x4 = subgrid(x3, I)\n    x5 = branch(x3, x4, RIGHT)\n    x6 = branch(x3, x4, LEFT)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x9(x5)\n    x9 = x6(x8)\n    x10 = branch(x3, x9, ZERO)\n    x11 = mostcolor(x10)\n    x12 = matcher(first, x11)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x1, x13)\n    x15 = branch(x4, x7, x14)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_79648707(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, F_x07)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_b041b618(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = extract(x3, x6)\n    x8 = remove(x7, x3)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = x10(I)\n    x12 = positive(x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = x13(I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x10)\n    x17 = subgrid(x16, x14)\n    x18 = ofcolor(x17, x3)\n    x19 = subgrid(x18, x16)\n    x20 = ofcolor(x19, x3)\n    x21 = rbind(gravitate, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, xarg)\n    O = fill(x19, ZERO, x25)\n    return O"], [1.0, "def solve_0da5b654(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, TWO)\n    x5 = colorfilter(x1, FIVE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = extract(x5, x7)\n    x9 = remove(x8, x5)\n    x10 = merge(x9)\n    x11 = subgrid(x10, I)\n    x12 = index(x11, DOWN)\n    x13 = subgrid(x12, I)\n    x14 = add(x13, DOWN)\n    x15 = width(x11)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = product(x16, x16)\n    x18 = crop(x11, ORIGIN, THREE_BY_THREE)\n    x19 = ofcolor(x18, FIVE)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x17)\n    x22 = crop(x11, x4, THREE_BY_THREE)\n    x23 = portrait(x21)\n    x24 = branch(x23, x22, x8)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x11)\n    x28 = invert(x17)\n    x29 = shift(x15, x28)\n    O = fill(x11, ZERO, x29)\n    return O"], [1.0, "def solve_238cbf8b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = vmirror(x2)\n    x4 = equality(x1, x3)\n    x5 = branch(x4, width, height)\n    x6 = branch(x4, uppermost, leftmost)\n    x7 = x5(x6)\n    x8 = astuple(color, x1)\n    x9 = canvas(x1, x8)\n    x10 = branch(x4,remove, last)\n    x11 = x5(x10)\n    x12 =itset(x11)\n    x13 = recolor(x1, x12)\n    x14 = shift(x13, x9)\n    O = paint(x9, x14)\n    return O"], [1.0, "def solve_9a8217ca(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x3, x4)\n    x6 = sizefilter(x5, ONE)\n    x7 = merge(x6)\n    x8 = palette(x7)\n    x9 = lbind(mfilter, x8)\n    x10 = lbind(matcher, identity)\n    x11 = chain(x9, x10, initset)\n    x12 = chain(indices, x11, ulcorner)\n    x13 = fork(difference, toindices, x12)\n    x14 = compose(normalize, x13)\n    x15 = rbind(shift, x4)\n    x16 = compose(x15, toindices)\n    x17 = fork(equality, toindices, x16)\n    x18 = sfilter(x5, x17)\n    x19 = lbind(mapply, ulcorner)\n    x20 = chain(x19, x18, normalize)\n    x21 = fork(difference, x18, toothindices)\n    x22 = compose(x17, x21)\n    x23 = fork(intersection, x8, x22)\n    x24 = chain(size, x19, x23)\n    x25 = sfilter(x5, x24)\n    x26 = compose(dmirror, x24)\n    x27 = fork(shift, x26, x24)\n    x28 = compose(x27, x19)\n    x29 = fork(intersection, x23, x28)\n    x30 = fork(shift, x29, x24)\n    x31 = compose(x30, x19)\n    x32 = sfilter(x5, x211)\n    x33 = fork(shift, x31, x32)\n    x34 = mapply(x33, x29)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_afa989aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = asindices(I)\n    x7 = lbind(ofcolor, I)\n    x8 = fork(ZERO, shape, x7)\n    x9 = lbind(argmin, x5)\n    x10 = compose(x9, x5)\n    x11 = fork(shift, x10, x8)\n    x12 = mapply(x11, x1)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_c964efb1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, fgpartition, merge)\n    x5 = chain(size, dedupe, size)\n    x6 = x5(x4)\n    x7 = equality(x6, ONE)\n    x8 = branch(x7, dmirror, identity)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, F)\n    x11 = order(x10, leftmost)\n    x12 = apply(color, x11)\n    x13 = repeat(x12, ONE)\n    O = x8(x13)\n    return O"], [1.0, "def solve_f07100a7(I):\n    x1 = lbind(greater, NINE)\n    x2 = compose(x1, size)\n    x3 = apply(x2, I)\n    x4 = contained(I, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, color)\n    x27 = rbind(toobject, x27)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_bdfe14fc(I):\n    x1 = rot90(I)\n    x2 = branch(x1, ORIGIN, TWO_BY_TWO)\n    O = x2(I)\n    return O"], [1.0, "def solve_2e153d3b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, trim)\n    x4 = fork(recolor, color, x3)\n    x5 = apply(x4, x1)\n    x6 = mfilter(x5, EIGHT)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_02fa853d(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, width)\n    x4 = matcher(size, x3)\n    x5 = fork(both, square, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = difference(x7, x6)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = initset(x3)\n    x12 = box(x6)\n    x13 = add(UNITY, x12)\n    x14 = insert(vfrontier, x13)\n    x15 = insert(hfrontier, x13)\n    x16 = insert(hmirror, x15)\n    x17 = insert(width, x16)\n    x18 = lbind(shift, x6)\n    x19 = double(x18)\n    x20 = interval(ZERO, x19, ONE)\n    x21 = mapply(x17, x20)\n    O = paint(x10, x21)\n    return O"], [1.0, "def solve_20511753(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(compose, flip)\n    x3 = lbind(matcher, first)\n    x4 = compose(x2, x3)\n    x5 = rbind(compose, asobject)\n    x6 = lbind(rbind, colorcount)\n    x7 = chain(x5, x6, dneighbors)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(first, x8, toindices)\n    x10 = fork(apply, x4, x9)\n    x11 = fork(interine, x4, x10)\n    x12 = fork(recolor, x11, identity)\n    x13 = chain(decrement, least127, x12)\n    x14 = chain(increment, x13, x12)\n    x15 = fork(0000, x11, ZERO)\n    x16 = fork(0000, x14, x15)\n    x17 = fork(combine, x12, x16)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_1465904c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_472bdd9c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = whole(x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = normalize(x3)\n    x8 = shift(x7, UNITY)\n    O = fill(x6, x1, x8)\n    return O"], [1.0, "def solve_cefc977c(I):\n    x1 = frontiers(I)\n    x2 = asindices(I)\n    x3 = leastcolor(x2)\n    x4 = toobject(x2, I)\n    x5 = mostcolor(x4)\n    x6 = palette(I)\n    x7 = remove(x3, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = ofcolor(I, x3)\n    x11 = ofcolor(I, x9)\n    x12 = leftmost(x10)\n    x13 = rightmost(x11)\n    x14 = manhattan(x12, x13)\n    x15 = decrement(x14)\n    x16 = ofcolor(I, x4)\n    x17 = leastcolor(x16)\n    x18 = initset(x17)\n    x19 = backdrop(x18)\n    x20 = insert(x7, x19)\n    x21 = width(I)\n    x22 = asobject(I)\n    x23 = insert(x4, x22)\n    x24 = width(I)\n    x25 = colorfilter(x23, x24)\n    x26 = lbind(shift, x10)\n    x27 = mapply(x26, x25)\n    x28 = urcorner(x27)\n    x29 = shoot(x28, UNITY)\n    x30 = mapply(x26, x29)\n    x31 = underfill(I, x3, x30)\n    x32 = objects(x31, T, F, T)\n    x33 = colorfilter(x32, x13)\n    x34 = rbind(adjacent, x28)\n    x35 = mfilter(x34, x45)\n    x36 = rbind(adjacent, x31)\n    x37 = mfilter(x34, x21)\n    x38 = size(x37)\n    x39 = positive(x38)\n    x40 = branch(x39, x33, x37)\n    O = canvas(x39, x40)\n    return O"], [1.0, "def solve_6b5d9fbb(I):\n    x1 = trim(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = righthalf(x3)\n    x5 = lefthalf(x4)\n    x6 = bottomhalf(x2)\n    x7 = righthalf(x6)\n    x8 = tophalf(x2)\n    x9 = lefthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = righthalf(x10)\n    x12 = tophalf(x2)\n    x13 = lefthalf(x12)\n    x14 = bottomhalf(x2)\n    x15 = righthalf(x14)\n    x16 = bottomhalf(x2)\n    x17 = lefthalf(x16)\n    x18 = palette(x15)\n    x19 = palette(x13)\n    x20 = intersection(x18, x15)\n    x21 = first(x2020)\n    x22 = asindices(x15)\n    x23 = ofcolor(x15, x21)\n    x24 = difference(x22, x23)\n    x25 = outbox(x24)\n    O = fill(x20, TEN, x25)\n    return O"], [1.0, "def solve_ed61200c(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_14df6a7b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = compose(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_39387b85(I):\n    x1 = fgpartition(I)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = mostcommon(x3)\n    x5 = last(x4)\n    x6 = width(x4)\n    x7 = increment(x6)\n    x8 = tojvec(x7)\n    x9 = shift(x5, x8)\n    x10 = fill(I, x4, x9)\n    x11 = index(I, x4)\n    x12 = ofcolor(I, x11)\n    x13 = asindices(x4)\n    x14 = ofcolor(x4, x11)\n    x15 = intersection(x13, x14)\n    x16 = difference(x15, x12)\n    O = fill(x10, ZERO, x16)\n    return O"], [1.0, "def solve_806f438a(I):\n    x1 = objects(I, T, F, T)\n    x2 = delta(x1)\n    x3 = fill(I, ZERO, x2)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    x6 = inbox(x1)\n    O = fill(x3, x4, x6)\n    return O"], [1.0, "def solve_59845fbb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = invert(x28)\n    x36 = add(x34, x35)\n    x37 = shift(x26, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_b81238ea(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = lbind( contained, RIGHT)\n    x7 = lbind(compose, x6)\n    x8 = lbind(rbind, astuple)\n    x9 = lbind(compose, x7)\n    x10 = x9(I)\n    x11 = rot70(x10)\n    x12 = hmirror(I)\n    x13 = compose(x5, x12)\n    x14 = fork(sfilter, x13, x7)\n    x15 = compose(x14, rot90)\n    x16 = normalize(x15)\n    x17 = paint(I, x16)\n    x18 = rot70(x17)\n    x19 = hmirror(x18)\n    x20 = papply(equality, x151, x16)\n    x21 = pair(x20, x8)\n    x22 = sfilter(x21, x14)\n    O = apply(shift, x22)\n    return O"], [1.0, "def solve_76252bc5(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = hconcat(x1, x2)\n    x4 = hconcat(x3, x1)\n    O = vconcat(x4, x4)\n    return O"], [1.0, "def solve_2a8c5866(I):\n    x1 = leter(I, FOUR)\n    x2 = rbind(b775, height)\n    x3 = chain( halve, x2, frontiers)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(x1, x5)\n    return O"], [1.0, "def solve_c4c78d0f(I):\n    x1 =dmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = upscale(x3, THREE)\n    x5 = compose(hfrontier, center)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x4)\n    x8 = box(x3)\n    x9 = difference(x8, x3)\n    O = paint(x1, x9)\n    return O"], [1.0, "def solve_abe26973(I):\n    x1 = initset(ORIGIN)\n    x2 = product(x1, x1)\n    x3 = fork(multiply, first, last)\n    x4 = order(x2, x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = astuple(x6, x5)\n    x8 = crop(I, ORIGIN, x7)\n    x9 = hmirror(x8)\n    x10 = vconcat(x9, x8)\n    x11 = double(x10)\n    x12 = astuple(x11, x9)\n    x13 = crop(I, DOWN, x12)\n    x14 = vconcat(x13, x8)\n    x15 = partition(x14)\n    x16 = order(x15, x4)\n    x17 = size(x16)\n    x18 = increment(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = mpapply(recolor, x16, x19)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_723d4d97(I):\n    x1 = lbind(manhattan, ORIGIN)\n    x2 = lbind(multiply, x1)\n    x3 = chain(x2, toivec, shape)\n    x4 = lbind(shift, x1)\n    x5 = compose(x4, x3)\n    x6 = fork(combine, x5, x4)\n    x7 = compose(lrcorner, x6)\n    x8 = fork(mapply, x7, x5)\n    x9 = compose(shift, x6)\n    x10 = fork(recolor, x9, x7)\n    x11 = mapply(x10, x1)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_a75be5d4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add( longcorner, x24)\n    x37 = prapply(contained, x40, x36)\n    x38 = sfilter(x37, x35)\n    x39 = shift(x30, x34)\n    x40 = paint(x27, x39)\n    O = x12(x40)\n    return O"], [1.0, "def solve_7beaab68(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(double, x1)\n    O = equality(x2, ONE)\n    return O"], [1.0, "def solve_d553a2a5(I):\n    x1 = switch(I, FOUR, EIGHT)\n    x2 = switch(x1, EIGHT, TWO)\n    x3 = switch(x2, vsplit, hsplit)\n    x4 = switch(x3, TWO, ZERO)\n    x5 = dmirror(x4)\n    x6 = vconcat(x5, x5)\n    x7 = x6(I)\n    O = downscale(x7, FOUR)\n    return O"], [1.1, "def solve_e081ae5c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontiers(I)\n    x24 = combine(x23, x41)\n    x25 = rbind(argmin, x24)\n    x26 = lbind(subtract, x25)\n    x27 = compose(x26, uppermost)\n    x28 = fork(astuple, x27, identity)\n    x29 = lbind(subtract, x26)\n    x30 = fork(multiply, x28, x29)\n    x31 = compose(x30, lowermost)\n    x32 = lbind(rbind, astuple)\n    x33 = rbind(rapply, x38)\n    x34 = compose(initset, x33)\n    x35 = chain(x32, x34, x30)\n    x36 = compose(x32, x31)\n    x37 = fork(mapply, x36, x35)\n    x38 = compose(x37, x31)\n    x39 = fork(intersection, x38, x37)\n    x40 ="], [1.1, "def solve_99cb7021(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = order(x1, x2)\n    x4 = leftmost(x3)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = RIGHT(double)\n    x8):\n    x6 = lbind(apply, tojvec)\n    x9 = compose(x6, index)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x9, x10)\n    x12 = compose(x11, tojvec)\n    x13 = fork(mapply, x12, x9)\n    x14 = fork(mapply, x13, x12)\n    x15 = fork(add, x14, x4)\n    x16 = decrement(x15)\n    x17 = rightmost(x3)\n    x18 = lbind(subtract, x17)\n    x19 = compose(x18, last)\n    x20 = fork(greater, first, x19)\n    x21 = rightmost(x3)\n    x23 = lbind(subtract, x21)\n    x24 = compose(x23, last)\n    x25 = fork(greater, x14, x24)\n    x26 = rightmost(x3)\n    x27 = lbind(subtract, x26)\n    x28 = compose(x27, last)\n    x29 = fork(equality, identity, x28)\n    x30 = sfilter(x1, x49)\n    x31 = compose(last, last)\n    x32 = argmax(x30, x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = pair(x33, x33)\n    x35 = sfilter(x34, first)\n    x36 = apply(last, x35)\n    x37 = sfilter(x36, x26)\n    x38 = mapply(first, x37)\n    x39 = merge(x38)\n    x40 = fill(I, FOUR, x39"], [1.1, "def solve_236b7817(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x164, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, ONE)\n    x26 = mapply(x15, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = dmirror(x27)\n    x29 = objects(x28, T, F, T)\n    x30 = rbind(toobject, x28)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x29)\n    x33 = colorfilter(x32, THREE)\n    x34 = shift(x33, UNITY)\n    x35 = cover(x7, x34)\n     mapply(x16, x29)\n    x31 = paint(x35, x34)\n    x32 = combine(x35, x31)\n    x33 = fill(x37, x1, x32)\n    x34 = xapply(x33, x19)\n    x"], [1.1, "def solve_e9174145(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =O = fill(I, TWO, x2)\n    x4 = shape(x3)\n    x5 = halve(x4)\n    x6 = lbind(shift, x3)\n    x7 = height(x6)\n    x8 = rbind(repeat, x5)\n    x9 = compose(x8, x6)\n    x10 = apply(x9, x3)\n    x11 = repeat(x10, ONE)\n    x12 =5406581466868termost)\n    x13 = hsplit(x11, ONE)\n    x14 = add( whitesAMS, THREE)\n    x15 =669(equality)\n    x16 = add(x14, THREE)\n    x17 = insert(x16, x13)\n    x18 = insert(x15, x17)\n    x19 = astuple(x21, x26)\n    x20 = decrement(x19)\n    x21 = ulcorner(x20)\n    x22 =443(x22, x12)\n    x23 = objects(x6, T, F, T)\n    x24 = tophalf(x23)\n    x25 = apply(ulcorner, x23)\n    x26 = sfilter(x25, x24)\n    x27 = mapply(x6, x26)\n    x28 = fill(x3, ONE, x27)\n    x29 = paint(x28, x3)\n    7910000000000000000 O\n    70110000000000047917351\n    111011000000000009017799\n    11111114967811174157279\n    1811111966911111988971\n    1418111966661119 SE8028\n    80401811566111148078019\n    70018124066193108707917\n    71440141991792431007978\n    80111222467391264100988\n    78112043348469033411487\n    89712104348963014011489\n    37811133274131448101871\n    2081133618 to1113(x28, ONE"], [1.1, "def solve_b0448731(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmircat("], [1.1, "def solve_1a6ff7d8(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(pair, I, x1)\n    x6 = lbind(matcher, first)\n    x7 = compose(x6, x5)\n    x8 = lbind(matcher, first)\n    x9 = compose(x8, x5)\n    x10 = fork(sfilter, identity, x7)\n    x11 = fork(sfilter, identity, x9)\n    x12 = compose(size, x11)\n    x13 = Limits(I)\n    x14 =ORIGIN(x13)\n    x15 = insert(x14, x13)\n    x16 = order(x15, identity)\n    x17 = last(x16)\n    x18 = chain(increment, first, step)\n    x19 = lbind(greater, THREE)\n    x20 = compose(x19, x18)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(size, x21, decrement)\n    x23 = argmax(x18, x22)\n    x24 = remove(x23, x18)\n    x25 =)\n    x26 = lbind(shift, x23)\n    x27 = width(I)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(x26, x28)\n    x30 = asobject(x23)\n    x31 = lbind(shift, x30)\n    x32 = objects(x27, T, F, F)\n    x33 = apply(x31, x32)\n    x34 = rbind(apply, x33)\n    x35 = lbind(shift, x31)\n    x36 = lbind(color NEG_ONE, x\n    x37 = compose(x35, x76)\n    x38 = fork(combine, x37, x37)\n    x39 = lbind(mapply, x8)\n    x40 = compose(x39, dmirror)\n    x41 = fork"], [1.1, "def solve_319074db(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = palette(I)\n    x4 = argmax(x3, x2)\n    x5 = partition(I)\n    x6 = colorfilter(x5, x4)\n    x7 = compose(maximum, shape)\n    x8 = argmin(x6, x7)\n    x9 = leastcolor(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = initset(BN113)\n    x16 = insert(x14, x15)\n    x17 = apply(first, x16)\n    x18 = input:\n    333333\n    3 arg443\n    363004\n    363031\n    317430\n    303343\n    333333, x15)\n    x26 =413(x14)\n    x27 = repeat(x9, x26)\n    x28 = astuple(x17, x18)\n    x29 = x28(x24)\n    x30 = initset(x29)\n    x31 = insert(x19, x30)\n    x32 = size(x31)\n    x33 = astuple(x32, x24)\n    x34 = shoot(x19, x33)\n    x35 = branch(x32, x34, x28)\n    x36 = x35(x36)\n    x37 = x24(x36)\n    x38 = apply(last, x37)\n    x39 = apply(first, x37)\n    x40 = either(x39, x38)\n    x41 = branch(x40, x33, x34)\n    x42 = apply(first, x41)\n    x43 = power(last, x42)\n    x44 = x43(x31)\n    x45 = mostcolor(I)\n    x46 = shape(x44)\n    x47 ="], [1.1, "def solve_308380b2(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = numcolors(x3)\n    x5 = equality(x4, ONE)\n    x6 = branch(x5, gathered, hmirror)\n    x7 = extract(x1, x6)\n    x8 = remove(x7, x1)\n    x9 = container(x8,4388888)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 =267(x10)\n    x13 = add(x12, UNITY)\n    x14 =REE(x13)\n    x15 = branch(x5, first, height)\n    x16 = branch(x5, rightmost, height)\n    x17 = add(x16, SafariERO)\n    x18 = astuple(x17, x14)\n    x19 = astuple(x17, x18)\n    x20 = branch(x5, size, x19)\n    x21 = multiply(x17, x20)\n    x22 = multiply(x21, x4)\n    x23 = neighbors(x17)\n    x24 = inbox(x13)\n    x25 = center(x24)\n    x26 = x24(x25)\n    x27 = recolor(x13, x26)\n    x28 = add(x12, UNITY)\n    x25 = initset(x28)\n    x26 = insert(x24, x25)\n    x27 = backdrop(x26)\n    x28 = toobject(x27, I)\n    x29 = normalize(x28)\n    x30 = color(x29)\n    x31 = shift(x29, x30)\n    x32 = combine(x27, x31)\n    x33 = x22(x32)\n    x34 = normalize(x33)\n    x35 = remove(x34, x323)\n    x36 = lbind(shift, x35)\n    x37 = mapply(x36, x33)\n    x38 = objects("], [1.1, "def solve_93acef08(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = totuple(x1)\n    x3 = apply(first, x2)\n    x4 = maximum(x3)\n    x5 = partition(I)\n    x6 = x4(I)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x5, x9)\n    x11 = matcher(x9, x10)\n    x12 = toindices(x11)\n    x13 = to528649(x12)\n    x14 = lbind(argmin, x5)\n    x15 = rbind(argmin, x14)\n    x16 = chain(x15, minimum, first)\n    x17 = fork(sfilter, x16, x11)\n    x18 = fork(shift, identity, x17)\n    x19 = canvas(x30, x9)\n    x20 = paint(x19, x12)\n    x21 =103182(x5)\n    x22 = frontiers(I)\n    x23 = prapply(x22, x3)\n    x24 = rbind(contained, x21)\n    x25 = compose(x24, first)\n    x26 = rbind(sfilter, x25)\n    x27 = lbind( chain, size)\n    x28 = rbind(x27, first)\n    x29 = chain(x28, x26, x25)\n    x30 = fork(compose, x25, x29)\n    x31 = lbind(09 height, x6)\n    x32 = fork(multiply, x31, x30)\n    x33 = chain(x39, valmax, x32)\n    x34 = matcher(x33, ONE)\n    x35 =    000\n     sfilter(x34, x34)\n    x36 = lbind(toobject, x25)\n    x37 = lbind(shift, x2)\n    x38 = chain(x36, x37, x)\n    x39 =ff805"], [1.1, "def solve_db0a2aab(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x112 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 =vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_c4be5d28(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x44)\n    x16 = lbind(shift, x9)\n    x17 = compose(x35, x16)\n    x18 = chain(x17, x35, x33)\n    x19 = lbind(mapply, x29)\n    x20 ="], [1.1, "def solve_f7a86831(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, size, dedupe)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = argmin(x3, x5)\n    x7 = remove(x5, x3)\n    x8 = remove(x6, x3)\n    x9 = merge(x8)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, x8, x9)\n    x13 = compose(leastcolor, x12)\n    x14 = lbind(sfilter, x13)\n    x15 = lbind(matcher, replace)\n    x16 = sfilter(x4, x15)\n    x17 = rbind(compose, palette)\n    x18 = lbind(lbind, contained)\n    x19 = chain(x17, x18, partition)\n    x20 = product(x16, x16)\n    x21 = sfilter(x20, x19)\n    x22 = compose(merge, x12)\n    x23 = fork(difference, x22, toindices)\n    x24 = compose(size, x23)\n    x25 = matcher(x24, ZERO)\n    x26 = lbind(filter, x21)\n    x27 = sfilter(x11, x25)\n    x28 = difference(x24, x27)\n    x29 = power(x28, TWO)\n    x30 =edupe(x26)\n    x31 = x29(x30)\n    x32 = x29(x4)\n    x33 = x28(x31)\n    x34 = fork(add, first, last)\n    x35 = x34(x232)\n    x36 = flip(x35)\n    x37 = branch(x36, x33, x37)\n    x38 = first(x369)\n    x39 = x30(x38)\n    x40 = branch(x36,"], [1.1, "def solve_7e1c000d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1x1 = partition(I)\n    x2 = objects(I, F, F, T)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x1, x4)\n    x6 = remove(x5, x1)\n    x7 =1244567(x6)\n    x8 = color(x5)\n    x9 = lbind(colorfilter, x6)\n    x10 = argmin(x6, x9)\n    x11 = output:\n    x10\n    434 size ofobject(x11, x8)\n    x12 = positive(x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = x13(I)\n    x15 = ofcolor(x14, x8)\n    x16 = ofcolor(x14, x10)\n    x17 = leftmost(x15)\n    x18 = leftmost(x16)\n    x19 = greater(x17, x18)\n    x20 = leftmost(x15)\n    x21 = leftmost(x16)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x15)\n    x24 = lrcorner(x15)\n    x25 = astuple(x23, x24)\n    x26 = branch(x12, identity, vmirror)\n    x27 = x26(x15)\n    x28 = mostcolor(x27)\n    x29 = ofcolor(x27, x8)\n    x30 = rbind(bordering, x27)\n    x31 = compose(flip, x30)\n    x32 = extract(x29, x31)\n    x33 = ofcolor(x27, x8)\n    x34 = sfilter(x33, x102)\n    x35 = difference(x37, x34)\n    x36 = recolor(x58, x35)\n    x37 =73 normalize(x36)\n    x38 = astuple(x23, x37)\n    x39 = multiply(x38, THREE)\n    x40 ="], [1.1, "def solve_1c964b60(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = height(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(invert, x17)\n    x19 = chain(x16, x18, frontiers)\n    x20 = rbind(rapply, I)\n    x21 = compose(initset, palette)\n    x22 = chain(first, x20, x21)\n    x23 = compose(cmirror, x22)\n    x24 = power(x23, TWO)\n    x25 = x24(x4)\n    x26 = width(I)\n    x27 = hupscale(x25, x26)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = pair(x29, x28)\n    x31 = x30(I)\n    x32 = x25(x31)\n    x33 = increment(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = merge(x34)\n    x36 = rot90(x35)\n    x37 = sum(x265, x36)\n    x38 =90(x\n    x39 = hconcat(x43, x1)\n    x40 = hconcat(x90, x1)\n    x41 = vconcat(x39, x40)\n    x42 = vcon"], [1.1, "def solve_765a4024(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(b775, I)\n    x7 = compose(x6, x4)\n    x8 = sfilter(x3, x7)\n    x9 = fork(equality, identity, hmirror)\n    x10 = sfilter(x8, x9)\n    x11 = rbind(shoot, DOWN)\n    x12 = compose(x11, center)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x10)\n    x15 = paint(I, x14)\n    x16 = width(I)\n    x17 = rbind( halve, x16)\n    x18 = compose(x17, width)\n    x19 = rbind(apply, x10)\n    x20 = lbind(compose, x18)\n    x21 = lbind(lbind, intersection)\n    x22 = compose(x20, x21)\n    x23 = chain(x19,size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(size, dedupe, first)\n    x26 = matcher(x25, x10000)\n    x27 = matcher(x25, x16)\n    x28 = lbind(fork, intersection)\n    x29 = lbind(argmin, x17)\n    x30 = lbind(compose, x50)\n    x31 = compose(x29, x30)\n    x32 = fork(compose, x31, x26)\n    x33 = compose(x28, x32)\n    x34 = extract(x15, x33)\n    x35 = x34(x2)\n    x36 =107333(x35)\n    x37 = fork( sleepersection, identity, x36)\n    x38 = mapply(x37, x802)\n    O = fill(x35,"], [1.1, "def solve_dce46b23(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = puree21(I)\n    x2 = argmax(x1, size)\n    x3 = apply(color, x2)\n    x4 = asindices(x2)\n    x5 = apply(contained, x4)\n    x6 = contained(ONE, x5)\n    x7 = asindices(I)\n    x8 =minimum(x7)\n    x9 = NEG_ONE(x8)\n    x10 = asindices(I)\n    x11 = center(x10)\n    x12 = initset(x11)\n    x13 = lbind(insert, x12)\n    x14 = lbind(noteract, x2)\n    x15 = compose(x14, x13)\n    x16 = fork(position, crepose, x15)\n    x17 = product(x3, x3)\n    x18 = rbind(contained, x17)\n    x19 = compose(flip, x18)\n    x20 = rbind(sfilter, x19)\n    x21 = lbind(recolor, ZERO)\n    x22 = compose(x21, x20)\n    x23 = fork(rot90, x22, normalize)\n    x24 = fork(equality, identity, x23)\n    x25 = chain(x1, x20, x24)\n    x26 = lbind(canvas, NEG_ONE)\n    x27 = lbind(occurrences, I)\n    x28 = chain(x26, positive, size)\n    x29 = compose(positive, size)\n    x30 = lbind(lbind, shift)\n    x31 = fork(shift, x30, x29)\n    x32 = compose(x28, x31)\n    x33 = compose(x27, xsize)\n    x34 = fork(87, x33, x32)\n    x35 = fork(remove, x28, x16)\n    x36 = fork(difference, x35, x34)\n    x37 = lbind(lbind, shift)\n    x38 = lbind(shift, x4)\n    x39 = compose(x37, x18)"], [1.1, "def solve_f79b6695(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = occurrences(I, x16)\n    x174,456342astuple(x17, x15)\n    x15 = havecolor(I, x14)\n    x16 = recolor(x15, x15)\n    x17 = fill(I, x16, x17)\n    x18 = normalize(x2)\n    x19 = ulcorner(x18)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = shape(x20)\n    x22 = canvas(x15, x21)\n    x23 = normalize(x2)\n    x24 = lbind(shift, x23)\n    x25 = shape(x2)\n    x26 = canvas(x24, x25)\n    x27 = normalize(x2)\n    x28 = paint(x26, x27)\n    x29 = ulcorner(x7)\n    x30 = remove(x29, x7)\n    x31 = lbind(shift, x28)\n    x32 =gradient(x31)\n    x33 = objects(x28, T, F, F)\n    x34 = mapply(x33, x32)\n    x35 = colorfilter(x34, x14)\n    x36 = difference(x13, x"], [1.1, "def solve_9199b827(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = other(x9, x11)\n    x13 = objects(I, T, T, F)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = lowermost(x15)\n    x18 = lbind(subtract, x17)\n    x19 = chain(x18, minimum, shape)\n    x20 = rbind(colorcount, x4)\n    x21 = valmax(x15, x20)\n    x22 = rbind(colorcount, x4)\n    x23 = matcher(x22, x21)\n    x24 = argmin(x15, x23)\n    x25 = x19(x24)\n    x26 = matcher(first, x4)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = rbind(contained, x27)\n    x30 = compose(x29, last)\n    x31 = sfilter(x28, x30)\n    x32 = width(x31)\n    x33 = h increment(x32)\n    x34 = matcher(last, x33)\n    x35 = sfilter(x391, x34)\n    x36 = apply(x32, x35)\n    x37 = rot90(x)\n    x38 = size(x36)\n    x39 = subtract(x37, x38)\n    x40 = multiply(x39, x43)\n    x41 ="], [1.1, "def solve_1969a5ba(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = insert(x6, x9)\n    x11 =2201(x10)\n    x12 = x11(I)\n    x13 = ofcolor(x12, x6)\n    x14 = backdrop(x13)\n    x15 = toobject(x14, x12)\n    x16 = matcher(first, x1)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = mostcolor(x18)\n    x20 = initset(ZERO)\n    x21 = insert(UNITY, x20)\n    x22 = recolor(x19, x21)\n    x23 = combine(x90, x22)\n    x24 = astuple(SIX, ONE)\n    x25 = canvas(x19, x24)\n    x26 = rbind(colorcount, x55)\n    x27 = compose(x26, palette)\n    x28 = argmax(x23, x27)\n    x29 = size(x28)\n    x30 = count(x12, x28)\n    x31 = astuple(x29, x30)\n    x32 = ulcorner(x28)\n    x33 = invert(x32)\n    x34 = shift(x31, x33)\n    x35 = rbind(toobject, x34)\n    x36 = compose(x35, vmirror)\n    x37 = apply(x36, x32)\n    x38 = astuple(x31, x width)\n    x39 = rbind(ofcolor, x39)\n    x40 = compose(x39, vmirror)\n    x41 = fork(combine, x34, x40)\n    "], [1.1, "def solve_0001d1a7(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = asindices(x30)\n    x32 = sfilter(x31, x25)\n    x33 = rot90(x17)\n    x34 = rot270(x17)\n    x35 = sfilter(x33, x39)\n    x36 = rot180(x17)\n    x37 = rot270(x17)\n    x38 = sfilter(x35, x39)\n    x39 = rot180(x37)\n    x40 = rbind(rot90, x39)\n    x41 = rbind(x40, x37)\n"], [1.1, "def solve_afae9ee6(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = interval(THREE, SEVEN, ONE)\n    x5 = product(x4, x4)\n    x6 = fork(multiply, first, last)\n    x7 = order(x5, x6)\n    x8 = lbind(canvas, NEG_ONE)\n    x9 = chain(x8, first, first)\n    x10 = chain(corners, asindices, x9)\n    x11 = lbind(recolor, x1)\n    x12 = compose(asindices, x9)\n    x13 = fork(difference, x12, x10)\n    x14 = lbind(recolor, TWO)\n    x15 = compose(inbox, x10)\n    x16 = chain(x14, backdrop, x15)\n    x17 = compose(x11, x13)\n    x18 = lbind(lbind, combine)\n    x19 = compose(x18, x17)\n    x20 = lbind(rbind, recolor)\n    x21 = compose(x20, x10)\n    x22 = fork(compose, x19, x21)\n    x23 = lbind(lbind, mapply)\n    x24 = lbind(lbind, shift)\n    x25 = chain(x23, x24, x16)\n    x26 = lbind(lbind, occurrences)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x27, x22)\n    x29 = fork(compose, x25, x28)\n    x30 = rbind(mapply, x3)\n    x31 = compose(x30, x29)\n    x32 = fork(paint, last, x31)\n    x33 = compose(first, first)\n    x34 = fork(remove, x33, first)\n    x35 = fork(astuple, x34, x32)\n    x36 = size(x7)\n    x37 = power(x35, x36)\n    x38 = ast"], [1.1, "def solve_88579be1(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =549(max = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = minimum(x3)\n    x5 =212(x4, TWO)\n    x6 = add(TWO, x5)\n    x7 = shift(x3, x6)\n    x8 = fork(insert, identity, identity)\n    x9 = compose(last, gravitate)\n    x10 = rbind(subtract, x4)\n    x11 = chain(increment, x10, dneighhood)\n    x12 = fork(apply, x11, identity)\n    x13 = lbind(rbind, greater)\n    x14 = compose(x13, first)\n    x15 = rbind(compose, x14)\n    x16 = lbind(rbind, adjacent)\n    x17 = compose(x16, last)\n    x18 = fork(extract, x17, x12)\n    x19 = fork(paint, identity, x18)\n    x20 = rbind(remove, x7)\n    x21 = compose(x20, x12)\n    x22 = rbind(compose, initset)\n    x23 = compose(x22, x71)\n    x24 = lbind(rbind, argmin)\n    x25 = rbind(compose, x24)\n    x26 = lbind(rbind, recolor)\n    x27 = chain(x26, x25, x20)\n    x28 = lbind(lbind, astuple)\n    x29 = rbind(compose, x28)\n    x30 = compose(x29, x17)\n    x31 = fork(compose, x30, x19)\n    x32 = compose(ulcorner, x31)\n    x33 = lbind(rbind, shift)\n    x34 = chain(x33, x32, x2007)\n    x35 = fork(shift, x36, x34)\n    x36 = compose(merge, x35)\n    x37 = mapply(x36, x7"], [1.1, "def solve_e330c487(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, normalize)\n    x3 = compose(x2, toindices)\n    x4 = rbind(compose, contained)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(compose, size)\n    x8 = lbind(toindices, I)\n    x9 = chain(x7, x8, fork)\n    x10 = lbind(78, T)\n    x11 = chain(x110, x10, x9)\n    x12 = lbind(fork, maximum)\n    x13 = compose(x12, x3)\n    x14 = chain(flip, positive, x13)\n    x15 = astuple(x watched, x5)\n    x16 = astuple(x14, x6)\n    x17 = combine(x15, x16)\n    x18 = compose(x15, x3)\n    x19 = fork(argmin, x17, x18)\n    x20 = size(x1)\n    x21 = positive(x20)\n    x22 = decrement(x21)\n    x23 = chain(double, halve, last)\n    x24 = initset(x13)\n    x25 = inbox(x24)\n    x26 = backdrop(x25)\n    x27 =backdrop(x26, x44)\n    x28 =ulaspply(toobject, x27)\n    x29 = chain(first, x29, initset)\n    x30 =1977(x25)\n    x31 =64(x30)\n    x32 = inaccur74(x31)\n    x33 = dmirror(x32)\n    x34 = ulcorner(x7)\n    x35 = llcorner(x27)\n    x36 = subgrid(x33, I)\n    x37 = urcorner(x27)\n    x38 = objects(x39, T, F, F)\n    x39 = subtractor(x38, x37)\n    x40"], [1.1, "def solve_15371899(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = fork(connect, ulcorner, lrcorner)\n    x4 = fork(equality, toindices, x3lrcorner)\n    x5 = sfilter(x2, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, hmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, T)\n    x11 = compose(flip, x4)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x10, x12)\n    x14 = rbind(repeat, x6)\n    x15 = chain(x14, x13, x7)\n    x16 = rbind(branch, ulcorner)\n    x17 = chain(x16, subgrid, x15)\n    x18 =926(x5)\n    x19 = compress(x18)\n    x20 = palette(x19)\n    x21 = remove(ZERO, x20)\n    x22 = other(x21, x1)\n    x23 = objects(x19, T, F, T)\n    x24 = colorfilter(x23, x22)\n    x25 = argmax(x24, size)\n    x26 = replace(x19, x22, ZERO)\n    x27 = argmin(x24, size)\n    x28 = vmirror(x27)\n    x29 = hmirror(x28)\n    x30 = fill(x26, ONE, x29)\n    x31 = ofcolor(x30, x22)\n    x32 = replace(x31, x22, ZERO)\n    x33 = ofcolor(x30, x5)\n    x34 = imirror(x33)\n    x35 = fill(x30, x1, x34)\n    x36 = ofcolor(x34, x22)\n    x37 = fill(x35, x22, x36)\n    x38 ="], [1.1, "def solve_88bcbed7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(flip, x30, x19)\n    x22 = fork(combine, x20, x21)\n    x23 = compose(x22, asobject)\n    x24 = delta(x15)\n    x25 = multiply(x24, THREE)\n    x26 = position(x15, x25)\n    x27 = size(x26)\n    x28 =77(x27)\n    x29 =27de26(x28)\n    x30 = matcher(first, x8)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x29, x31)\n    x33 = difference(x29, x32)\n    x34 = rbind(compose, initset)\n    x35 = lbind(rbind, manhattan)\n    x36 = compose(x34, x35)\n    x37 = fork(shift, x36, ulcorner)\n    x38 = mapply(x37, x3)\n    x39 = merge(x38"], [1.1, "def solve_fc978a34(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5c totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = ofcolor(I, x7)\n    x10 = rbind(shoot, UNITY)\n    x11 = rbind(shoot, NEG_UNITY)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = fork(combine, x10, x11)\n    x15 = fork(combine, x12, x13)\n    x16 = fork(combine, x14, x15)\n    x17 = compose(x16, center)\n    x18 = mapply(x17, x5)\n    x19 = intersection(x8, x18)\n    x20 = intersection(x9, x18)\n    x21 = first(x15)\n    x22 = uppermost(x21)\n    x23 = lowermost(x21)\n    x24 = greater(x22, x23)\n    x25 = both(x24, x19)\n    x26 = branch(x25, UNITY, DOWN_LEFT)\n    x27 = branch(x25, RIGHT, UP_RIGHT)\n    x28 = branch(x25, TWO, DOWN_LEFT)\n    x29 = valmax(x28, x27)\n    x30 = x28(x29)\n    x31 = equality(x30, x22)\n    x32 = equality(x30, x25)\n    x33 = branch(x31, RIGHT, x32)\n    x34 = branch(x34, vmirror, x29)\n    x35 = x34(x33)\n    x36 = shift(x35, UNITY)\n    x37 = shift(x36, x331)\n    x38 =2141447(x37)\n    x39 = underfill(I"], [1.1, "def solve_d1725a5b(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(rbind, subtract)\n    x9 = rbind(toobject, I)\n    x10 = chain(x8, x9, color)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, outbox)\n    x13 = fgpartition(I)\n    x14 = merge(x13)\n    x15 = palette(x14)\n    x16 = other(x15, x4)\n    x17 = ofcolor(I, x16)\n    x18 = vgment outbox(x17)\n    x19 = combine(x17, x18)\n    x20 = fill(I, x16, x19)\n    x21 = ofcolor(I, x16)\n    x22 = rbind( Notice, identity)\n    x23 = rbind(x22, initset)\n    x24 = chain(x23, x11, x20)\n    x25 = product(x21, x1)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x26, x26)\n    x28 = shape(x27)\n    x29 = rbind(multiply, x28)\n    x30 = chain(x29, first, last)\n    x31 = totuple(x1)\n    x32 = power(x30, x31)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = x22(x33)\n    x36 = x24(x35)\n    x37 = fill(x20, x16, x36)\n    x38 = combine(x33, x37)\n    x39 = apply(x28, x38)\n    x40 = rightmost(x39)\n    x41 ="], [1.1, "def solve_c4e13d99(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = SEVEN(I)\n    x2 = matcher(first, ZERO)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(dmirror, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(x5, x3)\n    x7 = fork(compose, x4, x6)\n    x8 = lbind(48filter, I)\n    x9 = chain(size, x8, x7)\n    x10 = asindices(I)\n    x11 = x9(x10)\n    x12 = lbind(toobject, I)\n    x13 = chain(x12, mostcolor, first)\n    x14 = lbind(56123456123456100\n    65123456123456123456125\n    x14 = compose(x34, x13)\n    x15 = compose(x12, x13)\n    x16 = fork(equality, x14, x15)\n    x17 = compose(x16, mostcolor)\n    x18 = fork(both, x17, x18)\n    x19 = extract(x11, x18)\n    x20 = x19(I)\n    x21 = asindices(x20)\n    x22 = box(x21)\n    x23 = toobject(x22, x20)\n    x24 = mostcolor(x23)\n    x25 = palette(x20)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x0)\n    x28 = other(x26, x24)\n    x29 = ofcolor(x20, x27)\n    x30 = ofcolor(x20, x28)\n    x31 = vmirror(x30)\n    x32 = uppermost(x29)\n    x33 = index(x20, x32)\n    x34 = equality(x33, x31)\n    x35 = hmirror(x32)\n    x36 = interval(ORIGIN, x20, ONE)\n    x37 = lbind(952, x360)\n    x38 = difference(x37, x36"], [1.1, "def solve_84633d7a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x25)\n    x17 = mostcolor(x13)\n    x18 =11(x16, x17)\n    x19 = objects(x18, x, F, T)\n    x20 = compose(indices, normalize)\n    x21 = apply(x20, x19)\n    x22 = lbind(sfilter, x21)\n    x23 = lbind(matcher, identity)\n    x24 = chain(size, x22, x23)\n    x25 = matcher(x24, ONE)\n    x26 = sfilter(x21, x25)\n    x27 = APP(x26, x71)\n    x28 =17(x27)\n    x29 = asobject(x28)\n    x30 = last(x29)\n    x31 =487(x30)\n    x32 = delta(x31)\n    x33 = hmirror(x32)\n    x34 = asindices(x33)\n    x35 = center(x34)\n    x36 = add(x35, x31)\n    x37 = shift(x33, x36)\n    x38 = paint(x16, x37)\n    x39 = fgpartition(x38)\n    x40 = merge(x39)\n    x41 = palette(x40)\n    x42 = lbind(remove, ZERO)\n    x43 = chain("], [1.1, "def solve_714e445f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(subtract, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x25, x21)\n    x23 = rbind(colorcount, x22)\n    x24 = rbind(ofcolor, x22)\n    x25 = apply(x23, x18)\n    x26 = x24(x25)\n    x27 = matcher(first, x22)\n    x28 = asindices(x27)\n    x29 = ofcolor(x18, x22)\n    x30 = difference(x28, x29)\n    x31 = rbind(scount, x30)\n    x32 = matcher(first, x22)\n    x33 = rbind(sfilter, x32)\n    x34 = lbind(recolor, x22)\n    x35 = chain(x32, x33, x34)\n    x36 = compose(x32, x21)\n    x37 = fork(combine, x35, x36)\n    x38 = astuple(x31, x38)\n    "], [1.1, "def solve_bbc19b0a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = as index(I, ORIGIN)\n    x2 = lbind(matcher, ZERO)\n    x3 = compose(x2, x1)\n    x4 =1977800(2967557indices)\n    x5 =466paint(I, x4)\n    x6 = chain(size, dedupe, first)\n    x7 = matcher(x6, ONE)\n    x8 = compose(dmirror, merge)\n    x9 = fork(both, x7, x8)\n    x10 = astuple(NEG_TWO, TWO)\n    x11 = x9(x10)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = center(x13)\n    x15 = dmirror(x14)\n    x16 = astuple(NEG_TWO, TWO)\n    x17 = center(x16)\n    x18 = invert(x17)\n    x19 = invert(x18)\n    x20 = shift(x13, x19)\n    x21 = astuple(x16, x17)\n    x22 = x14(x21)\n    x23 = argmax(x22, x8)\n    x24 = center(x23)\n    x25 = increment(x24)\n    x26 = shift(x19, x25)\n    x27 = fill(x5, ONE, x26)\n    x28 = ast objects(x27, T, F, F)\n    x29 = valmax(x28, width)\n    x30 = valmax(x28, height)\n    x31 = halve(x30)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = lbind( move, x27)\n    x34 = toobject(x33, x510)\n    x35 = rbind(compose, last)\n    x36 = lbind(rbind, contained)\n    x37 = chain(x35, x36, toindices)\n    x38 =609(x32)\n    x39 = sfilter(x34, x37)\n    x40 = difference(x"], [1.1, "def solve_18c61ffa(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(adjacent, x2)\n    x4 =8x3, I)\n    x5 = apply(x4, x1)\n    x6 = fork(both, x3, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(fork, manhattan)\n    x9 = double(x8)\n    x10 = decrement(x9)\n    x11 = apply(x10, x7)\n    x12 = rbind(toobject, I)\n    x13 = chain(leastcolor, x12, delta)\n    x14 = rbind(colorcount, x29)\n    x15 = argmax(x11, x14)\n    x16 =29 most(x15)\n    x17 = rbind(subgrid, I)\n    x18 = lbind(compose, x17)\n    x19 = chain(x18, x19, rot90)\n    x20 = x19(I)\n    x21 = rot90(x20)\n    x22 = fork(compose, initset, x21)\n    x23 = apply(x22, x17)\n    x24 = entatching(x16, x23)\n    x25 = branch(x24, x23, x20)\n    x26 = rbind(contained, x24)\n    x27 = valmin(x26, x20)\n    x28 = rbind(O, x27)\n    x29 =\n    x30 = rbind(argmin, x28)\n    x31 = compose(x29, x20)\n    x32 = fork(compose, x31, x21)\n    x33 = lbind( extract, x6)\n    x34 = dmirror(x25)\n    x35 = compose(x34, x31)\n    x36 = apply(x35, x31)\n    x37 = pair(x26, x36)\n    x38 = mapply(matcher, x37)\n    x39 = sfilter(x38, x35"], [1.1, "def solve_8df4c39c(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = lbind(shift, x2)\n    x4 = compose(x3, toivec)\n    x5 = x4(I)\n    x6 = hmirror(x5)\n    x7 = index(I, ORIGIN)\n    x8 = fork(add, first, last)\n    x9 = chain(positive, x7, x8)\n    x10 = index(x6, x1)\n    x11 = fork(add, dmirror, cmirror)\n    x12 = x11(x6)\n    x13 = lbind(shift, x12)\n    x14 = compose(x13, leftmost)\n    x15 = x14(x2)\n    x16 = leftmost(x15)\n    x17 = rightmost(x15)\n    x18 = index(x16, x17)\n    x19 = leftmost(x15)\n    x20 = equality(x18, x19)\n    x21 =ymirror(x11)\n    x22 = x11(x8)\n    x23 = branch(x20, toindices, x22)\n    x24 = decrement(x13)\n    x25 = last(x14)\n    x26 = sign(x24)\n    x27 = compose(invert, x26)\n    x28 = last(x142)\n    x29 = compose(invert, x28)\n    x30 =24(x17)\n    x31 = power(x29, x30)\n    x32 = asindices(x6)\n    x33 = box(x32)\n    x34 = center(x33)\n    x35 =90012x74dd1130(x34)\n    x36 = paint(I, x35)\n    x37 = objects(x36, T, F, F)\n    x38 = colorfilter(x37, x24)\n    x39 = difference(x37, x38)\n    x40 =\"apply(toindices, x39)\n    x41 = rbind( apply, x40)\n    x"], [1.1, "def solve_6bcccfcd(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = compose(x24, vmirror)\n    x32 = fork(combine, x29, x31)\n    x33 = mapply(x32, x30)\n    x34 = mostcolor(I)\n    x35 =97(x33, x34)\n    x36 = objects(x35, T, F, T)\n    x37 = compose(box, x36)\n    x38 = fork(difference, x37,x28)\n    x39 = mapply("], [1.1, "def solve_93481008(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = color(x2)\n    x19 = color(x3)\n    x20 = astuple(x16, x17)\n    x21 = initset(x17)\n    x22 = insert(x8, x21)\n    x23 = recolor(x4, x22)\n    x24 = astuple(x15, x53)\n    x25 = other(x24, x19)\n    x26 = subtract(x24, x25)\n    x27 = uppermost(x2)\n    x28 = lbind(subtract, x27)\n    x29 = chain(x28, toivec, width)\n    x30 = x29(x26)\n    x31 = initset(x30)\n    x32 = insert(x29, x31)\n    x33 = backdrop(x32)\n    x34 = dmirror(x30)\n    x35 = x24(x34)\n    x36 = astuple(x10, x53)\n    x37 = shift(x35, x36)\n    x38 =171(x39)\n    x39 = apply(x39, x37)\n    x40 = lbind(compose, maximum)\n    x41 = lbind(matchermost, Z"], [1.1, "def solve_653127fc(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I):\n    x17 = dmirror(x16)\n    x18 = shape(I)\n    x19 = multiply(x18, x18)\n    x20 = canvas(x9, x19)\n    x21 = paint(x20, x13)\n    x22 = objects(x21, T, F, F)\n    x23 = colorfilter(x22, x9)\n    x24 = sfilter(x23, x15)\n    x25 = size(x24)\n    x26 = divide(x25, x9)\n    x27 = increment(x26)\n    x28 = divide(x25, x12)\n    x29 = increment(x28)\n    x30 = divide(x22, x29)\n    x31 = astuple(x27, x30)\n    x32 = canvas(ZERO, x31)\n    x33 = asindices(x32)\n    x34 = astuple(x24, x22)\n    x35 = shift(x34, x39)\n    x36 = index(x36, ORIGIN)\n    x37 = divide(x33, x36)\n    x38 = shift(x35, x37)\n    x39 = paint(x36, x38)\n    x40 =000234(x39)\n    x41 = palette("], [1.1, "def solve_d65e2fe1(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot180)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot90)\n    x5 = astuple(rot180, cmirror)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = fork(combine, identity, rot90)\n    x9 = fork(remove, identity, rot2000)\n    x10 = compose(x8, x9)\n    x11 = lbind(compose, flip)\n    x12 = lbind(matcher, first)\n    x13 = chain(x11, x12, x10)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x14)\n    x16 = chain(first, x13, x15)\n    x17 = compose(x13, x16)\n    x18 = fork(repeat, x17, ulcorner)\n    x19 = compose(x12, x1)\n    x20 = partition(I)\n    x21 = fork(compose, x19, x20)\n    x22 = lbind(occurrences, I)\n    x23 = fork(rapply, x21, x22)\n    x24 = compose(first, x23)\n    x25 = compose(x24, x21)\n    x26 = fork(rapply, x20, x25)\n    x27 = compose(first, x26)\n    x28 = fork(multiply, x28, x25)\n    x29 = fork(add, x27, x28)\n    x30 = compose(asobject, x25)\n    x31 = fork(00200000, x30, x29)\n    x32 = partition(I)\n    x33 = rbind(add, ZERO)\n    x34 = dmirror(x32)\n    x35 = fork(astuple, x34, x31)\n    x36 = argmax(x34, x35)\n    x37 = astuple(x36, x23)"], [1.1, "def solve_b2c5e7a2(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = astuple(x25, x26)\n    x28 = interval(x27, x100, ONE)\n    x29 = product(x28, x28)\n    x30 = product(x29, x29)\n    x91 = ofcolor(I, x4)\n    x92 = rbind(astuple, x canvas)\n    x93 = apply(x92, x30)\n    x94 = lbind(sfilter, x43)\n    x45 = rbind(subgrid, I)\n    x46 = apply(x94, x3)\n    x47 = lbind(compose, x24)\n    x48 = lbind(rbind, insert)\n    x49 = lbind(compose, x48)\n    x50 =44(x89)\n    x51 = lbind(rbind, move)\n    x52 = rbind(compose, x46)\n"], [1.1, "def solve_190d866f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = lbind(apply, dedupe)\n    x2 = lbind(rbind, equality)\n    x3 = rbind(bordering, I)\n    x4 = compose(x2, x3)\n    x5 = fork(4043, x4, double)\n    x6 = chain(positive, size, x5)\n    x7 = sfilter(x1, x6)\n    x8 = compose(x5, x4)\n    x9 = argmin(x7, x8)\n    x10 = leastcolor(x9)\n    x11 = ofcolor(I, x10)\n    x12 = inbox(x11)\n    x13 = toobject(x12, I)\n    x14 = mostcolor(x13)\n    x15 = ofcolor(I, x10)\n    x16 = inbox(x15)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, I)\n    x19 = identity(x18)\n    x20 = mostcolor(x19)\n    x21 = ofcolor(I, x10)\n    x22 = colorfilter(x21, x20)\n    x23 = argmax(x22, identity)\n    x24 = mapply(last, x22)\n    x25 = ofcolor(I, x10)\n    x26 = sighacent(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = apply(last, x28)\n    x30 = initset(x14)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(first, last)\n    x33 = totuple(x30)\n    x34 = apply(x32, x33)\n    x35 = shift(x29, x34)\n    x36 = combine(x31, x35)\n    x37 = recolor(x10, x36)\n    x38 = shift(x24, x34)\n    x39 = combine(x37, x38)\n    x40 = paint(I, x39)\n    O = cover(x40, x18)"], [1.1, "def solve_ef8d5845(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x3 = lbind(subtract, x28)\n    x4 = rbind(multiply, x30)\n    x5 = compose(x32, x4)\n    x6 = apply(x5, x3)\n    x7 = fork(add, identity, last)\n    x8 = rbind(remove, x8)\n    x9 = compose(last, last)\n    x10 = lbind(rbind, add)\n    x11 =rbind(compose, x10)\n    "], [1.1, "def solve_381be45a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = height(x3)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = difference(x5, x7)\n    x9 = toobject(x8, I)\n    x10 = palette(x9)\n    x11 = lbind(mfilter, x6)\n    x12 = compose(size, x11)\n    x13 = chain(x12, palette, partition)\n    x14 = merge(x3)\n    x15 = lefthalf(x14)\n    x16 = righthalf(x14)\n    x17 = palette(x16)\n    x18 = lbind(colorcount, x8)\n    x19 = argmin(x17, x18)\n    x20 = ofcolor(x13, x19)\n    x21 = ofcolor(x16, x19)\n    x22 = backdrop(x21)\n    x23 = toobject(x22, x16)\n    x24 = uppermost(x23)\n    x25 = dmirror(x24)\n    x26 = initset(x24)\n    x27 = rbind(order, leftmost)\n    x28 = color(x23)\n    x29 = insert(x27, x28)\n    x30 = insert(x26, x29)\n    x31 = cover(x13, x30)\n    x32 = leftmost(x29)\n    x33 = width(dmirror)\n    x34 = interval(x32, x33, ONE)\n    x35 = pair(x34, x34)\n    x36 = DOWN)\n    x37 = leftmost(x29)\n    x38 = interval(x36, x37, ONE)\n    x39 = pair(x38, x38)\n    x40 = UP25x LEFT(x39)\n    x41 = papply(vfrontier, x20)\n    x42 = papply(hfrontier,"], [1.1, "def solve_87245469(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, ONE)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = pair(x11, x7)\n    x13 = mapply(outbox, x12)\n    x14 = subgrid(x13, I)\n    x15 = mapply(delta, x12)\n    x16 = replace(x14, FIVE, ZERO)\n    x17 = branch(x16, width, height)\n    x18 = x17(x14)\n    x19 = tojvec(x18)\n    x20 = bottomhalf(x15)\n    x21 = replace(x20, ZERO, ZERO)\n    x22 = ofcolor(x21, x7)\n    x23 = llcorner(xExample\n    x24 = dmirror(x23)\n    x25 = papply(pair, x81, x14)\n    x26 = lefthalf(x25)\n    x27 = apply(palette, x26)\n    x28 = insert(x7, x27)\n    x29 = lbind( contained, x28)\n    x30 = compose(flip, x29)\n    x31 = extract(x26, x30)\n    x32 = remove(x31, x26)\n    x33 = x32(x31)\n    x34 = x17(x33)\n    x35 = x34(x31)\n    x36 = llcorner(x ofcolor)\n    x37 = lbind(min, x36)\n    x38 = compose(x37, x15)\n    x39 = fork(shift, identity, x38)\n    x40 = mapply(x39, x24)\n    "], [1.1, "def solve_3a22627f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(max, size)\n    x3 = chain(x2, avg, mostcolor)\n    x4 = mfilter(x1, x3)\n    x5 = partition(I)\n    x6 = argmax(x5, x3)\n    x7 = mostcolor(I)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = multiply(x4, x8)\n    x11 = width(I)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = height(I)\n    x14 = interval(ZERO, x13, FOUR)\n    x15 = rbind(multiply, x10)\n    x16 = apply(x15, x14)\n    x17 = rbind(multiply, x11)\n    x18 = apply(x17, x15)\n    x19 = pair(x16, x18)\n    x20 = sfilter(x19, hline)\n    x21 = mapply(last, x20)\n    x22 = sfilter(x19, vline)\n    x23 = center(x21)\n    x24 = invert(x23)\n    x25 = shift(x21, x24)\n    x26 = apply(last, x25)\n    x27 = remove(x26, x25)\n    x28 = astuple(x27, x199)\n    x29 = center(x28)\n    x30 = invert(x29)\n    x31 = shift(x28, x30)\n    x32 = apply(normalize, x27)\n    x33 = astuple(x27, xre)\n    x34 = shift(x31, x33)\n    x35 = apply(ulcorner, x22)\n    x36 = normalize(x27)\n    x37 = paint(x39, x36)\n    x38 = fork(shift, identity, normalize)\n    x39 = lbind(mapply, x38)\n    x40 = lbind(ofcolor, x36)\n    x41"], [1.1, "def solve_f5e31a93(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, connect)\n    x24 = x23(x14)\n    x25 = compose(x19, first)\n    x26 = compose(x20, x22)\n    x27 = fork(x25, x26, x20)\n    x18 = compose(x21, first)\n    x19 = fork(sfilter, x18, x27)\n    x20 = chain(initset, last, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x22, identity)\n    x24 = lbind(chain, connect)\n    x25 = lbind(x24, F)\n    x26 = lbind(compose, last)\n    x27 = compose(x25, x26)\n    x28 = chain(x19, x23, x27)\n    x29 = lbind(chain, outbox)\n"], [1.1, "def solve_1be7ebf6(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, identity, outbox)\n    x19 = x18(x5)\n    x20 = rbind(subgrid, I)\n    x21 = chain(color, x20, trim)\n    x22 = x21(x19)\n    x23 =478(x5)\n    x24 = colorfilter(x23, ZERO)\n    x25 = rbind(manhattan, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = argmin(x26, width)\n    x28 = shoot(x27, UNITY)\n    x29 =78(x28)\n    x30 = color(x29)\n    x31 =774(ulcorner, x24)\n    x32 = insert(xZERO, x31)\n    x33 = rbind(subgrid, x22)\n    x34 = extract(x32, x33)\n    x35 =191(x34)\n    x36 = output:\n    x35, x307)\n    x37 =774(x35, x36)\n    x38 = color(x37)\n    x39 =initset(x38)\n    x40 = insert(x30, x39)\n    x41 = backdrop("], [1.1, "def solve_03850376(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = vsplit(x17, x16)\n    x19 = invert(x18)\n    x20 = tojvec(x19)\n    x21 = rbind(shift, x20)\n    x22 = compose(x21, last)\n    x23 = argmax(x18, x22)\n    x24 = asobject(x23)\n    x25 = x22(x24)\n    x26 = center(x25)\n    x27 = invert(x26)\n    x28 = shift(x25, x27)\n    x29 = paint(x7, x28)\n    x30 = astuple(x26, x13)\n    x31 = shift(x29, x30)\n    x32 = x17(x31)\n    x33 = x22(x32)\n    x34 = hmirror(x33)\n    x35 = ulcorner(x323)\n    x36 = rbind(subtract, x35)\n    x37 = apply(x36, x34)\n    x38 = last(x37)\n    x39 = remove(x38, x37)\n    x40 = last(x39)\n    x41 = first(x40)\n    x42 = momentofcolor(x41, x6)\n"], [1.1, "def solve_fc72f097(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = mostcolor(I)\n    x4 = remove(x3, x2)\n    x5 = lbind(other, x4)\n    x6 = compose(x5, color)\n    x7 = fork(recolor, x6, outbox)\n    x8 = rbind( Actually gameplay, DOWN)\n    x9 = rbind(argmax, x8)\n    x10 = compose(x9, toindices)\n    x11 = apply(x10, x1)\n    x12 = chain(x9, outbox, outbox)\n    x13 = apply(x12, x11)\n    x14 = mapply(x14, x13)\n    x15 =289446(x14, EIGHT)\n    x16 = delta(x15)\n    x17 = branch(x16, x13, x15)\n    x18 = rbind(argmin, x17)\n    x19 = compose(x18, toindices)\n    x20 = apply(x19, x15)\n    x21 = mapply(x20, x16)\n    x22 = downscale(x21, ONE)\n    x23 = delta(x25)\n    x24 = repeat(x22, x23)\n    x25 = lbind(recolor, x3)\n    x26 = chain(x25, x34, x259)\n    x27 = fork(ofcolor, x19, x36)\n    x28 = height(x27)\n    x29 = vsplit(x27, x28)\n    x30 = equality(x29, TWO)\n    x31 = apply(x27, x30)\n    x32 = vmirror(x31)\n    x33 = ofcolor(x32, x3)\n    x34 = height(x33)\n    x35 = width(x33)\n    x36 = astuple(x34, x35)\n    x37 = connect(x33, x36)\n    x38 = fill(x32, x3, x37)\n    x39 = x27(x38)\n    "], [1.1, "def solve_b24f0efe(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = initset(ORIGIN)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(vmatching, x12)\n    x14 = first(x12)\n    x15 = lrcorner(x14)\n    x16 = TIREE(x15)\n    x17 = shift(x6, x16)\n    x18 = paint(x10, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = argmax(x19, numcolors)\n    x21 = normalize(x20)\n    x22 = remove(x4, x2)\n    x23 = rapply(x22, x21)\n    x24 = mapply(toindices, x23)\n    x25 = normalize(x8)\n    x26 = shape(x25)\n    x87 = increment(x26)\n    x88 = canvas(x4, x27)\n    x89 = lbind(multiply, x307)\n    x90 = toivec(x8)\n    x91 = invert(x30)\n    x92 = shift(x25, x91)\n    x93 = lbind(shift, x17)\n    x94 = shape(xcb)\n    x95 = increment(x46)\n    x96 = shift(x93, x95)\n    x17 = combine(x82, x96)\n    x18 = paint(x10, x17)\n    x19 = palette(x18)\n    x20 =57(x19, x7)\n    x21 = palette(x18)\n    x22 = intersection(x20, x21)\n    "], [1.1, "def solve_c6c8bad7(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = compose(izefilter, toindices)\n    x4 = backdrop(x2)\n    x5 = x3(x4)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = interval(ZERO, NINE, ONE)\n    x10 = x8(x9)\n    x11 = invert(x10)\n    x12 = shift(x6, x11)\n    x13 = apply(toindices, x12)\n    x14 = lbind(shift, x6)\n    x15 =\n    x14(x14)\n    x176 = mapply(x16, x13)\n    x17 = OIGIN(x7)\n    x18 = cover(I, x17)\n    x19 = paint(x18, x7)\n     x20 =1999(I)\n    x21 =80(x20)\n    x22 = chain(825ec883, first, last)\n    x23 = x22(x21)\n    x24 = height(x7)\n    x25 = height(x4)\n    x26 = subtract(x24, x25)\n    x27 = increment(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = paint(x19, x28)\n    x30 = connect(x7, x5)\n    x31 = apply(normalize, x30)\n    x32 = astuple(UNITY, NEG_UNITY)\n    x33 = astuple(UP_RIGHT, NEG_UNITY)\n    x34 = combine(x32, x33)\n    x35 = lbind(recolor, x2)\n    x36 = rbind(ofcolor, x2)\n    x37 = apply(x35, x34)\n    x38 = chain(x35, x36, x37)\n    x39 = rbind(mapply, x3)\n    x40 = lbind(ofcolor,"], [1.1, "def solve_cf0cd1e6(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, first)\n    x9 = lbind(lbind, positive)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(size, x16)\n    x18 = subtract(FIVE, x17)\n    x19 = astuple(dmirror, x10)\n    x20 = astuple(hmirror, x)\n    x21 = combine(x19, x20)\n    x22 = vmirror(x21)\n    x23 = asindices(I)\n    x24 = center(x23)\n    x25 = hmirror(x24)\n    x26 = astuple(b782, x25)\n    x27 = astuple(x36, x26)\n    x28 = combine(x24, x27)\n    x29 = matcher(x28, x24)\n    x30 = fgpartition(I)\n    x31 = merge(x30)\n    x32 = center(x31)\n    x33 = subtract(x32, x31)\n    x34 = shift(x33, x3)\n    x35 = paint(I, x34)\n    x36 = ofcolor(x35, x4)\n    x37 = shift(x36, x33)\n    x38 = ofcolor(x35, TWO)\n    x39 = shape(x38)\n    x40 = shift(x38, x39)\n    O = vmirror(x40"], [1.1, "def solve_786ccffd(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = fork(connect, ulcorner, urcorner)\n    x4 = fork(equality, toindices, x3)\n    x5 = sfilter(x2, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, hmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, F)\n    x11 = compose(flip, x4)\n    x12 = sfilter(x10, x11)\n    x13 = rbind(shoot, UNITY)\n    x14 = mapply(x13, x12)\n    x15 = combine(x9, x14)\n    x16 = vmirror(x15)\n    x17 = mapply(x13, x16)\n    x18 = height(x17)\n    x19 = width(x17)\n    x20 = interval(ZERO, x19, ONE)\n    x21 = combine(x17, x20)\n    x22 = pair(x17, x21)\n    x23 = sfilter(x22, last)\n    x24 = width(x12)\n    x25 = interval(ZERO, x24, ONE)\n    x26 = pair(x25, x24)\n    x27 = sfilter(x26, first)\n    x28 = pair(x27, x40)\n    x29 = sfilter(x28, last)\n    x30 = rbind(shoot, DOWN)\n    x31 = mapply(x30, x29)\n    x32 = center(x35)\n    x33 = rbind(shoot, x32)\n    x34 = mapply(x33, x31)\n    x35 = either(x24, x34)\n    x36 = branch(x35, hmirror, vmirror)\n    x37 = x36(x1)\n    x38 = multiply(x47, x38)\n    x39 = lbind(apply, last)\n    x40 = lb"], [1.1, "def solve_25939d48(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, equality)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x41"], [1.1, "def solve_707043e9(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(equality, fgpartition, height)\n    x7 = fork(both, x3, x5)\n    x8 = fork(both, x7, x6)\n    x9 = leastcolor(I)\n    x10 = palette(I)\n    x11 = remove(x9, x10)\n    x12 = lbind(colorcount, I)\n    x13 = argmin(x11, x12)\n    x14 = ofcolor(I, x13)\n    x15 = ofcolor(I, x10)\n    x16 = combine(x14, x15)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, I)\n    x19 = matcher(first, x13)\n    x20 = colorfilter(x18, x19)\n    x21 =8filter(x20, x17)\n    x22 = compose(a416, normalize)\n    x23 =09629e(x22)\n    x24 = dmirror(x23)\n    x25 = mapply(x19, x21)\n    x26 = last(x25)\n    x27 = add(FOUR, x26)\n    x28 = width(I)\n    x29 = divide(x28, x17)\n    x30 = invert(x29)\n    x31 = width(I)\n    x32 = divide(x31, x12)\n    x33 = increment(x32)\n    x34 = astuple(x30, x33)\n    x35 = apply(x274, x34)\n    x36 = ofcolor(I, x109)\n    x37 = lbind(shift, x36)\n    x38 = mapply(x37, x35)\n    x39 = argmax(x38, x29)\n    x40 = apply(x28, x34)\n    x41"], [1.1, "def solve_fd4df9a9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x30 = lbind(ofcolor, I)\n    x31 = chain(x8, x9, x30)\n    x32 = rbind(matcher, ZERO)\n    x33 = compose(x32, x31)\n    x34 = chain(flip, x30, x33)\n    x35 = initset(x4)\n    x36 = gravitate(x35, x34)\n    x37 = chain(positive, size, x36)\n    x38 = rbind(sfilter, x37)\n    x39 = chain(first, x38, x1)\n    x40 = chain(sfilter, x35, x39)\n    x41 = fork(c909, x40, x33)\n    x42 = compose(045, x41)\n    x43 = fork( crop, x62, x42)\n    x44 = product(x6, x5)\n    x45 = power(x43, TWO)\n    x46 = EIGHT(x44)\n    x47 =49(x46)\n    x48 = sfilter(x45, x47)\n    x49 = chain(first, x00, x00000000)\n    x50 = branch(x49, width, height)\n    x51 = x50(I)\n    x52 = multiply(x51, LEFT)\n    x53 = x52(I)\n    x54 = branch(x59, height, width)\n    x55 = x54(I)\n    x56 = decrement(x55)\n    x57 = lbind(astuple, x56)\n    x58 = compose(x57, x71)\n    x59 = argmax(x48, x58)\n    x60 = initset"], [1.1, "def solve_f3a8c003(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x4, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = r compose(x28, last)\n    x30 = rbind(extract, x29)\n    x31 = chain( decrement, x30, x22)\n    x32 = x31(x27)\n    x33 = first(x32)\n    x34 = ulcorner(x3)\n    x35 = matcher(first, x4)\n    x36 = extract(x34, x35)\n    x37 = lbind(shift, x26)\n    x38 = multiply(x37, LEFT)\n    x39 =70774(x38)\n    x40 = shift(x32, x39)\n    x41 = lbind(shift, x40)\n    x42 = compose("], [1.1, "def solve_d9f760e4(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(shape, THREE_BY_THREE)\n    x3 = matcher(size, FIVE)\n    x4 = fork(intersection, toindices, box)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, FOUR)\n    x7 = fork(intersection, toindices, corners)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x3)\n    x11 = fork(both, x6, x9)\n    x12 = fork(both, leftmost, urcorner)\n    x13 = fork(both, x10, x11)\n    x14 = delta(x3)\n    x15 = center(x14)\n    x16 = difference(x1, x15)\n    x17 = mostcolor(I)\n    x18 = uppermost(x3)\n    x19 = rightmost(x3)\n    x20 = lbind(greater, x18)\n    x21 = compose(x20, shape)\n    x22 = compose(invert, x21)\n    x23 = order(x16, x22)\n    x24 = apply(x23, x23)\n    x25 = interval(ONE, FIVE, ONE)\n    x26 = combine(x26, x25)\n    x27 = apply(last, x26)\n    x28 = apply(toivec, x27)\n    x29 = tojvec(x14)\n    x30 = shift(x29, F8)\n    x31 = rbind(compose, initset)\n    x32 = lbind(rbind, manhattan)\n    x33 = compose(x32, initset)\n    x34 = fork(bordering, x33, x33)\n    x35 = compose(flip, x34)\n    x36 = lbind(chain, normalize)\n    x37 = lbind(x36, color)\n    x38 = rbind(compose, initset)\n    x39 = compose("], [1.1, "def solve_3198067e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    xxsize(x4)\n    x6 = sfilter(x1, vline)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = multiply(x4, x4)\n    x11 = subtract(x10, x9)\n    x12 = frontiers(I)\n    x13 = objects(I, T, F, F)\n    x14 = color(x12)\n    x15 = mostcolor(x12)\n    x16 = subgrid(x12, I)\n    x17 = repeat(x16, x11)\n    x18 = merge(x17)\n    x19 = fgpartition(x18)\n    x20 = matcher(color, x18)\n    x21 = compose(flip, x20)\n    x22 = extract(x19, x21)\n    x23 = remove(x22, x19)\n    x24 = merge(x23)\n    x25 = color(x12)\n    x26 =yiindices(x22)\n    x27 = lrcorner(x66)\n    x28 = add(x27, DOWN)\n    x29 = initset(x28)\n    x30 = insert(x25, x29)\n    x31 = outbox(x30)\n    x32 = objects(x16, T, F, T)\n    x33 = rbind(adjacent, x32)\n    x34 = mfilter(x33, toindices)\n    x35 = rbind(x34, x33)\n    x36 = llcorner(x35)\n    x37 = add(x36, UNITY)\n    x38 = shape(x22)\n    x39 = add(x38, fIVE)\n    x40 = initset(x39)\n    x41 = insert(x7, x40)\n    x42 = width(x22)\n    x"], [1.1, "def solve_3f4c71e1(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = width(x21)\n    x31 = increment(x30)\n    x32 = Fgpartition(x21)\n    x33 = merge(x32)\n    x34 = chain(double, first, last)\n    x35 = fork(equality, x34, x first)\n    x36 = sfilter(x33, x35)\n    x37 =245(x36)\n    x38 = asobject(x37)\n    x39 = chain(first, x74, x38)\n    x40 = sfilter(x38, x39)\n    x41 = lb"], [1.1, "def solve_5a68a6ed(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = replace(I, x2, x1)\n    x4 = frontiers(x3)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(x3)\n    x10 = frontiers(x9)\n    x11 = sfilter(x10, identity)\n    x12 = color(x11)\n    x13 = palette(x11)\n    x14 = remove(x12, x13)\n    x15 = lbind(colorcount, x11)\n    x16 = argmin(x14, x15)\n    x17 = other(x16, x12)\n    x18 = objects(x9, T, T, F)\n    x19 = colorfilter(x18, x12)\n    x20 = rbind(adjacent, x4)\n    x21 = mfilter(x19, x20)\n    x22 = toindices(x21)\n    x23 = rbind(manhattan, x15)\n    x24 = shoot(x23, x77)\n    x25 = sfilter(x22, x18)\n    x26 = difference(x22, x25)\n    x27 = ofcolor(x9, x16)\n    x28 = leftmost(x27)\n    x29 = colorfilter(x9, x12)\n    x30 = rbind(b782, invert)\n    x31 = apply(x30, x29)\n    x32 = mapply(x28, x31)\n    x33 = argmin(x32, uppermost)\n    x34 = remove(x33, x32)\n    x35 = other(x34, x22)\n    x36 = apply(first, x1500)\n    x37 = first(x36)\n    x38 = apply(first, x37)\n    x39 = ONE(x38, x37)\n    x40 = rbind(contained, x39)"], [1.1, "def solve_6dce507d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = repeat(x8, ONE)\n    x10 = branch(x9, color, x8)\n    x11 = branch(x9,2009, x10)\n    x12 = apply(color, x11)\n    x13 = mapply(dmirror, x12)\n    x14 = add(NEG_UNITY, NEG_UNITY)\n    x15 = pair(x14, x14)\n    x16 = mapply(cmirror, x15)\n    x17 = mapply(vmirror, x16)\n    x18 = astuple(x17, x15)\n    x19 = add(x18, UNITY)\n    x20 = byynther(x19)\n    x21 = solve_x20, identity)\n    x22 = Chunggrid(x21, xI)\n    x23 = input:\n    9919923 ulcorner(x20)\n    x24 = asindices(x23)\n    x25 = increment(x24)\n    x26 = ulcorner(x25)\n    x27 = asindices(x23)\n    x28 = increment(x27)\n    x29 = equallyflip(x28, x25)\n    x30 = asobject(x29)\n    x31 = combine(x24, x30)\n    x32 = repeat(x31, ONE)\n    x33 = ONE(x32)\n    x34 = fgpartition(x33)\n    x35 = merge(x34)\n    x36 = center(x35)\n    x37 = dmirror(x35)\n    x38 = astuple(x36, x37)\n    x39 = I(x38)\n    x40 = multiply(x31, THREE)\n    x41 = add(x"], [1.1, "def solve_2b2aafdd(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_67987a8f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, trim)\n    x3 = astuple(dmirror, x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = insert(x3, x5)\n    x7 = order(x6, toindices)\n    x8 = x9(x7)\n    x9 = remove(x8, x7)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, last)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind( chain, ulcorner)\n    x24 = lbind(x13, x12)\n    x25 = lbind(fork, shift)\n    x26 = lbind(lbind, shift)\n    x27 = lbind(occurrences, I)\n    x28 = chain(x24, x25, x27)\n    x29 = compose(x28, x12)\n    x30 = lbind(rbind, greater)\n    x31 = chain(x29, x30, last)\n    x32 = rbind(rapply, x13)\n    x33 = chain(x32, initset, first)\n    x34 = fork(add, x31, x33)\n    x35 = compose(x304, x34)\n    x36 = compose(x10, x35)\n    x37 = apply(x36, x8)\n    x38 = dedupe(x37)\n    x39 = x39(x38)\n    x40 = fork(add, last, x33)\n    x41 = compose(x40, first)\n    x42 = size(x41)\n    x43 = equality(x42, ONE)\n    x44 = branch(x43, xhmirror, vmirror)\n    x45 = x44(I)\n    x46 = width(x45)\n    x47 = rbind(repeat, x46)\n    x48 = chain(dmirror, x47, x45)\n    x49 = decrement(x47)"], [1.1, "def solve_370a2c51(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subtract(x20, I)\n    x22 = size(x21)\n    x23 = positive(x22)\n    x24 = branch(x23, x20, dmirror)\n    x25 = x24(I)\n    x26 = objects(x25, T, F, T)\n    x27 = argmin(x26, uppermost)\n    x28 = other(x26, x27)\n    x29 = color(x28)\n    x30 = lowermost(x27)\n    x31 = width(x255)\n    x32 = toivec(x31)\n    x33 = uppermost(x27)\n    x34 = interval(x33, x32, x29)\n    x35 = rbind(contained, x34)\n    x36 = sfilter(x1, x35)\n    x37 = lbind(apply,toindices)\n    x38 = lbind(upscale, x37)\n    x39 = chain(x37, x38, x39)\n    x40 = lbind(re"], [1.1, "def solve_bf6e81e1(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = vline(x2)\n    x6 = lefthalf(I)\n    x7 = righthalf(I)\n    x8 = add(x6, ONE)\n    x9 = add(x7, TWO)\n    x10 = branch(x4, x8, x9)\n    x11 = branch(x5, vline, hline)\n    x12 =1988(x10, x11)\n    x13 =1989(x7)\n    x14 =1988(x6)\n    x15 =1988(x6)\n    x16 = fork(combine, x12, x13)\n    x17 = fork(combine, x14, x15)\n    x18 = fork(TWO, x16, x17)\n    x19 = h9(x6)\n    x20 = h9(x7)\n    x21 = identity(x19)\n    x22 = identity(x16)\n    x23 = identity(x22)\n    x24 = identity(x11)\n    x25 = identity(x21)\n    x26 = corners(x4)\n    x27 = combine(x19, x26)\n    x28 = astuple(x22, x6)\n    x29 = rbind(multiply, x28)\n    x40 = apply(x29, x27)\n    x41 = argmax(x540, x16)\n    x42 = solve(x41, x29)\n    x43 = palette(x42)\n    x44 = identity(x14)\n    x45 = remove(x4, x43)\n    x46 = other(x45, x1111)\n    x47 = lbind(colorcount, x14)\n    x48 = argmin(x44, x47)\n    x49 = ofcolor(x78, x46)\n    x50 = ofcolor(x78, x44)\n    x51 = apply(last, x50)\n    x52 = size(x51)"], [1.1, "def solve_5f3a1a61(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astindices(x1)\n    x23 =55617bordering(x22)\n    x24 = cance427(x23)\n    x25 = occurrences(I, x24)\n    x26 = mapply(toindices, x25)\n    O = fill(x20, x1, x26)\n    return O"], [1.1, "def solve_8eac4399(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =3393833object(I, T, F, T)\n    x3 = matcher(size, SIX)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x12 = difference(x5, x10)\n    x13 = apply(initset, x12)\n    x14 = rbind(hmatching, x10)\n    x15 = rbind(vmatching, x10)\n    x16 = fork(either, x14, x15)\n    x17 = sfilter(x13, x16)\n    x18 = rbind(gravitate, x10)\n    x19 = fork(add, center, x18)\n    x20 = fork(connect, center, x19)\n    x21 = fork(recolor, color, x20)\n    x22 = mapply(x21, x17)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_87ae369b(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 =649(I)\n    x6 = frontiers(I)\n    x7 =449(I)\n    x8 = merge(x6)\n    x9 = color(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = argmin(x13, numcolors)\n    x15 = cover(I, x14)\n    x16 = normalize(x14)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x9)\n    O = paint(x15, x18)\n    return O"], [1.1, "def solve_671b5b2d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power( unfoldingcorner, TWO)\n    x9 = lbind(remove, TWO_BY_TWO)\n    x10 = cmirror(x7)\n    x11 = chain(x7, x9, x10)\n    x12 = lbind(sfilter, x7)\n    x13 = lbind(matcher, compress)\n    x14 = compose(x12, x13)\n    x15 = chain(size, x7, x14)\n    x16 = fork(22, x15, x14)\n    x17 = fork(7fe22, x13, x16)\n    x18 = lbind(recolor, x3)\n    x19 = compose(decrement, x17)\n    x20 = chain(x18, size, x19)\n    x21 = fork(combine, x21, x16)\n    x22 = fork(combine, x18, x20)\n    x23 = fork(combine, x23, x1)\n    x24 = mapply(x28, x4)\n    x25 = mapply(x29, x4)\n    x26 = shape(I)\n    x27 = canvas(x3, x26)\n    O = fill(x27, ZERO, x24)\n    return O"], [1.1, "def solve_919c76f0(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = compose(shift, x3)\n    x5 = compose(paint, x4)\n    x6 = lbind(compose, inbox)\n    x7 = compose(x6, x5)\n    x8 = lbind(lbind, contained)\n    x9 = compose(x8, x5)\n    x10 = compose(x7, x9)\n    x11 =2555(I)\n    x12 =5555(paint)\n    x13 = compose(initset, x12)\n    x14 = fork(rapply, x33, x13, identity)\n    x15 = compose(first, x14)\n    x16 = rapply(x11, x9)\n    x17 = mapply(x16, x16)\n    O = fill(I, x17, x13)\n    return O"], [1.1, "def solve_5b42f73d(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, F)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(colorfilter, x3)\n    x9 = compose(x8, color)\n    x10 = fork(add, x7, x9)\n    x11 = compose(x5, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, delta)\n    x14 = fork(argmin, x11, x13)\n    x15 = palette(I)\n    x16 = remove(x8, x15)\n    x17 = other(x16, x14)\n    x18 = rbind(argmin, x17)\n    x19 = compose(x18, delta)\n    x20 = fork( minimrement, shape, x19)\n    x21 = rbind(paint, I)\n    x22 = chain(x20, x21, x4)\n    x23 = merge(x2)\n    x24 =495(x23)\n    x25 = branch(x24, x22, plots)\n    x26 = x25(I)\n    O = replace(x26, x14, x655)\n    return O"], [1.1, "def solve_d2a0797e(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = x3(I)\n    x5 = remove(x4, x1)\n    x6 = argmin(x5, x2)\n    x7 = papply(astuple, x6, x4)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, hmirror, vmirror)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, F)\n    x13 = color(x10)\n    x14 =218cth17(x12)\n    x15 = delta(x11)\n    x16 =ulcorner(x15)\n    x17 = shoot(x16, UP_RIGHT)\n    x18 = mapply(x12, x17)\n    Clean711229993, x15)\n    x19 = shoot(x18, DOWN_LEFT)\n    x20 = mapply(x12, x19)\n    x21 = underfill(x11, x13, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, x13)\n    x24 = urcorner(x12)\n    x25 = shoot(x24, NEG_UNITY)\n    x26 = mapply(x12, x25)\n    x27 =26(x26)\n    x28 = llcorner(x25)\n    x29 = measures(x28, x52)\n    x30 = rbind(add, x28)\n    x31 = apply(x30, x29)\n    x32 = rbind(add, x287)\n    x33 = apply(x32, x31)\n    x34 = merge(x29)\n    x35 = cover(x21, x34)\n    x36 = fill(x35, x13, x32)\n    O = fill(x36, x11, x33)\n    return O"], [1.1, "def solve_58eece7d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(first, mostcolor)\n    x3 = fork(recolor, color, x2)\n    x4 = compose(paint, x3)\n    x5 =88bind(toobject, I)\n    x6 =85(x4)\n    x7 = size(x7)\n    x8 = >pply(colorfilter, x1, x7)\n    x9 = mfilter(x8, x5)\n    x10 = replace(I, ZERO, x3)\n    O = paint(x10, x9)\n    return O"], [1.1, "def solve_6a435e13(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =5111000\n    55555555555555555755555\n    55555555555555555555555\n    \"\"\"\n    x2 = frontiers(I)\n    x3 = merge(x2)\n    x4 = dmirror(x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(I, x5)\n    x7 = repeat(x6, ONE)\n    x8 = chain( refusal34, x4, last)\n    x9 = x8(x4)\n    x10 = lefthalf(x9)\n    x11 = righthalf(x9)\n    x12 = ofcolor(x11, ZERO)\n    x13 = ofcolor(x10, ZERO)\n    x14 = intersection(x12, x13)\n    x15 = toindices(x14)\n    x16 = difference(x15, x16)\n    x17 = fill(x10, THREE, x15)\n    x18 = fill(x17, THREE, x16)\n    x19 = ofcolor(x18, ZERO)\n    x20 = lbind(intersection, x15)\n    x21 = chain(size, x20, toindices)\n    x22 = argmax(x17, x21)\n    x23 = difference(x15, x22)\n    x24 = fill(x18, THREE, x19)\n    x25 = fill(x24, THREE, x23)\n    x26 = ofcolor(x25, ZERO)\n    x27 = first(x26)\n    x28 = invert(x27)\n    x29 = shift(x27, x28)\n    x30 = shift(x29, width)\n    x31 = double(x30)\n    x32 =807(x31)\n    x33 = toivec(x32)\n    x34 = shift(x27, x33)\n    x35 = shift(x34, xfOUR)\n    x36 = paint(x25, x21)\n    O = fill(x36, EIGHT, x33)\n    return O"], [1.1, "def solve_94ac4940(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = solve_62358119771177755c59775\n    57871557528955577578815\n    66801388a5555588888283\n    66581523855558558555855\n    67181535567855855588558\n    66571844258555558885585\n    64858334855558555855555\n    67855515567812586757588\n    8558555555678036455818\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [1.1, "def solve_ad2a80e3(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 =1266666666(size)\n    x4 =255(x3)\n    x5 = ONE(x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(argmax, identity)\n    x9 = compose(normalize, toindices)\n    x10 = cfilter(x5, x9)\n    x11 = fork(add, leftmost, width)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(x11, x12, leftmost)\n    x14 = fork( equality, toindices, x13)\n    x15 = lbind(sfilter, x10)\n    x16 = compose(merge, x15)\n    x17 = chain(x14, x freemost, x16)\n    x18 = lbind(apply, x17)\n    x19 = chain(invert, x18, ulcorner)\n    x20 = fork(add, identity, x19)\n    x21 = fork(insert, identity, x20)\n    x22 = compose(backdrop, x21)\n    x23 = mapply(x22, x4)\n    O = fill(I, x1, x23)\n    return O"], [1.1, "def solve_0d54c897(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 =255 colorfilter(x1, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x5, THREE)\n    return O"], [1.1, "def solve_dff64b15(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = rot270(I)\n    x2 = rot180(I)\n    x3 = rot270(x2)\n    x4 = initset(I)\n    x5 = lbind(manhattan, x4)\n    x6 = lbind(upscale, x1)\n    x7 = compose(x6, x5)\n    x8 = compose(initset, x7)\n    x9 = lbind(rapply, F222)\n    x10 = chain(first, x9, initset)\n    x11 = compose(x5, x10)\n    x22 = fork(combine, x7, x11)\n    x23 = compose(x12, x22)\n    x24 = multiply(EIGHT, THREE)\n    x25 = power(x23, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = x26(I)\n    x29 = decrement(x28)\n    x30 = lbind(astuple, x29)\n    x31 = apply(x30, x27)\n    x32 = mapply(x26, x31)\n    x33 = fill(x26, FOUR, x32)\n    x34 =NEG_ONE, LE goto)\n    x35 = asindices(x34)\n    x36 = toobject(x35, x I)\n    x37 = shift(x34, x36)\n    x38 = lbind(shift, x37)\n    x39 = mapply(x38, x34)\n    O = paint(x33, x39)\n    return O"], [1.1, "def solve_e0c005e8(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, frontiers)\n    x4 = fork( sfilter, toindices, x3)\n    x5 = compose(size, x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = rbind(subgrid, x8)\n    x10 = matcher(color, ONE)\n    x11 = compose(flip, x10)\n    x12 = rbind(ofcolor, ONE)\n    x13 = chain(x12, x11, first)\n    x14 = compose(x13, x1)\n    x15 =15(x8)\n    x16 = extract(x15, x14)\n    x17 = ulcorner(x16)\n    x18 = subgrid(x16, x8)\n    x19 = leftmost(x16)\n    x20 = increment(x19)\n    x21 = width(x18)\n    x22 = decrement(x21)\n    x23 = tojvec(x22)\n    x24 = frontiers(x18)\n    x25 = sfilter(x24, x23)\n    x26 = merge(x25)\n    x27 = x1(x26)\n    x28 = objects(x18, F, F, T)\n    x29 = rbind(toobject, x28)\n    x30 = chain(x29, asindices, x18)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x29)\n    x33 = paint(x8, x32)\n    x34 = replace(x33, ONE, paint)\n    x35 = cover(x34, x26)\n    x36 = ofcolor(x35, ONE)\n    x37 = subgrid(x36, x35)\n    O = trim(x37)\n    return O"], [1.1, "def solve_d4d711a4(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =\"\"\"\n    x2 = switch(I, NINE, FOUR)\n    x3 = lbind(e26, TWO)\n    x4 = rbind(compose, shape)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = fork(equality, Wrap collected, x7)\n    x9 = chain(flip, x8, trim)\n    x10 = extract(x1, x9)\n    x11 = remove(x10, x1)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = subgrid(x12, I)\n    x15 = subgrid(x13, I)\n    x16 = trim(x14)\n    x17 = trim(x15)\n    x18 = le Fgpartition(x16)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = output(x16, x20)\n    x22 = dmirror(x21)\n    x23 = papply(pair, x16, x22)\n    x24 = lbind(apply, maximum)\n    x25 = apply(x24, x23)\n    x26 = ofcolor(x24, ZERO)\n    x27 = difference(x25, x26)\n    x28 = asobject(x27)\n    x29 = lrcorner(x28)\n    x30 = subgrid(x29, x14)\n    O = trim(x30)\n    return O"], [1.1, "def solve_5f781b77(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = apply(toindices, x2)\n    x4 = fork(difference, box, corners)\n    x5 = extract(x3, x4)\n    x6 = lbind(adjacent, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = leastcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(hmatching, x8)\n    x13 =\n    x12(x10000)\n    x14 = matcher(x12, x13)\n    x15 = compose(flip, x14)\n    x16 = extract(x3, x15)\n    x17 = highly16(x16)\n    x18 =9417(x17, x9)\n    x19 = color(x8)\n    x20 =O = fill(x19, x8, x18)\n    x21 =recolor(x10, x8)\n    x22 = lrcorner(x8)\n    x23 = invert(x22)\n    x24 = shift(x15, x23)\n    x25 = occurrences(x74, x24)\n    x26 = last(x25)\n    x27 = remove(x26, x25)\n    x28 =259(x26)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = fill(x10, x9, x30)\n    return O"], [1.1, "def solve_dc283afd(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = merge(I)\n    x2 = lbind(THmin, x1)\n    x3 = lbind(fork, operations)\n    x4 = lbind(x3, x2)\n    x5 = lbind(lbind, astuple)\n    x6 = rbind(x4, x5)\n    x7 = compose(x6, leftmost)\n    x8 = compose(x6, rbind)\n    x9 = fork(compose, x7, x8)\n    x10 = lbind(remove, x1)\n    x11 = compose(x10, x9)\n    x12 = rbind(remove, x8)\n    x13 = compose(x12, x11)\n    x14 = compose(cmirror, x13)\n    x15 = flip(x10)\n    x16 = flip(x14)\n    x17 = branch(x15, x13, x16)\n    x18 = branch(x15, lbind,rbind)\n    x19 =218b5cmirror(I)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = compose(hmirror, asobject)\n    x23 = fork(compose, first, last)\n    x24 = chain(mirror, x22, x23)\n    x25 = x24(x5)\n    x26 = x24(x6)\n    x27 = fork(multiply, height, width)\n    x28 = fork(equality, x26, x27)\n    x29 = last(x28)\n    x30 = positive(x29)\n    x31 = branch(x30, x27, x30)\n    x32 = x31(x5)\n    x33 = first(x32)\n    x34 = shift(x33, UNITY)\n    x35 = paint(x13, x34)\n    x36 = x47(x35)\n    x37 =remove(x36, x02)\n    x38 =437(x37)\n    x39 =hole(x38)\n    O =first(x39)\n    return O"], [1.1, "def solve_cb2cdd9c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(mapply, dneighbors)\n    x8 = last(x6)\n    x9 = rbind(shoot, x8)\n    x10 =546(astuple, x8)\n    x11 = chain(x9, x10, initset)\n    x12 = lbind(argmin, x7)\n    x13 = chain(first, x12, x11)\n    x14 = fork(s230, toindices, x13)\n    x15 = fork(shift, x4, x14)\n    x16 = mapply(x15, x6)\n    O = fill(I, FOUR, x16)\n    return O"], [1.1, "def solve_b1f64345(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 =6277566(x9)\n    x11 = branch(x7,423a50,chers36)\n    x12 =8888(extract, x11)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = x13(x6)\n    x16 = x13(x14)\n    x17 = center(x6)\n    x18 = x16(x14)\n    x19 = center(x6)\n    x20 = subtract(x18, x19)\n    x21 = mostcolor(x6)\n    x22 = color(x3)\n    x23 = center(x5)\n    x24 = invert(x23)\n    x25 = shift(x5, x24)\n    x26 = double(x20)\n    x27 = shift(x25, x26)\n    x28 = invert(x22)\n    x29 = shift(x25, x28)\n    x30 = repeat(x29, ONE)\n    x31 = invert(x22)\n    x32 = shift(x20, x31)\n    x33 =0000000(x29)\n    x34 = rbind(occurrences, x33)\n    x35 =244(x35, x12)\n    x36 =583afilter(x35, x34)\n    x37 = normalize(x36)\n    x38 = shift(x37, UNITY)\n    O = paint(I, x38)\n    return O"], [1.1, "def solve_3c3cbec5(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =1381855 normalize(x2)\n    x4 = width(I)\n    x5 = increment(x4)\n    x6 = tojvec(x5)\n    x7 = increment(x6)\n    x8 = tojvec(NEG_ONE)\n    x9 = decrement(x8)\n    x10 = toivec(x9)\n    x11 = increment(x10)\n    x12 = tojvec(x11)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = decrement(x14)\n    x16 = tojvec(x15)\n    x17 = shape(x3)\n    x18 = canvas(ZERO, x17)\n    x19 = fill(x18, THREE, x3)\n    x20 = fill(x19, TWO, x4)\n    x21 = first(x20)\n    x22 = lbind(shift, x3)\n    x23 =022(x22, TWO)\n    x24 = branch(x21, x23, x19)\n    ZERO = paint(x40, x24)\n    O = x21(x19)\n    return O"], [1.1, "def solve_53462f7d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind23376537666293731\n    x8 = rbind(chain, initset)\n    x9 = lbind(first, I)\n    x10 = lbind(last, I)\n    x11 = lbind(ofcolor, I)\n    x12 = compose(x9, x11)\n    x13 = compose(x8, x12)\n    x14 = pair(x6, x13)\n    x15 = branch(x14, x13, x3)\n    x16 = apply(x15, x14)\n    x17 = ofcolor(x16, x4)\n    x18 = ulcorner(x7)\n    x19 = llcorner(x7)\n    x20 = shoot(x18, UNITY)\n    x21 = shoot(x19, NEG_UNITY)\n    x22 = branch(x20, lrcorner, x7)\n    x23 = shoot(x22, UP_RIGHT)\n    x24 = shoot(x13, DOWN_LEFT)\n    x25 = compose(x18, ulcorner)\n    x26 =\n    x27 = shoot(x25, LEFT)\n    x28 = shoot(x14, UP_RIGHT)\n    x29 = combine(x27, x28)\n    x30 = rbind(shoot,x29)\n    x31 = mapply(x30, x24)\n    x32 = combine(x31, x01)\n    x33 = fill(I, x4, x32)\n    x34 = identity(x33)\n    x35 = ofcolor(x34, x4)\n    x36 = mapply(x35, x31)\n    O = fill(x36, x4, x36)\n    return O"], [1.1, "def solve_62ac0dc3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = multiply(TEN, FIVE)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, FIVE, ONE)\n    x8 = rbind( tickscommon, ORIGIN)\n    x9 = chain(first, x8, repeat)\n    x10 = rbind(toobject, I)\n    x11 = chain(first, x10, toindices)\n    x12 = lbind(shift, x1)\n    x13 = height(I)\n    x14 = rbind(x12, x13)\n    x15 = lbind(multiply, x14)\n    x16 = compose(x15, x11)\n    x17 = compose(x12, x11)\n    x18 = fork(combine, x16, x17)\n    x19 = compose(x10, x18)\n    x20 = lbind(apply, backdrop)\n    x21 = compose(x20, x11)\n    x22 = fork(compose, x19, x21)\n    x23 = lbind(lbind, combine)\n    x24 = objects(I, T, F, T)\n    x25 = rbind(\u4e0d 92,gingem)\n    x26 = valmax(x24, x25)\n    x27 = compose(x68, x22)\n    x28 = totuple(x26)\n    x29 = apply(x27, x28)\n    x30 = mostcommon(x29)\n    x31 = color(x30)\n    x32 = toivec(NEG_ONE)\n    x33 = shift(x39, x32)\n    O = paint(x6, x33)\n    return O"], [1.1, "def solve_3df6631f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =2009efilter(I,identity)\n    x2 = product(x1, x1)\n    x3 = fork(multiply, first, last)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(I)\n    x6 = rbind(hmatching, x4)\n    x76694766642244447(I)\n    x8 = fgpartition(x7)\n    x9 = merge(x8)\n    x10 = palette(x7)\n    x11 = other(x10, x6)\n    x12 = objects(x7, T, F, T)\n    x13 = rbind(colorcount, x6)\n    x14 = argmax(x12, x13)\n    x15 = rbind(colorcount, x6)\n    x16 = normalize(x15)\n    x17 = lbind(toindices, x16)\n    x18 = compose(normalize, x17)\n    x19 = lbind(rbind, multiply)\n    x20 = apply(x18, x100)\n    x21 = EIGHT(x20)\n    x22 = lbind(shift, x17)\n    x23 = height(x9)\n    x24 = decrement(x23)\n    x25 = objects(x7, T, F, T)\n    x26 = colorfilter(x25, x6)\n    x27 = mapply(x22, x26)\n    O = paint(x7, x27)\n    return O"], [1.1, "def solve_bce3a099(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x4)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = x18(x4)\n    x24 = subtract(x22, x23)\n    x25 = crop(x6, x19, x27)\n    x26 = subtract(x24, x25)\n    x27 = replace(x6, x25, ZERO)\n    x28 =replace(x8, x26, x27)\n    x29 =80718(x28)\n    x30 = maximum(x29)\n    x31 = dmirror(x30)\n    x32 =09629e(x31)\n    x33 = rot90(x32)\n    x34, hmirror(x33)\n    x35 = branch(x345, x31, x34)\n    x36 = branch(x344, x110, x35)\n    x37 = fill(x36, ONE, x34)\n    O = x18(x37)\n    return O"], [1.1, "def solve_a9252d44(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(recolor, x1)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = rbind(paint, I)\n    x8 = compose(x7, x6)\n    x9 =44(x3)\n    x10 = rbind(ofcolor, x1)\n    x11 = rbind(rapply, x10)\n    x12 = compose(x11, initset)\n    x13 = chain(first, merge, x12)\n    x14 = vsplit(x3, TWO)\n    x15 = rbind(gravitate, x14)\n    x16 = lbind(recolor, x1)\n    x17 = compose(x16, x15)\n    x18 = fork(paint, identity, x17)\n    x19 = astuple(x9, x8)\n    x20 = astuple(x16, x9)\n    x21 = astuple(x18, x20)\n    x22 = first(x21)\n    x23 = first(x22)\n    x24 = rapply(x23, x1)\n    x25 = ulcorner(x27)\n    x26 = lbind(shift, x24)\n    x27 = shift(x25, x26)\n    x28 = apply(x26, x27)\n    x29 = mapply(x28, x24)\n    O = paint(x23, x29)\n    return O"], [1.1, "def solve_eb164935(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =609(I, NEG_TWO)\n    x2 = palette(I)\n    x3 = sfilter(x2, x1)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = twO(I)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, first)\n    x9 = sfilter(x6, x8)\n    x10 = merge(x9)\n    x11 = rot90(x10)\n    x12 = solve(x11, I)\n    x13 =ronbind(greater, ONE)\n    x14 =889(x13)\n    x15 = sfilter(x12, x14)\n    x16 = vmirror(x15)\n    x17 = hmirror(x16)\n    x18 = astuple(x11, x17)\n    x19 = sfilter(x15, x18)\n    x20 = vmirror(x19)\n    x21 = dmirror(x20)\n    x22 = hmirror(x21)\n    x23 = vmirror(x22)\n    x24 = cellwise(x15, x21, x37)\n    x25 = pair(x19, x24)\n    x26 = fork(combine, first, last)\n    x27 = apply(x26, x25)\n    x28 = astuple(x52, xmirror)\n    x29 = astuple(x27, x26)\n    x30 = combine(x28, x29)\n    O = undercommon(x30)\n    return O"], [1.1, "def solve_00fe1878(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 =6292996835\n    x5 = delta(x3)\n    x6 = last(x5)\n    x7 =833(first, x6)\n    x8 =9266(d51161);\n    x9 = compose(lowermost, merge)\n    x10 = lbind(argmin, x9)\n    x11 = compose(x10, x8)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, initset)\n    x14 = fork(compose, x11, x13)\n    x15 = lbind(remove, x3)\n    x16 = compose(x15, x14)\n    x17 = fork(recolor, x16, color)\n    x18 = mapply(x17, x5)\n    O = paint(I, x18)\n    return O"], [1.1, "def solve_973d3982(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = Fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = electrical61512(I)\n    x5 = shift(x4, UNITY)\n    x6 = recolor(x3, x5)\n    x7 =275(x5)\n    x8 = recolor(x7, x7)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = fill(I, x3, x10)\n    return O"], [1.1, "def solve_fcdd4d59(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(min, x10, x8)\n    x12 =616(I, TWO)\n    x13 = rbind(apply, x12)\n    x14 = lbind(rbind,RORIN)\n    x15 = compose(x14, x8)\n    x16 = chain(x13, x15, x11)\n    x17 = fork(toindices, x11, x16)\n    x18 = fork(matcher, x17, x6)\n    x19 = mfilter(x1, x18)\n    x20 = mapply(x11, x19)\n    O = fill(I, ZERO, x20)\n    return O"], [1.1, "def solve_1e6e75c9(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = product(x5, x5)\n    x7 = last(x6)\n    x8 = fgpartition(I)\n    x9 = color(x7)\n    x10 = backdrop(x3)\n    x11 = cover(I, x10)\n    x12 =89360469834(119833)\n    x13 = power(outbox, TWO)\n    x14 = x12(x13)\n    x15 = inbox(x14)\n    x16 = shift(x15, UNITY)\n    x17 = mapply(outbox, x16)\n    x18 = lowermost(x17)\n    x19 = lowermost(x18)\n    x20 = uppermost(x17)\n    x21 = uppermost(x18)\n    x22 = astuple(x1966, x1900)\n    x23 =t900062001(x22)\n    x24 = x3(x23)\n    x25 = palette(x647)\n    x26 = remove(x9, x25)\n    x27 = other(x26, x623)\n    x28 = rbind(colorcount, x27)\n    x29 =570288(x18)\n    x30 = ofcolor(x11, x29)\n    x31 = ofcolor(x11, x25)\n    x32 = first(x31)\n    x33 = ulcorner(x20)\n    x34 = urcorner(x20)\n    x35 = shoot(x33, UP_RIGHT)\n    x36 = shoot(x34, DOWN_LEFT)\n    x37 = fill(x11, x27, x35)\n    O = fill(x37, x30, x36)\n    return O"], [1.1, "def solve_7096fde7(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, ulcorner)\n    x9 = lbind(lbind, contained)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = x18(x18)\n    x20 = trim(I)\n    x21 =GC marking(x20)\n    x22 = vmirror(x21)\n    x23 = asindices(I)\n    x24 = annot Format(x23, x22)\n    x25 = objects(x22, T, F, F)\n    x26 = colorfilter(x25, x4)\n    x27 = compose(toindices, x22)\n    x28 = fork(mapply, x27, x27)\n    x29 = mapply(x28, x26)\n    x30 = fill(I, x4, x29)\n    x31 =O = replace(x30, x4, x5)\n    O = fill(x31, x4, x29)\n    return O"], [1.1, "def solve_e89b278a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = double, halve)\n    x2 = papply(equality, x1, x4)\n    x3 = compose(flip, x2)\n    x4 = asindices(I)\n    x5 =745(I)\n    x6 =ract(x5, x3)\n    x7 = intersection(x4, x6)\n    x8 =valmax(x7, x3)\n    x9 = fgpartition(I)\n    x10 = palette(I)\n    x11 =901(first, x10)\n    x12 = equality(x8, x11)\n    x13 = rightmost(x12)\n    x14 = leftmost(x12)\n    x15 = color(x13)\n    x16 = ofcolor(I, x15)\n    x17 = ofcolor(I, x14)\n    x18 = intersection(x16, x17)\n    x19 = canvas(x15, THREE_BY_THREE)\n    O = fill(x19, THREE, x18)\n    return O"], [1.1, "def solve_b14a0941(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x34 = replace(I, x1, x2)\n    x35 =444823066663466876687666\n    x36 = argmax(x3, x35)\n    x37 =34666476683136(x36)\n    x38 =77(x37)\n    x39 = compressurcorner(x38)\n    x40 =792fill(x34, x36)\n    x41 =4444(x40)\n    x42 = vmirror(x31)\n    x43 =1977(x39, x42)\n    x44 =88776969346667193129166\n    76964696334563336336316\n    49666596666666638166714\n    O = fill(x40, x1, x49)\n    return O"], [1.1, "def solve_d617694e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(ff805, x5)\n    x7 = index(I, x3)\n    x8 = width(I)\n    x9 = subtract(x8, x3)\n    x10 = astuple(x9, x8)\n    x11 = canvas(x4, x10)\n    x12 = lefthalf(x11)\n    x13 = tophalf(x12)\n    x14 = coverfOUR(x13)\n    x15 = shift(x12, x14)\n    x16 = paint(I, x15)\n    x17 = height(x12)\n    x18 = width(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = interval(ZERO, x20, ONE)\n    x23 = pair(x21, x22)\n    x24 = rbind(contained, x23)\n    x25 = compose(x24, last)\n    x26 = sfilter(x23, x25)\n    x27 =66(x26)\n    x28 =969(ZERO)\n    x29 = paint(x16, x28)\n    O = downscale(x29, x18)\n    return O"], [1.1, "def solve_0ae25cd2(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =343344(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [1.1, "def solve_02649110(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =object(I, T)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = lbind(contained, ONE)\n    x8 = chain(flip, x7, sfilter)\n    x9 = sfilter(x6, x8)\n    x10 = fork(equality, toindices, box)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = sfilter(x9, x12)\n    x14 =argmax(x13, x12)\n    x15 = difference(x1, x14)\n    x16 = apply(initset, x15)\n    x17 =881(x16)\n    x18 = size(x1)\n    x19 = double(x18)\n    x20 = interval(ZERO, x19, ONE)\n    x21 = apply(tojvec, x20)\n    x22 = astuple(ONE, NINE)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = center(x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    x28 = paint(x23, x27)\n    x29 = double(x18)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = apply(tojvec, x30)\n    x32 = mpapply(shift, x25, x31)\n    x33 = fill(x28, FIVE, x32)\n    x34 = ofcolor(x33, FIVE)\n    x35 = mapply(x26, x34)\n    O = fill(x33, EIGHT, x35)\n    return O"], [1.1, "def solve_fc57335a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = fork(multiply, height, width)\n    x4 = lbind(greater, THREE)\n    x5 = compose(x4, x3)\n    x6 =89vert NEG_TWO)\n    x7 = fork(add, height, x6)\n    x8 = compose(decrement, x7)\n    x9 = lbind(multiply, E349)\n    x10 = compose(x9, x5)\n    x11 = fork(subtract, x8, x10)\n    x12 = fork(0000, x11, x5)\n    x13 = rbind(contained, x2)\n    x14 = compose(x13, x12)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind(99999999,\n    99999999999999999\n    x16(9999999998)\n    x17 = compose(toindices, x12)\n    x18 = fork(6f19 sfilter, x17, x12)\n    x19 = lbind(argmin, x5)\n    x20 = compose(x19, x14)\n    x21 = compose(x19, x12)\n    x22 = fork(combine, x20, x21)\n    x23 = fork(recolor, x12, x22)\n    x24 = mapply(x23, x3)\n    O = paint(I, x24)\n    return O"], [1.1, "def solve_9cda82d4(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x2, x3)\n    x5 = fork(equality, x4, ZERO)\n    x6 = sfilter(x1, x5)\n    x7 = compose(size, delta)\n    x8 = argmin(x6, x7)\n    x9 =262b6ly(x8)\n    x10 = intersection(x6, x8)\n    x11 = fill(I, TWO, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = apply(size, x12)\n    x14 = normalize(x13)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x12)\n    O = paint(x11, x16)\n    return O"], [1.1, "def solve_bf004e66(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = dmirror(I)\n    x2 = ofcolor(I, FOUR)\n    x3 = compose(even, last)\n    x4 = sfilter(x2, x3)\n    x5 = fill(x1, ZERO, x4)\n    x6 = ofcolor(x5, FOUR)\n    x7 = rapply(x6, x2)\n    O = x9df first(x7)\n    return O"], [1.1, "def solve_90f8c9b0(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(colorcount, x10)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(x10, x14)\n    x16 = difference(x1, x15)\n    x17 = rbind(return O"], [1.1, "def solve_ba687387(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = trim(I)\n    x2 = maximum(x1)\n    x3 =677(x2, tophalf)\n    x4 = lefthalf(x3)\n    x5 = righthalf(x3)\n    x6 = order(x4, uppermost)\n    x7 =122(x5, x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = multiply(xNEG_TWO, TEN)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = compose( inspired, first)\n    x13 = rbind(add, THREE)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = product(x11, x14)\n    x16 = compose(first, last)\n    x17 = apply(x16, x15)\n    x18 = prapply(recolor, x17, x12)\n    x19 = mapply(x13, x18)\n    x20 = merge(x15)\n    x21 = cover(I, x20)\n    x22 = paint(x21, x19)\n    O =163uple(x22)\n    return O"], [1.1, "def solve_b14c3d57(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = difference(x1, x2)\n    x6 = merge(x5)\n    x7 =211(x6)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x3)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = AG components(x23, x18)\n    x25 = difference(x24, x15)\n    x26 = ulcorner(x15)\n    x27 = invert(x26)\n    x28 = shift(x25, x27)\n    x29 = shift(x28, UNITY)\n    x30 =161111(x23)\n    x31 = asobject(x30)\n    a32 =273(x31)\n    x33 = vmirror(x32)\n    x34 = shift(x28, UNITY)\n    x35 = shift(x33, DOWN)\n    x36 =676(x35)\n    x37 = underfill(x13, x56, x36)\n    x38 = x12(x37)\n    x39 = replace(x38, x44, NEG_ONE)\n    x40 = paint(x39, x33)\n    O = x12(x40)\n    return O"], [1.1, "def solve_0a6733bd(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = asindices(I)\n    x4 = ofcolor(I, x2)\n    x5 = difference(x3, x4)\n    x6 = mapply(toindices, x1)\n    x7 = difference(x5, x6)\n    x8 = toobject(x7, I)\n    x9 = apply(initset, x8)\n    x10 = toindices(x4)\n    x11 = sizefilter(x10, ONE)\n    x12 = toindices(x4)\n    x13 = sizefilter(x12, FOUR)\n    x14 = combine(x11, x13)\n    x15 = difference(x9, x14)\n    x16 = lbind(contained, x14)\n    x17 = compose(x16, last)\n    x18 = sfilter(x15, x17)\n    x19 = compose(invert, x17)\n    x20 = tojvec(NEG_TWO)\n    x21 = apply(x19, x20)\n    x22 =0(x21)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x3)\n    O = paint(I, x24)\n    return O"], [1.1, "def solve_f160e9ce(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = increment(?),ight)\n    x8 = shoot(x7, UNITY)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x3)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = lbind(shift, x12)\n    x14 = height(x6)\n    x15 = decrement(x14)\n    x16 = lbind(multiply, x15)\n    x17 = power(x16, x11)\n    x18 = bottomhalf(x6)\n    x19 = vsplit(x18, TWO)\n    x20 = apply(x19, x19)\n    x21 = astuple(x17, x20)\n    x22 = lbind(shift, x4)\n    x23 = mapply(x22, x21)\n    x24 = combine(x21, x23)\n    x25 = cover(x24, x objects)\n    x26 = mapply(x11, x25)\n    x27 = asobject(x26)\n    x28 = paint(x15, x27)\n    O = subgrid(x28, x28)\n    return O"], [1.1, "def solve_f2168c8e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = other(x6, x8)\n    x11 = Ofc4614578(I)\n    x12 =34(x11)\n    x13 = ofcolor(x12, x81)\n    x14 = initsetet(x8)\n    x15 = insert(x14, x13)\n    x16 = product(x15, x15)\n    x17 = power(first, FOUR)\n    x18 = first(x16)\n    x19 = increment(x18)\n    x20 = interval(ZERO, x19, ONE)\n    x21 = apply(tojvec, x20)\n    x22 = lbind(shift, x3)\n    x23 = mapply(x22, x21)\n    O = fill(I, x4, x23)\n    return O"], [1.1, "def solve_b4cfe37e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =99999999999999999999\n    29200000000000000000029\n    2280000081666666666811\n    20000000816666666668113\n    2000000812666666668113\n    20000007216666666662111\n    020000718166666666611202\n    20000000000000000001412\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    00000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, medium)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = compress(x7)\n    x15 = extract(x14, x13)\n    x16 = ofcolor(x7, x4)\n    x17 = ofcolor(x7, x6)\n    x18 = combine(x16, x17)\n    x19 = mapply(x18, x16)\n    x20 = fill(x7, x4, x19)\n    O = toobject(x20, x7)\n    return O"], [1.1, "def solve_2e4563c2(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = replace(I, x1, ZERO)\n    x5 = contained(ONE, x3)\n    x6 = discussed(x5, x4)\n    x7 = contained(TWO, x6)\n    x8 =522259(x7)\n    x9 =951(x8, x1)\n    x10 = combine(x6, x9)\n    x11 = color(x10)\n    x12 = leftmost(x11)\n    x13 = interval(ZERO, x12, TWO)\n    x14 = fill(I, apply, x13)\n    x15 = lbind(shift, x11)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x4)\n    x18 = compose(x16, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = height(x11)\n    x21 = lbind(mapply, x9)\n    x22 = compose(x20, x21)\n    x23 = lbind(lbind, greater)\n    x24 = rbind(compose, x29)\n    x25 = chain(x23, x24, x11)\n    x26 = lbind(lbind, greater)\n    x27 = subtract(x22, x26)\n    x28 =acuple(x27, x)\n    x29 = sfilter(x28, x25)\n    x30 = mapply(x19, x29)\n    O = paint(x14, x30)\n    return O"], [1.1, "def solve_1f5f8d3d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = matcher(x7, x8)\n    x10 = sfilter(x6, x9)\n    x11 = difference(x6, x10)\n    x12 = compose(dmirror, merge)\n    x13 = mapply(x12, x11)\n    x14 = paint(I, x13)\n    x15 = compress(x14)\n    x16 = width(x15)\n    x17 = subtract(x16, THREE)\n    x18 = tojvec(x17)\n    x19 = height(x15)\n    x20 = decrement(x19)\n    x21 = add(x20, THREE)\n    x22 = toiveacZEROx2100x18)\n    x23 = branch(x17, x22, x20)\n    x24 = fill(x15, x4, x23)\n    x25 = ofcolor(x24, x4)\n    x26 = lbind(vmatching, x13)\n    x27 = fork(either, x26, x25)\n    x28 = sfilter(x25, x27)\n    O = fill(x24, x4, x28)\n    return O"], [1.1, "def solve_c3c1c7f9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = dmirror(I)\n    x3 = invert(NINE)\n    x4 = papply(pair, I, x2)\n    x5 = lbind(apply, maximum)\n    x6 = lbind(sfilter, x4)\n    x7 = lbind(matcher, first)\n    x8 = chain(x5, x6, x7)\n    x9 = vmirror(x2)\n    x10 = hconcat(x9, x202)\n    x11 = hmirror(x2)\n    x12 = vmirror(x2)\n    x13 =0816(x11, x18)\n    x14 =1806600(x13)\n    x15 = chain(x50, x12, x14)\n    x16 =535550050(x5)\n    x17 = extract(x16, x15)\n    x18 = subgrid(x17, I)\n    O = hmirror(x18)\n    return O"], [1.1, "def solve_c6a06a61(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x3)\n    x5 = prapply(connect, x2, x4)\n    x6 = mfilter(x5, vline)\n    x7 = underfill(I, x3, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(connect, ulcorner, llcorner)\n    x10 = fork(combine, hfrontier, x9)\n    x11 = mapply(x10, x8)\n    x12 = fill(x7, x1, x11)\n    O = fill(x12, fill:\n     intersection(x2, x4)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_b48f9dc0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_f92022e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = lbind(contained, TWO)\n    x4 = compose(neighbors, center)\n    x5 = fork(both, x3, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(initset, center)\n    x8 = fork(insert, center, x7)\n    x9 = fork(insert, outbox, x8)\n    x10 = compose(backdrop, x9)\n    x11 = mapply(x10, x6)\n    O = fill(I, FOUR, x11)\n    return O"], [0.08173484697705038, "def solve_8de01e3b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_32bbe65d(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, outbox)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.08173484697705038, "def solve_4ea8ff18(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_e4c2bf70(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = box(x2)\n    x4 = fill(I, TWO, x3)\n    x5 = subgrid(x2, x4)\n    x6 = ofcolor(x5, ONE)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, TWO, x12)\n    x14 = ofcolor(x13, TWO)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, TWO, x16)\n    return O"], [0.08173484697705038, "def solve_667dbaf5(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_cdcd8b81(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_ea48d1e7(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_730ea551(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, SEVEN, x6)\n    return O"], [0.08173484697705038, "def solve_ab0e4946(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_0365f7ec(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_cc75ac70(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_0abd1e9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_7a8b88b5(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_1bbb07a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_2c62a4df(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.08173484697705038, "def solve_1b0afc80(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.08173484697705038, "def solve_c744e485(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_694fe35b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_0237389d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_e315f9c0(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.08173484697705038, "def solve_f4643afd(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.08173484697705038, "def solve_465d7baa(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, SEVEN, x5)\n    return O"], [0.08173484697705038, "def solve_aa695c24(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, size)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmin(x4, size)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.09095096982684804, "def solve_8e7e81f5(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = rot90(x1)\n    x3 = rot270(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O"], [0.09783902354715554, "def solve_708d70ea(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(recolor, color, backdrop)\n    x3 = mapply(x2, x1)\n    O = paint(I, x3)\n    return O"], [0.10291059645475006, "def solve_0254953d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [0.10596514843359055, "def solve_eb223ca8(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    x3 = argmax(x1, size)\n    x4 = vmatching(x2, x3)\n    x5 = branch(x4, DOWN, RIGHT)\n    x6 = branch(x4, uppermost, leftmost)\n    x7 = valmax(x1, x6)\n    x8 = x6(x2)\n    x9 = equality(x7, x8)\n    x10 = branch(x9, NEG_ONE, ONE)\n    x11 = multiply(x5, x10)\n    x12 = inbox(x2)\n    x13 = rbind(shoot, x11)\n    x14 = mapply(x13, x12)\n    x15 = underfill(I, EIGHT, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, EIGHT)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [0.11634314213316777, "def solve_6f42998a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.12649655474366106, "def solve_18739551(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = ofcolor(I, EIGHT)\n    x4 = center(x3)\n    x5 = merge(x2)\n    x6 = center(x5)\n    x7 = subtract(x6, x4)\n    x8 = shoot(x4, x7)\n    O = underfill(I, x3, x8)\n    return O"], [0.12814991617905258, "def solve_074acc33(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12993277496796057, "def solve_9288f975(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_ad0b9a52(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.13468134728045977, "def solve_37789d08(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.13468134728045977, "def solve_7f183d7e(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13563818630726523, "def solve_06568da9(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, TWO)\n    x5 = branch(x3, TWO_BY_ZERO, ORIGIN)\n    x6 = branch(x4, TWO_BY_TWO, ZERO_BY_TWO)\n    x7 = connect(x5, x6)\n    O = underfill(I, FIVE, x7)\n    return O"], [0.13757267766397355, "def solve_e84eff55(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.14012102340220775, "def solve_796d50dd(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 =dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14633502634498852, "def solve_9fc63a70(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.147039853263387, "def solve_bb693969(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.15201967101125663, "def solve_6be4edf3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15329845560571315, "def solve_b9da9156(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [0.1666949415715136, "def solve_ef9d67d5(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.167039853263387, "def solve_fbaf441f(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.19986952115995066, "def solve_a36bffc0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.20156221215901915, "def solve_c837207b(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x7(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.20252763457609518, "def solve_340263e6(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind(ofcolor, I)\n    x5 = lbind(prapply, connect)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, identity, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [0.20977289344345568, "def solve_2f35d0e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.20977289344345568, "def solve_be382167(I):\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.23823994288959274, "def solve_d45a9d95(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_b9237165(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.2384010333421186, "def solve_b0031abf(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.23915094341200335, "def solve_02d07796(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.253858380731812, "def solve_82e3dc4c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.257902686201481, "def solve_dca4a2d0(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(vfrontier, x2)\n    x4 = fill(I, TWO, x3)\n    x5 = colorfilter(x1, TWO)\n    x6 = difference(x1, x5)\n    x7 = compose(hfrontier, centerofmass)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [0.26915094341200335, "def solve_aa5aa0bc(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I,7777, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_651a2c71(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.2735505434325868, "def solve_d23b4f19(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2735505434325868, "def solve_d23fb9e9(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2912996173225872, "def solve_489fe118(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x5 = size(x2)\n    x6 = positive(x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = fgpartition(x9)\n    x12 = merge(x11)\n    O = paint(x9, x12)\n    return O"], [0.2928824046422477, "def solve_21d7f5b5(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.31373011118259564, "def solve_eb38431c(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, SIX, x4)\n    return O"], [0.31414873887079675, "def solve_866c1385(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.31695206765709394, "def solve_3681965a(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(ineighbors, last, first)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = vconcat(x7, x7)\n    O = vconcat(x7, x8)\n    return O"], [0.32305284631073067, "def solve_4d3b1694(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.44421029663584294, "def solve_11824f8d(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.49128802196072596, "def solve_52e0e923(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.5311442307692307, "def solve_b77a74fe(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.5378108974358975, "def solve_d741433c(I):\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.5430215763602573, "def solve_b1332544(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7448327479130308, "def solve_216bcad4(I):\n    x1 = replace(I, EIGHT, TWO)\n    x2 = objects(x1, T, T, T)\n    x3 = colorfilter(x2, TWO)\n    x4 = fork(manhattan, first, last)\n    x5 = lbind(greater, EIGHT)\n    x6 = compose(x5, x4)\n    x7 = product(x3, x3)\n    x8 = sfilter(x7, x6)\n    x9 = apply(merge, x8)\n    x10 = mapply(delta, x9)\n    x11 = fill(x1, ONE, x10)\n    x12 = merge(x3)\n    x13 = paint(x11, x12)\n    O = downscale(x13, THREE)\n    return O"], [0.7815794829293188, "def solve_3dadae7f(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [0.7825046979697893, "def solve_81a40e9b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind( colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7915392052312495, "def solve_e85ebeab(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.9182807290875006, "def solve_5644c5b7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.9182807290875006, "def solve_7313810f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.9182807290875006, "def solve_1df49baf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_62b3f053(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.9182807290875006, "def solve_249d6ace(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.9183491285403049, "def solve_a7b66ab7(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_77f4e111(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_db404f7f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_1d0345c9(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_c55e03a6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_b11b84f0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.95, "def solve_d1763c43(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = ofcolor(I, x2)\n    x4 = asobject(I)\n    x5 = ulcorner(x4)\n    x6 = urcorner(x4)\n    x7 = index(I, x5)\n    x8 = leftmost(x3)\n    x9 = add(x8, x7)\n    x10 = multiply(x9, x7)\n    x11 = add(x5, x10)\n    x12 = flip(x11)\n    x13 = both(x9, x12)\n    x14 = branch(x13, x6, x5)\n    O = canvas(x2, UNITY)\n    return O"], [1.0, "def solve_7bc341de(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(size, x1)\n    x3 = colorfilter(x1, TWO)\n    x4 = apply(max, x3)\n    x5 = lbind(colorfilter, x4)\n    x6 = chain(sfilter, x5, palette)\n    x7 = compose(maximum, x6)\n    x8 = apply(x7, x3)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = apply(initset, x10)\n    x12 = ofcolor(I, x9)\n    x13 = rbind(argmin, UNITY)\n    x14 = rbind(adjacent, DOWN)\n    x15 = compose(x14, first)\n    x16 = chain(x13, x15, last)\n    x17 = rbind(sfilter, x16)\n    x18 = rbind(gravitate, x306)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x9)\n    O = fill(I, x9, x22)\n    return O"], [1.0, "def solve_a4e3b84e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(color, TWO)\n    x4 = compose(recolor, x3)\n    x5 = mapply(x4, x2)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_13ff1b70(I):\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = rbind(greater, THREE)\n    x8 = rbind(toobject, I)\n    x9 = rbind(colorcount, x6)\n    x10 = chain(x8, ineighbors, last)\n    x11 = chain(x7, x9, x10)\n    x12 = sfilter(x5, x11)\n    x13 = outbox(x12)\n    x14 = backdrop(x13)\n    x15 = cover(I, x5)\n    x16 = gravitate(x14, x4)\n    x17 = shift(x14, x16)\n    O = fill(x15, x6, x17)\n    return O"], [1.0, "def solve_388cd4de(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply( compleine, x28)\n    x30 = prapply(x229, x26)\n    x31 = apply(x30, x29)\n    x32 = papply(recolor, x31, x30)\n    x33 = mapply(x32, x28)\n    x34 = x13(x33)\n    x35 = cover(x10, x34)\n    x36 = paint(x35, x33)\n    O = x13(x36)\n    return O"], [1.0, "def solve_4552caef(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_d641b892(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = shape(I)\n    x4 = multiply(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = ofcolor(I, x2)\n    x7 = lbind(shift, x6)\n    x8 = shape(I)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x6)\n    x11 = mapply(x7, x10)\n    O = fill(x5, x2, x11)\n    return O"], [1.0, "def solve_8bccb792(I):\n    x1 = fgpartition(I)\n    x2 = compose(be94bordering, inbox)\n    x3 = mfilter(x1, x2)\n    x4 = fill(I, F8, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = fork(manhattan, first, last)\n    x7 = compose(halve, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_e44f0e0e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x7)\n    x13 = mapply(x11, x12)\n    x14 = cover(I, x13)\n    O = paint(x14, x3)\n    return O"], [1.0, "def solve_0e4d1c87(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, NEG_UNITY)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = initset(x2)\n    x6 = lbind(position, x6)\n    x7 = fork(combine, x4, x5)\n    x8 = fork(equality, identity, x7)\n    x9 = mfilter(x3, x8)\n    O = fill(I, ONE, x9)\n    return O"], [1.0, "def solve_267b11ea(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = fill(x4, TWO, x3)\n    return O"], [1.0, "def solve_56de83e9(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = cover(I, x2)\n    x4 = fork(multiply, height, width)\n    x5 = mapply(x4, x2)\n    x6 = gauge(x5)\n    x7 = hconcat(x3, x6)\n    x8 = replace(x7, EIGHT, ONE)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(x8, x9)\n    x11 = gravitate(x10, x8)\n    x12 = replace(x8, x9, x9)\n    x13 = mapply(x12, x11)\n    x14 = ulcorner(x11)\n    x15 = llcorner(x11)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = shoot(x15, UNITY)\n    x18 = fill(x13, x9, x17)\n    O = fill(x18, x9, x6)\n    return O"], [1.0, "def solve_097c286b(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(half, x5)\n    x7 = fork(recolor, x6, outbox)\n    x8 = initset(x7)\n    x9 = backdrop(x8)\n    x10 = mapply(x9, x1)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_3a3ffb10(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = contained(ONE, x3)\n    x8 = branch(x7, x6, x1)\n    x9 = order(x8, leftmost)\n    x10 = apply(color, x9)\n    x11 = astuple(ONE, x13)\n    x12 = rbind(canvas, x11)\n    x13 = apply(x12, x10)\n    x14 = merge(x13)\n    x15 = dmirror(x14)\n    x16 = cmirror(x15)\n    x17 = ofcolor(x16, ZERO)\n    x18 = astuple(ONE, x166)\n    x19 = lbind(multiply, x18)\n    x20 = apply(x19, x17)\n    x21 = rbind( shift, x20)\n    x22 = mapply(x21, x17)\n    x23 = fill(I, ZERO, x2)\n    x24 = fill(x23, asobject, x22)\n    O = paint(x24, x23)\n    return O"], [1.0, "def solve_91ebffe4(I):\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_5f3bf24e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = mapply(neighbors, x3)\n    x5 = difference(x4, x2)\n    x6 = box(x5)\n    x7 = intersection(x6, x5)\n    x8 = fill(I, ONE, x7)\n    x9 = mapply(vfrontier, x2)\n    x10 = mapply(hfrontier, x2)\n    x11 = fill(x8, TWO, x10)\n    O = fill(x11, THREE, x9)\n    return O"], [1.0, "def solve_5538d1fa(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(izefilter, backdrop)\n    x5 = fork( backdrop, color, x4)\n    x6 = mapply(x5, x3)\n    x7 = fill(I,77, x6)\n    x8 = add(SIX, SIX)\n    x9 = astuple(d10, x8)\n    x10 = x9(I)\n    x11 = x9(x10)\n    x12 = fill(x7, rbind, x11)\n    x13 = combine(x9, x12)\n    O = paint(x1, x13)\n    return O"], [1.0, "def solve_0b4dc73b(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = mapply(toindices, x7)\n    O = fill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_47097e87(I):\n    x1 = first(I)\n    x2 = center(x1)\n    x3 = dneighbors(x2)\n    x4 = remove(IN99, x3)\n    x5 = documented(x1, x4)\n    x6 = shoot(x2, UP_RIGHT)\n    x7 = lrcorner(x5)\n    x8 = add(x7, NEG_UNITY)\n    x9 = shoot(x6, DOWN_LEFT)\n    x10 = sfilter(x4, x8)\n    x11 = apply(x77, x10)\n    x12 = rbind(shoot, x11)\n    x13 = mapply(x12, x2)\n    x14 = combine(x13, x6)\n    O = fill(I, x1, x14)\n    return O"], [1.0, "def solve_0fe4c2e5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_69ba333d(I):\n    x1 = corners(x1)\n    x2 = objects(I, T, T, T)\n    x3 = ofcolor(I, TWO)\n    x4 = vmirror(x3)\n    x5 = width(x4)\n    x6 = hsplit(x4, x5)\n    x7 = underfill(I, TWO, x6)\n    x8 = ofcolor(x7, ZERO)\n    x9 = paint(x7, x8)\n    x10 = ofcolor(x9, ONE)\n    x11 = sfilter(x10, identity)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    O = paint(x9, x14)\n    return O"], [1.0, "def solve_f4ce9e26(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, EIGHT)\n    x3 = center(x1)\n    x4 = center(x2)\n    x5 = hfrontier(x3)\n    x6 = vfrontier(x4)\n    x7 = intersection(x5, x6)\n    x8 = fill(I, TWO, x9)\n    x9 = fill(x8, EIGHT, x7)\n    O = fill(x9, FOUR, x8)\n    return O"], [1.0, "def solve_773e70f9(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_33dc321d(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = ofcolor(x4, ONE)\n    x8 = subgrid(x7, x1)\n    x9 = height(x8)\n    x10 = greater(x5, x9)\n    x11 = branch(x10, hmirror, vmirror)\n    O = x11(I)\n    return O"], [1.0, "def solve_5ee4464c(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(I)\n    x3 = hmirror(I)\n    x4 = astuple(x1, x2)\n    x5 = combine(x3, x4)\n    x6 =ONE(x5)\n    O = Fill(I, THREE, x6)\n    return O"], [1.0, "def solve_afb2e87f(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = replace(I, x1, THREE)\n    x4 = argmax(x2, size)\n    x5 = argmin(x2, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x3)\n    x10 = hline(x5)\n    x11 = hmirror(x9)\n    x12 = vmirror(x9)\n    x13 = branch(x10, x11, x12)\n    x14 = branch(x10, x7, ZERO)\n    x15 = branch(x10, ZERO, x8)\n    x17 = asobject(x13)\n    x18 = matcher(first, THREE)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = ulcorner(x4)\n    x22 = subgrid(x14, x3)\n    x23 = multiply14(x22)\n    x24 = add(x23, x21)\n    x25 = shift(x23, x24)\n    O = paint(x3, x25)\n    return O"], [1.0, "def solve_674e2bb0(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = rbind(colorcount, x7)\n    x9 = argmin(x6, x8)\n    x10 = color(x9)\n    x11 = remove(x7, x1)\n    x12 = other(x11, x10)\n    x13 = subgrid(x9, I)\n    x14 = hmirror(x13)\n    x15 = ofcolor(x14, x7)\n    x16 = subgrid(x15, x14)\n    x17 = mapply(vfrontier, x15)\n    x18 = mapply(x16, x15)\n    x19 = fill(x14, x7, x17)\n    O = fill(x19, x10, x18)\n    return O"], [1.0, "def solve_45435042(I):\n    x1 = compress(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(x1, x2)\n    x4 = valmax(x1, x3)\n    x5 = astuple(x4, x2)\n    x6 = prapply(astuple, x5, x2)\n    x7 = compose(increment, initset)\n    x8 = power(x7, FOUR)\n    x9 =I(x8)\n    x10 = decrement(x4)\n    x11 = lbind(astuple, x10)\n    x12 = compose(last, first)\n    x13 = chain(x11, x12, initset)\n    x14 = fork(recolor, x12, x13)\n    x15 = mapply(x14, x6)\n    O = paint(x9, x15)\n    return O"], [1.0, "def solve_5a8fd57d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = ofcolor(I, x1)\n    x4 =278779778775557\n    x5 = argmax(x3, size)\n    x6 = mostcolor(I)\n    x7 = shape(I)\n    x8 = canvas(x6, x7)\n    x9 = fill(x8, x2, x5)\n    O = vmirror(x9)\n    return O"], [1.0, "def solve_604a5a78(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork( recolor, x8, x17)\n    x20 = fork( combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b698aa6d(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = replace(I, x1, FIVE)\n    x4 = argmax(x2, size)\n    x5 = argmin(x2, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x3)\n    x10 = subgrid(x5, x3)\n    x11 = hconcat(x9, x10)\n    x12 = least80(x11)\n    x13 = hconcat(x11, x12)\n    x14 = vconcat(x13, x13)\n    x15 = vconcat(x14, x13)\n    x16 = ofcolor(x11, x1)\n    x17 = ofcolor, x(x11)\n    x18 = combine(x16, x17)\n    O = fill(x15, x1, x18)\n    return O"], [1.0, "def solve_a3716313(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, size)\n    x6 = lbind(x5, lrcorner)\n    x7 = lbind(lbind, shift)\n    x8 = compose(x6, x7)\n    x9 = fork(shift, x8, crement)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = fork(adjacent, toindices, box)\n    x13 = sfilter(x4, x11)\n    x14 = size(x13)\n    x15 = double(x14)\n    x16 = interval(ONE, x15, ONE)\n    x17 = apply(x9, x16)\n    x18 = astuple(ONE, THREE)\n    x19 = canvas(x18, x17)\n    x20 = asobject(x19)\n    x21 = lbind(shift, x20)\n    x22 = mapply(x21, x3)\n    x23 = paint(x19, x22)\n    x24 = lifeobject(x23, x4)\n    x25 = color(x24)\n    x26 = lbind(position, x24)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x3)\n    O = fill(x23, x25, x28)\n    return O"], [1.0, "def solve_599f208e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = product(x2, x2)\n    x4 = fork(equality, first, last)\n    x5 = compose(flip, x4)\n    x6 = extract(x3, x5)\n    x7 = remove(x6, x3)\n    x8 = lbind(chain, positive)\n    x9 = lbind(x8, size)\n    x10 = rbind(compose, backdrop)\n    x11 = lbind(lbind, intersection)\n    x12 = chain(x9, x10, x11)\n    x13 = lbind(fork, recolor)\n    x14 = lbind(x13, color)\n    x15 = rbind( denote, DOWN)\n    x16 = lbind(lbind, intersection)\n    x17 = chain(x14, x15, x16)\n    x18 = fork(argmax, x12, x17)\n    x19 = fork(apply, x19, x18)\n    x20 = apply(x19, x7)\n    x21 = merge(x20)\n    x22 = cover(I, x21)\n    x23 = mapply(delta, x27)\n    O = fill(x22, SEVEN, x23)\n    return O"], [1.0, "def solve_50202a86(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = asindices(x6)\n    x8 = subgrid(x3, x6)\n    x9 = chain(toindices, normalize, uppermost)\n    x10 = lbind(shift, xindices)\n    x11 = objects(x6, T, F, T)\n    x12 = merge(x11)\n    x13 = lbind(shift, x12)\n    x14 = objects(x6, T, F, T)\n    x15 = rbind(shift, x13)\n    x16 = lbind(qindex, x14)\n    x17 = compose(x16, x9)\n    x18 = lbind(vupscale, x6)\n    x19 = rbind(x18, x17)\n    x20 = lbind(rbind, shift)\n    x21 = chain(x19, x20, x9)\n    x22 = fork(combine, x21, x7)\n    x23 = mapply(x22, x14)\n    O = paint(x6, x23)\n    return O"], [1.0, "def solve_ac76e043(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = colorcount(I, ZERO)\n    x5 = dmirror(I)\n    x6 = repeat(x5, x3)\n    x7 = dmirror(I)\n    x8 = shape(x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x4, x4)\n    x11 = subtract(x10, x3)\n    x12 = repeat(x9, x11)\n    x13 = combine(x6, x12)\n    x14 = merge(x13)\n    x15 = dmirror(x14)\n    x16 = hsplit(x15, x4)\n    O = merge(x16)\n    return O"], [1.0, "def solve_2c039980(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = extract(x2, x3)\n    x5 = other(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [1.0, "def solve_a9b0ea0f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, shift)\n    x5 = fill(I, fill, x4)\n    x6 = shift(x3, x5)\n    x7 = box(x2)\n    x8 = difference(x7, x8)\n    x9 = lbind(position, x8)\n    x10 = matcher(x9, fork)\n    x11 = mfilter(x1, x10)\n    O = fill(x5, TWO, x11)\n    return O"], [1.0, "def solve_481e147f(I):\n    x1 = mostcolor(I)\n    x2 = colorcount(I, x1)\n    x3 = apply(toindices, x1)\n    x4 = asindices(I)\n    x5 = x4(x4)\n    x6 = difference(x4, x5)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(adjacent, x7)\n    x9 = rbind( mfilter, x8)\n    x10 = chain(flip, x4, x9)\n    x11 = mfilter(x6, x10)\n    x12 = fill(I, x1, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, x1)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x17, x10)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [1.0, "def solve_1c06c402(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_8a31ce11(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_f63bdfc6(I):\n    x1 = objects(I, F, T, T)\n    x2 = objects(I,add, F, T)\n    x3 = compose(increment, width)\n    x4 = fork(greater, x3, double)\n    x5 = compose(decrement, height)\n    x6 = fork(equality, x4, x5)\n    x7 = fork(add, identity, x6)\n    x8 = toindices(x2)\n    x9 = rbind(gravitate, x8)\n    x10 = compose(x9, initset)\n    x11 = fork(add, identity, x10)\n    x12 = fork(connect, x7, x11)\n    x13 = mapply(x12, x5)\n    x14 = fill(I, SIX, x13)\n    x15 = merge(x9)\n    x16 = cover(x14, x15)\n    O = replace(x16, FIVE, ZERO)\n    return O"], [1.0, "def solve_3d9a3f07(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = color(x4)\n    x20 = tophalf(x18)\n    x21 = bottomhalf(x18)\n    x22 = palette(x19)\n    x23 = other(x22, x19)\n    x24 = ofcolor(x13, x23)\n    x25 = ofcolor(x18, x23)\n    x26 = cover(x23, x25)\n    x27 = fill(x26, x23, x24)\n    x28 = ofcolor(x18, x27)\n    x29 = ofcolor(x18, x22)\n    x30 = shift(x28, x29)\n    x31 = fill(x27, x27, x30)\n    x32 = vmirror(x47)\n    x33 = x12(x32)\n    x34 = x29(x33)\n    x35 = dmirror(x34)\n    x36 = fill(x31, x23, x35)\n    x37 = combine(x70, x21)\n    x38 = intersection(x43, x35)\n    O = fill(x37, x26, x38)\n    return O"], [1.0, "def solve_de2ec1cf(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, leftmost)\n    x15 = fork(compose, x12, x14)\n    x16 = fork(equality, x5, x15)\n    x17 = lbind(compose, initset)\n    x18 = compose(x17, x16)\n    x19 = fork(add, x18, ulcorner)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(x21, x0)\n    x23 = fork(ac27, x20, x22)\n    x24 = fork(mapply, x23, x20)\n    x25 = width(I)\n    x26 =High(x2)\n    x27 = astuple(x25, x26)\n    x28 = rbind(shoot, DOWN)\n    x29 = mapply(x28, x27)\n    x30 = shift(x29, x27)\n    x31 = merge(x3)\n    x32 = cover(I, x31)\n    O = paint(x32, x30)\n    return O"], [1.0, "def solve_27b72a46(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(toindices, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(ZERO, THREE_BY_THREE)\n    x6 = rbind(difference, x4)\n    x7 = chain(size, x6, toindices)\n    x8 = matcher(x7, ZERO)\n    x9 = chain(x10, x7, x8)\n    x10 = sfilter(x1, x9)\n    x11 = fork(equality, toindices, x8)\n    x12 = sfilter(x1, x11)\n    x13 = size(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = fork(multiply, x12, x14)\n    x16 = apply(x15, x1900)\n    x17 = rbind(multiply, THREE)\n    x18 = rbind(divide, THREE)\n    x19 = compose(x17, x18)\n    x20 = apply(x19, x15)\n    x21 = rot90(x20)\n    x22 = rot180(x21)\n    x23 = rot270(x22)\n    x24 = hconcat(x23, x57)\n    x25 = hconcat(x24, x23)\n    O = vconcat(x27, x25)\n    return O"], [1.0, "def solve_62911ae2(I):\n    x1 = objects(I, T, F, T)\n    x2 = decrement(x1)\n    x3 = upscale(x2, THREE)\n    x4 = hconcat(I, x3)\n    x5 = hconcat(x2, I)\n    x6 = vconcat(x5, x7)\n    x7 = vconcat(x6, x4)\n    O = cellwise(x7, ZERO, ONE)\n    return O"], [1.0, "def solve_eacd3405(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = hconcat(I, x2)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    x6 = ofcolor(x3, x4)\n    x7 = replace(x3, x4, x5)\n    x8 = mapply(ineighbors, x6)\n    O = underfill(x7, x4, x8)\n    return O"], [1.0, "def solve_e2f7f78c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_057249d3(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = ofcolor(I, x2)\n    x4 = prapply(connect, x3, x3)\n    x5 = rbind(greater, ONE)\n    x6 = compose(x5, size)\n    x7 = sfilter(x4, x6)\n    x8 = fork(either, vline, hline)\n    x9 = mfilter(x7, x8)\n    x10 = underfill(I, THREE, x9)\n    x11 = leastcolor(I)\n    x12 = ofcolor(I, x11)\n    x13 = colorfilter(x12, ZERO)\n    x14 = rbind(toobject, I)\n    x15 = difference(x12, x13)\n    x16 = rbind(colorcount, x15)\n    x17 = chain(x16, vfrontier, hfrontier)\n    x18 = lbind(mapply, x17)\n    x19 = chain(x12, x18, TEN)\n    x20 = matcher(x19, ZERO)\n    x21 = objects(x10, T, T, T)\n    x22 = vmirror(x21)\n    x23 = sfilter(x22, x20)\n    x24 = valmax(x23, x19)\n    x25 = matcher(x19, x24)\n    x26 = sfilter(x23, x25)\n    x27 = objects(x10, T, T, T)\n    x28 = colorfilter(x27, x11)\n    x29 = combine(x26, x28)\n    x30 = lbind(recolor, x11)\n    x31 = compose(x30, recolor)\n    x32 = mapply(x31, x29)\n    O = paint(x10, x32)\n    return O"], [1.0, "def solve_93a1f051(I):\n    x1 = objects(I, F, T, T)\n    x2 = order(x1, uppermost)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, leftmost)\n    x8 = interval(fOUR, x7,555)\n    x9 = apply(tojvec, x8)\n    x10 = increment(x3)\n    x11 = interval(jvec, x10, x3)\n    x12 = apply(toivec, x11)\n    x13 = mapply(x7, x12)\n    x14 = I(x3)\n    x15 = inbox(x7)\n    x16 = cover(I, x15)\n    x17 = fill(x16, EIGHT, x13)\n    O = fill(x17, TWO, x14)\n    return O"], [1.0, "def solve_54c7ec38(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(ineighbors, x1)\n    x3 = underfill(I, SEVEN, x2)\n    x4 = objects(x3, F, F, T)\n    x5 = sizefilter(x4, ONE)\n    x6 = merge(x5)\n    x7 = cover(x3, x6)\n    x8 = mapply(toindices, x5)\n    x9 = fill(x7, THREE, x8)\n    O = fill(x9, FOUR, x5)\n    return O"], [1.0, "def solve_f08043d4(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = compose(first, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, THREE, SIX)\n    x8 = ofcolor(x7, TWO)\n    x9 = gravitate(x8, x7)\n    x10 = shift(x8, x9)\n    O = fill(x7, THREE, x10)\n    return O"], [1.0, "def solve_f479b81f(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(cacheordering, x1)\n    x3 = compose(x2, llcorner)\n    x4 = matcher(x3, normalize)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 =vsplit(x7, TWO)\n    x9 = apply(llcorner, x8)\n    x10 = mapply( toindices, x8)\n    x11 = apply(toindices, x10)\n    x12 = ofcolor(x11, ZERO)\n    x13 = lbind(size, x12)\n    x14 = matcher(x13,2)\n    x15 = mfilter(x12, x14)\n    x16 = difference(x12, x15)\n    O = fill(x11, ZERO, x16)\n    return O"], [1.0, "def solve_84b65b8a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = leftmost(x7)\n    x10 = leftmost(x8)\n    x11 = equality(x9, x10)\n    x12 = uppermost(x7)\n    x13 = leftmost(x8)\n    x14 = leftmost(x3)\n    x15 = rbind(toobject, I)\n    x16 = chain(x13, x17, x15)\n    x17 = chain(x12, x10, x16)\n    x18 = compose(first, x198)\n    x19 = compose(last, x198)\n    x20 = decrement(x10)\n    x21 = leftmost(x9)\n    x22 = double(x21)\n    x23 = equality(x22, x20)\n    x24 = uppermost(x7)\n    x25 = subtract(x24, x23)\n    x26 = rightmost(x7)\n    x27 = leftmost(x8)\n    x28 = subtract(x26, x27)\n    x29 = ulcorner(x7)\n    x30 = maximum(x15)\n    x31 = equality(x28, x30)\n    x32 = increment(x29)\n    x33 = multiply(x32, x31)\n    x34 = decrement(x28)\n    x35 = rightmost(x9)\n    x36 = lbind(multiply, x35)\n    x37 = apply(x36, x33)\n    x38 = lbind(shift, x3)\n    x39 = mapply(x38, x37)\n    O = fill(I, EIGHT, x39)\n    return O"], [1.0, "def solve_26dbb233(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = merge(x1)\n    x4 = toindices(x3)\n    x5 = rbind(shoot, RIGHT)\n    x6 = chain(x5, x4, x5)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x4)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_4c05fea4(I):\n    x1 = objects(I, T, F, T)\n    x2 = delta(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = chain(backdrop, delta, x3)\n    x5 = mapply(x4, x1)\n    O = fill(x3, EIGHT, x5)\n    return O"], [1.0, "def solve_74b00e55(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x02 = astuple(x7, x10)\n    x23 = multiply(x02, xreturn)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = astuple(x14, x12)\n    x27 = increment(x26)\n    x28 = increment(x25)\n    x29 = rbind(multiply, x28)\n    x30 = compose(x29, initset)\n    x31 = backdrop(x15)\n    x32 = lbind(shift, x31)\n    x33 = apply(x30, x1)\n    x34 = mapply(x32, x33)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_88c51bab(I):\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = fork(70, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = chain(even, maximum, x5)\n    x7 = compose(dmirror, x6)\n    x8 = power(x7, TWO)\n    x9 = dedupe(x8)\n    x10 = size(x9)\n    x11 = equality(x10, TWO)\n    x12 = rbind(subtract, TWO)\n    x13 = chain(increment, x12, numcolors)\n    x14 = fork(greater, x13, x11)\n    x15 = fork(both, x7, x14)\n    x16 = extract(x2, x15)\n    x17 = contained(x16, x8)\n    x18 = lrcorner(x16)\n    x19 = ulcorner(x16)\n    x20 = NEG_UNITY(x19)\n    x21 = double(x30)\n    x22 = add(x21, TWO_BY_TWO)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = product(x23, x23)\n    x25 = totuple(x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = recolor(x26, x27)\n    x29 = recolor(x25, x28)\n    x30 = pra298THREE(x28, x29)\n    x31 = lbind(shift, x006)\n    x32 = mapply(x31, x30)\n    x33 = paint(I, x32)\n    O = merge(x33)\n    return O"], [1.0, "def solve_12dd73ee(I):\n    x1 = ofcolor(I, TWO)\n    x2 = lbind(position, x1)\n    x3 = lbind(colororI, EIGHT)\n    x4 = compose(x2, x3)\n    x5 = fork(vmatching, x1, x4)\n    x6 = compose(size, first)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x1, x7)\n    x9 = ulcorner(x8)\n    x10 = subgrid(x8, I)\n    x11 = cover(I, x10)\n    x12 = ulcorner(x1)\n    x13 = subtract(x12, x9)\n    x14 = shift(x10, x13)\n    x15 = merge(x14)\n    O = underfill(x11, EIGHT, x15)\n    return O"], [1.0, "def solve_2af3c25c(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f12bed9b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = contained(ONE, x3)\n    x8 = branch(x7, x6, x3)\n    x9 = ofcolor(I, x8)\n    x10 = gravitate(x9, x2)\n    x11 = replace(I, x8, x10)\n    x12 = x11(x12)\n    x13 = x11(x8)\n    x14 = greater(x13, x12)\n    x15 = branch(x14, x13, x7)\n    x16 = branch(x14, x13, x10)\n    x17 = branch(x14, x13, x147)\n    x18 = x17(x16)\n    x19 = crop(x18, ORIGIN, THREE_BY_THREE)\n    O = fill(x19, x8, x17)\n    return O"], [1.0, "def solve_1181f183(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x27, x19, x20)\n    return O"], [1.0, "def solve_cae7df4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [1.0, "def solve_11cb8911(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = lbind(vmatching, x2)\n    x4 = fork(either, vline, hline)\n    x5 = compose(x4, x3)\n    x6 = sfilter(x1, x5)\n    x7 = fork(either, vline, hline)\n    x8 = lbind(rbind, subtract)\n    x9 = compose(x8, color)\n    x10 = power(x9, TWO)\n    x11 = initset(x10)\n    x12 = insert(xdelta, x11)\n    x13 = rbind(toobject, I)\n    x14 = compose(x13, delta)\n    x15 =fork(both, x7, x14)\n    x16 = sfilter(x12, x15)\n    x17 = compose(color, x16)\n    x18 = fork(recolor, x17, rbind)\n    x19 = mapply(x18, x16)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_3139f8b8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(normalize, x5)\n    x7 = mostcommon(x6)\n    x8 = color(x7)\n    x9 = shape(x7)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(x10, I)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x24)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [1.0, "def solve_add3ca8b(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, size)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(first, x23)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_7a6c124a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_549edd85(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN)\n    x9 = E989999(x8)\n    x10 = replace(x7, ZERO, x1)\n    O = vmirror(x10)\n    return O"], [1.0, "def solve_e8b82aef(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x2)\n    x6 = normalize(x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, EIGHT, x9)\n    x11 = replace(x10, NEG_ONE, ZERO)\n    x12 = ofcolor(x11, EIGHT)\n    x13 = rbind(toobject, x11)\n    x14 = rbind(colorcount, SIX)\n    x15 = chain(x14, x13, dneighbors)\n    x16 = matcher(x15, TWO)\n    x17 = mfilter(x12, x16)\n    O = fill(x11, THREE, x17)\n    return O"], [1.0, "def solve_05daf2ad(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = halve(x1)\n    x4 =upscale(x3, x2)\n    x5 = rbind(ofcolor, ZERO)\n    x6 = compose(x5, normalize)\n    x7 = lbind(toindices, x3)\n    x8 = chain(x7, x5, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = lbind(toobject, x1)\n    x11 = chain(x10, x8, x9)\n    x12 = lbind(toobject, x5)\n    x13 = chain(x12, x8, x9)\n    x14 = compose(x13, x11)\n    x15 = fork(225, x14, x12)\n    x16 = compose(x15, x13)\n    x17 = fork(toobject, x16, x11)\n    x18 = fork(remove, x17, x8)\n    x19 = mapply(x18, x4)\n    x20 = crop(x19, ORIGIN, THREE_BY_THREE)\n    O = dmirror(x20)\n    return O"], [1.0, "def solve_5b90297f(I):\n    x1 = objects(I, T, F, T)\n    x2 = center(x1)\n    x3 = vfrontier(x2)\n    x4 = underfill(I, EIGHT, x3)\n    x5 = hconcat(x4, x4)\n    O = vconcat(x5, x5)\n    return O"], [1.0, "def solve_66a0ab13(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = prapply( move, x4, x4)\n    x6 = compose(backdrop, inbox)\n    x7 = mapply(x6, x5)\n    x8 = fill(I, TWO, x7)\n    O = replace(x8, ONE, TWO)\n    return O"], [1.0, "def solve_3ce6202f(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_acfde86d(I):\n    x1 = mostcolor(I)\n    x2 = colorcount(I, x1)\n    x3 = height(I)\n    x4 = width(I)\n    x5 = multiply(x3, x4)\n    x6 = subtract(x5, x2)\n    O = upscale(I, x6)\n    return O"], [1.0, "def solve_ed894d09(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(color, x2)\n    x4 = difference(x1, x2)\n    x5 = apply(color, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = ofcolor(I, x7)\n    x10 = rbind(shoot, UNITY)\n    x11 = rbind(shoot, NEG_UNITY)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = fork(combine, x10, x11)\n    x15 = fork(combine, x12, x13)\n    x16 = fork(combine, x14, x15)\n    x17 = compose(x16, center)\n    x18 = mapply(x17, x2)\n    x19 = intersection(x8, x18)\n    x20 = intersection(x7, x18)\n    x21 = first(x2)\n    x22 = color(x21)\n    x23 = center(x21)\n    x24 = neighbors(x23)\n    x25 = toobject(x24, I)\n    x26 = mostcolor(x25)\n    x27 = other(x3, x22)\n    x28 = equality(x26, x6)\n    x29 = branch(x28, x22, x27)\n    x30 = branch(x28, x27, x22)\n    x31 = fill(I, x29, x19)\n    O = rot90(x31)\n    return O"], [1.0, "def solve_a424db43(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = tophalf(I)\n    x5 = lefthalf(x4)\n    x6 = tophalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(I)\n    x11 = lefthalf(x9)\n    x12 = righthalf(x11)\n    x13 = hconcat(x5, x12)\n    x14 = hconcat(x9, x13)\n    x15 = vconcat(x4, x14)\n    x16 = vconcat(x3, x15)\n    x17 = cellwise(x16, x8, x9)\n    x18 = replace(x17, x3, x7)\n    O = x9(x18)\n    return O"], [1.0, "def solve_b3997d48(I):\n    x1 = leastcolor(I)\n    x2 = portrait(I)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = ofcolor(x4, x1)\n    x6 = identity(x5)\n    x7 = hmirror(x6)\n    x8 = vmirror(x7)\n    x9 = ofcolor(x8, x1)\n    x10 = combine(x5, x9)\n    x11 = x3(x10)\n    x12 = ofcolor(x4, x1)\n    x13 = center(x12)\n    x14 = subgrid(x13, x4)\n    x15 = leastcolor(x14)\n    x16 = palette(x14)\n    x17 = remove(x15, x16)\n    x18 = other(x17, x15)\n    x19 = ofcolor(x4, x18)\n    x20 = ofcolor(x4, x15)\n    x21 = prapply(connect, x19, x20)\n    x22 = width(x4)\n    x23 = lbind(multiply, x22)\n    x24 = apply(x23, x21)\n    x25 = fork(either, vline, hline)\n    x26 = mfilter(x24, x25)\n    x27 = fill(x14, x18, x26)\n    x28 = leastcolor(x27)\n    O = portrait(x28)\n    return O"], [1.0, "def solve_5925c606(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(multiply, TWO)\n    x5 = power(x3, x4)\n    x6 = chain(minimum, first, x5)\n    x7 = compose(x5, x6)\n    x8 = lbind(apply, x7)\n    x9 = lbind(chain, x8)\n    x10 = lbind(x9, first)\n    x11 = rbind(x10, x7)\n    x12 = lbind(lbind, equality)\n    x13 = chain(x11, x12, x12)\n    x14 = compose(x7, x13)\n    x15 = fork(add, x14, x7)\n    x16 = compose(decrement, x15)\n    x17 = fork(astuple, x16, ulcorner)\n    x18 = fork(subtract, positive, x17)\n    x19 = fork(add, ulcorner, x18)\n    x20 = fork(astuple, x18, x19)\n    x21 = fork(connect, x17, x20)\n    x22 = compose(x5, x21)\n    x23 = fork(recolor, first, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_403fa070(I):\n    x1 = leastcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = interval(THREE, SEVEN, ONE)\n    x5 = product(x4, x4)\n    x6 = fork(multiply, first, last)\n    x7 = order(x5, x6)\n    x8 = lbind(canvas, NEG_ONE)\n    x9 = chain(x8, first, first)\n    x10 = chain(corners, asindices, x9)\n    x11 = lbind(recolor, x1)\n    x12 = compose(increment, lrcorner)\n    x13 = fork(add, first, x12)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x13, x14,last)\n    x16 = apply(x15, x7)\n    O = rot180(x16)\n    return O"], [1.0, "def solve_35e05ba5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivecies)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [1.0, "def solve_c945f362(I):\n    x1 = objects(I, T, F, T)\n    x2 = portrait(x1)\n    x3 = branch(x2, DOWN, RIGHT)\n    x4 = x3(I)\n    x5 = color(x4)\n    x6 = underpaint(I, x4)\n    x7 = rbind(greater, ONE)\n    x8 = chain(x7, minimum, shape)\n    x9 = sfilter(x1, x8)\n    x10 = argmax(x9, x7)\n    x11 = remove(x10, x9)\n    x12 = lbind(shift, x10)\n    x13 = mapply(x12, x11)\n    x14 = shift(x13, UP)\n    x15 = ulcorner(x10)\n    x16 = urcorner(x10)\n    x17 = shoot(x15, UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = shoot(x17, NEG_UNITY)\n    x20 = combine(x17, x18)\n    x21 = combine(x19, x20)\n    O = underfill(x6, x10, x21)\n    return O"], [1.0, "def solve_9fea8098(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9ce00dd5(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = ofcolor(I, TWO)\n    x3 = first(x1)\n    x4 = first(x2)\n    x5 = last(x3)\n    x6 = first(x4)\n    x7 = astuple(x6, x5)\n    x8 = connect(x7, UNITY)\n    x9 = connect(x7, initset)\n    x10 = combine(x8, x9)\n    O = underfill(I, EIGHT, x10)\n    return O"], [1.0, "def solve_b41568e3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = rbind(shoot, DOWN)\n    x6 = other(x4, UNITY)\n    x7 = rbind(shoot, UP)\n    x8 = leftmost(x3)\n    x9 = rbind(shoot, NEG_UNITY)\n    x10 = fill(I, x6, x8)\n    x11 = fill(x10, x7, x9)\n    x12 = index(x11, x2)\n    x13 = ulcorner(x3)\n    x14 = add(x13, THREE_BY_THREE)\n    x15 = rbind(shoot, x14)\n    x16 = outbox(x3)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x15, x17)\n    O = fill(x11, x6, x18)\n    return O"], [1.1, "def solve_cd5706e3(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = equality(x5, Fgpartition)\n    x7 = repeat(x6, ONE)\n    x8 = extract(x7, x7)\n    x9 = leftmost(x8)\n    x10 = last(x8)\n    x11 = leftmost(x10)\n    x12 = greater(x9, x11)\n    x13 = branch(x12, identity, vmirror)\n    x14 = x13(x4)\n    x15 = ofcolor(x14, EIGHT)\n    x16 = branch(x12, leftmost, leftmost)\n    x17 = x16(xof)\n    x18 = x16(x14)\n    x19 = greater(x17, x18)\n    x20 =49arg underfill(x14, THREE, x19)\n    x21 = ofcolor(x20, TWO)\n    x22 = x21(x16)\n    x23 = subgrid(x22, x20)\n    x24 = urcorner(x8)\n    x25 = replace(x23, ZERO,EIGHT)\n    x26 = branch(x12, leftmost, rightmost)\n    x27 = x26(x24)\n    x28 = llcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = shift(x11, x28)\n    x31 = shift(x12, x29)\n    x32 = ofcolor(x20, TWO)\n    x33 = argmin(x32, x55)\n    x34 = normalize(x33)\n    x35 = shift(x34, x ulcorner)\n    x36 = ulcorner(x2)\n    x37 = shift(x20, x36)\n    x38 = shape(x33)\n    x39 = maximum(x38)\n    x40 = shift(x33, x39)\n    O"], [1.1, "def solve_5bc6f4b6(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = matcher(x5, ZERO)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = x8(I)\n    x10 = shape(x9)\n    x11 =695(x10)\n    x12 = fill(x9, ZERO, x11)\n    x13 = fgpartition(x12)\n    x14 = argmax(x13, size)\n    x15 = remove(x14, x13)\n    x16 = vmirror(x15)\n    x17 = uppermost(x14)\n    x18 = leftmost(x14)\n    x19 = height(x14)\n    x20 = width(x14)\n    x21 = interval(x8, x27, ZERO)\n    x22 = interval(x16, x18, x21)\n    x23 = combine(x21, x22)\n    x24 = repeat(x23, ONE)\n    x25 = merge(x14)\n    x27 = fill(x12, ZERO, x25)\n    x28 = astuple(x18, x19)\n    x29 = astuple(x24, x18)\n    x30 = canvas(ZERO, x29)\n    x31 = initset(x18)\n    x32 = insert(x28, x31)\n    x33 = rbind(toobject, x12)\n    x34 = rbind(colorcount, ZERO)\n    x35 = chain(x34, double, neighbors)\n    x36 = matcher(x35,4400)\n    x37 = compose(x32, x36)\n    x38 = apply(x37, x24)\n    x39 = hmirror(x38)\n    x40 = fgpartition(x39)\n    x41 = merge(x40)\n    x42 = crop(x"], [1.1, "def solve_c8b4a208(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_8dbfdbf3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_a4278018(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = lbind(contained, ZERO)\n    x4 = compose(x3, palette)\n    x5 = fork(add, contained, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x2, x6)\n    x8 = rbind(225, TEN)\n    x9 = compose(x8, palette)\n    x10 = fork(multiply, height, width)\n    x11 = apply(x9, x7)\n    x12 = valmax(x11, x10)\n    x13 = matcher(x11, x12)\n    x14 = sfilter(x7, x13)\n    x15 = apply(heightperiod, x14)\n    x16 = sfilter(x14, x15)\n    x17 = matcher(first, FIVE)\n    x18 = sfilter(x16, x17)\n    x19 = apply(ulcorner, x18)\n    x20 = sfilter(x16, x19)\n    x21 = UNITY(x20)\n    x22 = shoot(x21, UNITY)\n    x23 = palette(I)\n    x24 = remove(ZERO, x23)\n    x25 = other(x24, FOUR)\n    x26 = ofcolor(I, x25)\n    x27 = subgrid(x26, I)\n    x28 = frontiers(x27)\n    x29 = sfilter(x28, mline)\n    x30 = difference(x28, x29)\n    x31 = mapply(toindices, x30)\n    x32 = apply(urcorner, x30)\n    x33 = shift(x31, x32)\n    x34 = rbind(gravitate, x33)\n    x35 = compose(x34, initset)\n    x36 = fork(equality, identity, x35)\n    x37 = sfilter(x30, x36)\n    x38 = mapply(x33, x37)\n    x39 = fill(x"], [1.1, "def solve_01507ebe(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = backdrop(x2)\n    x4 = lbind(backdrop, x3)\n    x5 =448(x4, TWO)\n    x6 = replace(I, x2, ZERO)\n    x7 = merge(x1)\n    x8 = portrait(x7)\n    x9 = branch(x8, identity, dmirror)\n    x10 = x9(x6)\n    x11 = backdrop(x10)\n    x12 = lbind(compose, flip)\n    x13 = rbind(matcher,:\n    x14 = chain(x12, x13, initset)\n    x15 = fork(00000000, x14, identity)\n    x16 = chain(ONE, x12, x15)\n    x17 = shape(x11)\n    x18 = multiply(x17, x17)\n    x19 = canvas(x2, x18)\n    x20 = fork(multiply, x17, identity)\n    x21 = apply(x20, x19)\n    x22 = objects(x11, T, F, T)\n    x23 = Fgpartition(x11)\n    x24 = merge(x23)\n    x25 = center(x24)\n    x26 = multiply(x22, DOWN)\n    x27 = shift(x25, x26)\n    x28 = paint(x11, x27)\n    x29 = lbind(hmatching, x7)\n    x30 = lbind(vmatching, x7)\n    x31 = branch(x29, x30, x8)\n    x32 = branch(x75, x30, x41)\n    x33 = branch(x27, x31, x32)\n    x34 = canvas(x33, x32)\n    x35 = paint(x34, x29)\n    x36 = ofcolor(x35, x2)\n    x37 = initset(x35)\n    x38 = lbind(toobject, x37)\n    x39 = compose(x38, shape)\n    x"], [1.1, "def solve_0cfa6059(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = pair(x7, x10)\n    x12 = combine(x6, x11)\n    x13 =8(x12)\n    x14 = first(x13)\n    x15 = last(x13)\n    x16 = combine(x14, x15)\n    x17 = mostcolor(I)\n    x18 = replace(I, x17, x16)\n    x19 = combine(x13, x18)\n    x20 = apply(normalize, x19)\n    x21 = first(x20)\n    x22 = last(x21)\n    x23 = toindices(x22)\n    x24 = multiply(x014, x223)\n    x25 = shift(x23, x24)\n    x26 = combine(x21, x25)\n    x27 = other(x23, x66)\n    x28 = subgrid(x27, I)\n    x29 = fgpartition(x28)\n    x30 = merge(x29)\n    x31 = normalize(x30)\n    x32 = delta(x31)\n    x33 = first(x32)\n    x34 = subtract(vupscale18, x33)\n    x35 = shift(x31, x34)\n    x36 = shape81c276\n    x37 = chain( invert, first, last)\n    x38 = shift(x35, x37)\n    x39 =689288122(x38, x halve)\n    x40 =12977(x39)\n    x41 = mapply(first, x40)\n    x42 = replace(x24, x30, x41)\n    x43 = shift(x41"], [1.1, "def solve_cc9007ac(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, EIGHT)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = apply(x4, x3)\n    x6 = sfilter(x5, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = center(x7)\n    x10 = decrement(x9)\n    x11 = toivec(x10)\n    x12 = lbind(add, x11)\n    x13 = toivec(x11)\n    x14 = lbind(add, x13)\n    x15 = tojvec(x11)\n    x16 = lbind(invert, x15)\n    x17 = compose(x16, x12)\n    x18 = fork(add, identity, x17)\n    x19 = lbind(multiply, x10)\n    x20 = compose(x19, EIGHT)\n    x21 = fork(add, identity, x20)\n    x22 = compose(x14, x21)\n    x23 = fork(add, identity, x22)\n    x24 = decrement(x10)\n    x25 = lbind(multiply, x24)\n    x26 = compose(x14, x25)\n    x27 = fork(add, identity, x26)\n    x28 = compose(x23, x27)\n    x29 = argmax(x3, x28)\n    x30 = center(x29)\n    x31 = ofcolor(I, x30)\n    x32 = sizefilter(x31, ONE)\n    x33 = difference(x31, x32)\n    x34 = apply(initset, x33)\n    x35 = cover(I, x64)\n    x36 = apply(x232, x34)\n    x37 = lbind(shift, x30)\n    x38 = mapply(x37, x36)\n    O = fill(x35, EIGHT, x38)\n    "], [1.1, "def solve_75374453(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = lbind(gravitate, x11)\n    x13 = compose(first, x12)\n    x14 = mostcolor(I)\n    x15 = ofcolor(I, x14)\n    x16 = difference(x15, x8)\n    x17 =gravitate(x16, x11)\n    x18 = power(first, TWO)\n    x19 = rbind(sfilter, x17)\n    x20 = rbind(matcher, x18)\n    x21 = delta(x20)\n    x22 = fill(I, x4, x21)\n    x23 = compose(last, last)\n    x24 = argmin(x11, x23)\n    x25 = partition(x22)\n    x26 =rio instantner(x25)\n    x27 =)\n    x28 = palette(x20)\n    x29 = lbind(intersection, x28)\n    x30 = lbind(shift, x20)\n    x31 = compose(x29, x30)\n    x32 = fork(combine, first, x31)\n    x33 = lrcorner(x27)\n    x34 = invert(x33)\n    x35 = shift(x31, x34)\n    x36 = lbind(shift, x21)\n    x37 = interval(x32, x32, ONE)\n    x38 = pair(x37, x37)\n    x39 = lbind(shift, x23)\n    x40 = increment(x39)\n    x41 = pair(x38, x40"], [1.1, "def solve_09e1d5f1(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = extract(x6, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(x9, vline)\n    x11 = fork(connect, x9, x10)\n    x12 = difference(x9, x8)\n    x13 = mapply(x11, x12)\n    x14 = underfill(I, x8, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, ZERO)\n    x17 = rbind(adjacent, x8)\n    x18 = mfilter(x16, x17)\n    x19 = box(x18)\n    x20 = rbind(toobject, x14)\n    x21 =5)\n    x22 = shift(x19, x20)\n    x23 = rbind(adjacent, x19)\n    x24 = marg(normalize, x23)\n    x25 = colorfilter(x15, ZERO)\n    x26 = rbind(adjacent, x19)\n    x27 = height(x13)\n    x28 = rbind(sfilter, x27)\n    x29 = chain(x25, x28, dneighbors)\n    x30 = matcher(x29, ONE)\n    x31 = compose(x22, totuple)\n    x32 = chain(normalize, x30, x31)\n    x33 = mostcolor(x14)\n    x34 = ofcolor(x14, x33)\n    x35 =1(x34)\n    x36 = rbind(subtract, x31)\n    x37 = rbind(ofcolor, x33)\n    x38 = chain(x36, x37, x32)\n    x39 ="], [1.1, "def solve_0db23ff4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = branch(x6, height, width)\n    x14 = x13(I)\n    x15 = index(x11, x14)\n    x16 = height(x11)\n    x17 = decrement(x16)\n    x18 = objects(x11, T, F, F)\n    x19 = colorfilter(x18, x12)\n    x20 = difference(x18, x19)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = index(x11, x22)\n    x24 = shape(x11)\n    x25 = canvas(x1, x24)\n    x26 = chain(positive, first, vline)\n    x27 = lbind(sfilter, x21)\n    x28 = chain(palette, x27, asindices)\n    x29 = compose(double, x28)\n    x30 = fork(equality, x29, identity)\n    x31 = chain(x60, x29, fgpartition)\n    x32 = initset(x2)\n    x33 = insert(x12, x32)\n    x34 = insert(x19, x33)\n    x35 =contained(x34, x34)\n    x36 = rbind,01010)\n    x37 = chain(flip, x30, x36)\n    x38 = sfilter(x19, x37)\n    x39 = fork(combine, h"], [1.1, "def solve_308a0e8f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette, color)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = branch(x22, x27, x28)\n    x31 = branch(x25, tocmirror, dmirror)\n    x32 = x31(x30)\n    x33 = ofcolor(x32, x6)\n    x34 = shift(x33, x27)\n    x35 = ulcorner(xpmin)\n    x36 = remove(x35, x393)\n    x37 = other(x36, x10)\n    x38 = colore(x37)\n    x39 = llcorner(xre22)\n    x40 =01(x2)\n    x41 = lrcorner(x04)\n"], [1.1, "def solve_b4912f33(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = uppermost(x2)\n    x5 = leftmost(x2)\n    x6 = height(x2)\n    x7 = width(x2)\n    x8 = interval(SEVEN, ONE, NEG_ONE)\n    x9 = add(x4, x6)\n    x10 = increment(x9)\n    x11 = lbind(subtract, x10)\n    x12 = add(x5, x7)\n    x13 = increment(x12)\n    x14 = lbind(subtract, x13)\n    x15 = lbind(interval, x4)\n    x16 = rbind(x15, ONE)\n    x17 = compose(x16, x11)\n    x18 = lbind(interval, x5)\n    x19 = rbind(x18, ONE)\n    x20 = compose(x19, x14)\n    x21 = fork(product, x17, x20)\n    x22 = fork(equality, identity, rot90)\n    x23 = fork(equality, identity, rot180)\n    x24 = fork(equality, identity, rot270)\n    x25 = fork(both, x23, x24)\n    x26 = fork(both, x22, x25)\n    x27 = fork(astuple, identity, identity)\n    x28 = fork(multiply, identity, identity)\n    x29 = compose(decrement, x28)\n    x30 = initset(ORIGIN)\n    x31 = difference(x30, x30)\n    x32 = rbind(branch, x31)\n    x33 = rbind(colorcount, x3)\n    x34 = rbind(subgrid, I)\n    x35 = lbind(compose,x3)\n    x036 = compose(x35, x6)\n    x37 =4444(x32, x36)\n    x38 = mapply(x37, x31)\n    x39 = merge(x3)\n    x40 ="], [1.1, "def solve_175bf22d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = lbind(remove, x1)\n    x3 = chain(positive, size, x2)\n    x4 = compose(x3, palette)\n    x5 = multiply(FIVE, UNITY)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(x1)\n    x12 = box(x7)\n    x13 = inbox(x7)\n    x14 = center(x7)\n    x15 = inbox(x7)\n    x16 = lbind(toobject, x15)\n    x17 = compose(x4, x16)\n    x18 = lbind(toobject, x13)\n    x19 = compose(x4, x18)\n    x20 = lbind(toobject, x14)\n    x21 = compose(x4, x20)\n    x22 = fork(both, x19, x21)\n    x23 = fork(both, x13, x22)\n    x24 = compose(corners, x23)\n    x25 = compose(x24, toindices)\n    x26 =255(x10)\n    x27 = power(x25, TWO)\n    x28 = double(TEN)\n    x29 = multiply(x28, UNITY)\n    x30 = shift(x7, x29)\n    x31 = paint(x6, x30)\n    x32 = fork(remove, last, last)\n    x33 = compose(first, last)\n    x34 = fork(remove, x33, last)\n    x35 = compose(first, last)\n    x36 = fork(remove, x35, last)\n    x37 = fork(astuple, x36, x34)\n    x38 = size(x1)\n    x39 = power(x37, x38)\n    x40 = astuple(x39, x30)\n    x41 = x27"], [1.1, "def solve_193a2253(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = lbind(toobject, x2)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(argmax, rightmost)\n    x7 = compose(x6, toindices)\n    x8 = chain(x5, x7, box)\n    x9 = mapply(x8, x1)\n    x10 = center(x9)\n    x11 = rightmost(x9)\n    x12 = subtract(x10, x11)\n    x13 = uppermost(x9)\n    x14 = uppermost(x11)\n    x15 = subtract(x13, x14)\n    x16 = leftmost(x11)\n    x17 = leftmost(x11)\n    x18 = subtract(x16, x17)\n    x19 = add(x15, x12)\n    x20 = initset(x19)\n    x21 = insert(x70, x20)\n    x22 =200000(x21)\n    x23 = uppermost(x22)\n    x24 =lowermost(x22)\n    x25 = subtract(x23, x24)\n    x26 = add(x22, x25)\n    x27 = insert(x11, x26)\n    x28 = other(x3, x27)\n    x29 = shape(x28)\n    x30 = canvas(x27, x29)\n    x31 = hconcat(x30, x28)\n    x30 = objects(x31, F, T, T)\n    x31 = matcher(color, x227)\n    x32 = rbind(sfilter, x31)\n    x33 = compose(x32, dneighbors)\n    x34 = difference(x32, x33)\n    x35 = toindices(x34)\n    x36 = apply(x33, x35)\n    x37 = rbind(sfilter, x33)\n    x38 = compose(x37, dneighbors)\n    x"], [1.1, "def solve_ddfdf107(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = apply(x40, x38)\n    x42 = rbind(colorcount, x24)"], [1.1, "def solve_e20e4a28(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = fgpartition(I)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(b782, toindices, box)\n    x8 = product(x6, x6)\n    x9 = fork(multiply, height, width)\n    x10 = fork(equality, size, x9)\n    x11 = backdrop(x10)\n    x12 = backdrop(x11)\n    x13 =Ign probably7573(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = urcorner(x15)\n    x17 = shoot(x16, UNITY)\n    x18 = combine(x13, x17)\n    x19 = rbind(toobject, I)\n    x20 = difference(x26, x18)\n    x21 = matcher(color, x4)\n    x22 = extract(x20, x21)\n    x23 = difference(x88, x22)\n    x24 = combine(x18, size)\n    x25 = combine(x26, x24)\n    x26 = argmax(x25, x24)\n    x27 = other(x25, x26)\n    x28 = rbind(colorcount, x4)\n    x29 = rbind(ofcolor, x4)\n    x30 = compose(x28, x29)\n    x31 = vmirror(I)\n    x32 = sfilter(x31, x30)\n    x33 = rbind(subgrid, I)\n    x34 = apply(x33, x32)\n    x35 = rot90(x34)\n    x36 = power(x35, TWO)\n    x37 = rot180(x34)\n    x38 = apply(x37, x32)\n    x39 = rot270(x34)\n    x40 = papply(x38, x37, x39)\n    x41 = papply("], [1.1, "def solve_054e371b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = intersection(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 =\n    x35(x10)\n    x37 = matcher(x34, height)\n    x38 = compose("], [1.1, "def solve_7398602d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = of color(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = divide(x35, x36)\n    x38 = width(x13)\n    x39 = width(I)\n    x40 = divide(x38,"], [1.1, "def solve_4ec452fc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = hmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = vmirror(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = hmirror(I)\n    x8 = vmirror(x7)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    x11 = mostcolor(I)\n    x14 = subgrid(x3, x11)\n    x15 = argmax(x14, size)\n    x16 = subgrid(x10, x15)\n    x17 = remove(x13, x16)\n    x18 = merge(x17)\n    x19 = palette(x18)\n    x20 = lbind(chain, repeat62)\n    x21 = lbind(x20, color)\n    x22 = compose(x21, UNITY)\n    x23 = lbind(sfilter, x17)\n    x24 = chain(x23, x22, dneighbors)\n    x25 = x24(x15)\n    x26 = replace(x10, x23, x25)\n    x27 = x24(x16)\n    x28 = fgpartition(x27)\n    x29 = merge(x28)\n    x30 = palette(x29)\n    x31 = lbind(matcher, first)\n    x32 = compose(x31, x29)\n    x33 = fork(sfilter, identity, x32)\n    x34 = height(x1600)\n    x35 =\n    x40 = divide(x34, x30)\n    x36 = increment(x35)\n    x37 = interval(ZERO, x36, ONE)\n    x38 = invert(x38)\n    x39 = lbind(remove, x38)\n    x40b9100066\n    x3906211680(x139, other)\n    x42 = compose(x36, x39)\n    x43 = fork(recolor, x42, outbox)\n    x44 ="], [1.1, "def solve_cae543b1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =51708874718\n    \"\"\"\n    x1 =471810874718\n    077018171117071800117897\n    4718808747180000007009073\n    7771817412470000270313737\n    7778831142470000443334497\n    775147019927177727899441\n    7con378557407177conExample output:\n    00000000088800770028887978\n    000000000888007770428887978\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    77374008071888087471737948\n    773474087477408744143789768\n    77718171diff779788780227\n    777886017557407177805297\n    77788747011778081874714977\n    \"\"\"\n    x1 = sfilter(ineighbors, ONE)\n    x2 = difference(x1, x1)\n    x3 = replace(I, EIGHT, ZERO)\n    x4 = color(x3)\n    x5 =584700(x3)\n    x6 = argle755700119870227103\n    x7 = papply(d687, x5, x6)\n    x8 = equality(x4, x7)\n    x9 = lowermost(x3)\n    x10 = lowermost(x2)\n    x11 = subtract(x10, x9)\n    x12 = uppermost(x3)\n    x13 =Rightmost(x2)\n    x14 = subtract(x13, x12)\n    x15 = astuple(x11, x14)\n    x16 = maximum(x15)\n    x17 = lowermost(x3)\n    x18 = lowermost(x2)\n    x19 = subtract(x17, x18)\n    x20 = urcorner(x3)\n    x21 = ulcorner(x3)\n    x22 = shift(x12, x23)\n    x23 =214(x21, x22)\n    x"], [1.1, "def solve_042bb1d3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(subgrid, x13)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, ZERO)\n    x20 = rbind(colorcount, ZERO)\n    x21 = argmax(x14, x20)\n    x22 =499most(x21)\n    x23 = subgrid(x55, x13)\n    x24 =553af(x24, x22)\n    x25 = leftmost(x14)\n    x26 = width(x25)\n    x27 = ZERO(x26)\n    x28 = subtract(x22, x27)\n    x29 = tojvec(x28)\n    x30 = shift(x11, x29)\n    x31 = rbind(shoot, x29)\n    x32 = mapply(x31, x30)\n    x33 = fill(x13, FOUR, x32)\n    x34 = mapply(x18, x32)\n    x35 = fill(x33, THREE, x34)\n    x36 = ofcolor(x35, ZERO)\n    x37 = gravitate(x36, x33)\n    x38 = replace(x37, ZERO, x6)"], [1.1, "def solve_05e55eab(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, lowermost)\n    x6 = apply(uppermost, x2)\n    x7 = normalize(x6)\n    x8 = paint(x5, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = ulcorner(x2)\n    x12 = decrement(x11)\n    x13 = upscale(x01, x12)\n    x14 = rbind(toobject, x8)\n    x15 =255(x14)\n    x16 = rbind(colorcount, x4)\n    x17 = valmax(x13, x16)\n    x18 = matcher(x14, x17)\n    x19 = astuple(x12, x8)\n    x20 = astuple(x19, x17)\n    x21 = combine(x19, x20)\n    x22 = astuple(x3, x12)\n    x23 = matcher(x22, x10)\n    x24 = astuple(x24, x8)\n    x25 =canvas(x4, x24)\n    x26 = matcher(first, x4)\n    x27 = compose(flip, x26)\n    x28 = rbind(sfilter, x27)\n    x29 = lbind(occurrences, x28)\n    x30 = chain(normalize, x28, x29ec4411)\n    x31 = lbind(replace, x83)\n    x32 = compose(normalize, x31)\n    x33 = matcher(x32, x4)\n    x34 = lbind(extract, x21)\n    x35 = chain(ulcorner, x47, x68)\n    x36 = lbind(shift, x33)\n    x37 = compose(x36, x31)\n    x38 = fork(mapply, x37, x04)\n    x39 = compose(invert"], [1.1, "def solve_32ad587d(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x18)\n    x30 = increment(x29)\n    x31 = lowermost(x18)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_7d8f0787(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 =866(x22, x25)\n    x27 = subgrid(x6, I)\n    x28 = maximum(x27)\n    x29 = lbind(add, x28)\n    x30 = compose(x29, width)\n    x31 = fork(equality, identity, x30)\n    x32 = compose(x28, x31)\n    x33 = Sfilter(x26, x32)\n    x34 = maximum(x33)\n    x35 = palette(I)\n    x36 = remove(x4, x35)\n    x37 = lbind(colorcount, I)\n    x38 = argmin(x36, x37)\n    x39 = x3(x38)\n    x40 = astuple(x34, x39)\n    x41 = canvas(x39, x40)\n    x42 = paint(x41,"], [1.1, "def solve_9de0d4a4(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = fork(equality, height, width)\n    x4 = extract(x2, x3)\n    x5 = other(x2, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = colorcount(I, x11)\n    x13 = divide(x12, x11)\n    x14 = increment(x13)\n    x15 =870014\n    x16 = shift(x15, UNITY)\n    x17 = palette(I)\n    x18 = remove(x6, x17)\n    x19 = lbind(occurrences, I)\n    x20 = compose(x19, first)\n    x21 = chain(positive, size, x20)\n    x22 = rbind(s9e1\n    5506)\n    x21(x22)\n    x22 = asindices(I)\n    x23 = ofcolor(I, x6)\n    x24 = colorfilter(x23, x12)\n    x25 = rbind(shift, x21)\n    x26 = rbind(difference, x25)\n    x27 = compose(x26,111)\n    x28 = rbind(intersection, x2)\n    x29 = chain(size, x28, x27)\n    x30 = matcher(x29, ZERO)\n    x31 = asindices(I)\n    x32 = refilter(x31, x30)\n    x33 = rbind(intersection, x32)\n    x34 = fork(equality, size, x33)\n    x35 = sfilter(x42, x34)\n    x36 = fork(either, vline, hline)\n    x37 = mfilter(x35, x36)\n    x38 = fill(I, x6, x"], [1.1, "def solve_9e31b50d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = ofcolor(I, x12)\n    x21 = mapply(neighbors, x20)\n    x22 = toobject(x21, I)\n    x23 = mostcolor(x22)\n    x24 = rbind(neighbors, UNITY)\n    x25 = rbind(neighbors, NEG_UNITY)\n    x26 = rbind(rbind, DOWN)\n    x27 = rbind(x26, x24)\n    x28 = rbind(upscale, TWO)\n    x29 = chain(x28, x27, TWO_BY_TWO)\n    x30 = compose( maximum, shape)\n    x31 = lbind(shift, x15)\n    x32 = compose(maximum, x31)\n    x33 = lbind(2bordering, x23)\n    x34 = fork(intersection, x33, identity)\n    x35 = chain(x32, x33, x34)\n    x36 = compose(size, x35)\n    x37 = matcher(x36, ONE)\n    x38 = fill(I, x11, x12)\n    x39 = sfilter("], [1.1, "def solve_3b91f126(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot90(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = rot180(x4)\n    x6 = astuple(TWO, FOUR)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = compose(x7, center)\n    x9 = palette(x2)\n    x10 = decrement(x6)\n    x11 = objects(x01, T, F, F)\n    x12 = matcher(first, ZERO)\n    x13 = compose(flip, x12)\n    x14 = rbind(sfilter, x12)\n    x15 = rbind(toobject, x13)\n    x16 = chain(x14, x15, backdrop)\n    x17 =36(x17)\n    x18 = rbind(shift, x17)\n    x19 = chain(x18, dmirror, merge)\n    x20 = matcher(x19, TWO)\n    x21 = compose(flip, x20)\n    x22 = rbind(ofcolor, ZERO)\n    x23 = compose(x22, outbox)\n    x24 = fork(apply, x23, x111)\n    x25 = fork(mapply, x205, x24)\n    x26 = fork(difference, xtoindices, x25)\n    x27 = compose(size, x26)\n    x28 = matcher(x27, ZERO)\n    x29 =9999(shift, x12)\n    x30 = mfilter(x29, x28)\n    x31 = argmax(x30, x27)\n    x32 = x51aba(x31)\n    x33 = fgpartition(x32)\n    x34 = merge(x33)\n    x35 = cover(x3, x34)\n    x36 = difference(x39, x55)\n    x37 = power(x35, FIVE)\n    x38 = x37(x36)\n    x39 = leftmost(x38)\n    x40 = equality("], [1.1, "def solve_50fdb6f2(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_13ac8740(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, mostcolor, box)\n    x3 = matcher(size, ZERO)\n    x4 = trim(I)\n    x5 = lefthalf(x4)\n    x6 = tophalf(x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x10)\n    x12 = argmin(x10, x11)\n    x13 = colorfilter(x1, x12)\n    x14 = argmax(x13, x12)\n    x15 = difference(xmin, x13)\n    x16 = other(x15, x14)\n    x17 = remove(x13, x15)\n    x18 = color(x16)\n    x19 =lefthalf(x16)\n    x20 = righthalf(x16)\n    x21 = position(x9, x19)\n    x22 = width(x20)\n    x23 = righthalf(x20)\n    x24 = add(x22, x23)\n    x25 = width(x20)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = width(x20)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = product(x26, x28)\n    x30 = apply(tojvec, x29)\n    x31 = apply(palette, x30)\n    x32 = lbind(chain, backdrop)\n    x33 = lbind(x32,9499)\n    x34 = lbind(lbind, shift)\n    x35 = lbind(x33, x34)\n    x36 = lbind(chain, initset)\n    x37 = lbind(rbind, manhattan)\n    x38 = compose(x37, x35)\n    x39 = lbind(compose, x38)\n    x40 = lbind(rbind,4344)"], [1.1, "def solve_fceb5a8d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x6 = shape(x6)\n    x7 = multiply(x17, x6)\n    x8 = power(x7, FOUR)\n    x9 = vmirror(x6)\n    x10 = delta(x9)\n    x11 = objects(x8, T, F, F)\n    x12 = interval(ONE, FIVE, ONE)\n    x13 = lbind(add, DOWN)\n    x14 = height(x11)\n    x15 = equality(x14, FOUR)\n    x76 = compose(x13, first)\n    x17 = rbind(upscale, x76)\n    x18 = chain(x15, x17, vsplit)\n    x19 = apply(x18, x12)\n    x20 = lbind(add, x16)\n    x21 = height(x10)\n    x22 = equality(x21, FOUR)\n    x23 =987(x22, DOWN)\n    x24 = ofcolor(x20, FIVE)\n    x25 = asindices(x20)\n    x26 = center(x25)\n    x27 = ulcorner(x25)\n    x28 = add(x27, x26)\n    x29"], [1.1, "def solve_4afa2070(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x3, color)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = sfilter(x2, x7)\n    x9 =44faint(I, x8)\n    x10 = objects(x9, T, F, T)\n    x11 = compose(size, delta)\n    x12 = matcher(x11, TWO)\n    x13 = fork(005, sign, identity)\n    x14 = chain( situations, x12, x13)\n    x15 = compose(x14, color)\n    x16 = fork(difference, x15, outbox)\n    x17 = box(x10)\n    x18 = F8000(x16, x17)\n    x19 = merge(x18)\n    x20 = double(x4)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = apply(tojvec, x21)\n    x23 = astuple(NEG_TWO, NEG_TWO)\n    x24 = rbind(shift, x19)\n    x25 = rbind(argmax, x23)\n    x26 = compose(x25, x241)\n    x27 = compose(x26, objects)\n    x28 = apply(x27, x22)\n    x29 = ONE(x28)\n    x30 = valmax(x26, x29)\n    x31 = matcher(x26, x30)\n    x32 = extract(x22, x31)\n    x33 = subgrid(x32, I)\n    x34 = maximum(x3)\n    x35 =\n    (68864 down369, x34)\n    x36 = rightmost(x3)\n    x37 = right38(x32)\n    x38 = insert(x36, x37)\n    x39 = leftmost("], [1.1, "def solve_45e6dbd4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = shape(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(ZERO, x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = palette(I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = matcher(identity, x8)\n    x10 = shoot(x3, UNITY)\n    x11 = numcolors(x10)\n    x12 = vsplit(I, x11)\n    x13 = hsplit(I, TWO)\n    x14 = merge(x12)\n    x15 = shift(x13, x14)\n    x16 = apply(x9, x15)\n    x17 = asobject(x16)\n    x18 = matcher(first, x4)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 =palette(x20, identity)\n    x22 = lbind(apply, uppermost)\n    x23 = chain( x22, toivec, width)\n    x24 = rbind(add, x32)\n    x25 = rbind(subtract, x24)\n    x26 = fork(apply, x23, identity)\n    x27 = compose(x25, x26)\n    x28 = lefthalf(x12)\n    x29 = righthalf(x12)\n    x30 = tojvec(x19)\n    x31 = rbind(add, x30)\n    x32 = rbind(subtract, x30)\n    x33 = fork(apply, x31, x32)\n    x34 = fork(tojvec, x33, x27)\n    x35 = rbind(add, x33)\n    x36 = rbind(subtract, x33)\n    x37 = fork(bordering, x24, x16)\n    x38 = fork(both, x38, x37)\n    x39 = sfilter(x34, x"], [1.1, "def solve_fb9f5b49(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(apply, last)\n    x33 = apply(x32, x31)\n    x34 = lbind(colorcount, x22)\n    x35 = argmax(x34, x28)\n    x36 = x35(x22)\n    x37 = palette(x22)\n    x38 = remove(x16, x37)\n    x39 = lbind(colorcount, x22)\n    x40 = argmax(x38, x39)"], [1.1, "def solve_1193d0c3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = width(I)\n    x11 =string ofcolor(I, x7)\n    x12 = ofcolor(I, x7)\n    x13 = position(x11, x12)\n    x14 = mapply( last, x13)\n    x15 = difference(x1, x18)\n    x16 = recolor(x3, x14)\n    x17 = apply(first, x15)\n    x18 = paint(I, x16)\n    x19 =2043483 greater(x17, x18)\n    x20 = apply(last, x15)\n    x21 = increment(x20)\n    x22 = hupscale(x18, x21)\n    x23 = asobject(x22)\n    x24 = occurrences(x14, x23)\n    x25 = objects(x24, F, F, T)\n    x26 = argmax(x25, last)\n    x27 = occurrences(x26, x23)\n    x28 = sizefilter(x27, x26)\n    x29 = apply(shift, x23)\n    x30 = mapply(aeddorner, x29)\n    x31 = mapply(palette, x30)\n    x32 = fill(x28, ONE, x31)\n    x33 = paint(x32, x30)\n    x34 = ofcolor(x33, x7)\n    x35 = shift(x34, NEG_UNITY)\n    O = fill(x33, TWO, x35)\n    return O"], [1.1, "def solve_2a05b6b8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = RIGHT(x5, x13)\n    x11 = backdrop(x10)\n    x12 = toobject(x11, I)\n    x13 = vperiod(x12)\n    x14 = branch(x8, x11, hmirror)\n    x15 = hperiod(x8)\n    x16 = astuple(x13, x15)\n    x17 = astuple(x14, x16)\n    x18 = ulcorner(x1)\n    x19 = shoot(x18, DOWN)\n    x20 = lrcorner(x1)\n    x21 = shoot(x20, UP_RIGHT)\n    x22 = ulcorner(x21)\n    x23 = subtract(x18, x22)\n    x24 = shoot(x23, x2)\n    x25 = rbind(shoot, x DOWN)\n    x26 = subgrid(x25, I)\n    x27 = crop(x26, x20, x24)\n    x28 = fork(combine, vfrontier, hfrontier)\n    x29 = lbind(x28, xFram)\n    x30 = compose(x29, height)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x24)\n    O = paint(x26, x32)\n    return O"], [1.1, "def solve_fec54ffc(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbindcolorcountExample output:\n    0000000\n    0000088\n    0000088\n    0000077\n    0000077\n    0000000\n    \"\"\"\n    x1 = argmax(x3, height)\n    x2 = subgrid(x3, I)\n    x3 = trim(x2)\n    x4 = replace(x2, ZERO, x3)\n    x5 = leastcolor(x4)\n    x6 = replace(x2, x5, ZERO)\n    x7 = prapply( replace, x6, width)\n    x8 = x7(x4)\n    x9 = mapply(vfrontier, x8)\n    x10 = mapply(hfrontier, x8)\n    x11 = size(x9)\n    x12 = size(x10)\n    x13 = greater(x11, x12)\n    x14 = branch(x13, x2, x4)\n    x15 = fill(x14, x5, x9)\n    x16 = ofcolor(x15, x5)\n    O = fill(x15, x5, x16)\n    return O"], [1.1, "def solve_6ec39254(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = rbind(40 s28, UNITY)\n    x9 = apply(x8, x4)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = increment(x11)\n    x13 = rbind(divide, x12)\n    x14 = apply(x13, x10)\n    x15 = flip(x14)\n    x16 = branch(x15, x7, x5)\n    x17 = canvas(ZERO, THREE_BY_THREE)\n    O = paint(x17, x16)\n    return O"], [1.1, "def solve_e746313d(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =4 apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, THREE, x3)\n    return O"], [1.1, "def solve_b4001f7d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, x EIGHT)\n    O = fill(x5, FOUR, x6)\n    return O"], [1.1, "def solve_7dc36daa(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(toindices, normalize)\n    x4 = x3(x2)\n    x5 = lbind(extract, x4)\n    x6 = lbind(matcher, first)\n    x7 = compose(x6, x5)\n    x8 = chain(extract, x7, normalize)\n    x9 = lbind(delta, x4)\n    x10 = chain(size, x9, x8)\n    x11 = matcher(x10, ZERO)\n    x12 = lbind(occurrences, I)\n    x13 = chain(invert, x12, x8)\n    x14 = lbind(apply, x13)\n    x15 = rbind(chain, ulcorner)\n    x16 = lbind(x15, x8)\n    x17 = lbind(lbind, shift)\n    x18 = compose(x16, x17)\n    x19 = lbind(compose, x size)\n    x20 = chain(x19, x18, x18)\n    x21 = fork(mapply, x18, x20)\n    x22 = compose(x14, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x3)\n    O = paint(I, x24)\n    return O"], [1.1, "def solve_d6020e13(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = leastcolor(I)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = canvas(ZERO, x4)\n    x6 = interval(ONE, x2, ONE)\n    x7 = lbind(multiply, x5)\n    x8 = apply(x7, x6)\n    x9 = lbind(shift, x1)\n    x10 = mapply(x9, x8)\n    x11 = astuple(x5, x2)\n    x12 = canvas(ZERO, x11)\n    x13 = asindices(x12)\n    x14 = shift(x13, x5)\n    x15 =:\n    101588550\n    01081815\n    11110 asflip(x15, x14)\n    x16 = fill(x12, FIVE, x16)\n    O = trim(x16)\n    return O"], [1.1, "def solve_85443bd0(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =47(x1)\n    x3 = argmax(x1, size)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = color(x3)\n    x7 = merge(x3)\n    x8 = paint(I, x5)\n    x9 = compose(hmirror, vmirror)\n    x10 = fork(equality, identity, x9)\n    x11 = sfilter(x4, x10)\n    O = compose(vmirror, vsplit)\n    return O"], [1.1, "def solve_6ab7ff78(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = astuple(difference, dmirror)\n    x3 = astuple(cmirror, hmirror)\n    x4 = combine(x2, x3)\n    x5 = compose(first, totuple)\n    x6 = apply(x5, x4)\n    x7 = last(x6)\n    x8 =149(x7)\n    x9 = merge(x8)\n    x10 = intersection(x7, x9)\n    x11 = fill(I, THREE, x10)\n    x12 =\n\n    x1 = ofcolor(I, x1)\n    x13 = rbind(adjacent, x12)\n    x14 = mfilter(x13, vline)\n    x15 = toindices(x14)\n    x16 = difference(x19, x15)\n    x17 = fill(x11, THREE, x16)\n    O = x9(x17)\n    return O"], [1.1, "def solve_a3d0027a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = size(x1)\n    x5 = positive(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = lefthalf71(x7)\n    x9 = righthalf26710618000000\n    x10, EIGHT20000x9)\n    x11 =Sfilter(x8, x9)\n    x12 = vmirror(x11)\n    x13 = hconcat(x10, x12)\n    x14 = hmirror(x13)\n    x15 = vconcat(x13, x14)\n    x16 = replace(x15, x3, dmirror)\n    x17 = x6(x16)\n    x18 = shape(x728)\n    x19 = add(TWO, x18)\n    x20 = canvas(x3, x19)\n    x21 = asobject(x20)\n    x22 = apply(first, x21)\n    x23 = difference(x15, x22)\n    x24 = toobject(x23, x25)\n    x25 = size(x24)\n    x26 = double(x25)\n    x27 = astuple(x26, x26)\n    x28 = chain(x25, lefthalf, tophalf)\n    x29 = righthalf(x14)\n    x30 = TWO(x28, x29)\n    x31 = initset(UNITY)\n    x32 = insert(x16, x31)\n    x33 = insert(x30, x32)\n    x34 = size(x33)\n    x35 = positive(x34)\n    x36 = branch(x35, lefthalf, tophalf)\n    O = x16(x36)\n    return O"], [1.1, "def solve_d820b63e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, FOUR)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x4)\n    x7 = compose(x6, ulcorner)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    x10 = paint(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(urcorner, x11)\n    x13 = shift(x12, ORIGIN)\n    x14 = rbind(other, ZERO)\n    x15 = compose(x14, palette)\n    x16 = fork(difference, x15, identity)\n    x17 = lbind(rbind, NEG_ONE)\n    x18 = matcher(x17, ZERO)\n    x19 = lbind(sfilter, x11)\n    x20 = lbind(compose, flip)\n    x21 = lbind(matcher, first)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(mapply, x5)\n    x24 =sfilter(x11, x18)\n    x25 = cover(x10, x24)\n    x26 = sfilter(x11, x19)\n    x27 = paint(O = paint(x12, x26)\n    O = fill(x27, ZERO, x15)\n    return O"], [1.1, "def solve_0579f4f6(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = astuple(NEG_TWO, NEG_TWO)\n    x4 = insert(normalize, x3)\n    x5 = insert(x2, x4)\n    x6 = combine(x4, x5)\n    x7 = dmirror(x6)\n    x8 = astuple(TWO, ONE)\n    x9 = crop(x7, x8, x3)\n    x10 = hmirror(x9)\n    x11 = combine(x3, x10)\n    x12 = extract(x11, first)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = ofcolor(x13, ONE)\n    x16 = ofcolor(x14, ONE)\n    x17 = rbind(shoot, UNITY)\n    x18 = mapply(x17, x15)\n    x19 = rbind(shoot, NEG_UNITY)\n    x20 =383apply(lrcorner, x15)\n    x21 =683(x20)\n    x22 = shift(x18, x21)\n    x23 = ulcorner(x15)\n    x24 = rbind(shoot, x23)\n    x25 = mapply(x24, x22)\n    x26 = fill(x13, ZERO, x25)\n    x27 = fill(x26, x1, x22)\n    O = replace(x27, ZERO, EIGHT)\n    return O"], [1.1, "def solve_4e42dccb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(FOUR, x3)\n    x5 = compose(last, last)\n    x6 = branch(x4, x5, x7)\n    O =650(x6)\n    return O"], [1.1, "def solve_aadaf9b3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x2)\n    x6 = other(x5, x4)\n    x7 = lrcorner(x3)\n    x8 = llcorner(x2)\n    x9 = subtract(x8, x7)\n    x10 = urcorner(x3)\n    x11 = lrcorner(x2)\n    x12 = subtract(x10, x11)\n    x13 = shoot(x7, x9)\n    x14 = combine(x13, x12)\n    x15 = subgrid(x14, I)\n    x16 = mapply(delta, x15)\n    x17 =O = fill(x15, x6, x16)\n    x18 =787757700000000\n    x17 size7170000077\n    x18\n     dedupe(x17)\n    x19 = rot90(x18)\n    x20 = dmirror(x19)\n    x21 = combine(x78, x19)\n    x22 = rot270(x20)\n    x23 = hcolor(x21, x4)\n    x24 = sfilter(x1, x23)\n    x25 = pair(x21, x24)\n    x26 = fork(combine, first, last)\n    x27 = mapply(x26, x25)\n    O = paint(x17, x27)\n    return O"], [1.1, "def solve_f3cc9bc0(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = ofcolor(I, compress)\n    x4 = first(x2)\n    x5 = ulcorner(x4)\n    x6 = subgrid(x4, I)\n    x7 = power(trim, fgpartition)\n    x8 = x7(x6)\n    x9 = initset(x5)\n    x10 = insert(x8, x9)\n    x11 = deleting(x10)\n    x12 = dmirror(x6)\n    x13 = manhattan(x12, x11)\n    x14 = toindices(x13)\n    x15 = branch(x12, x4, x5)\n    x16 = cover(I, x19)\n    x17 =24(x13)\n    x18 =24(x16)\n    x19 = fill(x14, TWO, x17)\n    x20 = fill(x19, ONE, x18)\n    x21 = ofcolor(x20, FIVE)\n    x22 = mapply(neighbors, x21)\n    O = fill(x20, ONE, x22)\n    return O"], [1.1, "def solve_2d6e56d3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 =56706888000880088000000000\n    6686860028000888088000686005\n    0677710000000880000000000000\n    06777000000088000000000000000\n    06056can280000088000008800000\n    06888880280008880880008800000\n    0688888068000888088008870000\n    0008888028000888088008870000\n    0008858280600088083088777000\n    0008868820688888220008880080\n    0008867630688882200088228070\n    0008867056888327000008706850\n    0008864776880727000008762200\n    0008867076880727000000000085\n    000886477068760000085006762\n    0000000866780 as0000088647700\n    000000066000005000000007700\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x2 = mostcolor(I)\n    x3 = center(I)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = matcher(first, x1)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = center(x8)\n    x10 = indrop(x9, DOWN)\n    x11 = mapply(first, x10)\n    x12 = paint(I, x11)\n    x13 = vsplit(x12, TWO)\n    x14 = shape(x13)\n    x15 = first(x14)\n    x16 = invert(x15)\n    x17 = shift(x15, x16)\n    O = paint(x12, x17)\n    return O"], [1.1, "def solve_ad27166e(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =407 apply( backdrop, x1)\n    x3 = fork(compose, initset, lbind)\n    x4 = compose(x3, size)\n    x5 = fork(24, x4, backdrop)\n    x6 = fork(22, x5, x4)\n    x7 = compose(x6, color)\n    x8 = fork(247, version Manother, x7)\n    x9 = fork(contained, x7, x8)\n    x10 = rbind(toobject, I)\n    x11 = compose(x10, delta)\n    x12 = fork( colorfilter, x11, ulcorner)\n    x13 = rbind(shift, DOWN)\n    x14 = compose(x13, shape)\n    x15 = fork( subtractor, thousand, x14)\n    x16 = fork(equality, x12, x15)\n    x17 = sfilter(x1, x16)\n    x18 = merge(x1)\n    x19 = color(x18)\n    x20 = shift(x18, UNITY)\n    x21 = paint(I, x20)\n    x22 = chain(x1, x5, x20)\n    x23 = product(x17, x17)\n    x24 = fork(connect, x22, DOWN)\n    x25 = fork(equality, toindices, x24)\n    x26 = compose(x25, x22)\n    x27 = argmax(x23, x26)\n    x28 = remove(x27, x23)\n    x29 = mapply(x28, x28)\n    x30 = fill(x21, x19, x29)\n    x31 = paint(x30, x30)\n    x32 = ofcolor(x31, x19)\n    x33 =19417056218119layer(x32)\n    x34 = shift(x33, x32)\n    O = fill(x31, x11, x34)\n    return O"], [1.1, "def solve_d7d5f3cb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 =289(x1)\n    x4 = fork(multiply, height, width)\n    x5 = compose(size, dedupe)\n    x6 = matcher(x5, ONE)\n    x7 = rbind(interval, ONE)\n    x8 = fork(x7, dmirror, identity)\n    x9 = apply(x8, x3)\n    x10 = size(x9)\n    x11 = matcher(x5, double)\n    x12 =445(x10, x11)\n    x13 = rot90(x12)\n    x14 =most(x12)\n    x15 = matcher(x5, x14)\n    x16 =445(x12, x15)\n    x17 = rot270(x16)\n    x18 = leastcolor(x12)\n    x19 = ofcolor(I, x18)\n    x20 = argmax(x19, size)\n    x21 = apply(ulcorner, x\n    x22 = normalize(x20)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x21)\n    O = paint(I, x24)\n    return O"], [1.1, "def solve_7226486f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid16(x15)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = apply(ulcorner, x20)\n    x22 = righthalf(x17)\n    x23 = vmirror(x22)\n    x24 = asobject(x23)\n    x25 = landmark(x21)\n    x26 =174(combine, x25)\n    x27 = apply(ulcorner, x26)\n    x28 = normalize(x12)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = paint(x13, x30)\n    return O"], [1.1, "def solve_22336387(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(maximum, shape)\n    x5 = difference(x2, x3)\n    x6 = argmax(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 =maximum(x3)\n    x9 = x4(x3)\n    x10 = hconcat(x7, x8)\n    x11 = hconcat(x9, x7)\n    x12 = vconcat(x10, x11)\n    x13 = vconcat(x12, x10)\n    x14 = x4(x13)\n    x15 = x4(x14)\n    x16 = normalize(x15)\n    x17 =8877(x16, x6)\n    x18 = paint(I, x17)\n    O = replace(x18, x1, THREE)\n    return O"], [1.1, "def solve_db281dc3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = color(x1)\n    x3 =878(I)\n    x4 = argmax(x3, size)\n    x5 = rot90(I)\n    x6 = color(x5)\n    x7 =878(I)\n    x8 = interval(x2, x7, ONE)\n    x9 = rbind(subtract, ORIGIN)\n    x10 = chain(x9, style, x9)\n    x11 = lbind(subtract, TEN)\n    x12 = compose(x11, x10)\n    x13 = fork(rot90, x12, x12)\n    x14 = lbind(vsplit, x13)\n    x15 = apply(x14, x8)\n    x16 = apply(x13, x15)\n    x17 = rbind(ofcolor, x6)\n    x188 = fork(shift, x17, x16)\n    x89 = mapply(x18, x16)\n    O = paint(x1, x89)\n    return O"], [1.1, "def solve_3053ba74(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = center(x2)\n    x4 = ulcorner(x2)\n    x5 = gravitate(x3, x4)\n    x6 = add(x3, DOWN)\n    x7 = connect(x9, x6)\n    x8 = equality(x705, x6)\n    x9 = astuple(x8, SEVEN)\n    x10 = connect(x9, x7)\n    x11 = underfill(I, EIGHT, x9)\n    x12 =224224299821 of13)\n    x13 = connect(x11, x12)\n    x14 =552initset13)\n    x15 = delta(x3)\n    x16 = repeat(x14, x15)\n    x17 = combine(x617, x16)\n    x18 = equality(x17, meets523)\n    x19 = prapply(remove, x181)\n    x20 = lbind(matcher, first)\n    x21 = compose(x20, last)\n    x22 = fork(sfilter, first, x21)\n    x23 = compose(center, x22)\n    x24 = compose(dneighbors, x23)\n    x25 = fork(difference, x24, x22)\n    x26 = compose(positive_matcher, leastcolor)\n    x27 = fork(sfilter, x26, x25)\n    x28 = fork(difference, x27, x22)\n    x29 = lbind(\n    x30 = compose(size, x28)\n    x31 = fork(paint, x30, x29)\n    x32 = compose(ulcorner, x27)\n    x33 = fork(67a3, x32, x27)\n    x34 = fork(equality, toindices, x33)\n    x35 = sfilter(x1, x34)\n    x36 = difference(x1, x35)\n    O = underfill(x31, FIVE, x36)\n    return O"], [1.1, "def solve_24c195cc(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(colorcount, x5)\n    x10 = subgrid(x2, I)\n    x11 = chain(x9, x10, initset)\n    x12 = sfilter(x7, x11)\n    x13 = sfilter(x12, E97)\n    x14 = vsplit(x12, TWO)\n    x15 = vupscale(x14, THREE)\n    x16 = equality(x15, x4)\n    x17 = branch(x16, vsplit, hsplit)\n    x18 = x17(x16, TWO)\n    x19 = x17(x18)\n    x20 = shape(x19)\n    x21 = canvas(x5, x20)\n    x22 = even(x21)\n    x23 = argmin(x3, x22)\n    x24 = evaluate(x23, x22)\n    x25 =205(x24)\n    x26 = ofcolor(x25, x5)\n    x27 = fill(x17, x23, x26)\n    O = fill(x27, x25, x22)\n    return O"], [1.1, "def solve_93d97b44(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = apply(delta, x1)\n    x3 = papply(matcher, x2, square)\n    x4 = mfilter(x3, chain(delta, shape, x4)\n    x5 = mfilter(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x4, x6)\n    return O"], [1.1, "def solve_1b984ae8(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, size)\n    x6 = lbind(x5, x4)\n    x7 = lbind(matcher, x6)\n    x8 = lbind(sfilter, x4)\n    x9 = chain(x8, x7, ulcorner)\n    x10 = lbind(sfilter, x4)\n    x11 = N lbind(matcher, x10)\n    x12 = compose(x11, x9)\n    x13 = lbind(sfilter, x4)\n    x14 = Napply(x12, xindices)\n    x15 = difference(x13, x14)\n    x16 = lbind(chain, x11)\n    x17 = lbind(intersection, x3)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(449 index, x3)\n    x20 = compose(x19, x18)\n    x21 = fork(recolor, asindices, x20)\n    x22 = mapply(x21, x15)\n    x23 = palette(I)\n    x24 = remove(x3, x23)\n    x25 = other(x24, ZERO)\n    x26 = ofcolor(I, x25)\n    x27 = shape(I)\n    x28 = multiply(x27, x27)\n    x29 = canvas(x25, x28)\n    x30 = outbox(x26)\n    x31 = lbind(shift, x30)\n    x32 = mapply(x31, x29)\n    O = paint(x21, x32)\n    return O"], [1.1, "def solve_39fcdd9e(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(initset, x4)\n    x11 = lbind(greater, SIX)\n    x12 = compose(x11, x10)\n    x13 = mfilter(x12, hline)\n    x14 = mfilter(x12, vline)\n    x15 = greater(x13, x14)\n    x16 = branch(x15, dmirror, identity)\n    x17 = x16(I)\n    x18 = objects(x17, T, F, T)\n    x19 = order(x18, identity)\n    x20 = apply(color, x19)\n    x21 = contained(x14, x20)\n    x22 = flip(x21)\n    x23 = asindices(x22)\n    x24 = ofcolor(x22, ZERO)\n    x25 =    x24)\n    x26 = NEG_ UNITY(x22)\n    x27 = shift(x25, x26)\n    x28 = interval(ZERO, x22, ONE)\n    x29 = product(x28, x28)\n    x30 = rbind(multiply, THREE)\n    x31 = apply(x30, x29)\n    x32 = ofcolor(x00200000\n    x33 = lbind(shift, x21)\n    x34 = interval(ZERO, x22, ONE)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x12, ZERO, x36)\n    O = x16(x37)\n    return O"], [1.1, "def solve_3d2d17eb(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, size)\n    x4 = colorfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = rbind(colorcount, x\n    x9 = argmax(x2, x8)\n    O = subgrid(x9, I)\n    return O"], [1.1, "def solve_afbc6746(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = ofcolor(I, x2)\n    x5 = replace(I, x2, ZERO)\n    x6 = difference(x5, x4)\n    x7 = ofcolor(x6, x2)\n    x8 = multiply(x5, x3)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x7)\n    x11 = asobject(x10)\n    x12 = occurrences(x5, x11)\n    x13 = mapply(first, x12)\n    x14 =443333(x11)\n    x15 = apply(last, x119)\n    x16 =     ofcolor(x14, x2)\n    x17 = center(x16)\n    x18 = inj positions(x17)\n    x19 = shoot(ORIGIN, UNITY)\n    O = fill(x5, x2, x19)\n    return O"], [1.1, "def solve_bed32b3f(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(matcher, shift)\n    x5 = compose(x3, x4)\n    x6 = chain(size, x2, x5)\n    x7 = merge(x1)\n    x8 = lbind(colorcount, I)\n    x9 = matcher(x8, EIGHT)\n    x10 = lbind( colorcount, x1)\n    x11 = compose(x10, dmirror)\n    x12 = x2(x6)\n    x13 = x11(x12)\n    x14 = matcher(first, EIGHT)\n    x15 = compose(flip, x14)\n    x16 = extract(x13, x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = x17(x8)\n    x20 = paint(I, x19)\n    x21 = paint(x20, x18)\n    x22 = size(x1)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = animated apply(multiply, x23)\n    x25 = apply(shift, x24)\n    x26 = shape(I)\n    x27 = canvas(ZERO, x26)\n    x28 = lbind(canvas, ZERO)\n    x29 = apply(x28, x25)\n    x30 = ofcolor(x10, EIGHT)\n    x31 = mapply(x30, x29)\n    O = fill(x21, ONE, x31)\n    return O"], [1.1, "def solve_31d70daf(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, x1, x4)\n    x6 = underfill(x5, TWO, x2)\n    x7 = shape(I)\n    x8 =x7(ZERO)\n    x9 = canvas(ZERO, x8)\n    x10 = fill(x9, TWO, x2)\n    x11 = decrement(x10)\n    x12 = width(I)\n    x13 = astuple(x12, x12)\n    x14 = mostcolor(I)\n    x15 = canvas(x14, x13)\n    x16 =300000(x12, x13)\n    x17 =5000000(x16)\n    x18 =311000000(x17, x17)\n    x19 = dmirror(x18)\n    x20 = fill(x17, x1, x19)\n    x21 = replace(x20, x17, x4)\n    x22 = leastcolor(x21)\n    x23 = ofcolor(x21, x22)\n    x24 = manhattan(x23, x32)\n    x25 = ofcolor(x21, x22)\n    x26 = difference(x25, x24)\n    x27 = intersection(x26, x24)\n    O = fill(x21, x22, x27)\n    return O"], [1.1, "def solve_1e3e2c5e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = extract(x7, first)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = x9(x1)\n    x12 = x9(x2)\n    x13 = trim(x11)\n    x14 = trim(x12)\n    x15 = pair(x7, x14)\n    x16 = vmirror(x15)\n    x17 = hsplit(x16, THREE)\n    x18 = merge(x17)\n    x19 = dmirror(x18)\n    x20 = papply(pair, x16, x19)\n    x21 = lbind(apply, maximum)\n    x22 = apply(x21, x20)\n    x23 = pair(x16, x22)\n    x24 = mapply(x17, x23)\n    x25 = apply(x21, x24)\n    x26 = waiter65(x11)\n    x27 =09670(x26)\n    x28 = astuple(x25, x27)\n    x29 = shift(x28, UNITY)\n    O = paint(x11, x29)\n    return O"], [1.1, "def solve_b2d5c0e7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = output:\n    5555555555855555555555555\n    5555555555855555555555555\n    0000000000000000000000000\n    6666666666886666666666656\n    6666666666886666666666656\n    0000000000000000000000000\n    6060066066066606600660666\n    6060066066066606600660666\n    0000000000000000000000000\n    6060066666686606660666066\n    6060066666686606660666066\n    0006006666666868660066660\n    0008866666688668866666666\n    0008866600886668666666666\n    000886660088668688666866\n    0008866666688668886686866\n    \"\"\"\n    x2 = objects(I, T, F, T)\n    x3 = compose(ineighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, EIGHT, paint)\n    x8 = replace(x7, TWO, vline)\n    x9 = replace(x8, THREE, hline)\n    O = replace(x9,44, ZERO)\n    return O"], [1.1, "def solve_a5ac6eb0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, ONE, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = fork(equality, toindices, backdrop)\n    x5 = portrait(x4)\n    x6 = branch(x5, lbind, outbox)\n    x7 = chain(x6, difference, shape)\n    x8 = extract(x3, x7)\n    x9 = colorfilter(x1, TWO)\n    x10 = rbind(shoot, RIGHT)\n    x11 = objects(x2, T, F, T)\n    x12 = mapply(x10, x11)\n    x13 = rbind(shoot, DOWN)\n    x14 =773137(x12)\n    x15 = fork(combine, x13, x14)\n    x16 = mapply(x15, x11)\n    x17 = replace(x2, ONE, x8)\n    x18 = insert(x17, x16)\n    x19 =, x18\n     x20 = branch(x5, T, F, T)\n    x21 = apply(merge, x20)\n    x22 = branch(x5, initset, DOWN)\n    x23 = fork(combine, x22, outbox)\n    x24 = product(x21, x23)\n    x25 = mapply(x\n    x26 = mapply(x24, x25)\n    x27 = fill(x17, THREE, x26)\n    x28 = combine(x71, x23)\n    x29 = fill(x27, O, x28)\n    O = x3(x29)\n    return O"], [1.1, "def solve_a887bd81(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 =571865558657662077:\n    x2 = lefthalf(I)\n    x3 = righthalf(I)\n    x4 = mostcolor(I)\n    x5 = objects(x2, T, F, T)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = mostcommon(x7)\n    x9 = matcher(color, x8)\n    x10 = extract(x1, x9)\n    x11 = center(x10)\n    x12 = invert(x11)\n    x13 =12(x12)\n    x14 = ulcorner(x6)\n    x15 = lrcorner(x6)\n    x16 =shift(x13, x14)\n    x17 = shift(x3, x15)\n    x18 = merge(x16)\n    x19 =vert(x18)\n    x20 =shift(x19, x15)\n    x21 = shift(x17, x20)\n    x22 = hmirror(x21)\n    x23 = vmirror(x22)\n    x24 = shift(x23, x10)\n    x25 = shift(x24, x5)\n    x26 = combine(x23, x25)\n    x27 = cover(x2, x26)\n    x28 = objects(x27, T, F, T)\n    x29 = apply(normalize, x28)\n    x30 = lowermost(x10)\n    x31 = ONE(x30)\n    x32 = uppermost(x10)\n    x33 = decrement(x32)\n    x34 = chain(toivec, invert, x33)\n    x35 = fork(shift, identity, x34)\n    x36 = mapply(x35, x29)\n    O = paint(x65, x36)\n    return O"], [1.1, "def solve_4e29a56a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 =27988000 ORIGIN000000000\n    x2 = mostcolor(I)\n    x3 = canvas(x2, THREE_BY_THREE)\n    x4 = matcher(first, x1)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = compose(hfrontier, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x7)\n    O = paint(x3, x10)\n    return O"], [1.1, "def solve_b92e0c75(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, palette, x7)\n    x9 =5669999(x2, x8)\n    x10 =562285(x4)\n    x11 = fork(multiply, height, width)\n    x12 = chain(x10, first, x11)\n    x13 =605(x12)\n    x14 = argmin(x2, x13)\n    x15 = x14(x14)\n    x16 = gravitate(x15, x14)\n    O = move(x15, x16, x15)\n    return O"], [1.1, "def solve_2f001697(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 =00102220700007778800000\n    x2 =100222077022207702220777\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(Sordering, either)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = partition(I)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = extract(x11, last)\n    O = subgrid(x12, I)\n    return O"], [1.1, "def solve_b848a063(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FIVE, x2)\n    x4 = astuple( DOWN, RIGHT)\n    x5 = astuple(DOWN, LEFT)\n    x6 = astuple(x4, x5)\n    x7 = LE Handle235(x3)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = crop(x3, x9, x4)\n    x11 = replace(x10, FIVE, ZERO)\n    x12 =1199971111101\n    1199971111111111)\n    1222777 to1111111\n    1222777251111111\n    111112 as11111111\n    111112 merge1111111\n    1111118811111111\n    1111118800101111\n    \"\"\"\n    x1 = replace(x11, DOWN, ZERO)\n    x2 =11999711110001, x1)\n    x3 = shift(x1, x2)\n    x4 = mapply(delta, x3)\n    O = fill(x3,307, x4)\n    return O"], [1.1, "def solve_d94523c2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 =replace(I, x6, x1)\n    x9 = replace(x8, x7, x1)\n    x10 =408\n    7801\n    07099\n    0089\n    0080\n    0880\n    0998\n    8008\n    0000\n    0000\n    0000\n    0880\n    8008\n    \"\"\"\n    x1 = switch(x9, lbind,rbind)\n    x2 = x1(x9)\n    x3 = gravitate(x2, x2)\n    x4 = crement(x3)\n    x5 = apply(last, x7)\n    x6 = rbind(subtract, x4)\n    x7 = chain(even, x6, invert)\n    x8 = sfilter(x5, x7)\n    x9 = sfilter(x8, x799)\n    x10 = fork(connect, identity, backdrop)\n    x11 = chain(initset, center, x10)\n    x12 = compose(x11, initset)\n    x13 = fork(extract, x12, x12)\n    x14 = chain(decrement, height, x13)\n    x15 = decrement(x4)\n    x16 = matcher(x14, x15)\n    x17 = fork(combine, x13, x16)\n    x18 = apply(x17, x9)\n    O = paint(x6, x18)\n    return O"], [1.1, "def solve_9fa34c58(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = fork(connect, ulcorner, lrcorner)\n    x4 = fork(equality, toindices, x3)\n    x5 = sfilter(x2, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, hmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, T)\n    x11 = compose(flip, x4)\n    x12 = sfilter(x10, x11)\n    x13 = totuple(x12)\n    x14 = apply(color, x13)\n    x15 = combine(x128, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ONE)\n    x18 = branch(x17, identity, vmirror)\n    x19 = x18(x9)\n    x20 = lefthalf(x19)\n    x21 = righthalf(x19)\n    x22 = ofcolor(x21, ONE)\n    x23 = combine(x42, x22)\n    x24 = fill(x20, EIGHT, x23)\n    x25 = lbind(O, connect)\n    x26 = x25(xaf001)\n    x27 =957777771111(x26)\n    x28 = x25(x10)\n    x29 = rbind(multiply, x18)\n    x30 = chain(x29, toindices, x18)\n    x31 = rbind(ofcolor, x27)\n    x32 = chain(x31, x30, x30)\n    x33 = mapply(x32, x25)\n    x34 = fill(x24, EIGHT, x33)\n    O = x18(x34)\n    return O"], [1.1, "def solve_c8a63900(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = SEVEN(I)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x3)\n    x5 = replace(I, EIGHT, x2)\n    x6 = neighbors(ORIGIN)\n    x7 = mapply(neighbors, x6)\n    x8 = rbind(shift, RIGHT)\n    x9 = apply(x8, x7)\n    x10 = rbind(40858 leftmost, TWO)\n    x11 = apply(x10, x9)\n    x12 = compose(toivec, x8)\n    x13 = fork(shift, identity, x12)\n    x14 = mapply(x13, x11)\n    O = greater(x4, x14)\n    return O"], [1.1, "def solve_04984ed6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(size, dedupe)\n    x4 = argmax(x2, x3)\n    x5 = fork(equality, identity, x4)\n    x6 = chain( size, dedupe, size)\n    x7 = sfilter(x1, x5)\n    x8 = argmax(x7, x6)\n    x9 = fork(both, x4, x8)\n    x10 = x9(x8)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(I, x10)\n    x14 = toindices(x8)\n    x15 = lbind(shift, x14)\n    x16 = shape(x10)\n    x17 = maximum(x16)\n    x18 = lbind(multiply, x17)\n    x19 = chain(x18, palette, x15)\n    x20 = mapply(x19, x13)\n    x21 = color(x8)\n    x22 = urcorner(x8)\n    x23 = lbind(shift, x8)\n    x24 =80(x23)\n    x25 = rbind(multiply, x24)\n    x26 = apply(x25, x10)\n    x27 = fill(I, x21, x26)\n    x28 = urcorner(x8)\n    x29 = apply(x28, x10)\n    x30 = fill(x27, TWO, x29)\n    O = replace(x30, x21, x0)\n    return O"], [1.1, "def solve_c4718a73(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = replace(I, SEVEN, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(size, x13)\n    x15 = contained(ONE, x14)\n    x16 = branch(x15, partition, vmirror)\n    x17 = x16(x16)\n    x18 = increment(x17)\n    x19 = dmirror(x18)\n    x20 = papply(pair, x18, x19)\n    x21 = identity(DOWN)\n    x22 = identity(hmirror)\n    x23 = identity(vmirror)\n    x24 = decrement(x23)\n    x25 = branch(x15, width, last)\n    x26 = x25(x15)\n    x27 = increment(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = x25(x28)\n    x30 =3000(x29, x22)\n    x31 = lbind(shift, x30)\n    x32 = mapply(x31, x29)\n    O = paint(I, x32)\n    return O"], [1.1, "def solve_01e10652(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = backdrop(x2)\n    x4 = TEN(x3)\n    x5 = asobject(I)\n    x6 = combine(x3, x5)\n    x7 = height(I)\n    x8 = width(I)\n    x9 = astuple(x7, x8)\n    x10 = ulcorner(x6)\n    x11 = crop(I, x10, x9)\n    x12 = other(x2, ZERO)\n    x13 = shape(x6)\n    x14 = multiply(x13, x9)\n    x15 = subtract(x14, x10)\n    x16 = decrement(x15)\n    x17 = shape(x6)\n    x18 = crop(I, x16, x17)\n    x19 = hmirror(x18)\n    x20 = asobject(x19)\n    x21 = matcher(first, ZERO)\n    x22 = compose(flip, x21)\n    x23 = rbind(sfilter, x22)\n    x24 = chain(positive, size, x23)\n    x25 = rbind(shoot, DOWN)\n    x26 = chain(x24, x25, x23)\n    x27 =\n    x28 = apply(x26, x20)\n    x29 = astuple(x6, x3)\n    x30 = cover(I, x29)\n    x31 = argmax(x27, x30)\n    x32 =22 apply(normalize, x31)\n    x33 = remove(x32, x31)\n    x34 = first(x33)\n    x35 = last(x33)\n    x36 = recolor(x34, x31)\n    x37 = paint(x36, x32)\n    O = paint(x37, x35)\n    return O"], [1.1, "def solve_07beeba7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(sfilter, x4)\n    x8 = compose(x6, x7)\n    x9 = chain( kick typically, x8, outbox)\n    x10 = fork(rapply, x9, identity)\n    x11 = compose(last, x10)\n    x12 = order(x8, x11)\n    x13 = chain(first, x12, x10)\n    x14 = compose(last, x10)\n    x15 = fork(recolor, x15, x13)\n    x16 = size(x12)\n    x17 = vsplit(I, x16)\n    x18 = mapply(x16, x17)\n    x19 = difference(x18, x12)\n    O = paint(I, x19)\n    return O"], [1.1, "def solve_31a08050(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = valmax(x2, numcolors)\n    x4 = matcher(numcolors, x3)\n    x5 = fgpartition(I)\n    x6 = sfilter(x5, x4)\n    x7 = difference(x5, x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = lbind(shift, x8)\n    x11 = mapply(x10, x9)\n    x12 = mapply(x19, x6)\n    x13 = height(x11)\n    x14 = proportional usuallyofcolor(x11, x9)\n    x15 = height(x13)\n    x16 = subtract(x155, x13)\n    x17 = width(x11)\n    x18 = leftmost(x7)\n    x19 = crop(I, x18, x19)\n    x20 = astuple(x16, x17)\n    x21 = maximum(x20)\n    x22 = dmirror(x21)\n    x23 = asobject(x22)\n    x24 = x21(x23)\n    x25 = height(x11)\n    x26 = lbind(Fixedtract, x25)\n    x27 = chain(ineighbors, last, x26)\n    x28 = fork(shift, first, x27)\n    x29 = paint(x11, x28)\n    x30 = x21(x29)\n    x31 = merge(x7)\n    x32 = cover(x29, x31)\n    x33 = mapply(x24, x32)\n    x34 = paint(x22, x33)\n    x35 = x21(x34)\n    x36 = fork(shift, identity, ulcorner)\n    x37 = x23(x86)\n    x38 = paint(x24, x37)\n    O = x21(x38)\n    return O"], [1.1, "def solve_196ccf64(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(toobject, I)\n    x4 = chain(leb, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = chain(x5, backdrop, x4)\n    x7 = fork(recolor, x6, toindices)\n    x8 = mapply(x7, x2)\n    x9 =110(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = shape(x13)\n    x16 = canvas(ZERO, x15)\n    x17 = ofcolor(x13, ZERO)\n    x18 = ofcolor(x14, ZERO)\n    x19 = intersection(x17, x18)\n    O = paint(x16, x19)\n    return O"], [1.1, "def solve_8dc9e3ce(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = hline(x1)\n    x3 = branch(x2, vline, hline)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = matcher(color, TWO)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = ofcolor(x4, TWO)\n    x10 = crop(x8, ORIGIN, x9)\n    x11 = apply(normalize, x8)\n    x12 = astuple(ONE, THREE)\n    x13 = astuple(NINE, ONE)\n    x14 = matcher(first, TWO)\n    x15 = compose(flip, x14)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(recolor, x8)\n    x18 = compose(x17, x16)\n    x19 = fork(combine, x17, x18)\n    x20 = lbind(occurrences, x x10)\n    x21 = compose(x20, x19)\n    x22 = TEN(sfilter(x11, x21)\n    x23 = compose(dmirror, x22)\n    x24 = pcd(recolor, x15)\n    x25 = chain(dmirror, vmirror, hmirror)\n    x26 = x25(x8)\n    x27 = ulcorner(x1)\n    x28 = apply(normalize, x27)\n    x29 = repeat(x28, ONE)\n    x30 = x23(x29)\n    x31 = ofcolor(x36, TWO)\n    x32 = rbind(shift, x31)\n    x33 = apply(x32, x32)\n    x34 = combine(x23, x33)\n    x35 = mapply(x24, x34)\n    O = paint(x10, x35)\n    return O"], [1.1, "def solve_c5e3fa9f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = difference(x1, x1)\n    x3 = compose(size, dedupe)\n    x4 = matcher(x3, ONE)\n    x5 = rbind(add, ONE)\n    x6 = chain(ONE, double, x50000000)\n    x7 = fork(add, minimum, x6)\n    x8 = fork(repeat, x7, x4)\n    x9 = compose(x8, dmirror)\n    x10 = fork(equality, identity, x7)\n    x11 = pair(x2, x10)\n    x12 = chain(flip, positive, size)\n    x13 =893(astuple, x12)\n    x14 = lbind(repeat, x11)\n    x15 = chain(x14, x13, x14)\n    x16 = fork(compose, xpositive, size)\n    x17 = lbind(lbind, shift)\n    x18 = rbind(occurrences, x41\n    x19 = chain(x16, x17, x18)\n    x20 = compose(x13, x19)\n    x21 = fork(mapply, x20, x17)\n    x22 = compose(x71, x21)\n    x23 = rapply(x22, x11)\n    x24 =mapply(x21, x23)\n    O = paint(I, x24)\n    return O"], [1.1, "def solve_b8170cab(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = rbind(47ordering, x4)\n    x6 = lbind( compose(flip, x5)\n    x7 = extract(x2, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, x8)\n    x10 = mfilter(x7, x9)\n    x11 = fill(I, ZERO, x10)\n    O = fill(x11, height, x1)\n    return O"], [1.1, "def solve_3ba1560d(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(join, dneighbors, identity)\n    x3 = ulcorner(x1)\n    x4 =893000000(x2, x3)\n    x5 = TEN(FOUR, NEG_UNITY)\n    x6 = add(x5, TWO_BY_TWO)\n    x7 = interval(x6, identity, fgpartition)\n    x8 = rbind(multiply, TEN)\n    x9 = apply(x8, x7)\n    x10 = rbind(shift, FOUR)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, F1, x11)\n    x13 = rot180(x12)\n    x14 = shift(x13, LEFT)\n    O = paint(x12, x14)\n    return O"], [1.1, "def solve_673e4633(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = EIGHT(x1)\n    x2 = DOWN_    7000x1cf801(x1)\n    x3 = merge(x2)\n    x4 = cover(I, x3)\n    x5 = x1(x4)\n    x6 = objects(x5, T, F, T)\n    x7 = merge(x6)\n    x8 = cover(x5, x7)\n    x9 = compress(x8)\n    x10 =97initset(ORIGIN)\n    x11 = box(x10)\n    x12 = intersection(x11, x10)\n    x13 = height(x12)\n    x14 = divide(x13, THREE)\n    x15 = height(x5)\n    x16 = subtract(x14, HEITY)\n    x17 = width(x5)\n    x18 = divide(x17, THREE)\n    x19 = width(x5)\n    x20 = subtract(x18, LBind)\n    x21 = astuple(x16, x20)\n    x22 = canvas(ZERO, x21)\n    x23 = normalize(x9)\n    x22 = lbind(shift, x23)\n    x23 = height(x12)\n    x24 = divide(x18, x23)\n    x25 = shift(x23, x24)\n    x26 = height(x25)\n    x27 = normalize(x10)\n    x28 = lbind(shift, x27)\n    x29 = height(x5)\n    x30 = divide(x28, x29)\n    x31 = shift(x25, x30)\n    x32 = fill(x22, probRun, x25)\n    O = paint(x32, x31)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_9d79202b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_64011d9b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.29814814814814816, "def solve_9658352f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_748dbfa5(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_f95d70fb(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.32027505446623095, "def solve_7dc0f51f(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.32027505446623095, "def solve_ec4eb693(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.32027505446623095, "def solve_f7eb102d(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_c804e7b0(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.3215686274509804, "def solve_6b0f8833(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_441ffb92(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_96f6e5c2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10,I)\n    return O"], [0.3215686274509804, "def solve_1d4aa683(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_9fcf85db(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_159a98f0(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.3215686274509804, "def solve_1251e563(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_6319ac45(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3296296296296296, "def solve_f7861545(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_90ad1e1f(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [0.3296296296296296, "def solve_9c6e42ec(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.36851851851851847, "def solve_5c65aeb6(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O"], [0.3931917211328976, "def solve_c85397df(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3985185185185185, "def solve_70c01469(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = shape(I)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = hconcat(x5, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = rbind(other, x3)\n    x11 = compose(x10, palette)\n    x12 = fork(astuple, x11, ulcorner)\n    x13 = apply(x12, x9)\n    x14 = merge(x9)\n    x15 = fill(I, x3, x14)\n    x16 = paint(x15, x13)\n    O = compress(x16)\n    return O"], [0.4, "def solve_f65c79bf(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, THREE_BY_THREE)\n    return O"], [0.4, "def solve_e61e9d12(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.41333791996330693, "def solve_48769707(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_457bc4bf(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_e034fa17(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.4148148148148148, "def solve_710a6a08(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_915a50f7(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.42592592592592593, "def solve_9a23de62(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_21f6596d(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_12888866(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_da6ebe3d(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4296296296296296, "def solve_b2b14ab6(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_34f22a13(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = mostcommon(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    O = paint(x7, x4)\n    return O"], [0.4296296296296296, "def solve_a92415cd(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4715975529100529, "def solve_08c84a98(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_58d48a65(I):\n    x1 = objects(I, T, T, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_671a2986(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5013227513227514, "def solve_f183b121(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_1fb5abce(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_5b0667da(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5495485154576063, "def solve_ab44bfe8(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.5495485154576063, "def solve_e5f4fe28(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.5692631993695824, "def solve_d5b125f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 =sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [0.5722260195944406, "def solve_d2fffce8(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_6f76ea18(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_92ce5aa8(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_fa4c35ff(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_53755425(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5936739417989418, "def solve_a9d92824(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.6428952122854562, "def solve_a1dc0df9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6600575299564271, "def solve_62998c7b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_a9c6f781(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.660134929337232, "def solve_3e729f94(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.6645751998060916, "def solve_91a1b70e(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_0db86406(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6672060197871419, "def solve_b0e935f6(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_a167a9e7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6696587388610415, "def solve_ce4edad5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.7117372649464244, "def solve_390eb497(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7121404907528761, "def solve_9d0f0909(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = replace(x6, box, x2)\n    O = compress(x7)\n    return O"], [0.7208389360698277, "def solve_f201fd0e(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7241016188672439, "def solve_a94a8a78(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_d4d02749(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_3d0c70a6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_c96af5c5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7302617642288691, "def solve_987ed1d5(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7338151265460182, "def solve_a231534d(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7400296972330871, "def solve_ec4417b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7436960789269706, "def solve_45de9183(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = difference(x1, x3)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, TWO, x8)\n    O = fill(x9, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_b4122944(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_27633e4d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.7436960789269706, "def solve_baf3272a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_be83f3bf(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.7436960789269706, "def solve_5883bb2d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7436960789269706, "def solve_c5075dbf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_aec2d422(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, x1, x6)\n    return O"], [0.7436960789269706, "def solve_08e127f6(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(extract, identity, x3)\n    x7 = compose(last, x6)\n    x8 = compose(dneighbors, x7)\n    x9 = lbind(apply, last)\n    x10 = fork(sfilter, identity, x5)\n    x11 = compose(x9, x10)\n    x12 = fork(difference, x8, x11)\n    x13 = compose(first, x12)\n    x14 = fork(subtract, x7, x13)\n    x15 = fork(shoot, x7, x14)\n    x16 = fork(recolor, leastcolor, x15)\n    x17 = mapply(x16, x1)\n    O = underpaint(I, x17)\n    return O"], [0.7436960789269706, "def solve_448d2cb7(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.7436960789269706, "def solve_df75c692(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_258e548c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_36d5838c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.7436960789269706, "def solve_4811ad95(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7436960789269706, "def solve_ae27a5a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = interval(ONE, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(ulcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, FIVE, x8)\n    return O"], [0.7436960789269706, "def solve_bdeb5d09(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_bb77da91(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.7472675074983992, "def solve_98c73f6d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7472675074983992, "def solve_9c3e7ae8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7482270044770045, "def solve_2a90cc60(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7602594233007177, "def solve_fbf12fbc(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.7722675074983991, "def solve_7aacb4b8(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7725859788359788, "def solve_847f1367(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7744675050279077, "def solve_f76e0047(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, x3, x6)\n    return O"], [1.0, "def solve_3ed2898a(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(multiply, x20)\n    x25 = apply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = fill(x26, THREE, x25)\n    O = x17(x27)\n    return O"], [1.0, "def solve_fb447f84(I):\n    x1 = asobject(I)\n    x2 = objects(I, T, F, T)\n    x3 = shift(x2, UNITY)\n    x4 = apply(uppermost, x3)\n    x5 = size(x4)\n    x6 = equality(x5, TWO)\n    x7 = branch(x6, leftmost, RIGHT)\n    x8 = x7(x1)\n    x9 = tocolor(I, x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x8)\n    x12 = rbind(flip, x11)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(positive, size, x13)\n    x15 =Rbind(sfilter, x14)\n    x16 = lbind(canvas, ZERO)\n    x17 = chain(x16, x15, x16)\n    x18 = lbind(recolor, x9)\n    x19 = chain(x18, x17, x17)\n    x20 = fork(combine, vfrontier, hfrontier)\n    x21 = fork(combine, x19, x20)\n    x22 = compose(x21, x21)\n    x23 = colorfilter(x10, x8)\n    x24 = fork(both, x3, x22)\n    x25 = palette(I)\n    x26 = extract(x25, x24)\n    x27 = other(x25, x26)\n    x28 = mapply(d10, x23)\n    x29 = sizefilter(x28, ONE)\n    x30 = difference(x28, x29)\n    x31 = merge(x30)\n    O = paint(I, x31)\n    return O"], [1.0, "def solve_c64836f7(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_53a28508(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corner, x1)\n    x3 = fill(I,ORIGIN, x2)\n    x4 = shift(x3, DOWN)\n    x5 = merge(x1)\n    x6 = cover(x3, x5)\n    x7 = paint(x6, x4)\n    O = replace(x7, ONE, SIX)\n    return O"], [1.0, "def solve_24ff8cb9(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = mostcolor(x3)\n    return O"], [1.0, "def solve_bce024de(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, fork, I)\n    x9 = branch(x7, uppermost, leftmost)\n    x10 = x9(x7)\n    x11 = x6(x10)\n    x12 = x6(x8)\n    x13 = hconnect(x11, x12)\n    x14 = vconnect(x13, x8)\n    x15 = intersection(x13, x14)\n    x16 = fork(either, vline, hline)\n    x17 = mfilter(x15, x16)\n    x18 = mostcolor(I)\n    x19 = fill(I, x18, x77)\n    O = underfill(x19, fill, x23)\n    return O"], [1.0, "def solve_230393c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(vline, x5, x10)\n    x12 = fork(hline, x11, x5)\n    x13 = fork(either, x12, x7)\n    x14 = rbind( specifically, UNITY)\n    x15 = rbind(sfilter, x13)\n    x16 = compose(x15, center)\n    x17 = compose(x141, x16)\n    x18 = apply(x17, x2)\n    x19 = fork(multiply, first, last)\n    x20 = apply(x19, x18)\n    x22 = argmax(x20, size)\n    x23 = rbind(sfilter, x15)\n    x24 = compose(x23, first)\n    x25 = rbind(matcher, x24)\n    x26 = compose(x25, last)\n    x27 = fork(intersection, x24, x26)\n    x28 = fork(recolor, color, x27)\n    x29 = mapply(x28, x24)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_141ee081(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(lowermost, x16)\n    x18 = order(x17, identity)\n    x19 = apply(uppermost, x16)\n    x20 = mpapply(recolor, x18, x19)\n    x21 = mapply(toindices, x18)\n    x22 = ofcolor(I, x14)\n    x23 = ofcolor(I, x14)\n    x24 = difference(x21, x22)\n    x25 = mapply(toindices, x24)\n    x26 = mapply(vfrontier, x21)\n    x27 = mapply(x26, x22)\n    x28 = fill(I, x14, x27)\n    x29 = difference(x23, x28)\n    O = fill(x28, x15, x29)\n    return O"], [1.0, "def solve_596c164d(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, colormfilter)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_e3441236(I):\n    x1 = frontiers(I)\n    x2 = mergeflg(I)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_33c0251e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_a82255ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(size, x1)\n    x3 = apply(color, x2)\n    x4 = sizefilter(x3, ONE)\n    x5 = merge(x4)\n    O = fill(I, FOUR, x5)\n    return O"], [1.0, "def solve_0ad2347a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = box(x1)\n    O = fill(I, x2, x3)\n    return O"], [1.0, "def solve_b87927a1(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_69909fb3(I):\n    x1 = objects(I, T, F, T)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_55e01e86(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(toobject, I)\n    x4 = compose(x3, delta)\n    x5 = rbind(colorcount, x1)\n    x6 = matcher(x5, TWO)\n    x7 = chain(x6, vmirror, dmirror)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(first, x8, toindices)\n    x10 = compose(x4, x9)\n    x11 = fork(subtract, x2, x10)\n    x12 = lbind(argmin, x5)\n    x13 = compose(x12, x11)\n    x14 = fork(hlast, x13, x12)\n    x15 = compose(last, x13)\n    x16 = fork(recolor, color, x14)\n    x17 = mapply(x16, x2)\n    x18 = paint(I, x17)\n    x19 = first(x15)\n    O = paint(x18, x19)\n    return O"], [1.0, "def solve_7da68a3e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(toindices, normalize)\n    x5 = lbind(index, I)\n    x6 = chain(x5, x4, x4)\n    x7 = matcher(x6, normalize)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = rbind(toobject, I)\n    x12 = compose(size, x11)\n    x13 = apply(x12, x10)\n    x14 = rbind(add, DOWN)\n    x15 = compose(x14, decrement)\n    x16 = apply(x15, x13)\n    x17 = rbind(argmax, x21)\n    x18 = remove(x17, x16)\n    x19 = lbind(gravitate, x17)\n    x20 = lbind(add, x19)\n    x21 = chain(toivec, x19, x20)\n    x22 = fork(shift, identity, x21)\n    x23 = compose(x12, x22)\n    x24 = normalize(x10)\n    x25 = lbind(downscale, x24)\n    x26 = lbind(compose, x12)\n    x27 = lbind(rbind, occurrences)\n    x28 = compose(x26, x27)\n    x29 = fork(mapply, x23, x28)\n    x30 = fork(recolor, FIVE, x29)\n    x31 = mapply(x30, x18)\n    x32 = paint(I, x31)\n    O = fill(x32, x1, x23)\n    return O"], [1.0, "def solve_5182d42e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_7c81f087(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONEFIVE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_531b6050(I):\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = rot90(I)\n    x4 = fgpartition(x3)\n    x5 = mapply(toindices, x4)\n    x6 = normalize(x5)\n    x7 = ulcorner(x2)\n    x8 = shift(x6, x7)\n    x9 = shape(x2)\n    x10 = maximum(x9)\n    x11 = minimum(x9)\n    x12 = subtract(x10, x11)\n    x13 = increment(x12)\n    x14 = power(normalize, x13)\n    x15 = mostcolor(I)\n    x16 = maximum(x10)\n    x17 = increment(x16)\n    x18 = toindices(x3)\n    x19 = x17(x18)\n    x20 = lbind(shift, x8)\n    x21 = mapply(x20, x19)\n    x22 = paint(I, x21)\n    x23 = objects(x22, T, F, T)\n    x24 = apply(uppermost, x23)\n    x25 = mapply(toindices, x24)\n    x26 = lbind(shift, x5)\n    x27 = mapply(x26, x25)\n    x28 = paint(x22, x27)\n    O = subgrid(x2, x28)\n    return O"], [1.0, "def solve_73b5a397(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16,42, mostcolor)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = box(x31)\n    O = fill(x10, x4, x32)\n    return O"], [1.0, "def solve_200147f8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = astuple(ONE, x17)\n    x19 = canvas(x6, x18)\n    x20 = rot90(x19)\n    x21 = rot180(x19)\n    x22 = shape(x2)\n    x23 = canvas(x6, x22)\n    x24 = transform(x21, x23)\n    x25 =box(x3)\n    O = fill(x28, x4, x25)\n    return O"], [1.0, "def solve_6c5ec21a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x3, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [1.0, "def solve_177c3383(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(size, x1)\n    x3 = apply(x2, I)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = lbind(mirror, x6)\n    x8 = argmin(x3, x7)\n    x9 = x5(x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_657820f9(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = mfilter(x3, vline)\n    x5 = toindices(x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, ONE, x5)\n    O = fill(x7, THREE, x6)\n    return O"], [1.0, "def solve_a7897222(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, ONE)\n    x23 = toindices(x5)\n    x24 = sfilter(x23, x22)\n    O = fill(x14, FOUR, x24)\n    return O"], [1.0, "def solve_1cc59f2b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(mer301, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [1.0, "def solve_5f23667b(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_76ed0e6c(I):\n    x1 = mostcolor(I)\n    x2 = fork( canvas, identity, normalize)\n    x3 = chain(outbox, merge, x2)\n    x4 = initset(x3)\n    x5 = objects(I, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = rightmost(x6)\n    x8 = leftmost(x6)\n    x9 = height(x6)\n    x10 = width(x6)\n    x11 = ONE(x9)\n    x12 = toivec(x11)\n    x13 = subtract(x10, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = rbind(multiply, x14)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x6)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_ed2dc050(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_18e1fdf3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, adjacent)\n    x21 = chain(x19, x20, x9)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_3cc88418(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(ineighbors, lrcorner, height)\n    x3 = fork(difference, toindices, x2)\n    x4 = fork(equality, size, x3)\n    x5 = sfilter(x1, x4)\n    x6 = chain(initset, opening74, corners)\n    x7 = fork(greater, x6, identity)\n    x8 = extract(x5, x7)\n    x9 = chain(positive, size, x8)\n    x10 = sfilter(x4, x9)\n    x11 = extract(x10, x8)\n    x12 = lbind(astuple, x11)\n    x13 = lbind(subtract, x2)\n    x14 = compose(x12, x13)\n    x15 = totuple(x11)\n    x16 = extract(x15, x14)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = lbind(multiply, x18)\n    x20 = chain(initset, x79, x19)\n    x21 = fork(insert, x15, x20)\n    x22 = neighbors(x21)\n    x23 = mapply(neighbors, x22)\n    x24 = mostcolor(I)\n    x25 = ofcolor(I, x24)\n    x26 = backdrop(x25)\n    O = fill(I, x24, x26)\n    return O"], [1.0, "def solve_7f5b2ad0(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 =rement(x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x5, x14)\n    return O"], [1.0, "def solve_ae1ac5f1(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x55 = intersection(x11, x14)\n    x56 = first(x55)\n    x57 = shape(x2)\n    x58 = canvas(x16, x57)\n    x59 = objects(x18, F, F, T)\n    x60 = rbind(other, x563)\n    x61 = compose(x60, palette)\n    x62 = fork(combine, vfrontier, hfrontier)\n    x63 = x62(x9)\n    x644 = x60(x3)\n    x65 = paint(x58, x63)\n    x66 = x60(x4)\n    x67 = paint(x25, x66)\n    O = branch(xeither, x71, x67)\n    return O"], [1.0, "def solve_d8f8fe0a(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x1, x4)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [1.0, "def solve_e2149056(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge4(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [1.0, "def solve_ab8b8bbc(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [1.0, "def solve_5b03785e(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = indexExample(I, x7)\n    x9 = fork(equality, identity, normalize)\n    x10 = toindices(x9)\n    x11 = chain(flip, x10, x7)\n    x12 = extract(x10, x11)\n    x13 = ofcolor(I, x12)\n    x14 = shift(x13,urcorner)\n    x15 = shift(x13, DOWN_LEFT)\n    x16 = paint(I, x15)\n    x17 = fill(x16, EIGHT, x14)\n    x18 = fill(x17, TWO, x15)\n    O = fill(x18, ONE, x16)\n    return O"], [1.0, "def solve_25adbdde(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_e897c253(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(center, x2)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = shift(x4, DOWN)\n    x7 = fill(x5, ONE, x6)\n    x8 = paint(x7, x4)\n    O = uppermost(x6)\n    return O"], [1.0, "def solve_c1ea0063(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_43bb70e9(I):\n    x1 = objects(I, F, T, T)\n    x2 = order(x1, size)\n    x3 = valmax(x1, numcolors)\n    x4 = rbind(canvas, x3)\n    x5 = apply(x4, x2)\n    x6 = merge(x5)\n    x7 = subgrid(x3, x6)\n    x8 = fork(insert, vmirror, identity)\n    x9 = compose(hmirror, v88identity)\n    x10 = fork(insert, cmirror, x9)\n    x11 = fork(shift, x7, x10)\n    x12 = compose(cmirror, x11)\n    x13 = compose(hmirror, x12)\n    x14 = fork(combine, x12, x13)\n    x15 = fork(recolor, x14, outbox)\n    x16 = mapply(x15, x12)\n    O = paint(x7, x16)\n    return O"], [1.0, "def solve_87607ab0(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(mfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = double(TEN)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = apply(double, x77)\n    x9 = interval(ZERO, x6, ONE)\n    x10 = apply(multiply, x9)\n    x11 = fill(I, FOUR, x8)\n    x12 = fill(x11, FOUR, x10)\n    O = fill(x12, FOUR, x15)\n    return O"], [1.0, "def solve_e8f7ba35(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = canvas(x6, DOWN)\n    x8 = apply(toindices, x4)\n    x9 = rbind(upscale, TWO)\n    x10 = mapply(x9, x8)\n    O = fill(x7, ONE, x10)\n    return O"], [1.0, "def solve_f6da6fce(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(palette, x25, x26)\n    x28 = compose(first, x25)\n    x29 = fork(x27, x28, x29)\n    x30 = chain(flip, x22, x27)\n    x31 = initset(x10)\n    x32 = insert(x6, x31)\n    x33 = backdrop(x32)\n    x34 = colorcount(x14, x33)\n    x35 = positive(x34)\n    x36 = branch(x35, x33, x30)\n    O = x13(x36)\n    return O"], [1.0, "def solve_92f0d263(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = compose(x9, palette)\n    x11 = height(I)\n    x12 = width(I)\n    x13 = ofcolor(x11, x4)\n    x14 = ofcolor(x12, x4)\n    x15 = astuple(x13, x14)\n    x16 = ulcorner(x1)\n    x17 = ulcorner(x14)\n    x18 = index(x16, x17)\n    x19 = index(x14, x18)\n    x20 = decrement(x19)\n    x21 = UNITY(x20)\n    x22 = branch(x18, x2200, x21)\n    x23 = branch(x19, x2000, x22)\n    x24 = ofcolor(x11, TWO)\n    x25 = portion(x24)\n    x26 = ofcolor(x11, ONE)\n    x27 =enteighbors(x26)\n    x28 = insert(x27, x27)\n    x29 = rbind(contained, x28)\n    x25 = rbind(subtract, x18)\n    x26 = chain(x29, x25, last)\n    x27 = apply(x26, x25)\n    x28 = sfilter(x27, x26)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = fill(x60, TWO, x30)\n    return O"], [1.0, "def solve_1ae23f03(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = normalize(x9)\n    x6 = backdrop(x5)\n    x7 = toindices(x6)\n    x8 = lbind(shift, x7)\n    x9 = compose(x8, ulcorner)\n    x10 = interval(TWO, mapply, ONE)\n    x11 = mapply(x9, x10)\n    x12 = shape(x9)\n    x13 = lbind(shift, x12)\n    x14 = manapply(x13, x11)\n    x15 = product(x11, x14)\n    x16 = astuple(x12, x10)\n    x17 = canvas(ZERO, x16)\n    x18 = paint(x17, x15)\n    x19 = rbind(shoot, x4)\n    x20 = apply(x19, x18)\n    x21 = mapply(x20, x16)\n    O = paint(x18, x21)\n    return O"], [1.0, "def solve_b0e47d09(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = outbox(x5)\n    x9 =da(x8,18, ZERO)\n    x10 = insert(x6, x9)\n    x11 = lrcorner(x5)\n    x12 = add(x11, x10)\n    x13 = hfrontier(x12)\n    x14 = tojvec(x12)\n    x15 = add(x14, x10)\n    x16 = tojvec(x12)\n    x17 = rbind(add, x16)\n    x18 = tojvec(x12)\n    x19 = rbind(add, x18)\n    x20 = cover(I, x9)\n    x21 =EIGHT(x17)\n    x22 = prapply(connect, x20, x21)\n    x23 = height(I)\n    x24 = rbind( Reachout, x23)\n    x25 = chain(size, x24, x22)\n    x26 = matcher(x25, x22)\n    x27 = fork(subtract, ORIGIN, x22)\n    x28 = fork(0000000, x27, x26)\n    x29 = fork(22, fork, x28)\n    x30 = pair(x10, x11)\n    x31 = sfilter(x30, x29)\n    x32 = apply(decrement, x31)\n    x33 = lbind(shift, x23)\n    x34 = mapply(x33, x32)\n    O = paint(x20, x34)\n    return O"], [1.0, "def solve_6e7bb482(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_939f3952(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(size, dedupe, first)\n    x5 = matcher(x4, ONE)\n    x6 = compose(first, cmirror)\n    x7 = chain(flip, x5, x6)\n    x8 =chain(x3, x7, x5)\n    x9 = x8(I)\n    x10 = x9(I)\n    x11 = trim(x10)\n    x12 = lefthalf(x11)\n    x13 = tophalf(x12)\n    x14 = branch(x5, x13, manhattan)\n    x15 = x14(x12)\n    x16 = x14(x5)\n    x17 = repeat(x15, x16)\n    x18 = x14(x17)\n    x19 = x14(x5)\n    x20 = cover(x12, x19)\n    x21 = fill(x20, THREE, x18)\n    x22 = dmirror(x21)\n    x23 = x14(x22)\n    x24 = dmirror(x23)\n    x25 = x14(x24)\n    x26 = x13(x25)\n    x27 = trim(x22)\n    x28 = asobject(x27)\n    x29 = shape(x28)\n    x30 = shift(x28, x29)\n    x31 = paint(x21, x30)\n    O = x8(x31)\n    return O"], [1.0, "def solve_bc447aea(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = sfilter(x2, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = last(x6)\n    x8 = ofcolor(I, x7)\n    x9 = colorfilter(x2, ZERO)\n    x10 = rbind(adjacent, x8)\n    x11 = mfilter(x9, x10)\n    x12 = makefilter(x11, x13)\n    x13 = rbind(manhattan, x5)\n    x14 = chain(even, x13, initset)\n    x15 = sfilter(x12, x14)\n    x16 = difference(x5, x15)\n    x17 = fill(I, x1, x15)\n    O = fill(x17, x7, x16)\n    return O"], [1.0, "def solve_e1b87fb5(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(initset, x4)\n    x6 = rbind(rapply, x2)\n    x7 = compose(initset, x5)\n    x8 = compose(x6, x7)\n    x9 = mfilter(x3, x8)\n    x10 = dmirror(x1)\n    x11 = cref(x10)\n    x12 = dmirror(x11)\n    x13 = ofcolor(x12, x1)\n    x14 = argmin(x13, x2)\n    x15 = cover(x1, x14)\n    x16 = rot90(x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x950)\n    x19 = x17(x27)\n    x20 = lefthalf(x16)\n    x21 = righthalf(x16)\n    x22 = ofcolor(x20, x1)\n    x23 = ofcolor(x21, x1)\n    x24 = combine(x22, x23)\n    x25 = intersection(x22, x24)\n    x26 = fill(x1500, FOUR, x25)\n    O = fill(x26, x1, x22)\n    return O"], [1.0, "def solve_a2f5f4e6(I):\n    x1 = uppermost(I)\n    x2 = leftmost(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [1.0, "def solve_84018c92(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x2 = shape(I)\n    x3 = canvas(x3, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(center, first)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = FOUR(x16)\n    return O"], [1.0, "def solve_e62b428e(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(flip, x4, dimcolors)\n    x6 = chain(ulcorner, x2, astuple)\n    x7 = fork(shift, x5, x6)\n    x8 = compose(ulcorner, x7)\n    x9 = fork(shift, x4, x8)\n    x10 = compose(ulcorner, x9)\n    x11 = fork(shift, x4, x10)\n    x12 = compose(2, x11)\n    x13 = fork(combine, x7, x12)\n    x14 = fork(intersection, x7, x13)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x1)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_4820e699(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = add(x5, x7)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = width(I)\n    x12 = halve(x11)\n    x13 = add(x12, x11)\n    x14 = height(I)\n    x15 = increment(x14)\n    x16 = width(I)\n    x17 = halve(x16)\n    x18 = add(x13, x17)\n    x19 = height(I)\n    x20 = increment(x19)\n    x21 = width(I)\n    x22 = halve(x21)\n    x23 = add(x22, x21)\n    x24 = tojvec(x8)\n    x25 = lrcorner(x2)\n    x26 = toivec(x28)\n    x27 = shift(x25, x26)\n    x28 = tojvec(x15)\n    x27 = vmirror(x23)\n    x28 = paint(I, x27)\n    x29 = shoot(x27, x28)\n    O = fill(x29, ONE, x29)\n    return O"], [1.0, "def solve_1915f6f4(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = chain(x28, x29, x25)\n    x31 = rbind(colorcount, x27)\n    x32 = inindices(x16)\n    x33 = matcher(first, x10)\n    x34 = toindices(x9)\n    x35 = sfilter(x32, x34)\n    x36 = fork(shift, x30, x35)\n    x37 = mapply(x36, x32)\n    O = paint(x17, x37)\n    return O"], [1.0, "def solve_50bb42f3(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = x7(x3)\n    x9 = lbind( rbind, shift)\n    x10 = apply(x9, x8)\n    x11 = lbind(compose, flip)\n    x12 = lbind(rbind, objects)\n    x13 = chain(x11, x10, x12)\n    x14 = lbind(lbind, mapply)\n    x15 = chain(x13, x14, mostcolor)\n    x16 = merge(x1)\n    x17 = fork(valmax, x15, x16)\n    x18 = compose(x17, x15)\n    x19 = fork(sfilter, x18, x15)\n    x20 = fork(multiply, x17, x19)\n    x21 = argmax(x10, x20)\n    x22 = x21(x2)\n    x23 = argmin(x2, x20)\n    x24 = urcorner(x2)\n    x25 = ulcorner(x2)\n    x26 = shoot(x44, NEG_UNITY)\n    x27 = shoot(x44, UNITY)\n    x28 = shoot(x27, DOWN_LEFT)\n    x29 = shoot(x275, UP_RIGHT)\n    x30 = shoot(x272,DOWN_LEFT)\n    x31 = combine(x26, x25)\n    x32 = mapply(x28, x31)\n    x33 = fill(I, x10, x32)\n    x34 = fill(x33, x11, x37)\n    O = fill(x34, x10, x3333)\n    return O"], [1.0, "def solve_5a057047(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_e25ba631(I):\n    x1 = palette(I)\n    x2 = contained(ONE, x1)\n    x3 = contained(TWO, x1)\n    x4 = branch(x2, UNITY, TWO_BY_TWbd)\n    x5 = branch(x3, RIGHT, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x8, FIVE, x7)\n    return O"], [1.0, "def solve_1bdc3418(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_68c1aa4f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16, hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [1.0, "def solve_2e3aa411(I):\n    x1 = I(I)\n    x2 = THREE(x1, TIX)\n    O = downscale(x2, TWO)\n    return O"], [1.0, "def solve_86b45b85(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(initset, minimum, shape)\n    x5 = fork(rapply, x4, identity)\n    x6 = compose(first, x5)\n    x7 = chain(asobject, first, x6)\n    x8 = fork(shift, x7, ulcorner)\n    x9 = mapply(x8, x1)\n    O = paint(x3, x9)\n    return O"], [1.0, "def solve_4d197deb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = fork(combine, hfrontier, vfrontier)\n    x5 = mapply(x4, x1)\n    x6 = merge(x1)\n    x7 = fill(I, x3, x5)\n    O = fill(x7, ZERO, x6)\n    return O"], [1.1, "def solve_60dfeb24(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = invert(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = astuple(x20, x22)\n    x24 = increment(x23)\n    x25 = interval(ZERO, x24, ONE)\n    x26 = width(x17)\n    x27 = halve(x26)\n    x28 = frontiers(x25)\n    x29 = color(x8)\n    x30 = ofcolor(I, x29)\n    x31 = ofcolor(I, x12)\n    x32 = equality(x26, x31)\n    x33 = intersection(x30, x32)\n    x34 = fill(I, x12, x33)\n    x35 =661\n    x28 = intersection(x34, x31)\n    x36 = lbind(fork, subtract)\n    x37 = rbind(x36, first)\n    x38 = lbind(rbind, run)\n    x39 = lbind(chain, first)\n    x40 = rbind(x39, x37)\n    x41 = initset(x40)\n    x42 = rbind(rapply, x41)"], [1.1, "def solve_78051e7d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(outbox, TWO)\n    x4 = initset(x3)\n    x5 = chain(outbox, fill, x4)\n    x6 = lbind(power, outbox)\n    x7 = apply(x6, x5)\n    x8 = lbind(rapply, x2)\n    x9 = fgpartition(I)\n    x10 = merge(x9)\n    x11 = cover(I, x10)\n    x12 = chain(x8, first, x11)\n    x13 = lbind(rapply, x12)\n    x14 = compose(x13, initset)\n    x15 = fork( cramine, x14, x124)\n    x16 = compose(x15, x13)\n    x17 = fork(multiply, x16, x12)\n    x18 = compose(x17, initset)\n    x19 = fork(both, x15, x18)\n    x20 = lbind(contained, x7)\n    x21 =26, x71)\n    x22 = lbind(apply, x20)\n    x23 = compose(x22, x19)\n    x24 = lbind(ofcolor, x10)\n    x25 = fork(sfilter, x23, x24)\n    x26 = lbind(mapply, x25)\n    x27 = compose(x26, x41)\n    x28 = fork(paint, identity, x27)\n    x29 = fork(443conly, x28, identity)\n    x30 = compose(decrement, width)\n    x31 = chain(most, x29, x30)\n    x32 = interval(ZERO, FIVE, ONE)\n    x31 = chain(x32, x31, x30)\n    x32 = lbind(power, outbox)\n    x33 = chain(ulcorner, x25, x309)\n    x34 = lbind(apply, x24)\n    x35 = chain(most, x334, x30)\n    x36 ="], [1.1, "def solve_466a59c1(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_00935525(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = x24(I)\n    x26 = width(x25)\n    x27 = Duefirst(x25)\n    x28 = tojvec(x27)\n    x29 = shift(x28, UNITY)\n    x30 = combine(x29, x28)\n    x31 = lbind(73apply, x30)\n    x32 = chain(first, x31, toindices)\n    x33 = fork(contained, x32, x24)\n    x34 = compose(normalize, x33)\n    x35 = astuple(x27, x26)\n    x36 = astuple(x28, x34)\n    x37 = combine(x35, x36)\n    x38 = fork(multiply, x33, x34)\n    x39"], [1.1, "def solve_b01d082f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 =55(x13)\n    x15 = color(x10)\n    x16 = color(x13)\n    x17 = subgrid(x9, I)\n    x18 = inbox(x15)\n    x19 = backdrop(x18)\n    x20 = subgrid(x19, I)\n    x21 = initset(x16)\n    x22 = matcher(first, x10)\n    x23 = sfilter(x21, x22)\n    x24 = fill(x20, x6, x23)\n    x25 = height(x24)\n    x26 = width(x24)\n    x27 = matcher(x5, x25)\n    x28 =519028(x24, x27)\n    x29 = divide(x28, x26)\n    x30 = downscale(x24, x29)\n    x31 = ofcolor(x30, x5)\n    x32 = outbox(x31)\n    x33 = toobject(x32, x30)\n    x34 = backdrop(x33)\n    x35 =36(x34, x102)\n    x36 = matcher(first, x10)\n    x37 = compose(flip, x36)\n    x38 = sfilter(x34, x37)\n    x39 = ofcolor(x25, x6)\n    x40 = backdrop(x39)\n    x41 = shift(x34,"], [1.1, "def solve_fc2186f8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(numcolors, x12, fgpartition)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = double(FIVE)\n    x18 = asindices(I)\n    x19 = fork(equality, identity, x18)\n    x20 = outbox(x19)\n    x21 = apply(x20, x16)\n    x22 = outbox(x21)\n    x23 = lbind(argmin, x20)\n    x24 = lbind(matcher, manhattan)\n    x25 = compose(x24, initset)\n    x26 = compose(x32, x25)\n    x27 = fork(minor, x26, identity)\n    x28 = maximum(x26)\n    x29 = compose(x27, last)\n    x30 = fork(either, x28, x29)\n    x31 = sfilter(x22, x30)\n    x32 = lbind(gravitate, x23)\n    x33 = compose(x32, initset)\n    x34 = fork(add, identity, x33)\n    x35 = fork(connect, x74, x34)\n    x60 = lbind(rbind, manhattan)\n    x61 = compose(x60, initset)\n    x62 = fork(extract, x35"], [1.1, "def solve_becd71e2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind( equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = maximum(x16)\n    x18 = x17(I)\n    x19 = width(I)\n    x20 = astuple(x19, x19)\n    x21 = leastcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = palette(I)\n    x24 = remove(x21, x23)\n    x25 = lbind(colorcount, I)\n    x26 = argmin(x24, x25)\n    x27 = other(x24, x26)\n    x28 = ofcolor(I, x27)\n    x29 = ofcolor(I, x of)\n    x30 =neighbors(ORIGIN)\n    x31 = mneighbors(ORIGIN)\n    x32 = insert(DOWN, x31)\n    x33 = lbind(multiply, x31)\n    x34 = apply(x33, x30)\n    x35 = rbind(shift, x34)\n    x36 = mapply(x35, x23)\n    x37 = fill(I, x27, x36)\n    x38 = palette(I)\n    x39 = remove(x37, x34)\n    x40 = lbind(chain, first)"], [1.1, "def solve_e9f24e15(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = toivec(x22)\n    x24 = shift(x2, x23)\n    x25 = branch(x17, hmirror, vmirror)\n    x26 = x25(x2)\n    x27 =\n    TWO = x25(x2)\n    x28 = equality(x27, ZERO)\n    x29 = branch(x18, identity, dmirror)\n    x30 = x29(x2)\n    x31 = equality(x30, x28)\n    x32 = shift(x25, x31)\n    x33 =8827(x32)\n    x34 = last(x22)\n    x35 = remove(x34, x22)\n    x36 =last(x35)\n    x37 = shift(x31, x36)\n    x38 = objects(x33, x24, x37)\n    x39 = paint(x36, x38)\n    x40 =\n    x41, first327)\n    x41"], [1.1, "def solve_3ec2fd97(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_23ea17f2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(lbind, manhattan)\n    x12 = lbind(lbind, greater)\n    x13 = compose(x12, x11)\n    x14 = lbind(compose, initset)\n    x15 = chain(x13, x14, x11)\n    x16 = lbind(argbind, manhattan)\n    x17 = compose(x16, initset)\n    x18 = fork(argmin, x15, x17)\n    x19 = fork(astuple, x18, minimum)\n    x20 = fork(add, x19, x71)\n    x21 =55halx(x10)\n    x22 = apply(x21, x4)\n    x23 = uppermost(x4)\n    x24 = leftmost(x4)\n    x25 = height(x4)\n    x26 = width(x4)\n    x27 = astuple(x25, x26)\n    x28 = increment(x27)\n    x29 = invert(x28)\n    x30 =44(x22, x9)\n    x31 = <-Levjust(x30)\n    x32 = rightmost(x4)\n    x33 = lbind(rbind, add)\n    x34 = uppermost(x4)\n    x35 = rightmost(x4)\n    x36 = astuple(x33, x35)\n    x37 = add(x36, DOWN)\n    x38 = initset(x37)\n    x39 = UP18333(x38)\n    x40 = RIGHT(x39)\n    x41 = fill(x6, x7, x40)\n    x42 = astuple(x31"], [1.1, "def solve_9069e71a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 =887( connect(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = astuple(hmirror, vmirror)\n    x4 = combine(x2, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = chain(lowermost, x7, x6)\n    x9 = chain(decrement, height, x6)\n    x10 = fork(equality, x8, x9)\n    x11 = extract(x4, x10)\n    x12 = x11(I)\n    x13 = ofcolor(x12, ZERO)\n    x14 = difference(x13, x2)\n    x15 = normalize(x14)\n    x16 = objects(x12, T, T, T)\n    x17 = colorfilter(x16, ZERO)\n    x18 = rbind(toobject, x12)\n    x19 = chain(first, x18, delta)\n    x20 = rbind(colorcount, SEVEN)\n    x21 = valmax(x17, x20)\n    x22 = rbind(colorcount, x122)\n    x23 = matcher(x22, x21)\n    x24 = chain(x13, x24, put)\n    x25 = rbind(4444, x12)\n    x26 = matcher(last, x1)\n    x27 = compose(lbind, x26)\n    x28 = fork(12, T, T, T)\n    x29 = lbind(fork, UNDERlly)\n    x30 = compose(x29, x27)\n    x31 = lbind(rbind, occurrences)\n    x32 = compose(x31, x25)\n    x33 = fork(x27, x30, x32)\n    x34 = compose(x17, x33)\n    x35 = rbind(ofcolor, TWO)\n    x36 = compose(x47, x35)\n    x37 = fork(mapply"], [1.1, "def solve_c68d7c0e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_7785905d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_03aa0c41(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, hmirror)\n    x8 = x7(x4)\n    x9 = hmirror(x8)\n    x10 = branch(x6, identity, vmirror)\n    x11 = x10(x9)\n    x12 = mostcolor(I)\n    x13 =75(x11)\n    x14 =755(x12, x13)\n    x15 = branch(x6, height, width)\n    x16 = x15(x14)\n    x17 = partition(x14)\n    x18 = matcher(color, x16)\n    x19 = sfilter(x17, x18)\n    x20 = merge(x19)\n    x21 = color(x20)\n    x22 = argmin(x12, ZERO)\n    x23 = apply(last, x12)\n    x24 = rbind(colorcount, x16)\n    x25 = valmax(x23, x24)\n    x26 = matcher(x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = last(x27)\n    x29 =45(x28)\n    x30 = palette(I)\n    x31 =\n    x32 = other(x30, x16)\n    x33 = palette(I)\n    x34 = colorfilter(x33, x16)\n    x35 = prapply(connect, x24, x28)\n    x36 = toindices(x34)\n    x37 = sfilter(x36, x31)\n    x38 = lbind(mapply, vfrontier)\n    x39 = lbind(mapply, x28)\n    x40 = chain(x38, x39, size)\n    x41 = fork(445, x40"], [1.1, "def solve_9f9cb2bc(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =409( exceedingighbors, TWO)\n    x3 = lbind(contained, TWO)\n    x4 = compose(flip, x3)\n    x5 = fork(both, x2, x4)\n    x6 = fgpartition(I)\n    x7 = compose(flip, even)\n    x8 = fork(both,0001, x7)\n    x9 = fork(both, x6, x8)\n    x10 = extract(x6, x9)\n    x11 = toindices(x10)\n    x12 = leftmost(x11)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = lbind(position, x10)\n    x16 = chain(x14, x15, x4)\n    x17 = leastcolor(I)\n    x18 = ofcolor(I, x17)\n    x19 = x16(x18)\n    x20 = power(x17, x19)\n    x21 = first(x16)\n    x22 = toindices(x21)\n    x23 = lbind(apply, x22)\n    x24 = lbind(recolor, x17)\n    x25 = rbind(compose, x21)\n    x26 = chain(x24, x25, x466)\n    x27 = lbind(remove, x10)\n    x28 = chain(x27, x26, x19)\n    x29 = chain(x23, x27, x28)\n    x30 = urcorner(x29)\n    x31 = matcher(first, x30)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x1, x32)\n    x34 = chain(x10,positive, size)\n    x35 = rbind(sfilter, x34)\n    x36 = chain(first, x35, x6)\n    x37 = chain(293, x36, dmirror)\n    x38 = x37(x33)\n    x39 = contained(x38, x"], [1.1, "def solve_cc83948e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = interval(ZERO, x17, ONE)\n    x21 =iscale(x19, x20)\n    x22 = canvas(ZERO, x21)\n    x23 = normalize(x8)\n    x24 = lbind(shift, x23)\n    x25 = compose(x42 blocbyte FG83)\n    x26 = paint(x22, x25)\n    x27 = rot90(x26)\n    x28 = paint(x27, x27)\n    x29 = rot90(x28)\n    x30 = paint(x29, x27)\n    x31 = rot90(x30)\n    x32 = shape(x28)\n    x33 =(x32, x32)\n    x34 = rbind(multiply, x33)\n    x35 = apply(x34, x15)\n    x36 = lbind(shift, x23)\n    x37 = shift(x35, x36)\n    x38 = apply(x36, x19)\n    x39 = apply(x37, x38)\n    x40 = both(x39, x51)\n    x41 = flip(x40)\n    "], [1.1, "def solve_902558aa(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = totuple(x2)\n    x4 = apply(color, x3)\n    x5 = lbind(sfilter, x4)\n    x6 = lbind(matcher, identity)\n    x7 = chain(size, x5, x6)\n    x8 = argmax(x4, x7)\n    x9 = matcher(identity, x8)\n    x10 = sfilter(x4, x9)\n    x11 = compose(hmirror, vmirror)\n    x12 = size(x10)\n    x13 = increment(x12)\n    x14 = interval(TWO, x13,ONE)\n    x15 = apply(vmirror, x14)\n    x16 = astuple(recolor, x8)\n    x17 = lbind(canvas, NEG_ONE)\n    x18 = compose(x17, fgpartition)\n    x19 = chain(x18, merge, x8)\n    x20 = F15(x15)\n    x21 = vsplit(x20, TWO)\n    x22 = apply(x19, x21)\n    x23 = urcorner(x11)\n    x24 = insert(x23, x22)\n    x25 = index(x24, ORIGIN)\n    x26 =242IX(x22)\n    x27 = worthless chain(toindices, ulcorner, last)\n    x28 = shoot(x26, UP_RIGHT)\n    x29 = shoot(x25, DOWN_LEFT)\n    x30 = pair(x28, x29)\n    x31 = interval(x27, x30, ONE)\n    x32 = combine(x28, x31)\n    x33 = fork(multiply, identity, last)\n    x34 = fork(multiply, first, last)\n    x35 = lbind(canvas, NEG_ONE)\n    x356 = lbind(41026, x33)\n    x37 = lbind(compose, x34)\n    x38 = lbind(r"], [1.1, "def solve_c4460776(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = remove(x2, x1)\n    x5 = lbind(recolor, TWO)\n    x6 = rbind(ofcolor, x3)\n    x7 = chain(x5, x6, delta)\n    x8 = fork(paint, identity, x7)\n    x9 = apply(x8, x4)\n    x10 = order(x9, leftmost)\n    x11 = compose(last, last)\n    x12 = lbind(occurrences, x9)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(first, x11)\n    x15 = fork(valmax, x14, x13)\n    x16 = chain(ulcorner, x11, x9)\n    x17 = fork(shift, x16, x15)\n    x18 = compose(last, x17)\n    x19 = compose(363, x18)\n    x20 = fork(36indices, x19, x15)\n    x21 =IGHT(x10)\n    x22 = apply(x21, x18)\n    x23 = shift(x20, x22)\n    x24 = ofcolor(x23, x3)\n    x25 = mapply(x18, x24)\n    1842225328328215\n    1182283281582525\n    1282222382815824\n    \"\"\"\n    x1 = height(x25)\n    x2 = vsplit(x25, x1)\n    x3 = compose(asobject, x5)\n    x4 =236(x2, x3)\n    x5 = mapply(x4, x2)\n    x6 = width(x25)\n    x7 = hsplit(x25, x6)\n    x8 =287(x7)\n    x9 = asobject(x8)\n    x10 = hperiod(x9)\n    x11 = increment(x10)\n    x12 = width(x27)\n    x13 = apply(x11,"], [1.1, "def solve_56137078(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = fill(I, x6, x8)\n    x10 = SEVEN(x4)\n    x11 = apply(x4, x10)\n    x12 = initset(x5)\n    x13 = insert(x12, x11)\n    x14 = difference(x2, x13)\n    x15 = toobject(x14, I)\n    x16 = color(x12)\n    x17 = color(x11)\n    x18 = rbind(contained, x16)\n    x19 = compose(x18, color)\n    x20 = rbind(sfilter, x19)\n    x21 = compose(x20, asindices)\n    x22 = x21(x22)\n    x23 =807Z(I)\n    x24 = shift(x33, x23)\n    x25 =107fOUR(x24)\n    x26 = gravitate(x25, x22)\n    x27 = recolor(x12, x26)\n    x28 = shift(x22, x27)\n    x29 = combine(x27, x28)\n    x30 = toindices(x29)\n    x31 =rbind(60 contained, x13)\n    x32 = compose(x21, last)\n    x33 = rbind(remove, x last)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(x32, initset)\n    x36 = fork(argmin, x35, x34)\n    x37 = fork(astuple, x36, x28)\n    x38 = height(x22)\n    x39 = power(x37, x38)\n    x40 = x299(x39)\n"], [1.1, "def solve_1d9718fa(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = colorfilter(x1, ONE)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x10)\n    x12 = subgrid(x11, I)\n    x13 = argmax(x12, x5)\n    x14 = asindices(x13)\n    x15 = outbox(x13)\n    x16 = ulcorner(x15)\n    x17 = lbind(contained, ZERO)\n    x18 = lbind(index, ZERO)\n    x19 = chain(x17, x18, ulcorner)\n    x20 = initset(x16)\n    x21 = insert(x16, x20)\n    x22 = sfilter(x21, x19)\n    x23 = toindices(x14)\n    x24 = crop(x14, ORIGIN, x23)\n    x25 = inbox(x14)\n    x26 = cover(x24, x25)\n    x27 = subgrid(x25, x27)\n    x28 = asobject(x28)\n    x29 = matcher(first, ZERO)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = partition(x62)\n    x33 = fork(multiply, height, width)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = difference(x31, x35)\n    x37 = merge(x36)\n    x38 = color(x37)\n    x39 = lbind(contained, ZERO)\n    x40 = compose(fl"], [1.1, "def solve_06a920b5(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 =argmin(x4, size)\n    x6 = positive(x5)\n    x7 = branch(x6, hsplit, vsplit)\n    x8 = x7(I, TWO)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = normalize(x9)\n    x12 = normalize(x10)\n    x13 = ulcorner(x2)\n    x14 = divide(x13, FOUR)\n    x15 = height(x11)\n    x16 = width(x11)\n    x17 = equality(x14, x16)\n    x18 = fill(x22, rbind, ZERO)\n    x19 = branch(x6, merge, x18)\n    x20 = branch(x6,720, x19)\n    x21 = branch(x6,27, x20)\n    x22 = branch(x6, fill, x21)\n    x23 =293apply(x19, x4)\n    x24 = ofcolor(x20, FIVE)\n    x25 = rbind(contained, x24)\n    x26 = compose(x25, last)\n    x27 = sfilter(x23, x26)\n    x28 = width(x72)\n    x29 = normalize(x27)\n    x30 = multiply(x28, FOUR)\n    x31 = add(x30, x27)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = apply(x23, x33)\n    x35 = rbind(add, x37)\n    x36 =39369add, ZERO, x35)\n    x37 =808(x36, x2)\n    x38 = sfilter(x34, x37)\n    x39 = lbind(shift, x30)\n    x40 = mapply(x39, x38"], [1.1, "def solve_c2edab6a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = dmirror(I)\n    x2 = equality(x1, I)\n    x3 = connect(ORIGIN, UNITY)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = height(I)\n    x7 = vsplit(I, x6)\n    x8 = insert(TWO, x7)\n    x9 = lbind(recolor, ZERO)\n    x10 = rbind(ofcolor, TWO)\n    x11 = chain(x9, x10, partition)\n    x12 = compose(x11, size)\n    x13 = chain(double, height, x12)\n    x14 = power(x13, FOUR)\n    x15 = x14(x8)\n    x16 = difference(x15, x5)\n    x17 = fill(I, ZERO, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = rbind(ofcolor, TWO)\n    x20 = chain(x18, x19, outbox)\n    x21 = fork(combine, x17, x20)\n    x22 = x21(x6)\n    x23 = partition(x22)\n    x24 = difference(x23, x5)\n    x25 =recolor(x22, TWO)\n    x26 = colorfilter(x24, TWO)\n    x27 = compose(x25, x26)\n    x28 = argmin(x26, x27)\n    x29 = remove(x28, x26)\n    x30 = other(x29, x28)\n    x31 = x30(x22)\n    x32 = difference(x01, x31)\n    x33 = ofcolor(x32, TWO)\n    x34 = normalize(x28)\n    x35 = apply(first, x34)\n    x36 = astuple(x32, x35)\n    x37 = shift(x34, x36)\n    x38 = fork( difference, identity, identity)\n    x39 = x38(x37)\n    x40 = cover"], [1.1, "def solve_baee3ef5(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_cd6407ef(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =40(I)\n    x3 =44(I)\n    x4 = lefthalf(x3)\n    x5 = righthalf(x3)\n    x6 = Tphalf(x4)\n    x7 = width(x6)\n    x8 = tojvec(x7)\n    x9 = index(x6, x8)\n    x10 = double(x7)\n    x11 = double(x10)\n    x12 = connect(x9, x11)\n    x13 = centerofmass(x12)\n    x14 = add(x13, xbbc9connect)\n    x15 = shift(x12, x14)\n    x16 = other(x1, x15)\n    x17 = palette(I)\n    x18 = compose(flip, x17)\n    x19 = rbind(ofcolor, x18)\n    x20 = normalize(x15)\n    x21 = compose(x19, x20)\n    x22 = matcher(x21, x16)\n    x23 =flip(x22, x18)\n    x24 = sfilter(x20, x23)\n    x25 = lbind(colorcount, x24)\n    x26 = argmin(x22, x25)\n    x27 = toindices(x26)\n    x28 = matcher(first, x1)\n    x29 = x28(x110)\n    x30 = sfilter(x27, x29)\n    x31 = normalize(x26)\n    x32 = toindices(x31)\n    x33 = matcher(first, x1)\n    x34 = sfilter(x32, x33)\n    x35 = normalize(x27)\n    x36 = centerofmass(x35)\n    x37 = subtract(x36, x31)\n    x38 = shift(x31, x37)\n    x39 = ofcolor(x33, x1)\n    x40 = recolor(x26, x39)\n    5511 = ofcolor(x33, x1)\n    x106 = recol"], [1.1, "def solve_b9aa8d26(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = fork(equality, identity, leastcolor)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = index(x6, DOWN)\n    x8 = subgrid(x3, I)\n    x9 = lefthalf(x8)\n    x10 = tophalf(x9)\n    x11 = branch(x7, x9, x10)\n    x12 = branch(x7, x8, x11)\n    x13 =192a82576(x12)\n    x14 = palette(x13)\n    x15 = UNITY(x14)\n    x16 = ulcorner(x3)\n    x17 = other(x14, x16)\n    x18 = center(x3)\n    x19 = shift(x15, x18)\n    x20 =a699446(x7, x19)\n    x21 = other(x14, x16)\n    x22 = difference(x5, x21)\n    x23 = cover(x6, x22)\n    x24 = leastcolor(x23)\n    x25 = remove(x24, x23)\n    x26 = ofcolor(x25, x24)\n    x27 = initset(x16)\n    x28 = insert(x11, x27)\n    x29 = insert(x24, x28)\n    x30 = subgrid(x29, x25)\n    x31 = ofcolor(x30, x24)\n    x32 = recolor(x24, x31)\n    x33 = prapply(connect, x32, x26)\n    x34 = mfilter(x43, vline)\n    x35 = mfilter(x43, hline)\n    x36 = fork(either, x34, x35)\n    x37 =either(x35, x36)\n    x38 = underfill(x30, x24, x37)\n    x39 = box(x3)"], [1.1, "def solve_6878cbbf(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valineighor(ONE)\n    x3 = matcher(double, x2)\n    x4 = fork(equality, toindices, backdrop)\n    x5 = compose(flip, x3)\n    x6 = extract(x1, x5)\n    x7 = x4(x6)\n    x8 = color(x6)\n    x9 = fill(I, x8, x7)\n    x10 = initset(x77)\n    x11 = lrcorner(x6)\n    x12 = insert(x11, x10)\n    x13 = rbind(0000, x12)\n    x14 = extract(x12, x13)\n    x15 = toindices(x14)\n    x16 = incrementf642181(x15)\n    x17 = lrcorner(x16)\n    x18 = insert(x17, x15)\n    x19 = multiply(x16, x18)\n    x20 = tojvec(x19)\n    x21 = initset(x20)\n    x22 = lbind(extract, x21)\n    x23 = lbind(matcher, firstO)\n    x24 = compose(x23, x22)\n    x25 = chain(positive, size, x24)\n    x26 = compose(dmirror, x22)\n    x27 = mostcommon(x26)\n    x28 = chain(positive, size, x27)\n    x29 = height(x6)\n    x30 = toivec(x29)\n    x31 = rbind(multiply, x30)\n    x32 = tojvec(x28)\n    x33 = rbind(multiply, x32)\n    x34 = rbind(intersection, x15)\n    x35 = compose(size, x34)\n    x36 = chain(x31, x33, x35)\n    x37 = rbind(shift, x196)\n    x38 = fork(connect, x36, x37)\n    x39 = matcher(x38, x22)\n    x40 = flip"], [1.1, "def solve_aab85f30(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_cb787344(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = compose(maximum, shape)\n    x4 = index(I, x3)\n    x5 = box(x2)\n    x6 = intersection(x5, x2)\n    x7 = uppermost(x6)\n    x8 = uppermost(x2)\n    x9 = rightmost(x6)\n    x10 = leftmost(x2)\n    x11 = astuple(x4, x5)\n    x12 = minimum(x11)\n    x13 = maximum(x11)\n    x14 = astuple(x9, x13)\n    x15 = astuple(x11, x14)\n    x16 = minimum(x15)\n    x17 = maximum(x11)\n    x18 = astuple(xj, x14)\n    x19 = astuple(x17, x18)\n    x20 = combine(x17, x19)\n    x21 = astuple(x6, x16)\n    x22 = repeat(x20, ONE)\n    x23 = rbind(repeat, x22)\n    x24 = compose(x23, tojvec)\n    x25 = extract(x20, x24)\n    x26 =2007(x25)\n    x27 = apply(x26, x24)\n    x28 = rbind(subgrid, I)\n    x29 = apply(x28, x27)\n    x30 =\n     shape(x29)\n    x31 = palette(x30)\n    x32 = lbind(colorfilter, x27)\n    x33 = rbind(sfilter, x32)\n    x34 = lbind(palette, x026)\n    x35 = chain(toindices, x34, x28)\n    x36 = x35(x126)\n    x37 = x35(x fork)\n    x38 = x35(x36)\n    x39 = fill(I, x74, x38)\n    x40 = dmirror(x39)\n    x41 = rbind(equality, x40)\n    x42 = chain("], [1.1, "def solve_e6f88d8d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = I(I590)\n    x6 = urcorner(x1)\n    x7 = shoot(x6, NEG_UNITY)\n    x8 = lrcorner(x1)\n    x9 = rbind(shoot, x8)\n    x10 = other(x7, x9)\n    x11 = subgrid(x10, I)\n    x12 = objects(x11, F, T, T)\n    x13 = rbind(colorcount, x4)\n    x14 = argmax(x12, x13)\n    x15 = subgrid(x14, x11)\n    x16 = height(x15)\n    x17 = subgrid(x14, x11)\n    x18 = vmirror(x17)\n    x19 = replace(x18, x4, x5)\n    x20 = subgrid(x19, x15)\n    x21 = maximum(x20)\n    x22 = increment(x21)\n    x23 = interval(ONE, x22, ONE)\n    x24 = lbind(contained, x5)\n    x25 = chain(first, x24, palette)\n    x26 = lbind(multiply, x25)\n    x27 = apply(x26, x23)\n    x28 = asindices(x5)\n    x29 = center(x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = compose(83, first)\n    x33 = rbind(42000, x32)\n    x34 = shift(x22, UNITY)\n    x35 = apply(x33, x34)\n    x36 = palette(x35)\n    x37 = lbind(mapply, x frontiers)\n    x38 = lbind(ofcolor, x35)\n    x39 = chain(x37, x38, x29)\n    x40 = fork(recolor, x"], [1.1, "def solve_c6e938e9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(vsplit, hsplit)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = x6(I)\n    x8 = chain(palette, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = order(x12, uppermost)\n    x14 = first(x13)\n    x15 = last(x13)\n    x16 = color(x4)\n    x17 = color(x15)\n    x18 = equality(x16, x17)\n    x19 = combine(x14, x18)\n    x20 = underfill(x11, x16, x19)\n    x21 = objects(x20, T, F, T)\n    x22 = compose(lrcorner, palette)\n    x23 = argmin(x21, x22)\n    x24 = add(x23, DOWN)\n    x25 = shoot(x24, UNITY)\n    x26 = shoot(x25, UP_RIGHT)\n    x27 = shoot(x26, RIGHT)\n    x28 = combine(x25, x27)\n    x29 = outbox(x28)\n    x30 = sfilter(x29, x22)\n    x31 = difference(x30, x22)\n    x32 = first(x31)\n    x33 = x16(x32)\n    x34 = interval(ZERO, NINE, FZERO)\n    x35 = canvas(ZERO, x34)\n    x36 = asobject(x35)\n    x37 = lbind(shift, x36)\n    x38 = height(I)\n    x39 = lbind(multiply, x38)\n    x40 ="], [1.1, "def solve_818ba710(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 =urity(x9)\n    x11 = initset(x10)\n    x12 = insert(x8, x11)\n    x13 = first(x12)\n    x14 = vsplit(x13, TWO)\n    x15 = insert(x4, x14)\n    x16 = vmirror(x15)\n    x17 = ofcolor(x16, x6)\n    x18 = subgrid(x17, x13)\n    x19 = argmin(x18, first)\n    x20 = vmirror(x19)\n    x21 = insert(x16, x19)\n    x22 = objects(x16, T, F, T)\n    x23 = colorfilter(x22, x6)\n    x24 = rbind(adjacent, x13)\n    x25 = rbind( neighboringordering, x25)\n    x26 = chain(x24, x25, x25)\n    x27 = fork(0001 neighbors, x26, identity)\n    x28 = astuple(NEG_TWO, NEG_TWO)\n    x29 = rbind(multiply, x28)\n    x30 = apply(x29, x23)\n    x31 = rbind(branch, x6)\n    x32 = rbind(colorcount, x4)\n    x33 = chain(x31, x32, decrement)\n    x34 = matcher(x33, x19)\n    x35 = fork(both, x34, x29)\n    x36 = extract(x30, x35)\n    x37 = ofcolor(x16, x6)\n    x38 =    44004(x36, x37)\n    "], [1.1, "def solve_494bef04(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(compose, last)\n    x3 = lbind(rbind, contained)\n    x4 = chain(x2, x3, box)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(color, x5)\n    x7 = fork(other, palette, x6)\n    x8 = chain(decrement, decrement, height)\n    x9 = chain(decrement, decrement, width)\n    x10 = compose(toivec, x8)\n    x11 = fork(multiply, toindices, x10)\n    x12 = chain(toivec, invert, x8)\n    x13 = fork(shift, x7, x12)\n    x14 =combine(x11, x13)\n    x15 = fork(insert, identity, ulcorner)\n    x16 = compose(backdrop, x15)\n    x17 = mapply(x16, x14)\n    x18 = size(x17)\n    x19 = positive(x18)\n    x20 = branch(x19, identity, hperiod)\n    x21 = branch(x19, identity, vperiod)\n    x22 = x20(I)\n    x23 = multiply(DOWN, DOWN)\n    x24 = decrement(x23)\n    x25 = height(x22)\n    x26 = astuple(x25, x24)\n    x27 = crop(x22, ORIGIN, x26)\n    x28 =66(x27)\n    x29 = compose(asplit, x27)\n    x30 =11(x22)\n    x31 = apply(x29, x30)\n    x32 = asobject(x31)\n    x33 = matcher(first, x8)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = lbind(shift, x28)\n    x37 = mapply(x36, x35)\n    x38 = paint(x22, x37)\n    x39 ="], [1.1, "def solve_ef298902(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    I = canvas(x4, TWO_BY_TWO)\n    x5 = palette(x3)\n    x6 =Recent(x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x10, x7)\n    x9 = palette(I)\n    x10 = remove(x8, x9)\n    x11 = combine(x10, x7)\n    x12 = rbind(colorcount, x8)\n    x13 = argmax(x11, x12)\n    x14 = lowermost(x13)\n    x15 = matcher(first, x8)\n    x16 = sfilter(x13, x15)\n    x17 = uppermost(x16)\n    x18 = subtract(x14, x17)\n    x19 = matcher(first, x8)\n    x20 = sfilter(x16, x19)\n    x21 = combine(x18, x20)\n    x22 = rbind(greater, x21)\n    x23 = compose(x22, invert)\n    x24 = sfilter(x16, x23)\n    x25 = objects(x24, T, F, T)\n    x26 = rbind(shift, x4)\n    x27 = objects(x25, T, F, T)\n    x28 = compose(x26, ulcorner)\n    x29 = fork(connect, x27, x28)\n    x30 = mapply(x29, x24)\n    x31 = lefthalf(x30)\n    x32 = righthalf(x30)\n    x33 = vmirror(x32)\n    x34 = objects(x33, T, F, T)\n    x35 = merge(x34)\n    x36 =corners(x35)\n    x37 = flip(x36)\n    x38 = x30(x37)\n    x39 = paint(x"], [1.1, "def solve_154e4569(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(size, x3, x8)\n    x10 =topcolor(I)\n    x11 = frontiers(I)\n    x12 = objects(I, T, T, T)\n    x13 = merge(x12)\n    x14 = color115(x13)\n    x15 = subgrid(x13, I)\n    x16 = x15(x15)\n    x17 = x177(x16)\n    x18 = trim(x17)\n    x19 = mostcolor(x18)\n    x20 = palette(x18)\n    x21 = remove(x19, x20)\n    x22 = lbind(colorcount, x17)\n    x23 = argmin(x21, x22)\n    x24 = ofcolor(x16, x23)\n    x25 = ofcolor(x18, x23)\n    x26 = combine(x24, x25)\n    x27 = intersection(x27, x26)\n    x28 = mapply(neighbors, x27)\n    x29 = apply(toindices, x28)\n    x30 = ofcolor(x16, x23)\n    x31 =499t66(x30)\n    x32 = combine(x31, x28)\n    x33 = x17(aten)\n    x34 = x29(I)\n    x35 =6943334(I)\n    x36 =3366(414,44)\n    x37 = initset(x36)\n    x38 = insert(x33, x37)\n    x39 = product(x32, x38)\n    x40 = power(first, x39)\n    x41 = first(x40)\n"], [1.1, "def solve_0127036b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO_BY_TWO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = combine(x3, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = replace(x10, ONE, TWO)\n    x12 = lbind(contained, TWO_BY_ZERO)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x1, x13)\n    x15 = dmirror(x14)\n    x16 = lbind(distance, UP)\n    x17 = chain(x16, decrement, canvas)\n    x18 = fork(greater, identity, x17)\n    x19 = chain(min,187, x18)\n    x20 = lbind(greater, ONE)\n    x21 = compose(minimum, shape)\n    x22 = chain(x20, x21, x19)\n    x23 = lbind(apply, x21)\n    x24 = chain(x33, x11, x24)\n    x25 = lbind(remove, ZERO)\n    x26 = compose(last, last)\n    x27 = compose(first, last)\n    x28 = chain(x25, x26, x27)\n    x29 = compose(x28, x4)\n    x30 = fork(add, x29, x11)\n    x31 = fork(add, x30, x14)\n    x32 = fork(add, x31, x19)\n    x33 = fork(add, x32, x15)\n    x34 = fork(add, x33, x20)\n    x35 = fork(add, x34, x20)\n    x36 = fork(add, x35, x29)\n    x37 = fork(add, x35, x736)\n    "], [1.1, "def solve_3a7b921a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_2a1e93b5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(sfilter, x3)\n    x13 = chain(asobject, x12, x11)\n    x14 = corners(x3)\n    x15 = ofcolor(I, ZERO)\n    x16 = difference(x15, x15)\n    x17 = TEN(x16)\n    x18 = astuple(x17, x13)\n    x19 = rbind(5715, x18)\n    x20 =917(x19)\n    x21 = argmax(x15, x20)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = ofcolor(I, x25)\n    x27 = last(x26)\n    x28 = ofcolor(I, x25)\n    x29 = first(x28)\n    x30 = shape(I)\n    x31 = rbind(Let oIGHT, x30)\n    x32 = initset(x29)\n    x33 = cover(I, x32)\n    x34 =mapply(x31, x26)\n    x35 =O = fill(x339, x25, x34)\n    x36 = ofcolor(x35, x25)\n    x37 = dmirror(x35)\n    x38 = astuple(x36, x37)\n    x39 = leftmost(x36)\n    x40"], [1.1, "def solve_906691fd(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(lbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, x15)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x3 = fork(compose, x27, x28)\n    x4 = compose(x26, x29)\n    x5 = compose(x00, cmirror)\n    x6 = fork(compose, x4, x15)\n    x7 = compose(x56, x3)\n    x8 = fork(Copyright, x17, x6)\n    x9 = compose(x8, palette)\n    x"], [1.1, "def solve_da95af86(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = sfilter(x16, x27)\n    x29 = combine(x800, x28)\n    x30 = apply(initset, x29)\n    x31 = rbind(difference, x31)\n    x32 = apply(x31, x30)\n    x33 = argmax(x32, x32)\n    x34 = outbox(x33)\n    x35 = toobject(x34, x13)\n    x36 = matcher(first, x10)\n    x37 = sfilter(x241, x36)\n    x38 = size(x37)"], [1.1, "def solve_d19442f6(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, identity)\n    x2 = astuple(corner, rot90)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot270)\n    x5 = astuple(x4, x1)\n    x6 = combineinex3, x5)\n    x7 = rbind(rapply, I)\n    x8 = chain(first, x7, initset)\n    x9 = rbind(ofcolor, EIGHT)\n    x10 = chain(lowermost, x9, x8)\n    x11 = matcher(x10, ZERO)\n    x12 = extract(x6, x11)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = x13(I)\n    x16 = x13(I)\n    x17 = ofcolor(x15, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = intersection(x19, x16)\n    x21 = first(x20)\n    x22 = Applied453(x21, x17)\n    x23 = pair(x19, x23)\n    x24 = lrcorner(x6)\n    x25 = rbind(subtract, x24)\n    x26 = chain(first, x25, divide)\n    x27 = apply(x26, x21)\n    x28 = last(x21)\n    x29 = rbind(multiply, TEN)\n    x30 = chain(x26, x29, width)\n    x31 = apply(x30, x27)\n    x32 = historicalmax(x31, ONE)\n    x33 = rbind(add, x24)\n    x34 = chain(flip, x33, last)\n    x35 = interval(x32, x34, ONE)\n    x36 = lbind(shift, x14)\n    x37 = mapply(x36, x35)\n    x38 = paint(x15, x37)\n    O = x20(x38)\n    "], [1.1, "def solve_a8dccad1(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = leastcolor(I)\n    x5 = rbind(repeat, THREE)\n    x6 = rbind(rapply, I)\n    x7 = chain(x10, x5, x6)\n    x8 = chain(hline, merge, x7)\n    x9 = astuple(identity, cmirror)\n    x10 = astuple(hmirror, vmirror)\n    x11 = combine(x9, x10)\n    x12 = rbind(toobject, I)\n    x13 = chain(palette, x12, merge)\n    x14 = lbind(chain, flip)\n    x15 = rbind(x14, x13)\n    x16 = lbind(matcher, x15)\n    x17 = rbind(rapply, I)\n    x18 = chain(first, x17, x16)\n    x19 = compose(x15, x18)\n    x20 = extract(x3, x19)\n    x21 = x20(I)\n    x22 = palette(I)\n    x23 = other(x22, x4)\n    x24 = objects(x21, T, T, T)\n    x25 = matcher(color, x34)\n    x26 = extract(x24, x25)\n    x27 = other(x26, x4)\n    x28 =163(x21)\n    x29 = outbox(x28)\n    x30 = cover(x21, x29)\n    x31 = outbox(x30)\n    x32 = palette(x31)\n    x33 = other(x32, x4)\n    x34 = ofcolor(x35, x33)\n    x35 = ofcolor(x35, x10)\n    x36 = intersection(x34, x35)\n    x37 = size(x36)\n    x38 =31013(x35)\n    x39 = outbox(x38)\n    x40 = fill(x"], [1.1, "def solve_1f4b5663(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained,144, lrcorner)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x6)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = normalize(x4)\n    x24 = paint(x22, x23)\n    x25 = normalize(x7)\n    x26 = width(x6)\n    x27 = subtract(x19, x26)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = normalize(x3)\n    x32 = height(x10)\n    x33 = subtract(x16, x32)\n    x34 = toivec(x33)\n    x35 = shift(x31, x34)\n    x36 = paint(x30, x35)\n    x37 = normalize(x13)\n    x38 = shape(x13)\n    x39 = subtract(x20, x38)\n    x40 = shift(x37, x39)\n    O = paint(x36, x40)\n"], [1.1, "def solve_9e5eb9f0(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(shift, x12)\n    x26 = double(x25)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = objects(x30, T, F, T)\n    x32 = colorfilter(x31, FIVE)\n    x33 = urcorner(x35)\n    x34 = valmax(x32, ZERO)\n    x35 = rbind(toobject, x34)\n    x36 = rbind(colorcount, FIVE)\n    x37 = chain(x36, x35, x30)\n    x38 = apply(mostcommon, x32)\n    "], [1.1, "def solve_1a5a6fcc(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = branch(x1, identity, rot97)\n    x5 = branch(x1, hmirror, vmirror)\n    x6 = x2(I)\n    x7 = ulcorner(x6)\n    x8 = index(x6, x7)\n    x9 = subgrid(x5, x6)\n    x10 = repeat(x9, ONE)\n    x11 = x17(x10)\n    x12 = x7(x11)\n    x13 = partition(x6)\n    x14 = compose(color, rot90)\n    x15 = difference(x13, x14)\n    x16 = astuple(x11, x12)\n    x17 = rbind(colorcount, x16)\n    x18 = matcher(x17, TWO)\n    x19 =204\n    \"\"\"\n    x1 = astuple(x21, x13)\n    x2 = extract(x15, x18)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = x3(x4)\n    x6 = x17(x5)\n    x7 = frontiers(x3)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x38 = first(x17)\n    x39 = asindices(x35)\n    x40 = shift(x39, UNITY)\n    x41 = ulcorner(x45)\n    x42 = rightmost(x45)\n    x43 = add(x41, x42)\n    x44"], [1.1, "def solve_e88000a1(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = frontiers(I)\n    x6 = sfilter(x5, hline)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = x9(I)\n    x11 = backdrop(x10)\n    x12 = width(x11)\n    x13 = hsplit(x11, x12)\n    x14 = leftmost(x13)\n    x15 = width(x10)\n    x16 = interval(x14, x15, TWO)\n    x17 = rbind(contained, x16)\n    x18 = compose(x17, last)\n    x19 = sfilter(x15, x18)\n    x20 = increment(x19)\n    x21 = width(x10)\n    x22 = interval(ZERO, x21, FOUR)\n    x23 = lbind(compose, x8)\n    x24 =12x23(x12)\n    x25 = compose(x21, first)\n    x26 = lbind(compose, x10)\n    x27 =12x126, x26)\n    x28 = lbind(ef135, x44)\n    x29 = ofcolor(x10, x4)\n    x30 = ofcolor(x12, x4)\n    x31 = intersection(x29, x30)\n    x32 = compose(size, first)\n    x33 = apply(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x6, x35)\n    x37 = increment(x36)\n    x38 = canvas(x4, x37)\n    x39 = lbind( compleree179, x38)\n    x40 = lbind(rbind, add)\n    x41 = chain(x39, x40, last)\n"], [1.1, "def solve_31c1256f(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = crop(x3, ORIGIN, THREE_BY_THREE)\n    x5 = color(x4)\n    x6 = TWO(UNITY, THREE)\n    x7 = dmirror(x5)\n    x8 = asindices(x7)\n    x9 =\ufffd leveragingastuple(x6)\n    x10 = lbind(shift, x8)\n    x11 = mapply(x10, x9)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = pair(x14, x14)\n    x16 = apply(x100, x15)\n    x17 = mapply(x10, x16)\n    x18 = lbind(adjacent, x5)\n    x19 = remove(x18, x15)\n    x20 =794453(x19)\n    x21 = lbind(shift, x20)\n    x22 = mapply(x21, x1999)\n    x23 = combine(x21, x22)\n    x24 = fill(x12,two, x23)\n    x25 = asobject(x24)\n    x26 = height(x25)\n    x27 = increment(x26)\n    x28 = apply(last, x25)\n    x29 = remove(recolor, x28)\n    x30 = product(x29, x29)\n    x31 =992--------------------box(x28)\n    x32 = apply(first, x31)\n    x33 = lbind(other, x30)\n    x34 = compose(x33, palette)\n    x35 = apply(x34, x32)\n    x36 = pair(x32, x35)\n    x37 =452(x36, x33)\n    x38 = combine(x29, x37)\n    x39 = mpapply(recolor, x38, x37)\n    O = paint(x11, x39)\n    "], [1.1, "def solve_041f402b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, color)\n    x12 = sfilter(x1, x11)\n    x13 = argmax(x12, size)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x4, x15)\n    x17 = repeat(x16, ONE)\n    x18 =c9097(d89419)\n    x19 = matcher(first, x5)\n    x20 = compose(flip, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = asobject(x22)\n    x24 = colorizefilter(x1, x4)\n    x25 =86408ment(x24)\n    x26 = difference(x1, x25)\n    x27 = ofcolor(I, x4)\n    x28 = mapply(neighbors, x27)\n    x29 = difference(x28, x27)\n    x30 = colorfilter(x26, x4)\n    x31 =88indices(x30)\n    x32 = apply(first, x31)\n    x33 = rbind(intersection, x32)\n    x34 = chain(size, x33, outbox)\n    x35 = matcher(x34, ZERO)\n    x36 = objects(I, T, F, T)\n    x37 =filter(x36, x35)\n    x38 = difference(x63, x37)\n    x39 =chain(size, x35, x8000)\n    x40 = matcher(x"], [1.1, "def solve_18e18469(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = last(x5)\n    x7 = subgrid(x6, I)\n    x8 = last(x7)\n    x9 = height(x8)\n    x10 = halve(x9)\n    x11 = matcher(last, x10)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x4, x12)\n    x14 = sfilter(x8, x12)\n    x15 = size(x13)\n    x16 = mostcolor(x14)\n    x17 = canvas(x16, x15)\n    x18 = linecount(x17, x13)\n    x19 = counts(x44, x18)\n    x20 = sizefilter(x19, ONE)\n    x21 = fork(add, height, width)\n    x22 = compose(last, x21)\n    x23 = argmin(x20, x22)\n    x24 = x23(x42)\n    x25 = normalize(x24)\n    x26 = color(x23)\n    x27 = palette(x25)\n    x28 = remove(x26, x27)\n    x29 = other(x28, x12)\n    x30 = objects(x28, T, T, F)\n    x31 = colorfilter(x30, x29)\n    x32 = ofcolor(x27, x31)\n    x33 = x25(x32)\n    x34 = ofcolor(x27, x22)\n    x35 = rbind(contained, x34)\n    x36 = compose(x35, last)\n    x37 = sfilter(x66, x36)\n    x38 = center(x37)\n    x39 = rbind(subtract, x38)\n    x40 = chain(toindices, x39, last)\n    x41 = fork(add, first, x"], [1.1, "def solve_87e1bddf(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recol ofcolor(I, x14)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, I)\n    x19 = identity(x18)\n    x20 = matcher(first, x14)\n    x21 = x20(x19)\n    x22 = normalize(x21)\n    x23 = toindices(x22)\n    x24 = apply(initset, x23)\n    x25 = lbind(argmin, x24)\n    x26 = lbind(rbind, manhattan)\n    x27 = rbind(compose, initset)\n    x28 = chain(x26, x27, initset)\n    x29 = chain(argmin, x25, x28)\n    x30 = fork(astuple, x26, x29)\n    x31 = apply(x30, x15)\n    x32 = normalize(x23)\n    x33 = lbind(toindices, x33)\n    x34 = chain(x32, x33, initset)\n    x35 = apply(x34, x31)\n    x36 = difference(x31, x35)\n    x37 = toobject(x36, I)\n    x38 = height(x37)\n    x39 = positive(x38)\n    x40 ="], [1.1, "def solve_de481340(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_212f3b45(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = difference(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, width, height)\n    x9 = Swiss500\n    x10 =9305\"\"\"\n    x11 = ofcolor(I, x3)\n    x12 = subgrid(x11, I)\n    x13 = inbox(x13)\n    x14 = subgrid(x13, I)\n    x15 = argmin(x1111, x14)\n    x16 = ofcolor(x15, x3)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, height, width)\n    x20 = x19(x15)\n    x21 = matcher(first, x20)\n    x22 = difference(x16, x18)\n    x23 = delta(x22)\n    x24, x21)\n    x25 = argmin(x23, x24)\n    x26 = objects(x12, T, F, F)\n    x27 = colorfilter(x26, x12)\n    x28 = rbind(adjacent, x15)\n    x29 =787(x28)\n    x30 = sfilter(x27, x28)\n    x31 = outbox(x30)\n    x32 = lrcorner(x39)\n    x33 = fork(subtract, height, width)\n    x34 = compose(x33, initset)\n    x35 = rbind(contained, x31)\n    x36 = compose(x35, x34)\n    x37 = sfilter(x32, x36)\n    x38 =arters85(x37)\n    x39ae400(x38)\n    x40 =36(x39)\n    x41 = fgpartition(x40)\n    x42 = merge(x41)\n    "], [1.1, "def solve_4e7a085f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(height, FOUR)\n    x3 = fork(subtract, height, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, size)\n    x7 = color(x6)\n    x8 = remove(rbind, x1)\n    x9 = compose(last, last)\n    x10 = power(x9, TWO)\n    x11 = fork(connect, x8, x10)\n    x12 = initset(x7)\n    x13 = lbind(insert, x12)\n    x14 = lbind(\u4e0a m110, x13)\n    x15 = compose(x14, x11)\n    x16 = fork(apply, x15, x10)\n    x17 =99(SIX)\n    x18 = palette(I)\n    x19 = lbind(colorcount, I)\n    x20 = compose(x19, first)\n    x21 = argmin(x18, x20)\n    x22 = rbind(colorcount, x21)\n    x23 = argmin(x1, x22)\n    x24 = x23(401 ofLEFT)\n    x25 = x23(I)\n    x26 = x23(I)\n    x27 = first(x25)\n    x28 = last(x25)\n    x29 = subgrid(x27, I)\n    x30 =88599268222\n    \"\"\"\n    x31 =870(x29)\n    x32 = rbind(positive, x31)\n    x33 = rbind(toobject, x I)\n    x34 = rbind(colorcount, x133)\n    x35 = chain(x33, x34, urcorner)\n    x36 = matcher(x35, x22)\n    x37 = sfilter(x24, x36)\n    x38 = argmax(x37, x35)\n    x39 = x28(x38)\n    x40 = replace(I, x22, x83)\n    x41"], [1.1, "def solve_9def3bc8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = other(x6, x5)\n    x8 = remove(x4, x6)\n    x9 = other(x8, x7)\n    x10 =iningindices(x4)\n    x11 = ofcolor(x1, x9)\n    x12 = ofcolor(x1, x10)\n    x13 = ulcorner(x11)\n    x14 = ulcorner(x12)\n    x15 = subgrid(x4, x1)\n    x16 = subgrid(x9, x1)\n    x17 =920(x15, x14)\n    x18 = mapply(x16, x11)\n    x19 = sizefilter(x18, ONE)\n    x20 = height(x11)\n    x11 = halve(x20)\n    x12 = increment(x11)\n    x13 = width(x11)\n    x14 = rbind(multiply, x12)\n    x15 = apply(x14, x19)\n    x16 = mapply(x16, x15)\n    x17 = palette(x16)\n    x18 = other(x17, x9)\n    x19 = ofcolor(x1, x18)\n    x20 = asindices(x1)\n    x21 = ofcolor(x1, x10)\n    x22 = rbind(multiply, x20)\n    x23 = apply(x22, x21)\n    x24 = maximum(x23)\n    x25 =480(x128)\n    x25 = asindices(x2)\n    x26 = ofcolor(x1, x25)\n    x27 = asindices(x2)\n    x28 = center(x27)\n    x29 = initset(x28)\n    x30 = manhattan(x29, x26"], [1.1, "def solve_85eccf70(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = sfilter(x5, x4)\n    x11 = extract(x10, x4)\n    x12 = color(x11)\n    x13 =6(center(x11)\n    x14 = pair(x12, x13)\n    x15 = cover(I, x11)\n    x16 = fill(x15, x12, x14)\n    x17 = fill(x16, x12, x15)\n    x18 = shape(I)\n    x19 = maximum(x18)\n    x20 = halve(x19)\n    x21 = add(TWO, x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = pair(x22, x14)\n    x24 = remove(x16, x23)\n    x25 = mapply(tojvec, x24)\n    x26 = index(I, x25)\n    x27 = equality(x26, x24)\n    x28 = astuple(x27, x27)\n    x29 = canvas(x16, x28)\n    x30 = fill(x29, x16, x25)\n    x31 = fill(x30, x16, x25)\n    x32 = rot90(x31)\n    x33 = crop(x32, initset, x27)\n    x34 = rot90(x33)\n    x35 = sfilter(x34, x33)\n    x36 = rot180(x35)\n    x37 = hconcat(x maximum, xl)\n    x38 = hconcat(x37, x36)\n    x39 = rot270(x38)\n    x40 = paint("], [1.1, "def solve_e675fd0b(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = sfilter(x1, vline)\n    x5 = size(x4)\n    x6 = greater(x3, x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(first, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = mostcolor(x10)\n    x19 = lbind(recolor, x18)\n    x20 = rbind(sfilter, x15)\n    x21 = compose(toindices, x20)\n    x22 = fork(combine, x21, outbox)\n    x23 = compose(x19, x22)\n    x24 = fork(combine, x17, x23)\n    x25 = shape(x10)\n    x26 = add(TWO, x25)\n    x27 = canvas(x18, x26)\n    x28 = asobject(x10)\n    x29 = shift(x28, UNITY)\n    x30 = paint(x27, x29)\n    x31 = rbind(shift, NEG_UNITY)\n    x32 = lbind(occurrences, x30)\n    x33 = compose(x31, x32)\n    x34 = compose(x33, x24)\n    x35 = chain(positive, size, x34)\n    x36 = sfilter(x12, x35)\n    x37 = chain(first, x33, x24)\n    x38 = compose(ulcorner, x24)\n    x39 = fork(subtract, x37, x38)\n"], [1.1, "def solve_05677cc4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(matcher, x30)\n    x32 = normalize(x29)\n    x33 = matcher(first, x50)\n    x34 = sfilter(x31, x33)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x26, x36)\n    x38 = invert(x35)\n    x39 = shift(xman, x38)\n    x40 = apply(x39, x73)\n    x41 =)\n    x42 ="], [1.1, "def solve_937093d1(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = apply(x2, x1)\n    x4 = numcolors(x3)\n    x5 = palette(I)\n    x6 = equality(x4, x5)\n    x7 =filter(x3, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = branch(x4, x7, x9)\n    x11 = x10(I)\n    x12 = palette(I)\n    x13 = remove(x11, x12)\n    x14 = lbind(ofcolor, x11)\n    x15 = argmin(x13, x14)\n    x16 = ofcolor(x11, x15)\n    x17 = subgrid(x16, x11)\n    x18 = leftmost(x16)\n    x19 = rightmost(x16)\n    x20 = ofcolor(x11, x18)\n    x21 = leftmost(x16)\n    x22 = interval(x29, x21, ONE)\n    x23 = palette(x11)\n    x24 = rbind(order, x20)\n    x25 = lbind(apply, x24)\n    x26 = lbind(lbind, shift)\n    x27 = compose(x25, x26)\n    x28 = lbind(rbind, intersection)\n    x29 = compose(x28, toindices)\n    x30 = compose(x37, x27)\n    x31 = fork(compose, x27, x30)\n    x32 = lbind(contained, x11)\n    x33 = compose(x32, palette)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = rbind(sfilter, x35)\n    x37 = compose(x36, ulcorner)\n    x38 = rbind(compose, vmirror)\n    x39 = extract(x38, x37)\n    x40 =x11(x39)\n"], [1.1, "def solve_ab05f7b2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = I(x4)\n    x6 = argmax(x5, x2)\n    x7 = difference(x5, x6)\n    x8 = merge(x7)\n    x9 = color(x8)\n    x10 = fill(I, x9, x7)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = initset(x13)\n    x16 = objects(x11, T, F, T)\n    x17 = color(x16)\n    x18 = shift(x12,UNITY)\n    x19 = sizefilter(x17, ONE)\n    x20 = apply(initset, x19)\n    x21 = remove(x16, x20)\n    x22 = lbind(argmin, x21)\n    x23 = lbind( potrapply, x22)\n    x24 =288223912(x00000000)\n    x25 =27942(x24)\n    x26 = palette(x12)\n    x27 = lbind(rbind, x22)\n    x28 = argmin(x26, x27)\n    x29 = shape(x12)\n    x30 = canvas(x8, x29)\n    x31 = lbind(multiply, x30)\n    x32 = chain(x31, width, height)\n    x33 = fork(recolor, x2, x32)\n    x34 = mapply(x33, x29)\n    x35 = merge(x29)\n    x36 = cover(x10, x35)\n    x37 = paint(x36, x34)\n    O = paint(x37, x34)\n    return O"], [1.1, "def solve_a73d1a99(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = contained(ONE, x1)\n    x3 = height(x2)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = equality(x3, x6)\n    x8 = astuple( TWO, x7)\n    x9 = shape(x2)\n    x10 = canvas(ZERO, x9)\n    x11 = hconcat(x10, x8)\n    x12 = initset(ZERO)\n    x13 = insert(UNITY, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(hmirror, x14)\n    x16 = insert(vmirror, x15)\n    x17 = shape(I)\n    x18 = add(TWO, x17)\n    x19 = canvas(ZERO, x18)\n    x20 = asobject(I)\n    x21 = shift(x20, UNITY)\n    x22 = paint(x19, x21)\n    x23 = interval(ONE, FIVE, ONE)\n    x24 = pair(x23, x23)\n    x25 = mapply(ine fill, x24, ZERO)\n    O = paint(x22, x25)\n    return O"], [1.1, "def solve_3692dec6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, first)\n    x13 = fork(contained, x12, x8)\n    x14 = compose(toindices, x13)\n    x15 = fork(52 x14, x5, x23)\n    x16 = fork(add, x17, x15)\n    x17 = shape(x10)\n    x18 = add(x17, THREE_BY_THREE)\n    x19 = crop(I, ORIGIN, x18)\n    x20 =59mirror(x19)\n    x21 = crop(I, x20, x4)\n    x22 = replace(x21, x1, x15)\n    x23 = combine(x20, x22)\n    x24 =252(x23)\n    x25 = dmirror(x24)\n    x26 = box(x25)\n    x27 = fill(x23, x1, x26)\n    x28 = subgrid(x25, x27)\n    x29 = objects(x28, T, F, T)\n    x30 = compose(toindices, x28)\n    x31 = fork(mapply, x30, x29)\n    x32 = mapply(x31, x29)\n    O = fill(x27, x1, x32)\n    return O"], [1.1, "def solve_0cf4df30(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = compose(color, dmirror)\n    x3 = x2(I)\n    x4 = palette(x3)\n    x5 = merge(x4)\n    x6 = color(x3)\n    x7 = rbind(toobject, x3)\n    x8 = compose(x7, dmirror)\n    x9 = x8(x3)\n    x10 = partition(x9)\n    x11 =colorfilter(x10, x6)\n    x12 = argmin(x11, uppermost)\n    x13 = other(x11, x12)\n    x14 = value(x13, x12)\n    x15 = remove(x128, x1)\n    x16 = remove(x12, x15)\n    x17 =389(x16)\n    x18 = interval(TWO, FIVE, ONE)\n    x19 = rbind(apply, x18)\n    x20 = lbind(lbind, shift)\n    x21 = rbind(compose, to product)\n    x22 = compose(x21, x17)\n    x23 = lbind(lbind, mapply)\n    x24 = rbind(chain, x79)\n    x25 = rbind(x24, x22)\n    x26 = lbind(rbind, occurrences)\n    x27 = compose(x25, x26)\n    x28 = lbind(recolor, x6)\n    x29 = compose(x28, x27)\n    x30 = fork(combine, x28, x29)\n    x31 = compose(x20, x30)\n    x32 = fork(paint, identity, x31)\n    x33 = power(x32, TWO)\n    x34 = first(x9)\n    x35 = x33(x34)\n    x36 = normalize(x38)\n    x37 = shift(x36, UNITY)\n    O = paint(x35, x37)\n    return O"], [1.1, "def solve_19f0aec4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = extract(x16, x17)\n    x19 = remove(x18, x16)\n    x20 = merge(x19)\n    x21 = chain(as, x18, palette)\n    x22 = lbind(mapply, replace)\n    x23 = compose(x22, x21)\n    x24 = rbind(ofcolor, x20)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, identity, x25)\n    x25 = x26(x20)\n    x26 = asindices(x25)\n    x27 = corners(x26)\n    x28 = toobject(x27, I)\n    x29 = normalize(x28)\n    x30 = matcher(first, x20)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x29, x31)\n    x33 = normalize(x27)\n    x34 = shape(x22)\n    x35 = multiply(x34, x32)\n    x36 = shift(x33, x35)\n    O = paint(I, x36)\n    return O"], [1.1, "def solve_34f6bf9d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =03344(I)\n    x2 = fork(subtract, first, last)\n    x3 = compose(even, x2)\n    x4 = sfilter(x1, x3)\n    x5 = difference(x1, x4)\n    x6 = connect(x4, x5)\n    x7 = compose(first, last)\n    x8 = fork(subtract, x7, last)\n    x9 = fork(astuple, x6, x8)\n    x10 = connect(x6, x9)\n    x11 = compose(last, x10)\n    x12 = extract(x4, x11)\n    x13 =1963(x12)\n    x14 = backdrop(x13)\n    x15 = product(x14, x4)\n    x16 = last(x15)\n    x17 = remove(x16, x15)\n    x18 = compose(first, last)\n    x19 = compose(x18, first)\n    x20 = last(x19)\n    x21 = fork(recolor, x18, x20)\n    x22 = mapply(x21, x17)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_38729cff(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = shape(x27)\n    x30 = multiply(DOWNscale, x29)\n    x31 = shift(x27, x30)\n    x32 = paint(x27, x31)\n    x33 = rot90(x12)\n    x34 =0001(x33)\n    x35 = rot180(x12)\n    x36 =0001(x35)\n    x37 = rot270(x12)\n    x38 =0001(x37)\n    x39 = paint(x36, x38)\n    O = x26(x39)\n    return O"], [1.1, "def solve_c3aae8a8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = ONE\n    35\n    35\n    86\n    85\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [1.1, "def solve_24fafafa(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = height(x3)\n    x5 = halve(x4)\n    x6 = ofcolor(I, x5)\n    x7 = width(x3)\n    x8 = halve(x7)\n    x9 = tojvec(x8)\n    x10 = height(x3)\n    x11 = decrement(x10)\n    x12 = lbind(astuple, x11)\n    x13 =00000000(x12, x8)\n    x14 = shape(I)\n    x15 = canvas(x13, x14)\n    x16 = normalize(x3)\n    x17 = lbind(shift, x16)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = tojvec(x22)\n    x24 = height(x23)\n    x25 = decrement(x24)\n    x26 = increment(x25)\n    x27 = width(x17)\n    x28 = halve(x27)\n    x29 = tojvec(x28)\n    x30 = shape(x2)\n    x31 = decrement(x30)\n    x32 = height(xreval)\n    x33 = halve(x32)\n    x34 = toivec(x33)\n    x35 = invert(x34)\n    x36 = tojvec(x25)\n    x37 = shift(x19, x35)\n    x38 = shift(x29, x36)\n    x39 = paint(x15, x27)\n    O = paint(x39, x38)\n    return O"], [1.1, "def solve_0bca8da5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 =379(x3)\n    O = vmirror(x4)\n    return O"], [1.1, "def solve_d9cf2336(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = hperiod(invert)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = interval(ZERO, x5, ONE)\n    x7 = apply(double, x6)\n    x8 = astuple(x4, x2)\n    x9 = lbind(multiply, x8)\n    x10 = apply(x9, x7)\n    x11 = initset(x5)\n    x12 = insert(x5, x11)\n    x13 = insert(x2, x12)\n    x14 = toobject(x13, I)\n    x15 =5005005500000005514)\n    x16 =500500550670769561\n    x17 = center(x16)\n    x18 = replace(I, x4, FIVE)\n    x19 = branch(x18, x17, x15)\n    x20 = branch(x18, x18, x15)\n    x21 = x19(I)\n    x22 = x20(I)\n    x23 = order(x21, uppermost)\n    x24 = first(x23)\n    x25 = remove(x24, x23)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = ofcolor(x19, x4)\n    x29 = ofcolor(x22, x4)\n    x30 = initset(x\"\"\"\n    x31 = cover(x18, x27)\n    x32 = fill(x31, EIGHT, x28)\n    x33 = shift(x37, x32)\n    O = fill(x32, x4, x33)\n    return O"], [1.1, "def solve_89397c55(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(c59eb873(I)\n    x3 = sfilter(x1, x2)\n    x4 = difference(x1, x3)\n    x5 = merge(x3)\n    x6 = color(x5)\n    x7 = index(I, x5)\n    x8 = subgrid(x3, I)\n    x9 = shape(x8)\n    x10 = increment(x9)\n    x11 = canvas(x6, x10)\n    x12 = hconcat(x8, x11)\n    x13 = hconcat(x12, x8)\n    x14 = vconcat(x13, x13)\n    x15 = vconcat(x14, x13)\n    x16 = ofcolor(x15, x6)\n    x17 =88\"\"\"\n    x18 = INSetoccurrences(x17, x16)\n    x19 = mostcolor(x18)\n    O = fill(I, x19, x16)\n    return O"], [1.1, "def solve_ff1800ee(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind,bordering)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 =444(x4)\n    x6 = neighbors(ORIGIN)\n    x7 =6666(neighbors)\n    x8 = shape(I)\n    x9 = hsplit(I, x8)\n    x10 = rbind(ofcolor, ZERO)\n    x11 =mapply(x10, x9)\n    O = fill(x11, FOUR, x11)\n    return O"], [1.1, "def solve_8a017a98(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 =000000(x3)\n    x5 = toobject(x4, I)\n    x6 = difference(x1, x5)\n    x07 =2dc883fOUR, Frontmost)\n    x18 =8838fner(x7)\n    x19 = shoot(x18, UNITY)\n    x20 = color(x3)\n    x21 = urcorner(x7)\n    x22 = shoot(x21, NEG_UNITY)\n    x23 = combine(x19, x22)\n    x24 =\n    \"\"\"\n    x25 =72(x4)\n    x26 = combine(x23, x24)\n    x27 = fill(I, x4, x26)\n    x28 = x3(x27)\n    x29 = astuple(NEG_TWO, ONE)\n    x30 = shift(x28, x29)\n    x31 = rbind(ange888, x30)\n    x32 = inindices(x31)\n    x33 = recolor(x5, x32)\n    x34 = normalize(x33)\n    x35 = lbind(shift, x34)\n    x36 = height(x35)\n    x37 = lbind(multiply, x36)\n    x38 = toindices(x35)\n    x39 = chain(x37, x38, initset)\n    x40 = lbind(intersection, x40)\n    x41 = chain(size, x40, x39)\n    x42 = compose(x41, x39)\n    x43 = argmax(x41, x42)\n    x44 = difference(x000000, x43)\n    O = cover(x27, x44)\n    return O"], [1.1, "def solve_db532560(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = lbind(rbind, T)\n    x3 = lbind(extract, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = fork(subtract,max, minimum)\n    x7 = fork(68bordering, x5, x6)\n    x8 = compose(dmirror, x7)\n    x9 = fork(both, x7, x8)\n    x10 = sfilter(x1, x5)\n    x11 = merge(x10)\n    x12 = add(UNITY, x11)\n    x13 = tojvec(x12)\n    x14 = compose(vmirror, x13)\n    x15 = fork(recolor, x14, x11)\n    x16 = mapply(x15, x10)\n    O = paint(I, x16)\n    return O"], [1.1, "def solve_d0eba244(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = product(x2, x1)\n    x4 = fork(equality, first, last)\n    x5 = compose(flip, x4)\n    x6 = lbind( sfilter, x3)\n    x7 = rbind(compose, ine2)\n    x8 = lbind(lbind, shift)\n    x9 = chain(x7, x8, x6)\n    x10 = fork(intersection, neighbors F first, x9)\n    x11 = compose(size, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = toindices(x2)\n    x14 = toindices(x2)\n    x15 = T toindices(x2)\n    x16 =_55555555555555555\n    x17 =51506(x halve, TEN)\n    x18 = fork(shift, identity, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = compose(flip, x19)\n    x21 = extract(x3, x20)\n    x22 = x21(x2)\n    x23 = x21(x2)\n    x24 = ulcorner(x2)\n    x25 = ulcorner(x2)\n    x26 = urcorner(x2)\n    x27 = ulcorner(x2)\n    x28 = shoot(x27, x24)\n    x29 = shoot(x23, x25)\n    x30 = combine(x28, x29)\n    x31 = cover(I, x30)\n    O = chain(initset, x17, x22)\n    return O"], [1.1, "def solve_41bd32a9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =236(I,TEN)\n    x2 = lbind(apply, urcorner)\n    x3 = chain(x2, NEG_ONE, shape)\n    x4 = fork(recolor, x3, hconcat)\n    x5 = objects(x4, T, F, T)\n    x6 = mapply(toindices, x5)\n    x7 = box(x6)\n    x8 = difference(x7, x6)\n    x9 = mostcolor(I)\n    x10 = fill(I, x9, x8)\n    x11 =4473(x6)\n    x12 =44indices(x6)\n    x13 = corners(x6)\n    x14 = combine(x12, x13)\n    x15 = difference(x1, x14)\n    x16 = apply(x4, x15)\n    x17 = mapply(toindices, x16)\n    x18 =495(x17)\n    x19 =495(x16)\n    x20 =476(x18, vline)\n    x21 =47(x20)\n    x22 = branch(x21, x14, x19)\n    x23 = apply(50, x22)\n    x24 = SIX(x23, ONE)\n    x25 =1993(x24, x227)\n    O = fill(x10, EIGHT, x25)\n    return O"], [1.1, "def solve_10a145a8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = x8(x7)\n    x10 = matcher(first, x6)\n    x11 = sfilter(x9, x10)\n    x12 = difference(x9, x11)\n    x13 = color11(x12)\n    x14 = color(x3)\n    x15 = rbind(toobject, x6)\n    x16 = rbind(colorcount, x14)\n    x17 = chain(x16, ineighbors, last)\n    x18 = matcher(x17, x13)\n    x19 = sfilter(x11, x18)\n    x20 = matcher(first, x6)\n    x21 = fork(both, x19, x20)\n    x22 = sfilter(x11, x21)\n    x23 = merge(x22)\n    x24 =\n    x25 = x23(x22)\n    x25 =combine(x24, x22)\n    x26 = subgrid(x25, x5)\n    O = replace(x26, x4, x52)\n    return O"], [1.1, "def solve_52f19277(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = fork(recolor, color, backdrop)\n    x5 = apply(x4, x1)\n    x6 = mfilter(x5, hline)\n    x7 = mfilter(x5, vline)\n    x8 = size(x6)\n    x9 = size(x7)\n    x10 = greater(x8, x9)\n    x11 = branch(x10, tophalf, lefthalf)\n    x12 = branch(x10, bottomhalf, righthalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, x60)\n    x17 = palette(x14)\n    x18 = other(x17, x60)\n    x19 = shape(x13)\n    x20 = canvas(x16, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolorx14)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [1.1, "def solve_6084bb35(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = shape(I)\n    x8 = canvas(x3, x7)\n    x9 = hconcat(x6, x8)\n    x10 = objects(x9, F, T, T)\n    x11 = argmin(x10, numcolors)\n    x12 = mostcolor(x11)\n    x13 = normalize(x11)\n    x74 = objects(x6, T, F, T)\n    x75 = rbind(remove, x64)\n    x76 = toindices(x5)\n    x77 = lrcorner(x6)\n    x\n    x78 = fill(x9, x3, x77)\n    x29 = height(x11)\n    x30 = decrement(x92)\n    x31 = toivec(x30)\n    x32 =158(x75, x31)\n    x33 = ofcolor(x825, x1)\n    x34 = fill(x32, x3, x33)\n    x35 = shift(x7, x34)\n    x36 = sfilter(x15, x35)\n    x37 = mapply(toindices, x36)\n    x38 = fill(x17, x1, x37)\n    x39 = xrbind(contained, x18)\n    x20 = sfilter(x45, x39)\n    x21 = mapply(toindices, x20)\n    O = fill(x38, x3, x21)\n    return O"], [1.1, "def solve_ae6632e3(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = ONE\n    x2 = difference(x1, x2)\n    x3 = rbind(toobject, I)\n    x4 = rbind(colorcount, TWO)\n    x5 = chain(x4, x3, dneighbors)\n    x6 = matcher(x5, ONE)\n    x7 = chain(flip, x6, last)\n    x8 = sfilter(x2, x7)\n    x9 = sfilter(x3, x8)\n    x10 = fill(I, TWO, x9)\n    x11 =\n     x1 = objects(x10, T, F, T)\n    x12 = apply(ulcorner, x8)\n    x13 = normalize(x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x12)\n    x16 = paint(x10, x15)\n    O = cellwise(x16, x3, hmirror)\n    return O"], [1.1, "def solve_d7913cf1(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 =479(I)\n    x2 =\"\"\"\n    x3 = lbind(pair, I)\n    x4 = chain(size, dedupe, x3)\n    x5 = matcher(x4, ONE)\n    x6 = compose(first, cmirror)\n    x7 = chain(size, dedupe, x6)\n    x8 = matcher(x7, ONE)\n    x9 = fork(both, x5, x8)\n    x10 = branch(x7, x2, x9)\n    x11 =158(x10, UNITY)\n    x12 = canvas(ZERO, THREE_BY_THREE)\n    x13 = rbind(concat, x12)\n    x14 =5785367812311(x7)\n    x15 = objects(x14, T, F, F)\n    x16 = Tuple(FIVE, FIVE)\n    x17 =7555(x16)\n    x18 = interval(ZERO, FIVE, ONE)\n    x19 = cellwise(x18, x17, x14)\n    x20 = apply(tojvec, x19)\n    x21 = lbind(shift, x11)\n    x22 = mapply(x21, x20)\n    O = paint(x21, x22)\n    return O"], [1.1, "def solve_f42366d5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = compose(center, x3)\n    x5 = compose(dneighbors, x4)\n    x6 = fork(difference, x4, x5)\n    x7 = compose(first, x6)\n    x8 = fork(subtract, x4, x7)\n    x9 = objects(I, T, F, T)\n    x10 = difference(x9, x2)\n    x11 = fork(branch, x8, x10)\n    x12 = lbind(matcher, x11)\n    x13 = compose(x12, delta)\n    x14 = fork(sfilter, identity, x13)\n    x15 = dmirror(x9)\n    x16 = lbind(I, x15)\n    x17 = apply(x16, x15)\n    x18 = subgrid(x17, I)\n    x19 = partition(x18)\n    x20 = totuple(x19)\n    x21 = apply(color, x20)\n    x22 = last(x21)\n    x23 = remove(x22, x20)\n    x24 = repeat(x8, ONE)\n    x25 = combine(x20, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x2, x27)\n    x29 = pair(x25, x28)\n    x30 = sfilter(x29, first)\n    x31 = mapply(first, x30)\n    x32 = paint(x18, x31)\n    x33 = merge(x2)\n    x34 = cover(x32, x33)\n    x35 =01523(x34)\n    x36 = matcher(first, FIVE)\n    x37 = sfilter(x2, x36)\n    x38 = difference(x34, x37)\n    O = fill(x33,443, x38)\n    return O"], [1.1, "def solve_db546527(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =454(add, ulcorner, DOWN)\n    x3 = argmax(x1, x2)\n    x4 = toindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = fill(I, ONE, x5)\n    x7 = uppermost(x3)\n    x8 = rbind(greater, x7)\n    x9 = compose(x8, ulcorner)\n    x10 = sfilter(x1, x9)\n    x11 = fill(x6, TWO, x10)\n    x12 =4533lrcorner(x1)\n    x13 = paint(x11, x12)\n    x14 = sfilter(x1, vline)\n    x15 = compose(x14, dmirror)\n    x16 = fork(equality, identity, x15)\n    x17 = sfilter(x1, x16)\n    x18 = compose( ulcorner, dmirror)\n    x19 = fork(shift, x18, identity)\n    x20 = mapply(x19, x15)\n    x21 = lefthalf(x20)\n    O = vmirror(x21)\n    return O"], [1.1, "def solve_c0d29fcd(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = shape(I)\n    x20 = canvas(x10, x19)\n    x21 = ofcolor(x20, x21)\n    x22 = argmin(x2, width)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x2)\n    x25 = paint(x20, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = colorfilter(x26, x10)\n    x28 = sizefilter(x27, ONE)\n    x29 = height(x28)\n    x30 = width(x28)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x29)\n    x33 = rbind(adjacent, x32)\n    x34 = mfilter(x34, x36)\n    x35 = x lbind(shift, x28)\n    x396 = mapply(x35, x27)\n    x397 = fill(x25, x10, x37)\n    O = fill(x397, x11, x36)\n    return O"], [1.1, "def solve_7b7ab36a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 =342860000\n    3621154438300000\n    35211148850000000\n    size0015,500000\n    most001000000000000\n    10000300010000055\n    00030000000500050\n    161544405511175000\n    1615454000533 x000\n    07750003053550000\n    504255140000005000\n    22335000005055000\n    \"\"\"\n    x1 =ofcolor(I, x11)\n    x2 = difference(x1, x5)\n    x3 = subgrid(x1, I)\n    O = replace(x3, x6, x1)\n    return O"], [1.1, "def solve_c421ab63(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x40 = fill(I, x3, x2)\n    x41 = fork(combine, vfrontier, hfrontier)\n    x42 = mapply(x4, x1)\n    x43 = output:\n    Example output:\n    888\n    848\n    888\n    \"\"\"\n    x1 = fill(x40, TWO, x22)\n    x2 = fill(x91, TWO, x25)\n    x3 = heighturcorner(x2)\n    x4 = lbind(greater, x3)\n    x5 = chain(x4, last, last)\n    x6 = compose(first, x5)\n    x7 =19278 ofcolor(x2)\n    x8 = fork(recolor, color, x6)\n    x9 = mapply(x8, x7)\n    O = paint(x6, x9)\n    return O"], [1.1, "def solve_4dd35b34(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch( phase, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = rbind(sfilter, x15)\n    x17 = chain(first, vfrontier, x16)\n    x18 = fork(shift, x20, x17)\n    x19 = mapply(x18, x16)\n    x20 = paint(x6, x19)\n    x21 = composing(x19, x8)\n    x22 = width(x21)\n    x23 = subtract(x22, x3)\n    x24 = tojvec(x23)\n    x25 =787(x24)\n    x26 = crop(x20, ORIGIN, x25)\n    x27 = hmirror(x26)\n    x28 = asobject(x27)\n    x29 = height(x28)\n    x30 = subtract(x29, x1)\n    x31 = astuple(x30, x3)\n    x32 = add(x31, x29)\n    x33 = crop(x28, x32, x30)\n    x34 = vmirror(x33)\n    x35 = asobject(x34)\n    x36 = astuple(x32, x295)\n    x37 =087(x36)\n    x38 = crop(x34, x37)\n    x39 = paint(x38, x32)\n    O = compress(x39)\n    return O"], [1.1, "def solve_771fd3f5(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 =17x12(I)\n    x14 = palette(x13)\n    x15 = equality(x6, x13)\n    x16 = height(x12)\n    x17 = vsplit(x13, x16)\n    x18 = lbind(colorfilter, x12)\n    x19 = compose(first, x18)\n    x20 = rbind(sfilter, x19)\n    x21 = chain(merge, x20, x19)\n    x22 = fork(remove, x21, outbox)\n    x23 = rbind(other, x25)\n    x24 = compose(x23, x22)\n    x25 = astuple(x17, ONE)\n    x26 = matcher(x24, x25)\n    x27 = sfilter(x16, x26)\n    x28 = combine(x27, x24)\n    x29 = product(x28, x28)\n    x30 = sfilter(x29, x27)\n    x31 = apply(x24, x30)\n    x32 = ofcolor(x31, x6)\n    x33 = mapply(x22, x32)\n    x34 = fill(x13, x24, x330)\n    O = fill(x34, x6, x33)\n    return O"], [1.1, "def solve_7d0d227c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = astuple(NEG_ONE, NEG_TW39)\n    x5 = positive(x1)\n    x6 = lbind(shift, x2)\n    x7 = mapply(x6, x4)\n    x8 =151(x7)\n    x9 =999(x8, x4)\n    x10 = ofcolor(I, x3)\n    x11 = palette(I)\n    x12 = difference(x10, x11)\n    x13 = lbind(colorcount, I)\n    x14 =881\n    x15 = argmin(x12, x14)\n    x16 = ofcolor(I, x3)\n    x17 = last(x16)\n    x18 = equality(x17, x9)\n    x19 = urcorner(x2)\n    x20 = llcorner(x2)\n    x21 = rbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(I)\n    x26 = box(x25)\n    x27 = fill(I, x3, x26)\n    x28 = intersection(x6, x14)\n    x29 = difference(x28, x26)\n    O = fill(x27, ZERO, x29)\n    return O"], [1.1, "def solve_ab26575e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = colorfilter(x1, TWO)\n    x6 = lbind(colorfilter, x5)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ONE)\n    x9 = colorfilter(x1, ONE)\n    x10 = sfilter(x6, x4)\n    x11 = sfilter(x9, x8)\n    x12 = argmax(x10, width)\n    x13 = increment(x12)\n    x14 = tojvec(x13)\n    x15 = shift(x12, x14)\n    x16 = lbind(shift, x15)\n    x17 = objects(I, T, F, T)\n    x18 = merge(x17)\n    x19 = color(x18)\n    x20 = shift(x18, x19)\n    x21 = lbind(shift, x20)\n    x22 = mapply(x21, x13)\n    x23 = paint(I, x22)\n    x24 =3333(x23, x20)\n    x25 = shoot(ORIGIN, UNITY)\n    x26 = remove(x25, x25)\n    x27 = shoot(x26, DOWN_LEFT)\n    x28 = shoot(x24, UP_RIGHT)\n    x29 = shoot(x27, shoot)\n    x30 = combine(x28, x29)\n    O = fill(x23, x19, x30)\n    return O"], [1.1, "def solve_5c2e7418(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(subgrid, I)\n    x4 = compose(leftmost, x3)\n    x5 = chain(x4, toindices, x3)\n    x6 = mapply(x5, x2)\n    x7 = fork(equality, toindices, x6)\n    x8 = mapply(x7, x1)\n    x9 = vmirror(x8)\n    x10 = hmirror(x8)\n    x11 = toindices(x10)\n    x12 =590(x11)\n    x13 =1992(x12)\n    x14 =22222(x13)\n    x15 = mapply(x5, x14)\n    x16 = cover(I, x55)\n    x17 = mapply(x5, x16)\n    O = fill(x17, ONE, x15)\n    return O"], [1.1, "def solve_f271919c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = equality(x1, I)\n    x3 = h sfilter(x1, x2)\n    x4 = apply(color, x3)\n    x5 = lefthalf(x4)\n    x6 = righthalf(x4)\n    x7 =159(x6)\n    x8 = NEG_ONE(x7)\n    x9 = branch(x8, positive, branch)\n    x10 = branch(x8, identity, ulcorner)\n    x11 = x10(x5)\n    x12 = x10(x6)\n    x13 = branch(x8, llcorner, urcorner)\n    x14 = x13(x5)\n    x15 = x10(x14)\n    x16 = shape(I)\n    x17 = canvas(ZERO, x16)\n    x18 = ofcolor(I, FOUR)\n    x19 = ofcolor(I, EIGHT)\n    x20 = compose(increment, tojvec)\n    x21 = compose(decrement, index)\n    x22 = papply(equality, x18, x21)\n    x23 = sfilter(x19, x22)\n    x24 = ulcorner(x23)\n    x25 = mapply(x24, x23)\n    x26 = difference(x25, x23)\n    O = fill(I, THREE, x26)\n    return O"], [1.1, "def solve_616a2580(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = chain(size, dedupe, first)\n    x7 = matcher(x6, ONE)\n    x8 = lbind(repeat, EIGHT)\n    x9 = chain(dmirror, x8, decrement)\n    x10 = chain( arbitraryle, x9, portrait)\n    x11 = lbind(matcher,sfilter)\n    x12 = compose(increment, x11)\n    x13 = lbind(rbind, subtract)\n    x14 = rbind(compose, x12)\n    x15 = lbind(rbind, colorcount)\n    x16 = chain(x13, x14, x15)\n    x17 = fork(vsplit, x12, x16)\n    x18 = compose(decrement, x17)\n    x19 = decrement(x18)\n    x20 = matcher(x14, x19)\n    x21 = fork(vsplit, x20, x16)\n    x22 = compose( deconrement, x21)\n    x23 = fork(75d, x22, x20)\n    x24 = chain(toivec, x23, x22)\n    x25 = fork(shift, x24, x20)\n    x26 = mapply(x25, x1)\n    O = paint(I, x26)\n    return O"], [1.1, "def solve_3e21d800(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, lefthalf, x4)\n    x6 = rbind(other, x3)\n    x7 = compose(x5, x6)\n    x8 = chain(cmirror, dmirror, x1)\n    x9 = chain( helping rules, x7, x8)\n    x10 = fork(recolor, x7, x9)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [1.1, "def solve_1f449b13(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =177(141\n    1117(color)\n    x3 = rbind(subgrid, I)\n    x4 = chain(palette, trim, x3)\n    x5 = lbind(contained, THREE)\n    x6 = compose(x5, x4)\n    x7 = fork(add, height, width)\n    x8 = compose(decrement, x7)\n    x9 = fork(equality, x8, identity)\n    x10 = mfilter(x1, x9)\n    x11 = replace(I, THREE, ZERO)\n    x12 = replace(x11, ONE, ZERO)\n    x13 = compress(x12)\n    O = downscale(x13, THREE)\n    return O"], [1.1, "def solve_f5f846b1(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = identity(I)\n    x2 = compose(invert, height)\n    x3 = fork( changeignment, x2, identity)\n    x4 = lbind(apply, toivec)\n    x5 = compose(x4, decrement)\n    x6 = lbind(colorfilter, x10000)\n    x7 = rbind(compose, ONE)\n    x8 = lbind(lbind,='160000)\n    x9 = chain(x5, x7, x8)\n    x10 = apply(x9, x5)\n    x11 = lbind(ofcolor, I)\n    x12 = compose(x11, outbox)\n    x13 = fork(ofcolor, x12, identity)\n    x14 = mapply(x13, x10)\n    O = fill(x1, FOUR, x14)\n    return O"], [1.1, "def solve_93a987b7(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = astuple( RELE flEST, tophalf)\n    x6 = astuple(righthalf, bottomhalf)\n    x7 = combine(x5, x6)\n    x8 = rbind(shoot, UP)\n    x9 = mapply(x8, x7)\n    x10 =016(x4, LEFT)\n    x11 =11(x10)\n    x12 = rbind(shoot, DOWN)\n    x13 = mapply(x12, x12)\n    x14 = combine(x11, x13)\n    x15 = UNITY(x1)\n    x16 = astuple(x15, LEFT)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x9)\n    x19 = combine(x7, x18)\n    x20 = UNITY(x1)\n    x21 = UNITY(x13)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x19)\n    x24 = combine(x17, x23)\n    x25 = underfill(I, x4, x24)\n    x26 = objects(x25, T, F, F)\n    x27 = colorfilter(x26, x4)\n    x28 = difference(x26, x27)\n    x29 = rbind(subgrid, x25)\n    x30 = apply(x29, x28)\n    x31 = rbind(colorcount, x4)\n    x32 = argmax(x30, x31)\n    x33 = replace(x25, x4, x32)\n    O = argmin(x30, width)\n    return O"], [1.1, "def solve_095315e2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(compose, flip)\n    x3 = lbind(matcher, normalize)\n    x4 = chain(x2, x3, palette)\n    x5 = chain(leastcolor, x4, color)\n    x6 = fork(39aa, toindices, x5)\n    x7 = fork(2999, x6, identity)\n    x8 = chain(normalize, x1, x7)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = chain(sfilter, last, x10)\n    x12 = lbind(rbind, subtract)\n    x13 = apply(x11, x9)\n    x14 = rbind(subtract, SEVEN)\n    x15 = chain(x14, size, x16)\n    x16 = matcher(x15, ZERO)\n    x17 = fork(both, x12, x16)\n    x18 =4444(x17)\n    x19 = lbind(toobject, x18)\n    x20 = compose(x4, delta)\n    x21 = fork(5555, x20, shape)\n    x22 = chain(x19, ulcorner, x21)\n    x23 = fork(shift, x22, box)\n    x24 = rbind(argmin, I)\n    x25 = compose(x24, toindices)\n    x26 = fork(gravitate, x25, x21)\n    x27 = fork(crement, x26, identity)\n    x28 = apply(x27, x3)\n    x29 = order(x28, identity)\n    x30 = mapply(x22, x29)\n    O = paint(I, x30)\n    return O"]], "2037f2c7": [[0.4676166989210467, "def solve_735106f7(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.4733155843162237, "def solve_c5ae8891(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_59581818(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4855297889174701, "def solve_f2a52cd8(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, T)\n    x3 = merge(x2)\n    x4 = subgrid(x3, I)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, EIGHT, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.5251570172671126, "def solve_e9b8c9de(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5341705127937012, "def solve_fc406e9e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5389342090692021, "def solve_37d609b5(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_199c0cc0(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.562653757943613, "def solve_05f7c0cd(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_82b780ea(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.5656761343415933, "def solve_477c2c87(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.5672454357236966, "def solve_87364b26(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = width(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.5696230758236387, "def solve_4d102274(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_62675636(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_88ed09b6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_04713e44(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_5217e0c8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_4217b658(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5951113969229912, "def solve_fbf8eb7f(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5951113969229912, "def solve_54bf3c3b(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5962408498640382, "def solve_1e6118af(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_b4551be1(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962853437491119, "def solve_52cfe4c1(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.5980018302732818, "def solve_7f9c5faa(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_07187bab(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.6201635964679443, "def solve_68f0a546(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.6201635964679443, "def solve_2b5181ff(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.6309126220053929, "def solve_2cf45402(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_77326f61(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_eda0ca5b(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6386028786028786, "def solve_0199dfe5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6386028786028786, "def solve_d260243e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6748161707949084, "def solve_914e6a77(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.7330246028575503, "def solve_9f3ec767(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7330246028575503, "def solve_0dea0296(I):\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7553253405644605, "def solve_6dd0def0(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.7635614912120104, "def solve_a4986188(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7639570072779688, "def solve_cb3a29d1(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.7654076693569447, "def solve_8bc38648(I):\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(x3, x2)\n    x6 = merge(x5)\n    x7 = subgrid(x6, x1)\n    x8 = switch(x7, x4, x7)\n    x9 = replace(x8, x4, x3)\n    O = replace(x9, x4, ZERO)\n    return O"], [0.7682221976455299, "def solve_df6a2b40(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    O = rot90(x3)\n    return O"], [0.7702994509699451, "def solve_3f12f5db(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_368244a3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7946931652854432, "def solve_b8201a9e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.8141732132799135, "def solve_a9bdef47(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8252353845727267, "def solve_0671be07(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = difference(x13, x5)\n    O = fill(I, x10, x14)\n    return O"], [0.8333146399531804, "def solve_8eeff623(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8333444764491823, "def solve_eb996847(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.838870195508736, "def solve_90bc79c0(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = combine(x4, x5)\n    x7 = leftmost(x6)\n    x8 = difference(x4, x5)\n    x9 = fill(I, TWO, x8)\n    O = fill(x9, ONE, x5)\n    return O"], [0.8479971796357203, "def solve_515a8927(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.8504311697771865, "def solve_99eae220(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.8515686082071486, "def solve_730be8bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.8566311155719072, "def solve_e22ad70b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.8582352748738153, "def solve_5edb4acc(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = fork(equality, height, width)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, THREE, x6)\n    O = fill(x8, TWO, x7)\n    return O"], [0.8583146399531806, "def solve_509d2099(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.8616479732865138, "def solve_d6b41527(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.8631048928254786, "def solve_26909cd2(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8631105583205274, "def solve_fec4d146(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_07b1fc0d(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_10744e8a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_e0fc1628(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.863678348633302, "def solve_0a75d9c5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.8638701955087361, "def solve_e77f3980(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8638701955087361, "def solve_f0999119(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, ONE, x4)\n    return O"], [0.8638701955087361, "def solve_ce6f0e59(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = rbind(subgrid, I)\n    x4 = chain(palette, trim, x3)\n    x5 = matcher(x4, x2)\n    x6 =sfilter(x1, x5)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, EIGHT, x9)\n    return O"], [0.8638701955087361, "def solve_9b5c1a25(I):\n    x1 = fgpartition(I)\n    x2 = compose(cmirror, dmirror)\n    x3 = fork(equality, identity, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [0.8638701955087361, "def solve_5a236919(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, mostcolor)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, shape, x4)\n    return O"], [0.863900032004738, "def solve_149e0b79(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.8639438916538609, "def solve_e72281fc(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_8c6a6222(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_29cc79dc(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_5f22ef63(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8640364842464535, "def solve_5c5fba04(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, THREE, x3)\n    return O"], [0.8644400334286123, "def solve_7ccbae39(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.864458786470308, "def solve_b0141401(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.864458786470308, "def solve_6fb42f60(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.8646921944127802, "def solve_7ce8dc73(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = mapply(x5, x3)\n    O = fill(I, SIX, x6)\n    return O"], [0.8654574970960377, "def solve_ed440b77(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = last(x2)\n    x4 = color(x3)\n    x5 = leftmost(x3)\n    x6 = interval(x5, TEN, TWO)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x5)\n    x11 = add(x5, THREE)\n    x12 = interval(x10, TEN, FOUR)\n    x13 = interval(x11, TEN, FOUR)\n    x14 = lbind(astuple, NINE)\n    x15 = apply(tojvec, x12)\n    x16 = apply(x14, x13)\n    x17 = fill(I, x4, x9)\n    x18 = fill(x17, FIVE, x15)\n    O = fill(x18, FIVE, x16)\n    return O"], [0.8656237858337551, "def solve_5f6a5647(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.8665000955130503, "def solve_cc9d2b72(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, SIX, x4)\n    return O"], [1.0, "def solve_be9e7ca4(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = astuple(TWO, FOUR)\n    x4 = initset(x2)\n    x5 = insert(insert, x4)\n    x6 = insert(THREE_BY_THREE, x5)\n    x7 = insert(x3, x6)\n    x8 = merge(x1)\n    x9 = cover(I, x8)\n    x10 = paint(x9, x7)\n    O = objects(x10, T, F, T)\n    return O"], [1.0, "def solve_4339cd16(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_e60963df(I):\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = replace(I, FIVE, ZERO)\n    x4 = objects(x3, T, F, T)\n    x5 = compress(x4)\n    x6 = vmirror(x5)\n    x7 = objects(x6, T, F, T)\n    x8 = astuple(TWO, ONE)\n    x9 = crop(x6, x8, x7)\n    x10 = dmirror(x9)\n    x11 =insert(x10, x11)\n    x12 = width(x11)\n    x13 = last(x11)\n    x14 = tojvec(x12)\n    x15 = decrement(x14)\n    x16 = astuple(x15, x13)\n    x17 = crop(x6, x16, x9)\n    x18 = hmirror(x17)\n    x19 = hconcat(x17, x18)\n    x20 = astuple(x1, THREE)\n    x21 = crop(x20, ORIGIN, x3)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x22)\n    x24 = vmirror(x23)\n    x25 = hconcat(x23, x24)\n    x26 = hmirror(x25)\n    O = vconcat(x26, x26)\n    return O"], [1.0, "def solve_468b8414(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = rbind(subgrid, I)\n    x4 = fork(equality, identity, rot90)\n    x5 = compose(x3, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [1.0, "def solve_ee87fc20(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(fork, recolor)\n    x12 = lbind(x11, d43)\n    x13 = chain(x10, x12, x5)\n    x14 =    x13(x4)\n    x15 =sfilter(x4, x13)\n    x16 = difference(x4, x15)\n    x167 =subgrid(x16, I)\n    O = cover(x17, x151)\n    return O"], [1.0, "def solve_6c29acec(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [1.0, "def solve_423547e6(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, ZERO, ORIGIN)\n    x6 = width(x2)\n    x7 = astuple(FOUR, x6)\n    x8 = ofcolor(I, ZERO)\n    x9 = rbind(shoot, ORIGIN)\n    x10 = mapply(x9, x8)\n    x11 = underfill(I, EIGHT, x10)\n    x12 = UNITY(x1)\n    x13 = width(I)\n    x14 = ulcorner(x12)\n    x15 = increment(x14)\n    x16 = rbind(subgrid, x11)\n    x17 = mostcolor(I)\n    x18 = stack(x16, x17)\n    x19 = underfill(x11, ONE, x18)\n    O = replace(x19, NEG_ONE, ZERO)\n    return O"], [1.0, "def solve_3756e1aa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combide, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_6eed1003(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    O = underfill(x4, EIGHT, x5)\n    return O"], [1.0, "def solve_d55bf985(I):\n    x1 = objects(I, T, F, T)\n    x2 =size(x1)\n    x3 = subtract(x2, FOUR)\n    x4 = interval(ONE, FIVE, ONE)\n    x5 = merge(x4)\n    x6 = astuple(x3, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = astuple(SIX, FIVE)\n    x9 = canvas(ZERO, x8)\n    O = hconcat(x7, x9)\n    return O"], [1.0, "def solve_48cb76c0(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = dedupe(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = lbind(shift, x6)\n    x8 = colorbind(multiply, TWO)\n    x9 = chain(x8, x7, ZERO)\n    x10 = mapply(x9, x3)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_66f12037(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = branch(x2, UP, RIGHT)\n    x4 = branch(x2, DOWN, RIGHT)\n    x5 = add(x3, x4)\n    x6 = add(x5, TWO)\n    x7 = canvas(ZERO, THREE_BY_THREE)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(delta, x10)\n    O = fill(x7, ZERO, x11)\n    return O"], [1.0, "def solve_c7cf0056(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x2)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_f340d15a(I):\n    x1 = objects(I, T, T, T)\n    x2 = power(outbox, TWO)\n    x3 = power(outbox, THREE)\n    x4 = fork(combine, x2, x3)\n    x5 = compose(back90, x4)\n    x6 = fork(difference, x4, x5)\n    x7 = remove(x6, x1)\n    x8 = lbind(mapply, fill)\n    x9 = lbind(ofcolor, I)\n    x10 = chain(x8, x9, x4)\n    x11 = fork(difference, x7, x10)\n    x12 = lbind(argmin, x7)\n    x13 = chain(x12, x11, x41)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x13, x14, x41)\n    x16 = fork(mapply, x15, x11)\n    x17 = fork(shift, x6, x16)\n    x18 = fork(recolor, color, x17)\n    x19 = mapply(x18, x5)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_97787e3a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = first(x2)\n    x4 = normalize(x3)\n    x5 = last(x2)\n    x6 = normalize(x5)\n    x7 = ulcorner(x6)\n    x8 = index(I, x7)\n    x9 = toindices(x4)\n    x10 = NEG_UNITY(x9)\n    x11 = double(x10)\n    x12 = divide(x11, THREE)\n    x13 = increment(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = interval(ZERO, x13, ONE)\n    x16 = product(x14, x15)\n    x17 = astuple(xDefault, first)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = asindices(x4)\n    x21 = lbind(shift, x20)\n    x22 = mapply(x21, x19)\n    x23 = paint(I, x22)\n    x24 = objects(x23, F, T, T)\n    x25 = argmax(x24, numcolors)\n    x26 = canvas(x25, x14)\n    x27 = paint(x26, x25)\n    O = paint(x27, x25)\n    return O"], [1.0, "def solve_4eb5b3d8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = compose(last, first)\n    x5 = fork(equality, x3, x4)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = remove(x7, x1)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = fill(x10, THREE, x9)\n    x12 = fill(x11, ONE, x9)\n    x13 = combine(x11, x12)\n    x14 =ESEppaint(x05, x13)\n    O = vmirror(x14)\n    return O"], [1.0, "def solve_be9b357f(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = chain(438, initset, ONE)\n    x7 = fork( chain, corners, lrcorner)\n    x8 = fork( urcorner, x7, x6)\n    x9 = fork(shift, ulcorner, x8)\n    x10 = fork(connect, DOWN, x9)\n    x11 = paint(x5, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = fork(16, ulcorner, normalize)\n    x14 = fork(extract, x13, x7)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x12)\n    O = fill(x11, EIGHT, x16)\n    return O"], [1.0, "def solve_51b6e36b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14,uppermost)\n    x17 = compose(x15, leftmost)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_5a93d2e5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = mapply(x14, x15)\n    x17 = fill(x14, EIGHT, x16)\n    x18 = difference(x17, x2)\n    O = fill(x17, THREE, x18)\n    return O"], [1.0, "def solve_d84bdbe9(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(other, subgrid, outbox)\n    x7 = compose(x6, initset)\n    x8 = fork(combine, identity, x7)\n    x9 = mapply(x8, x4)\n    O = x7(x9)\n    return O"], [1.0, "def solve_871f5aec(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, subgrid)\n    O = subgrid(x2, I)\n    return O"], [1.0, "def solve_bf789167(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(extract, x1)\n    x5 = rbind(subgrid, I)\n    x6 = lbind(compose, x3)\n    x7 = chain(x5, x4, x6)\n    x8 = x7(ulcorner)\n    x9 = x7(urcorner)\n    x10 = x7(llcorner)\n    x11 = x7(lrcorner)\n    x12 = hconcat(x11, x10)\n    x13 = hconcat(x9, x8)\n    O = vconcat(x12, x13)\n    return O"], [1.0, "def solve_1dcf052f(I):\n    x1 = asindices(I)\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = objects(x2, F, T, T)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = subgrid(x5, x2)\n    x8 = rot90(x7)\n    x9 = rot180(x7)\n    x10 = rot270(x7)\n    x11 = hconcat(x8, x1)\n    x12 = hconcat(x10, x2)\n    O = vconcat(x11, x9)\n    return O"], [1.0, "def solve_e8ea780e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x6, x3)\n    x8 = shape(x3)\n    x09 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_d215abdb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = astuple(x4, x4)\n    x6 = subgrid(x2, I)\n    x7 = rbind(greater, x5)\n    x8 = compose(x7, numcolors)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x4)\n    x11 = increment(x10)\n    x12 = divide(x11, x9)\n    x13 = increment(x5)\n    x14 = interval(x12, x13, ZERO)\n    x15 = astuple(x12, x13)\n    x16 = lbind(multiply, x15)\n    x17 = neighbors(ORIGIN)\n    x18 = mapply(neighbors, x17)\n    x19 = apply(x16, x18)\n    x20 = lbind(shift, x9)\n    x21 = mapply(x20, x19)\n    x22 = fork(combine, vfrontier, hfrontier)\n    x23 = mapply(x22, x18)\n    x24 = fill(x6, x3, x23)\n    x25 = merge(x1)\n    x26 = box(x25)\n    O = fill(x24, ZERO, x26)\n    return O"], [1.0, "def solve_4d8f05ae(I):\n    x1 = compose(invert, dedupe)\n    x2 = x1(I)\n    x3 = halve(x2)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = width(x6)\n    x7 = rbind(branch, ZERO)\n    x8 = rbind(x7, leftmost)\n    x9 = chain(size, dedupe, x8)\n    x10 = compose(x9, vmirror)\n    x11 = portion(x3)\n    x12 = dmirror(x3)\n    x13 = hsplit(x11, x12)\n    x14 = intersection(x13, x7)\n    x15 = argmax(x14, x10)\n    x16 = ulcorner(x15)\n    x17 = increment(x16)\n    x18 = subtract(x17, x3)\n    x19 = decrement(x18)\n    x20 = lbind(shift, x15)\n    x21 = objects(x26, T, F, F)\n    x22 = colorfilter(x21, ONE)\n    x23 = compose(last, centerofmass)\n    x24 = order(x22, x23)\n    x25 = mapply(x20, x24)\n    x26 = fill(x3, ONE, x25)\n    x27 = merge(x26)\n    x28 = paint(x27, x26)\n    O = x1(x28)\n    return O"], [1.0, "def solve_06f55350(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x7 = mapply(vfrontier, x7)\n    x8 = center(x2)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x7)\n    x11 = fill(I, x3, x10)\n    x12 = interval(ZERO, FIVE, ONE)\n    x13 = apply(tojvec, x12)\n    x14 = mapply(x9, x13)\n    x15 = fill(x11, NEG_ONE, x14)\n    x16 = objects(x15, F, F, T)\n    x17 = compose(x9,ulcorner)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x5)\n    x20 = mapply(x19, x18)\n    x21 = combine(x16, x20)\n    x22 = fill(x15, x3, x21)\n    O = rot90(x22)\n    return O"], [1.0, "def solve_801b24fd(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork( normalize, toindices, box)\n    x4 = mapply(x3, x2)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = halve(x6)\n    x8 = add(x6, x7)\n    x9 = width(x4)\n    x10 = divide(x8, x9)\n    x11 = interval(ZERO, x10, x5)\n    x12 = rbind(multiply, x5)\n    x13 = apply(x12, x11)\n    x14 = interval(ONE, x10, ONE)\n    x15 = apply(x14, x13)\n    x16 = lbind(subtract, x10)\n    x17 = apply(x16, x15)\n    x18 = lbind(rbind, shift)\n    x19 = rbind(occurrences, x4)\n    x20 = compose(x18, x19)\n    x21 = mapply(x20, x16)\n    x22 = paint(I, x21)\n    O = rot180(x22)\n    return O"], [1.0, "def solve_d7882919(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x14, x17)\n    x19 = fork(both, x12, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(colorcount, x28)\n    x30 = matcher(x29, TWO)\n    x31 = rbind(toobject, I)\n    x32 = lbind(colorcount, I)\n    x33 = chain(x37, x31, x32)\n    x34 = compose(x33, x38)\n    x35 = apply(x34, x22)\n    x36 = sfilter(x35, x29)\n    O = fill(I, x21, x36)\n    return O"], [1.0, "def solve_c058dcfe(I):\n    x1 = asindices(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(ZERO, x3)\n    x5 = hconcat(I, x4)\n    x6 = rbind(greater, ONE)\n    x7 = compose(x6, neighbors)\n    x8 = sfilter(x1, x7)\n    x9 = objects(x5, T, F, T)\n    x10 = merge(x9)\n    O = fill(x5, TWO, x10)\n    return O"], [1.0, "def solve_da40e368(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_89fbd520(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(matcher, color)\n    x5 = chain(size, x3, x4)\n    x6 = matcher(x5, ONE)\n    x7 = fork(sfilter, identity, x6)\n    x8 = chain(invert, DOWN, x7)\n    x9 = lbind(apply, x8)\n    x10 = power(x9, TWO)\n    x11 = fork(add, first, last)\n    x12 = fork(remove, x11, last)\n    x13 = compose(x12, x7)\n    x14 = lbind(rbind, astuple)\n    x15 = chain(x14, x13, x7)\n    x16 = fork(sfilter, x15, x14)\n    x17 = fork(argmax, x13, x16)\n    x18 = compose(x17, x7)\n    x19 = mapply(x18, x2)\n    O = underfill(I, ONE, x19)\n    return O"], [1.0, "def solve_b4e7579e(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = extract(x1, x2)\n    x4 = center(x3)\n    x5 = subtract(x4, x3)\n    x6 = height(x3)\n    x7 = height(x5)\n    x8 = interval(ZERO, x6, x7)\n    x9 = lbind( subtract, x4)\n    x10 = interval(ZERO, x9, x4)\n    x11 = pair(x8, x10)\n    x12 = extract(x11, x9)\n    x13 = lbind( subtract, x5)\n    x14 =increment(x13)\n    x15 = height(x4)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, FOUR)\n    x18 = lbind(crop, I)\n    x19 = compose(x18, asobject)\n    x20 = rbind(x19, x7)\n    x21 = lbind(th420, rot90)\n    x22 = compose(x20, x21)\n    x23 = pair(x17, x17)\n    x24 = product(x23, x22)\n    x25 = argmax(x24, x29)\n    x26 = shift(x25, x3)\n    x27 = paint(I, x26)\n    O = move(x27, x3, x5)\n    return O"], [1.0, "def solve_a7e7254b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = ofcolor(x5, ZERO)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, UP_RIGHT)\n    O = shoot(x7, DOWN_LEFT)\n    return O"], [1.0, "def solve_8eda892c(I):\n    x1 = objects(I, T, F, T)\n    x2 = maximum(x1)\n    x3 = astuple(NEG_TWO, x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = rbind(multiply, x4)\n    x6 = apply(x5, x4)\n    x7 = rbind(shift, x6)\n    x8 = mapply(x7, x2)\n    x9 = fill(I, EIGHT, x8)\n    x10 = index(x9, ORIGIN)\n    x11 = equality(x10, TWO)\n    x12 = apply(initset, x11)\n    x13 = hmirror(x12)\n    x14 = shift(x13, x4)\n    x15 = apply(x5, x14)\n    x16 = insert(x12, x15)\n    O = paint(x9, x16)\n    return O"], [1.0, "def solve_605b51ea(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = canvas(x2, numcolors)\n    x4 = normalize(x2)\n    x5 = objects(I, F, T, T)\n    x6 = argmax(x5, numcolors)\n    x7 = canvas(x6, numcolors)\n    x8 = normalize(x2)\n    x9 = lbind(toindices, x8)\n    x10 = lbind(shift, x8)\n    x11 = occurrences(I, x4)\n    x12 = mapply(x10, x11)\n    O = fill(x7, ONE, x12)\n    return O"], [1.0, "def solve_a4de73c0(I):\n    x1 = leastcolor(I)\n    x2 = astuple(dmirror, cmirror)\n    x3 = astuple(hmirror, identity)\n    x4 = combine(x2, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x1)\n    x8 = chain(lowermost, x7, x6)\n    x9 = chain(decrement, height, x6)\n    x10 = fork(equality, x8, x9)\n    x11 = extract(x4, x10)\n    x12 = x11(I)\n    x13 = ofcolor(x12, x1)\n    x14 = shift(x13, UP)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(x12, x1, x19)\n    O = x11(x20)\n    return O"], [1.0, "def solve_4300074b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(le4, delta, x4)\n    x6 = rbind(shift, TWO)\n    x7 = fork(connect, x5, x6)\n    x8 = rbind(argmax, lrcorner)\n    x9 = compose(x8, x7)\n    x10 = fork(both, x7, x9)\n    x11 = mapply(x10, x3)\n    O = fill(I, EIGHT, x11)\n    return O"], [1.0, "def solve_52d1f083(I):\n    x1 = objects(I, T, F, T)\n    x2 = Tapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_062ae290(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = compose(last, last)\n    x9 = matcher(x8, x7)\n    x10 = sfilter(x7, x9)\n    x11 = connect(ORIGIN, x10)\n    x12 = argmax(x11, numcolors)\n    x13 = leastcolor(x12)\n    x14 = asindices(I)\n    x15 = ofcolor(I, x13)\n    x16 = difference(x14, x15)\n    x17 = fill(I, NEG_ONE, x16)\n    x18 = recolor(x13, x12)\n    x19 = ulcorner(x18)\n    x20 = shoot(x19, NEG_UNITY)\n    x21 = lbind(shift, x20)\n    x22 = mapply(x21, x18)\n    O = fill(x17, x3, x22)\n    return O"], [1.0, "def solve_2bc3adaa(I):\n    x1 = trim(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = argmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [1.0, "def solve_b6d261e0(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = normalize(x2)\n    x5 = color(x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x2)\n    O = fill(x3, x5, x8)\n    return O"], [1.0, "def solve_4c0f33d6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = colorcount(I, x8)\n    x10 = height(I)\n    x11 = width(I)\n    x12 = increment(x10)\n    x13 = matcher(first, x8)\n    x14 = crop(I, x13, x12)\n    x15 = lbind(toobject, x14)\n    x16 = compose(x13, x15)\n    x17 = apply(normalize, x16)\n    x18 = astuple(ONE, SEVEN)\n    x19 = canvas(x8, x18)\n    x20 = asindices(x19)\n    x21 = box(x20)\n    x22 = rbind(difference, x21)\n    x23 = rbind(greater, SEVEN)\n    x24 = compose(x23, x22)\n    x25 = sfilter(x19, x24)\n    O = paint(x19, x25)\n    return O"], [1.0, "def solve_771fa0c8(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = extract(x7, numcolors)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = objects(x9, T, F, T)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = apply(double, x14)\n    x16 = height(x12)\n    x17 = interval(ZERO, x16, FOUR)\n    x18 = pair(x15, x17)\n    x19 = size(x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, FOUR)\n    x22 = apply(multiply, x21)\n    x23 = pair(x18, x22)\n    x24 = lbind(shift, x3)\n    x25 = mapply(x24, x23)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_eada1211(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork( delimiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = normalize(x8)\n    x11 = apply(first, x10)\n    x12 = last(x10)\n    x13 = rbind(ofcolor, x8)\n    x14 = difference(x12, x13)\n    x15 = normalize(x12)\n    x16 = color(x15)\n    x17 = toindices(x15)\n    x18 = apply(first, x17)\n    x19 = toindices(x18)\n    x20 = ofcolor(I, x6)\n    x21 = backdrop(x20)\n    x22 = lbind(shift, x21)\n    x23 = mapply(x22, x18)\n    O = fill(I, x3, x23)\n    return O"], [1.0, "def solve_6fbd793a(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, asobject)\n    x7 = x6(x5)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, x7)\n    x10 = rbind(bordering, x5)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = paint(x5, x12)\n    return O"], [1.0, "def solve_5470e026(I):\n    x1 = objects(I, T, F, T)\n    x2 = subgrid(x1, I)\n    x3 = fork(multiply, width, height)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = replace( x4, x5, ZERO)\n    x7 = objects(x6, F, T, T)\n    x8 = colorfilter(x7, ZERO)\n    x9 = width(x6)\n    x10 = divide(x9, THREE)\n    x11 = height(x6)\n    x12 = divide(x11, THREE)\n    x13 = subtract(x10, x12)\n    x14 = vupscale(x6, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = merge(x15)\n    x17 = double(xdivide)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = power(outbox, TWO)\n    x20 = lbind(rapply, x18)\n    x21 = lbind(compose, x19)\n    x22 = compose(x20, x21)\n    x23 = apply(x22, x18)\n    x24 = initset(x15)\n    x25 =manhattan(x24, FOUR)\n    x26 = shift(x24, x25)\n    x27 = objects(x6, T, F, T)\n    x28 = colorfilter(x27, TWO)\n    x29 = lbind(adjacent, x26)\n    x30 = lbind(rbind,multiply)\n    x31 = chain(x29, x30, last)\n    x32 = sfilter(x28, x31)\n    x33 = fork(vmatching, first, last)\n    x34 = mfilter(x32, x33)\n    O = paint(x6, x34)\n    return O"], [1.0, "def solve_f5c8f478(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(vfrontier, x2)\n    x4 = underfill(I, EIGHT, x3)\n    x5 = hconcat(x4, x4)\n    O = vconcat(x5, x5)\n    return O"], [1.0, "def solve_308a7de1(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = extract(x1, x2)\n    x7 = center(x6)\n    x8 = ofcolor(I, x5)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = shift(x13, x7)\n    x15 = merge(x14)\n    x16 = cover(x11, x9)\n    x17 = paint(x16, x15)\n    x18 = fgpartition(x17)\n    x19 = merge(x18)\n    x20 = cover(x11, x19)\n    x21 = normalize(x19)\n    x22 = shift(x21, x7)\n    x23 = paint(x22, x12)\n    x24 = flip(x23)\n    x25 = asindices(x24)\n    x26 = ofcolor(x24, x5)\n    x27 = backdrop(x26)\n    x28 = toobject(x27, x24)\n    x29 = rbind(shift, x28)\n    x30 = mapply(x29, x27)\n    x31 = rbind(intersection, xbe)\n    x32 = size(x31)\n    x33 = rbind(colorcount, x5)\n    x34 = argmax(x32, x33)\n    x35 = difference(x32, x34)\n    O = fill(x23, x5, x35)\n    return O"], [1.0, "def solve_dd3ad611(I):\n    x1 = width(I)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = canvas(x4, x1)\n    return O"], [1.0, "def solve_33a755e9(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = lefthalf(x2)\n    x4 = righthalf(x2)\n    x5 = tophalf(x3)\n    x6 = bottomhalf(x3)\n    x7 = tophalf(x4)\n    x8 = bottomhalf(x4)\n    x9 =position(x3, x5)\n    x10 =position(x3, x6)\n    x11 = position(x3, x10)\n    x12 = width(x3)\n    x13 = hupscale(x5, x12)\n    x14 = height(x3)\n    x15 = height( x8)\n    x16 = intersection(x13, x14)\n    x17 = replace(x11, FOUR, ZERO)\n    x18 = outbox(x2)\n    x19 =toobject(x1800, I)\n    x20 = difference(x17, x19)\n    x21 = toobject(x18, I)\n    x22 = compose(color, x2)\n    x23 = fork(recolor, x22, color)\n    x24 = mapply(x23, x20)\n    O = paint(x3, x24)\n    return O"], [1.0, "def solve_a3ed9fd9(I):\n    x1 = ofcolor(I, ONE)\n    x2 = center(x1)\n    x3 = ofcolor(I, TWO)\n    x4 = center(x3)\n    x5 = ofcolor(I, THREE)\n    x6 = ofcolor(I, SEVEN)\n    x7 = lbind(add, x2)\n    x8 = initset(x2)\n    x9 = rbind(position, x8)\n    x10 = compose(invert, x9)\n    x11 = chain(toivec, x7, x10)\n    x12 = lbind(add, x4)\n    x13 = initset(x4)\n    x14 = rbind(position, x13)\n    x15 = compose(invert, x14)\n    x16 = chain(tojvec, x12, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_4eec0464(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(contained, vatching)\n    x4 = extract(x1, x3)\n    x5 = llcorner(x4)\n    x6 = branch(xfc, identity, dmirror)\n    x7 = x6(I)\n    x8 = extract(x7, x4)\n    x9 = height(x8)\n    x10 =Take500(x8, x9)\n    x11 = height(x10)\n    x12 = width(x8)\n    x13 =ieth(x12)\n    x14 = ZERO(x13)\n    x15 = ulcorner(x4)\n    x16 = increment(x15)\n    x17 = rbind(multiply, x16)\n    x18 = height(x7)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = rbind(multiply, x20)\n    x22 = ZERO(x21)\n    x23 = ZERO(x22)\n    x24 = add(x11, x23)\n    x25 = shift(x8, x24)\n    x26 = paint(x7, x25)\n    O = x6(x26)\n    return O"], [1.0, "def solve_ad6281e2(I):\n    x1 = chain(size, dedupe, first)\n    x2 = x1(I)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, F)\n    x7 = order(x6, leftmost)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    O = x4(x9)\n    return O"], [1.0, "def solve_14c12131(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose( invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(31, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_3eeff761(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(subgrid, I)\n    x4 = chain(palette, trim, x3)\n    x5 = lbind(contained, THREE)\n    x6 = compose(x5, x4)\n    x7 = fork(add, height, width)\n    x8 = compose(decrement, x7)\n    x9 = fork(equality, size, x8)\n    x10 = mfilter(x2, x9)\n    x11 = mfilter(x1, x10)\n    x12 = replace(I, THREE, ZERO)\n    x13 = replace(x12, ONE,wrapply)\n    x14 = dmirror(x13)\n    x15 = merge(x14)\n    x16 = shift(x15, UNITY)\n    x17 = fill(x13, THREE, x16)\n    x18 = merge(x1)\n    x19 = fill(x17, ONE, x18)\n    O = replace(x19, ONE, ZERO)\n    return O"], [1.0, "def solve_43deaedf(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = combine(x13, x16)\n    x18 = size(x17)\n    x19 = valmax(x5, x18)\n    x20 = matcher(x18, x10)\n    x21 = sfilter(x2, x20)\n    x22 = combine(x19, x21)\n    x23 = shape(x22)\n    x24 = canvas(ZERO, x23)\n    x25 = ofcolor(x24, x6)\n    x26 = recolor(x25, x22)\n    O = upscale(x26, TWO)\n    return O"], [1.0, "def solve_39266cf0(I):\n    x1 = rot180(I)\n    x2 = objects(x1, T, F, T)\n    x3 = order(x2, leftmost)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = colorfilter(x1, x7)\n    x9 = power(outbox, TWO)\n    x10 = mapply(x9, x8)\n    O = fill(x1, EIGHT, x10)\n    return O"], [1.0, "def solve_65aa9309(I):\n    x1 = objects(I, F, T, T)\n    x2 = valmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(difference, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(cmirror, x12)\n    x14 = insert(hmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = fork(combine, x15, x16)\n    x18 = product(x10, x17)\n    x19 = compose(vmirror, toindextract)\n    x20 = compose(hmirror, toindices)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x18)\n    x23 = paint(I, x22)\n    O = objects(x23, F, T, T)\n    return O"], [1.0, "def solve_c1c24f72(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = height(x13)\n    x18 = sfilter(x2, x17)\n    x19 = reorganitate(x13, x18)\n    x20 = multiply(x19, THREE)\n    x21 = insert(x20, x2)\n    x22 = insert(x7, x21)\n    x25 = recolor(x10, x22)\n    x26 = add(x23, additionREE)\n    x27 = recolor(x24, x26)\n    x28 = apply(tojvec, x12)\n    x29 = add(x28, ONE)\n    x30 = decrement(x29)\n    x31 = apply(x27, x30)\n    x32 = mpapply(add, x24, x31)\n    x33 = replace(I, ONE, SIX)\n    x34 = lbind(shift, x21)\n    x35 = mapply(x34, x33)\n    x36 = paint(x33, x35)\n    O = x3(x36)\n    return O"], [1.0, "def solve_0205970f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_d0c186a6(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(adjacent, x1)\n    x3 = sfilter(x1, x2)\n    x4 = fork(adjacent, identity, vmirror)\n    x5 = sfilter(x1, x4)\n    x6 = fork(adjacent, identity, cmirror)\n    x7 = sfilter(x1, x6)\n    x8 = compose(rot90, x7)\n    x9 = sfilter(x1, x8)\n    O = rot270(x9)\n    return O"], [1.0, "def solve_8ec4dc45(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = chain(toindices, normalize, shape)\n    x7 = x6(x2)\n    x8 = lbind(recolor, EIGHT)\n    x9 = rbind(shoot, NEG_UNITY)\n    x10 = chain(x8, x9, x7)\n    x11 = lbind(recolor, TWO)\n    x12 = rbind(shoot, NEG_UNITY)\n    x13 = chain(x11, x12, x7)\n    x14 = fork(combine, x10, x13)\n    x15 = fork(combine, x14, x7)\n    x16 = fork(insert, x15, x6)\n    x17 = mapply(x16, x2)\n    O = paint(x5, x17)\n    return O"], [1.0, "def solve_838bdf1b(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_2a02d3d4(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x44)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_6fd930ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = hmirror(x1)\n    O = subgrid(x2, I)\n    return O"], [1.0, "def solve_1176f5eb(I):\n    x1 = Fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [1.0, "def solve_b8d5961c(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(subgrid, I)\n    x4 = chain(x3, trim, asobject)\n    x5 = compose(first, x4)\n    x6 = compose(last, x4)\n    x7 = fork(equality, x5, x6)\n    x8 = extract(x2, x7)\n    x9 = lefthalf(x8)\n    O = tophalf(x9)\n    return O"], [1.0, "def solve_6dcc3cd3(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = last(x1)\n    x4 = switch(I, x3, x2)\n    x5 = switch(x4, FOUR, ZERO)\n    x6 = astuple(x5, x6)\n    x7 = canvas(ZERO, x6)\n    x8 = paint(x7, x3)\n    O = upscale(x8, TWO)\n    return O"], [1.0, "def solve_014f2cf0(I):\n    x1 = identity(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = equality(x2, FOUR)\n    x8 = lefthalf(x1)\n    x9 = righthalf(x1)\n    x10 = equality(x9, SIX)\n    x11 = branch(x7, x8, x10)\n    x12 = branch(x10, x9, x11)\n    x13 = shape(x12)\n    x14 = canvas(FIVE, x13)\n    x15 = fgpartition(x14)\n    x16 = merge(x15)\n    x17 = center(x16)\n    x18 = index(I, x17)\n    x19 = asobject(I)\n    x20 = objects(I, T, paint, F)\n    x21 = color(x12)\n    x22 = palette(x12)\n    x23 = remove(x61, x22)\n    x24 = valmax(x23, x12)\n    x25 = halve(x12)\n    x26 = hupscale(x152, x25)\n    x27 = lbind(shift, x26)\n    x28 = mapply(x27, x24)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_3608eccb(I):\n    x1 = fgpartition(I)\n    x2 = rbind(chain, toindices)\n    x3 = lbind(x2, x2)\n    x4 = lbind(rbind, trim)\n    x5 = chain(x4, x3, x2)\n    x6 = compose(color, x5)\n    x7 = fork(recolor, x6, identity)\n    x8 = mapply(x7, x1)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_4831a8ac(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, identity, dmirror)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = trim(x4)\n    x6 = objects(x4, F, T, T)\n    x7 = argmin(x6, width)\n    x8 = normalize(x7)\n    x9 = insert(x7, x8)\n    x10 = height(x9)\n    x11 = width(x9)\n    x12 = interval(ZERO, x11, FOUR)\n    x13 = apply(tojvec, x12)\n    x14 = lbind(shift, x8)\n    x15 = mapply(x14, x13)\n    x16 = fill(x4, ZERO, x15)\n    x17 = objects(x16, T, T, T)\n    x18 = colorfilter(x17, ZERO)\n    x19 = rbind(bordering, v)\n    x20 = mfilter(x19, dmirror)\n    x21 = Mfilter(x19, cmirror)\n    x22 = asindices(x21)\n    x23 = Gmin(x22, last)\n    x24 = fill(x16, ONE, x23)\n    O = replace(x24, ZERO, EIGHT)\n    return O"], [1.0, "def solve_a4561f68(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, height, width)\n    x8 = x7(x2)\n    x9 = width(I)\n    x10 =986\n    equality(x9, x8)\n    x11 = sfilter(x10, x3)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = dmirror(I)\n    x15 = ofcolor(x14, x13)\n    x16 = subgrid(x15, x14)\n    x17 = numcolors(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x16)\n    x21 = ofcolor(x20, x13)\n    x22 = subgrid(x21, x20)\n    x23 = numcolors(x22)\n    x24 = equality(x23, ZERO)\n    x25 = branch(x24, identity, hmirror)\n    x26 = x25(x2)\n    x27 = intersection(x15, x26)\n    O = fill(x20, x13, x27)\n    return O"], [1.0, "def solve_cc3e9368(I):\n    x1 = width(I)\n    x2 = ofcolor(I, ONE)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = ofcolor(x4, ZERO)\n    x6 = replace(x4, ONE, ZERO)\n    x7 = normalize(x6)\n    x8 = width(x6)\n    x9 = divide(x8, x5)\n    x10 = downscale(x9, x12)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, x12)\n    x14 = subgrid(x13, x4)\n    x15 = argmax(x14, width)\n    x16 = normalize(x15)\n    x17 = matcher(first, ZERO)\n    x18 = compose(flip, x17)\n    x19 = rbind(sfilter, x18)\n    x20 = lbind(occurrences, x4)\n    x21 = compose(x20, x19)\n    x22 = rbind(multiply, x9)\n    x23 = compose(x22, x21)\n    x24 = rbind(mapply, x25)\n    x25 = compose(x24, x23)\n    x26 = fork(recolor, mostcolor, x25)\n    x27 = mapply(x26, x13)\n    x28 = paint(x11, x27)\n    O = paint(x28, x100)\n    return O"], [1.0, "def solve_fc06e34e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmin(x2, size)\n    x4 = colorfilter(x1, ONE)\n    x5 = rbind(shoot, UNITY)\n    x6 = rbind(shoot, NEG_UNITY)\n    x7 = fork(combine, x5, x6)\n    x8 = rbind(shoot, UP_RIGHT)\n    x9 = rbind(shoot, DOWN_LEFT)\n    x10 = mapply(x7, x4)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    x13 = fill(I, TWO, x12)\n    x14 = combine(x7, x4)\n    x15 = combine(x12, x13)\n    x16 = combine(x17, x15)\n    x17 = fill(x13, TWO, x16)\n    O = replace(x17, ZERO, ONE)\n    return O"], [1.0, "def solve_ff5ca8f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = apply(color, x10)\n    x12 = merge(x11)\n    x13 = paint(I, x12)\n    x14 = subgrid(x9, x13)\n    x15 = subgrid(x10, x13)\n    x16 = vmirror(x15)\n    x17 = replace(x16, EIGHT, ONE)\n    x18 = height(x17)\n    x19 = divide(x18, THREE)\n    x20 = downscale(x17, x19)\n    x21 = ofcolor(x20, ZERO)\n    x22 = asindices(x21)\n    x23 = toobject(x22, x20)\n    x24 = matcher(first, ZERO)\n    x25 = compose(flip, x24)\n    x26 = sfilter(x23, x25)\n    x27 = normalize(x26)\n    x28 = ulcorner(x27)\n    x29 = paint(x28, x27)\n    x30 = crop(x29, x25, x27)\n    O = ulcorner(x30)\n    return O"], [1.0, "def solve_94311f5e(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = lbind( fork, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind(recolor, x5)\n    x17 = compose(x16, x15)\n    x17 = fork(paint, identity, x17)\n    x18 = fork(other, palette, x5)\n    x19 = lbind(recolor, x5)\n    x20 = chain(x19, invert, NEG_UNITY)\n    x21 = fork(combine, x18, x20)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x22, ulcorner)\n    x24 = rbind(compose, x23)\n    x25 = lbind(rbind, shift)\n    x26 = chain(x24, x25, xroot)\n    x27 = lbind(chain, initset)\n    x28 = lbind(x27, x25)\n    x29 = compose(x28, x15)\n    x30 = fork(x19, x23, x29)\n    x31 = compose(x20, x30)\n    x32 = fork(recolor, x31, x16)\n    x33 = mapply(x32, x11)\n    O = paint(I, x33)\n    return O"], [1.0, "def solve_428e8091(I):\n    x1 = asindices(I)\n    x2 = apply(normalize, x1)\n    x3 = rbind(multiply, THREE)\n    x4 = rbind(multiply, THREE)\n    x5 = apply(x3, x2)\n    x6 = apply(x4, x5)\n    x7 = shift(x2, NEG_UNITY)\n    x8 = x7(x3)\n    x9 = combine(x7, x8)\n    x10 = shift(x1, UNITY)\n    x11 = fill(I, ZERO, x10)\n    x12 = combine(x3, x8)\n    x13 = valuemirror(x12)\n    O = paint(x11, x13)\n    return O"], [1.1, "def solve_e84b5764(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = argmin(x2, numcolors)\n    x5 = normalize(x4)\n    x6 = width(x4)\n    x7 = halve(x6)\n    x8 =24(x4)\n    x9 = height(x4)\n    x10 = width(x4)\n    x11 = interval(ZERO, x9, ONE)\n    x12 = fill(x1, THREE, x11)\n    x13 = astuple(x12, x7)\n    x14 = ORIGIN(x13)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    x17 = UP_RIGHT(x16)\n    x18 = shape(x3)\n    x19 =maximum(x18)\n    x20 = canvas(THREE, x19)\n    x21 = asobject(x3)\n    x22 = paint(x20, x21)\n    x23 = interval(ONE, FIVE, ONE)\n    x24 = invert(x15)\n    x25 = shift(x23, x24)\n    x26 = toivec(x25)\n    x27 = height(xincrement)\n    x28 = matcher(first, THREE)\n    x29 =0000000(ZERO, x28)\n    x30 = branch(x22, x26, x29)\n    x31 = multiply(UNITY, x18)\n    x32 = width(x188)\n    x33 = interval(ZERO, x32, x36)\n    x34 = multiply(THREE, x322)\n    x35 = shift(x17, x34)\n    x36 =ingastuple(ONE, x32)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x30)\n    x39 = lbind(shift, x35)\n    x40 = mapply(x39, x38)\n    O = paint(x22, x40"], [1.1, "def solve_790f2e69(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, T, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = vmatching(x3, x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(x3)\n    x10 = x6(x4)\n    x11 = rbind(contained, x9)\n    x12 = compose(x11, x10)\n    x13 = sfilter(x5, x12)\n    x14 = increment(x13)\n    x15 = rbind(subtract, x14)\n    x16 = lbind(56dc, ZERO)\n    x17 = chain(aba, x16, shape)\n    x18 = fork(228, canvas, x17)\n    x19 = lbind(hconcat, x15)\n    x20 = compose(initset, x18)\n    x21 = fork( insert, x19, x20)\n    x22 = compose(x5, x21)\n    x23 = compress(x17)\n    x24 = corners(x93)\n    x25 = insert(x24, x22)\n    x26 = color(x25)\n    x27 = fill(x18, x26, x25)\n    x28 = compose(ulcorner, x22)\n    x29 = normalize(x25)\n    x30 = fork(subtract, x28, x29)\n    x31 = height(x30)\n    x32 = width(x30)\n    x33 = ofcolor(x31, x24)\n    x34 = astuple(x31, x32)\n    x35 = crop(x30, ORIGIN, x34)\n    x36 = hupscale(x35, x33)\n    x37 = fill(x36, x60, x35)\n    x38 = ofcolor(x37, x"], [1.1, "def solve_ca636cc1(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = extract(x1, size)\n    x4 = subgrid(x3, I)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = neighbors(ORIGIN)\n    x8 = toindices(x2)\n    x9 = lbind(shift, x8)\n    x10 = height(x4)\n    x11 = divide(x10, x5)\n    x12 = increment(x11)\n    x13 = width(x4)\n    x14 = divide(x13, x6)\n    x15 = add(x12, x14)\n    x16 = multiply(x15, x12)\n    x17 = mostcolor(I)\n    x18 = fill(x4, x17, x16)\n    x19 = rbind(contained, x17)\n    x20 = compose(x19, frontiers)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(positive, size, x21)\n    x23 = rbind(sfilter, x22)\n    x24 = compose(x23, vline)\n    x25 = rbind(sfilter, x24)\n    x26 = compose(x25, hline)\n    x27 = rbind(compose,gravitate)\n    x28 = chain(x17, x27, x271)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = fork(compose, x24, x30)\n    x32 = compose(x11, x31)\n    x33 = rbind(compose, initset)\n    x34 = lbind(rbind, manhattan)\n    x35 = compose(x34, x32)\n    x36 = fork(sfilter, x32, x35)\n    x37 = compose(x26, x36)\n    x38 = compose(x27, x36)\n    x39 = fork(val90, x37, x"], [1.1, "def solve_675e8bc5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(multiply, x2)\n    x4 = apply(x3, x2)\n    x5 = lbind(toobject, I)\n    x6 = chain(x110, x5, delta)\n    x7 = asobject(I)\n    x8 = matcher(x6, x7)\n    x9 = mostcolor(I)\n    x10 = colorfilter(x2, x9)\n    x11 = compose(d687, initset)\n    x12 =877ind01x11, x12)\n    x13 = apply(uppermost, x10)\n    x14 = order(x13, identity)\n    x15 = difference(x13, x14)\n    x16 = objects(I, T, F, T)\n    x17 = apply(toindices, x16)\n    x18 = lbind(matcher, x14)\n    x19 = compose(x18, ulcorner)\n    x20 = fork(sfilter, identity, x19)\n    x21 = matcher(x21, x15)\n    x22 = sfilter(x17, x21)\n    x23 = lbind(equality, toindices)\n    x24 = rbind(compose, RIGHT)\n    x25 = compose(x24, x20)\n    x26 = fork(sfilter, identity, x25)\n    x27 = rbind(compose, x21)\n    x28 = lbind(rbind, greater)\n    x29 = compose(x27, x18)\n    x30 = chain(x29, x33, x80)\n    x31 = lbind(compose, x5)\n    x32 = sfilter(x223, x36)\n    x33 = compose(x31, x30)\n    x34 = fork(sfilter, identity, x33)\n    x35 = compose(x27, x98)\n    x36 = lbind(rbind, equality)\n    x37 = compose(x36, rightmost)\n    x38 = chain(x37, x34"], [1.1, "def solve_d1fd82a6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 =557(x6)\n    x8 = chain(de90, ulcorner, asindices)\n    x9 = chain(first, x8, toindices)\n    x10 = fork(equality, identity, x9)\n    x11 = sfilter(x7, x10)\n    x12 = lbind(mapply, x4)\n    x13 = lbind(ofcolor, I)\n    x14 = compose(x12, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = leastcolor(I)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = argmax(x18, x19)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x1, x23)\n    x25 = difference(x Nets, x24)\n    x26 = leastcolor(I)\n    x27 = palette(I)\n    x28 = remove(x16, x27)\n    x29 = other(x28, x35)\n    x30 = toindices(x5)\n    x31 = ofcolor(I, x30)\n    x32 = sizefilter(x31, ONE)\n    x33 = mapply(neighbors, x32)\n    x34 = rbind(adjacent, x33)\n    x35 = toindices(x5)\n    x36 =oister(x35, x30)\n    x37 = sfilter(x36, x35)\n    x38 =85mapply(neighbors, x37)\n    x39 = rbind(86, x34)\n    x"], [1.1, "def solve_a0b7c1e9(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fgpartition(I)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = Fgpartition(I)\n    x6 = merge(x5)\n    x7 = center(x6)\n    x8 = subgrid(x3, I)\n    x9 = leastcolor(x8)\n    x10 = mostcolor(x8)\n    x11 = replace(x4, x9, x10)\n    x12 = replace(x11, x9, x6)\n    x13 = combine(x12, x8)\n    x14 = hconcat(x13, x12)\n    x15 = objects(x14, T, F, T)\n    x16 = rbind(greater, ONE)\n    x17 = compose(x16, size)\n    x18 = sfilter(x15, x17)\n    x19 = difference(x15, x18)\n    x20 = fill(x4, THREE, x19)\n    x21 = compose(normalize, toindices)\n    x22 = x21(x18)\n    x23 = rbind(multiply, x22)\n    x24 = rbind(intersection, x22)\n    x25 = chain(x23, x24, toindices)\n    x26 = lbind(fork, subtract)\n    x27 = x25(x22)\n    x28 = lbind(lbind, shift)\n    x29 = compose(x26, x25)\n    x30 = lbind(chain, x29)\n    x31 = lbind(lbind, subtract)\n    x32 = rbind(x30, x31)\n    x33 = lbind(lbind,YEIGHT)\n    x34 = rbind(last, x22)\n    x35 = chain(x33, x34, initset)\n    x36 = lbind(rbind, rapply)\n    x37 = chain(x38, x36, x to)\n    x38 = lbind(compose, initset)\n    x39 = chain"], [1.1, "def solve_0e0c3e9a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = compress(I)\n    x2 = occurrences(I, x1)\n    x3 = compose(size, dedupe)\n    x4 = matcher(x3, ONE)\n    x5 = rbind(repeat, ONE)\n    x6 = occurrences(I, x1)\n    x7 = compose(size, dedupe)\n    x8 = fork(equality, x4, x7)\n    x9 = chain(x2, first, x8)\n    x10 = compose(first, x9)\n    x11 = fork(astuple, x10, x4)\n    x12 = fork(astuple, x11, x4)\n    x13 = lbind(add, DOWN)\n    x14 = compose(x13, x12)\n    x15 = fork(add, x14, x12)\n    x16 = fork(upscale, x15, x4)\n    x17 = compose(initset, x16)\n    x18 = fork(insert, x17, x14)\n    x19 = chain(backdrop, x177, x18)\n    x20 = fork(recolor, x14, x19)\n    x21 = fork(difference, x17, x14)\n    x22 = chain(size, x20, x21)\n    x23 = matcher(x22, ZERO)\n    x24 = remove(ORIGIN, x2)\n    x25 = remove(x24, x2)\n    x26 = lbind(shift, x21)\n    x27 = mapply(x26, x25)\n    x28 = double(EIGHT)\n    x29 = astuple(x28, x6)\n    x30 = branch(x27, x29, x27)\n    x31 = argmax(x30, x24)\n    x32 = other(x9, x31)\n    x33 = remove(x31, x30)\n    x34 = rbind(contained, x33)\n    x35 = argmin(x32, x34)\n    x36 = other(x32, x25)\n    x37 = increment(x35)\n    x38 =270(x36)\n    "], [1.1, "def solve_03e54cb3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(apply, normalize)\n    x4 = lbind(colorfilter, x2)\n    x5 = chain(size, x3, x4)\n    x6 = matcher(x5, TWO)\n    x7 = lbind(lbind, DOWN)\n    x8 = rbind(argip, LEFT)\n    x9 = compose(x8, initset)\n    x10 = chain(x7, x89, x9)\n    x11 = x9(x1)\n    x12 = x10(x11)\n    x13 = uppermost(x12)\n    x14 = rightmost(x12)\n    x15 = uppermost(x11)\n    x16 = leftmost(x11)\n    x17 = equality(x13, x16)\n    x18 = leftmost(x12)\n    x19 = rightmost(x12)\n    x20 = branch(x17, x18, x19)\n    x21 = rightmost(x12)\n    x22 = ofcolor(I, x121)\n    x23 = difference(x20, x22)\n    x24 = power(uppermost, x23)\n    x25 = compose(normalize, x24)\n    x26 = lbind(apply, x25)\n    x27 = lbind(colorfilter, x225)\n    x28 = chain(x26, x27,555)\n    x29 = rbind(shoot, UNITY)\n    x30 = initset(x29)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(x31, initset)\n    x33 = fork(subtract, x32, identity)\n    x34 = compose(x33, x28)\n    x35 =89228(x340, x34, x28)\n    x36 = fork(add, x24, x35)\n    x37 = multiply(xTEN, x34)\n    x38 = multiply(x34, x38)\n    x39 = add(x37, x38)"], [1.1, "def solve_11a7195b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = argmin(x8, size)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = mostcolor(x11)\n    x13 = colorfilter(x8, x12)\n    x14 = argmin(x13, size)\n    x15 = initset(x14)\n    x16 = insert(x12, x15)\n    x17 = backdrop(x16)\n    x18 = objects(I, T, F, T)\n    x19 = rbind(colorcount, x12)\n    x20 = argmax(x18, x19)\n    x21 = asindices(I)\n    x22 = backdrop(x21)\n    x23 = subgrid(x22, I)\n    x24 = matcher(first, x12)\n    x25 = compose(flip, x24)\n    x26 = sfilter(x25, x24)\n    x27 = subgrid(x26, I)\n    x28 = rbind(multiply, x15)\n    x29 = apply(x28, x27)\n    x30 = normalize(x28)\n    x31 = matcher(first, x14)\n    x32 = sfilter(x30, x31)\n    x33 = normalize(x32)\n    x34 =2dc579dc(x33)\n    x35 = cellwise(x24, x34, x\n    x36 = subgrid(x25, x35)\n    x37 = objects(x36, T, F, T)\n    x38 = colorfilter(x37, x12)\n    x39 = merge(x38)\n    x40 = toind"], [1.1, "def solve_217d7503(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = subgrid(x2, I)\n    x5 = argmax(x4, size)\n    x6 = replace(x5, x3, x5)\n    x7 = replace(x6, x5, x6)\n    x8 =877700(x7, x7)\n    x9 = ulcorner(x2)\n    x10 = llcorner(x2)\n    x11 = add(x10, x9)\n    x12 = double(x11)\n    x13 = asindices(x8)\n    x14 = shift(x13, x12)\n    x15 = partition(x8)\n    x16 = apply(color, x15)\n    x17 = lbind(canvas, NEG_ONE)\n    x18 = lbind(remove, x16)\n    x19 = chain(crement, x18, lbind)\n    x20 = chain(x19,positive, size)\n    x21 = rbind(other, x3)\n    x22 = compose(x21, palette)\n    x23 = fork(astuple, x22, identity)\n    x24 = lbind(recolor, x3)\n    x25 = compose(x24, mostcolor)\n    x26 = fork(paint, identity, x25)\n    x27 = rbind(matcher, x26)\n    x28 = compose(x27, first)\n    x29 = lbind(fork, both)\n    x30 = rbind(x29, x28)\n    x31 = lbind(rbind, astuple)\n    x32 = compose(x31, first)\n    x33 = rbind(compose, x32)\n    x34 = lbind(rbind, difference)\n    x35 = chain(x34, x33, x32)\n    x36 = lbind(chain, x59)\n    x37 = rbind(x36, x59)\n    x38 = lbind(rbind, ofcolor)\n    x39"], [1.1, "def solve_16404906(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, x4)\n    x7 = matcher(first, x3)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x6, x8)\n    x10 = ulcorner(x9)\n    x11 = subgrid(x9, I)\n    x12 = fgpartition(x11)\n    x13 = sfilter(x12, x8)\n    x14 =2dc433d(x13)\n    x15 = height(x9)\n    x16 =)\n    x16 = equality(x15, x16)\n    x17 = branch(x16, x13, x16)\n    x18 = x17(x7)\n    x19 = paint(x9, x18)\n    x20 = height(x10)\n    x21 = width(x10)\n    x22 = halve(x21)\n    x23 = vupscale(x19, x22)\n    x24 = asobject(x23)\n    x25 = matcher(first, x3)\n    x26 = compose(flip, x25)\n    x27 = sfilter(x24, x26)\n    x28 = size(x27)\n    x29 = height(x10)\n    x30 = divide(x29, x24)\n    x31 = increment(x30)\n    x32 = width(x10)\n    x33 = divide(x32, x24)\n    x34 = increment(x33)\n    x35 =3052933(I)\n    x36 = divide(x34, x25)\n    x37 = increment(x36)\n    x38 = divide(x37, x28)\n    x39 = increment(x38)\n    x40 = canvas(x3, x27)\n    x41 = apply(x40, x30)\n    x42 = asobject(x41)\n    x43"], [1.1, "def solve_eca579e6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = power(x25, x26)\n    x28 = astuple(x23, x27)\n    x29 = astuple(x24, x22)\n    x30 = initset)\n    x31 = insert(x29, x30)\n    x32 = insert(x28, x31)\n    x33 =90(x32)\n    x34 = //2000(x33)\n    x35 = dmirror(x349)\n    x36 = x35(x34)\n    x37 = first(x36)\n    x38 = last(x369)\n    x39 = x37(x38)\n    x40 = either(x34, x39)\n    x41 = branch(x40, lefthalf, tophalf)\n    x42 = branch(x40,"], [1.1, "def solve_c9d95fb4(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(numcolors, TWO)\n    x6 = extract(x1, x5)\n    x7 = color(x6)\n    x8 = subgrid(x6, I)\n    x9 = objects(x8, T, F, T)\n    x10 = colorfilter(x9, x7)\n    x11 = argmax(x10, x4)\n    x12 = lowermost(x11)\n    x13 = leftmost(x11)\n    x14 = interval(x12, x13, ZERO)\n    x15 = astuple(x14, x13)\n    x16 = astuple(x14, x11)\n    x17 = repeat(x15, x16)\n    x18 = combine(x16, x17)\n    x19 = rbind(toobject, x8)\n    x20 = compose(normalize, uppermost)\n    x21 = chain(x19, vmirror, x20)\n    x22 = objects(x8, T, F, T)\n    x23 = colorfilter(x22, x7)\n    x24 = astuple(x23, x12)\n    x25 = combine(x28, x24)\n    x26 = EIGHT(x25)\n    x27 = apply(uppermost, x2)\n    x28 = order(x27, identity)\n    x29 = rbind(subgrid, x8)\n    x30 = apply(x29, x28)\n    x31 = apply(vmirror, x30)\n    x32 = papply(equality, x39, x31)\n    x33 = lbind( pair, x48)\n    x34 = lbind(apply, toindices)\n    x35 = rbind(compose, palette)\n    x36 = lbind(lbind, occurrences)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x"], [1.1, "def solve_b6f662d7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = extract(x3, ignore)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = normalize(x2)\n    x8 = color(x5)\n    x9 = color(x6)\n    x10 = toindices(x5)\n    x11 = toindices(x6)\n    x12 = fork(multiply, objects, last)\n    x13 = compose(x12,22)\n    x14 = rbind(multiply, THREE)\n    x15 = compose(x14, last)\n    x16 = rbind(multiply, power)\n    x17 = compose(x16, last)\n    x18 = fork(intersection, x17, x15)\n    x19 = fork(intersection, x15, x141)\n    x20 = fork(intersection, x15, x19)\n    x21 = fork(intersection, x19, x20)\n    x22 = fork(intersection, x19, x21)\n    x23 = compose(normalize, toindices)\n    x24 = uppermost(x5)\n    x25 = LEmost(x6)\n    x26 = lbind(greater, x24)\n    x27 = compose(x26, last)\n    x28 = rbind(greater, x26)\n    x29 = compose(x28, last)\n    x30 = rbind(contained, x32)\n    x31 = uppermost(x17)\n    x32 = leftmost(x67)\n    x33 = subtract(x38, x31)\n    x34 = subtract(x38, x32)\n    x35 = color(x4)\n    x36 = shift(x34, UNITY)\n    x37 =12(x21)\n    x38 = rbind(toobject, I)\n    x39 = remove(x37, x318)\n    x40 =57(x39)\n    x41 = rbind(color"], [1.1, "def solve_d10cfcf2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, NEG_BY_TWO)\n    x3 = insert(TWO_BY_TWO, x1)\n    x4 = contained(TWO, x3)\n    x5 = recolor(NEG_ONE, x4)\n    x6 = double(TWO)\n    x7 = connect(x6, x5)\n    x8 = astuple(THREE, connect)\n    x9 = canvas(NEG_ONE, x8)\n    x10 = connect(x7, x9)\n    x11 = matcher(astuple, x10)\n    x12 = subtract(NEG_TWO, TWO)\n    x13 = shift(x10, x12)\n    x14 = astuple(THREE, TWO)\n    x15 = canvas(NEG_ONE, x14)\n    x16 = astuple(THREE, TWO)\n    x17 = crement(x16)\n    x18 = invert(x17)\n    x19 = shift(x13, x18)\n    x20 = objects(x111, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = rbind(shoot, RIGHT)\n    x23 = compose(x22, center)\n    x24 = fork(recolor, color, x23)\n    x25 = mapply(x24, x22)\n    x26 = paint(x9, x25)\n    x27 = shoot(ORIGIN, UNITY)\n    x28 = remove(x27, x9)\n    x29 = combine(x26, x28)\n    x30 = objects(x222, T, F, T)\n    x31 = apply(double, x30)\n    x32 =801(x31, TWO)\n    x33 =000(x32, x29)\n    x34 = tojvec(x NEG_TWO)\n    x35 = shift(x33, x34)\n    x36 = tojvec(x26)\n    x37 = leftmost(x36)\n    x38 = lbind(shift, x35"], [1.1, "def solve_25681930(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 =ingle(x16)\n    x18 = identity(x17)\n    x19 = fgpartition(x18)\n    x20 = matcher(toindices, x4)\n    x21 = fork(226, identity, x20)\n    x22 =ext(x19, x21)\n    x23 = color(x2)\n    x24 = colorfilter(x19, x23)\n    x25 =85(x24)\n    x26 = compose(positive, size)\n    x27 = rbind(s687, x26)\n    x28 = compose(x27, asindices)\n    x29 = fork(shift, identity, x28)\n    x30 = mapply(x29, x22)\n    x31 = ofcolor(x30, x4)\n    x32 = asindices(x30)\n    x33 = corners(x32)\n    x34 = difference(x33, x31)\n    x35 = toobject(x34, x30)\n    x36 = ofcolor(x35, x4)\n    x37 = fill(x18, x11, x36)\n    x38 = frontiers(x37)\n    x39 = sfilter(x38, hline)\n    x40 = size(x39)\n    x41 = positive(x40)\n    "], [1.1, "def solve_fe03d7cf(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = upscale(x2, x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, width, height)\n    x24 = branch(x5,2018, LEFT)\n    x25 = x24(I)\n    x26 = decrement(x25)\n    x27 = tojvec(x26)\n    x28 = lbind(shift, x12)\n    x29 = x28(x27)\n    x30 = branch(x5, x22, x29)\n    x31 = branch(x5, x27, x30)\n    x32 = x61(x31)\n    x33 = x24(x32)\n    x34 = patch(x33, x14)\n    x35 = other(x34, x41)\n    x36 = x26(x35)\n    x37 = branch(x5, shape, components_02576)\n    x38 =880166666666(x37)\n    x39 = multiply(x38, x37)\n    x40 =6153666666666BY\n     x39(x331)\n    x41 = branch(x"], [1.1, "def solve_54043412(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = fgpartition(x12)\n    x14 = chain(first, last, x13)\n    x15 =8214(x5)\n    x16 = extract(x15, x14)\n    x17 = x16(x6)\n    x18 = palette(x16)\n    x19 =18(x17)\n    x20 = lbind(colorcount, x16)\n    x21 = argmin(x18, x20)\n    x22 = other(x23, x21)\n    x23 = color(x16)\n    x24 = colorfilter(x13, x23)\n    x25 = argmax(x24, x21)\n    x26 = urcorner(x25)\n    x27 = shoot(x26, NEG_UNITY)\n    x28 = remove(x26, x26)\n    x29 = shoot(x28, UNITY)\n    x30 = width(x26)\n    x31 = other(x29, x30)\n    x32 =4442(x25, x31)\n    x33 =000(x32, x27)\n    x34 = ofcolor(x33, x21)\n    x35 = valmin(x34, width)\n    x36 = ofcolor(x33, x25)\n    x37 =    rightmost(x36)\n    x38 = llcorner(x27)\n    x39 = add(x38, UNITY)\n    x40 ="], [1.1, "def solve_72cac4b8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = leftmost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(tojvec, x7)\n    x9 = rbind(sfilter, x8)\n    x10 = chain(first, x9, leftmost)\n    x11 = chain(size, x10, x8)\n    x12 = fork(greater, x11, identity)\n    x13 = fork(greater, x10, identity)\n    x14 = fork(both, x12, x13)\n    x15 = palette(I)\n    x16 =lbind(flip, x14)\n    x17 = remove(x56, x16)\n    x18 = lbind(shift, x4)\n    x19 = mapply(x18, x17)\n    x20 = double(TEN)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = apply(x19, x21)\n    x23 = contained00(x22, x normalize)\n    x24 = apply(x23, x37)\n    x25 = mostcommon(x24)\n    x26 = matcher(x23, x25)\n    x27 = fork(both, x24, x26)\n    x28 = mfilter(x25, x27)\n    x29 = paint(I, x28)\n    x30 =\n    74700464\n    99700006\n    00300047\n    80700008\n    206200000\n    64700000\n    70400000\n    174000000\n    44030043\n    Example output:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    00017140\n    00040200\n    00017624\n    00040649\n    0000000000000000000000000\n    0000000000000000000000000\n    000170145)000000000000\n    000247141000000 v7400000\n    0001641974000000000017400\n    00017624000000000000"], [1.1, "def solve_dcce26be(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(NINE, NINE)\n    x3 = canvas(ZERO, x2)\n    x4 = colorfilter(x1, TWO)\n    x5 = dmirror(x3)\n    x6 = papply(pair, x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(x7, initset)\n    x9 = chain(first, x7, x8)\n    x10 = merge(x1)\n    x11 = x9(x10)\n    x12 = x12(x11)\n    x13 = palette(x12)\n    x14 = matcher(identity, x6)\n    x15 = extract(x13, x14)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x15, I)\n    x18 = hconcat(x17, x16)\n    x19 = objects(x18, T, F, T)\n    x20 = totuple(x19)\n    x21 = apply(color, x20)\n    x22 = mostcommon(x21)\n    x23 = palette(x12)\n    x24 = remove(x23, x30)\n    x25 = other(x24, x22)\n    x26 = ofcolor(x18, x25)\n    x27 = rightmost(x26)\n    x28 = equality(x27, ZERO)\n    x29 = branch(x28, spend, neighbors)\n    x30 = shoot(x29, x27)\n    x31 = gravitate(x30, x17)\n    x32 = initset(x30)\n    x33 = rbind(manhattan, x32)\n    x34 = other(x33, x24)\n    x35 = remove(x34, x30)\n    x36 = astuple(x21, x26)\n    x37 = repeat(x36, x35)\n    x38 = interval(ONE, x31, x37)\n    x39 = matcher(first, x25)\n    x40 = compose("], [1.1, "def solve_7a3a128e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = chain(maximum,\n     lowermost, ZERO)\n    x5 = chain(lowermost, xf, x4)\n    x6 = astuple(NINE, NINE)\n    x7 = interval(ONE, x6, x5)\n    x8 = rbind(contained, x7)\n    x9 = lbind(contained, ZERO)\n    x10 = lbind(extract, x2)\n    x11 = chain(x8, ulcorner, x10)\n    x12 = compose(x9, x11)\n    x13 = fork(astuple, x12, identity)\n    x14 = decrement(x13)\n    x15 = matcher(x4, x14)\n    x16 = rbind(branch, x4)\n    x17 = rbind(x16, x15)\n    x18 = lbind(contained, ZERO)\n    x19 = compose(x18, last)\n    x20 = chain(x18, x17, x19)\n    x21 = compose(x9, x20)\n    x22 = fork(contained, ZERO, last)\n    x23 = compose(x22, x21)\n    x24 = lbind(contained, FOUR)\n    x25 = compose(x24, urcorner)\n    x26 = lbind(greater, SEVEN)\n    x27 = compose(x26, x25)\n    x28 = fork(apply, x17, x27)\n    x29 = lbind(compose, x4)\n    x30 = lbind(matcher, x11)\n    x31 = compose(x29, x30)\n    x32 = fork(sfilter, identity, x31)\n    x33 = fork(compose, xto, x32)\n    x34 = lbind(lbind, shift)\n    x35 = compose(x34, toindices)\n    x36 = lbind(mapply, x35)\n    x37 = fork(apply, x33, x"], [1.1, "def solve_14c71f79(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = matcher(first, x2)\n    x10 = rbind(sfilter, x9)\n    x11 = lbind(343\n    x10)\n    x12 = compose(size,x11)\n    x13 = matcher(x12, x10)\n    x14 = sfilter(x1, x13)\n    x15 = greater(x14, FOUR)\n    x16 = matcher(first, x2)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(dmirror, I)\n    x19 = chain(x17, x18, dmirror)\n    x20 = fork(combine, x17, x19)\n    x21 = compose(x15, x20)\n    x22 = fork(recolor, x21, outbox)\n    x23 = mapply(x22, x16)\n    x24 = paint(I, x23)\n    x25 = asobject(x23)\n    x26 = matcher(first, x2)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = paint(x24, x28)\n    x30 = asobject(x29)\n    x31 = matcher(first, x2)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 = paint(x29, x33)\n    x35 = leftmost(x29)\n    x36 = leftmost(x28)\n    x37 = subtract(x35, x36)\n    x38 = add( NEG_UNITY, x37)\n    x39 = invert(x38)"], [1.1, "def solve_eb059e96(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x692)\n    x34 = rot90(x28)\n    x35 = rot180(x28)\n    x36 = rot270(x28)\n    x37 = matcher(x33, x34)\n    x38 = rot13(x1)\n    x39 = matcher(x34, x35)\n    x40 =768(x39)\n    x41 = asindices(x38)\n    x42 = rbind(toobject, I)\n    x43 = compose(x88, x40)\n    x44"], [1.1, "def solve_d579569a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = switch(x3, 0x5, TWO)\n    x7 ="], [1.1, "def solve_f3d580ab(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(product, x21)\n    x23 = rbind(rapply, x13)\n    x24 = compose(initset, x22)\n    x25 = chain(first, x23, x24)\n    x26 = extract(x19, x25)\n    x27 =762(x60)\n    x28 = compose(positive, size)\n    x29 = rbind(sfilter, x28)\n    x30 = compose(merge, x22)\n    x31 = chain(x30, x29, x30)\n    x32 = rbind(apply, x10)\n    x33 = lbind(position, x DOWN)\n    x34 = chain(x32, x32, x33)\n    x53 = rbind(add, x26)\n    x54 = chain(Example output:\n    x0520\n    x55 = lbind(add, x54)\n    x56 = chain(x, x05, x54)\n    x57 = lbind(position, x7)\n    x538 = chain(x55"], [1.1, "def solve_28a2c93f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = shift(x4, DOWN)\n    x8 = paint(x6, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = fork(vfrontier, lefthalf, center)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x9)\n    x13 = paint(x8, x12)\n    x14 = toindices(x2)\n    x15 = contained(x14, x44)\n    x16 = matcher(first, ZERO)\n    x17 =extract(x15, x16)\n    x18 = difference(x15, x17)\n    x19 =492158(x18, x17)\n    x20 = solve(x19,x6)\n    x21 = slice(x20, x17)\n    x22 = cover(x21, x19)\n    x23 = compress(x22)\n    x24 = astuple(x23, x6)\n    x25 = canvas(ZERO, x24)\n    x26 = asindices(x25)\n    x27 = box(x26)\n    x28 =333(x27)\n    x29 = remove(x28, x x23)\n    x30 = lbind(shift, x25)\n    x31 = argmax(x29, x30)\n    x32 = uppermost(x31)\n    x33 = lowermost(x31)\n    x34 = subtract(x32, x33)\n    x35 = add(x34, x31)\n    x36 = tojvec(x35)\n    x37 = x30(x36)\n    x38 = shift(x24, x37)\n    x39 = combine(x28, x38)\n    x40 = fill(x26, x25, x"], [1.1, "def solve_86128317(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(subtract, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16,42, size)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = branch(x22, x33, x35)\n    x37 = lbind(shift, x27)\n    x38 = fork(recolor, color, x37)\n    x39 = lbind(shift, x26)\n    x40 = fork(connect, x38"], [1.1, "def solve_562f43c7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = fill(x19, x11, x31)\n    x33 = fill(x32, x10, x35)\n    x34 = shift(x33, DOWN)\n    x35 = fill(x29, x10, x34)\n    x36 = shift(x34, up)\n    x37 = fill(x35, x11, x36)\n    x38 = shift(x34, RIGHT)\n    x39 = fill(x37, x10, x38)\n    "], [1.1, "def solve_84ced3a2(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, leftmost)\n    x3 = apply(color, x2)\n    x4 = rbind(subgrid, I)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    x7 = cover(I, x6)\n    x8 = chain(toobject, decrement, height)\n    x9 = chain(x8, decrement, width)\n    x10 = subtract(BY_ONE, x6)\n    x11 = chain(x10, double, x9)\n    x12 = lbind(shift, x6)\n    x13 = fork(x12, x11, x9)\n    x14 = compose(numcolors, x13)\n    x15 = matcher(x14, TWO_BY_TWO)\n    x16 = fork(equality, identity, hmirror)\n    x17 = fork(equality, identity, vmirror)\n    x18 = combine(x16, x17)\n    x19 = cover(x7, x18)\n    x20 =(x19, TWO_BY_TWO)\n    x21 =85(402202, x20)\n    x22 =475(x21)\n    x23 = replace(x22, ZERO, EIGHT)\n    x24 = coercion358(x23)\n    x25 =001\n    8000008\n    0800080\n     lbind(remove, TWO)\n    x26 = lbind(compose, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x24)\n    x29 = chain(min, first, last)\n    x30 = chain(decrement, positive, size)\n    x31 = fork(equality, x29, x30)\n    x32 = fork(add, first, x31)\n    x33 = compose(x32, first)\n    x34 = width(x22)\n    x35 =\n    forExample\n    0800000\n    530000\n    3000000\n    000000\n    0000000\n    \"\"\"\n    x1 = objects(x22"], [1.1, "def solve_bc67ecb2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x5)\n    x10 = color(x4)\n    x11 = subgrid(x4, I)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, hline)\n    x14 = mapply(neighbors, x13)\n    x15 = difference(x12, x14)\n    x16 = toobject(x15, I)\n    x17 = mostcolor(x16)\n    x18 = color(x4)\n    x19 = matcher(identity, x18)\n    x20 = sfilter(x2, x19)\n    x21 = shape(x4)\n    x22 =885(x21)\n    x23 = argmin(x20, x22)\n    x24 = size(x23)\n    x25 = increment(x24)\n    x26 = canvas(ZERO, x25)\n    x27 = asindices(x26)\n    x28 = lrcorner(x27)\n    x29 = toindices(x28)\n    x30 = rbind(contained, x29)\n    x31 =21(x29)\n    x32 = asindices(x31)\n    x33 = lrcorner(x32)\n    x34 = increment(x33)\n    x35 = dneighbors(x34)\n    x36 = toindices(x25)\n    x37 = lbind(shift, x36)\n    x38 =87(x37)\n    x39 = center(x38)\n    x40 = ofcolor(x41, x6)\n    x41 = ofcolor(x41, x7)\n    x42 = position(x39, x40)\n    x43"], [1.1, "def solve_c8533491(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(hmirror, vmirror)\n    x6 = fgpartition(x4)\n    x7 = merge(x6)\n    x8 = difference(x7, x2)\n    x9 =138fcolorfilter(x8, x3)\n    x10 = rbind(mirror,0ca9)\n    x11 = fgpartition(x4)\n    x12 = merge(x11)\n    x13 = objects(x4, T, F, F)\n    x14 = colorfilter(x13, x3)\n    x15 = rbind(hperiod, ONE)\n    x16 = lbind(vperiod, x2)\n    x17 = chain(x15, x16, dneighbors)\n    x18 = fork(equality, identity, x17)\n    x19 = lbind(apply, first)\n    x20 = chain(last, x19, last)\n    x21 = lbind(extract, x5)\n    x22 = compose(x21, x22)\n    x23 = power(outbox, TWO)\n    x24 = fork(section, x22, x23)\n    x25 = lbind(fork, insert)\n    x26 = lbind(x25, decrement)\n    x27 = lbind( initset, x2)\n    x28 = compose(x26, x27)\n    x29 = fork(insert, x25, x28)\n    x30 = urcorner(x29)\n    x31 = matcher(first, x3)\n    x32 = rbind(sfilter, x31)\n    x33 = compose(x32, x22)\n    x34 = fork(42a53, x33, x24)\n    x35 = fork(4225, x22, x34)\n    x36 = fork(shift, normalize, x35)\n    x37 = mapply(x36, x11)\n    O = paint"], [1.1, "def solve_cda539ce(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 =NG Extensions(x9)\n    x12 = shoot(x9, UNITY)\n    x13 = mapply(x12, x11)\n    x14 = insert(x10, x13)\n    x15 = width(x7)\n    x16 = divide(x15, x15)\n    x17 = outbox(x7)\n    x18 = repeat(x16, x17)\n    x19 = combine(x13, x18)\n    x20 = valmax(x14, height)\n    x21 = downscale(x19, x20)\n    x22 = ofcolor(x21, x10)\n    x23 = asindices(x21)\n    x24 = ofcolor(x22, x10)\n    x25 = intersection(x23, x24)\n    x26 = difference(x22, x25)\n    x27 = toobject(x26, x50)\n    x28 = increment(x18)\n    x29 = shift(x27, x28)\n    x30 = toobject(x25, x50)\n    x31 = colorfilter(x30, x10)\n    x32 = rbind(adjacent, x71)\n    x33 =\n    x32 = lbind(lbind, shift)\n    x34 = compose(x33, x12)\n    x35 = fork(compose, x34, x41)\n    x36 = lbind(fork, intersection)\n    x37 = lbind(x36, flip)\n    x38 = rbind(compose, x25)\n    x39 = compose(x38, x12)\n    x40"], [1.1, "def solve_48f752f6(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = fork(Example output:\n    000000000000 identity00000000\n    000000000000555555000000\n    000000000000588855000000\n    000000000000588855000000\n    000000000000588855000000\n    000004442max588855000000\n    00000259338885995000000\n    00000259338885995000000\n    00000529338885994000000\n    00000ivals33555555000000\n    00000555555888833000000\n    00000588855888833000000\n    000058885588885533000000\n    000058885598335555000000\n    000058985598335555000000\n    000058885598335555000000\n    00000777700000000000000000\n    0000055555500000000000000\n    800000008800000000000000\n    80000000088000000000000000\n    000000000000800000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = valmax(x4, size)\n    x6 = apply(color, x5)\n    x7 = rightmost(x2)\n    x8 = remove(x7, x6)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, color)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    x13 = center(x12)\n    x14 =877ind(neighbors, x13)\n    x15 = mapply(neighbors, x13)\n    x16 = astuple(x14, x15)\n    x17 = shift(x1, x16)\n    x18 = paint(I, x3)\n    x19 =showanch(x5)\n    x20 = initset(x13)\n    x21 = insert(x7, x20)\n    x22 = backdrop(x21)\n    x23 = subgrid(x22, x18)\n    x24"], [1.1, "def solve_6ddf619c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_91badc39(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, first)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    x38 = apply(x37"], [1.1, "def solve_387c08c1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, x3, hline)\n    x5 = compose(size, x4)\n    x6 = argmin(x1, x5)\n    x7 = uppermost(x6)\n    x8 = leftmost(x6)\n    x9 = color(x6)\n    x10 = color(x8)\n    x11 = leftmost(x9)\n    x12 = uppermost(x9)\n    x13 = subtract(x11, x12)\n    x14 = add(x13, x7)\n    x15 =14(x6)\n    x16 = subgrid(x15, I)\n    x17 = interval(ZERO, x16,ONE)\n    x18 = lbind(\n    \"\"\"\n    x1 = rbind(multiply, x13)\n    x12 = rbind(divide, x13)\n    x13 = compose(x15, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = lbind(apply, x14)\n    x16 = lbind(rbind, difference)\n    x17 = compose(x15, x16)\n    x18 = fork(sfilter, x17, vline)\n    x19 = fork(shift, x18, ulcorner)\n    x20 = rbind(occurrences, x14)\n    x21 = compose(x20, last)\n    x22 = extract(x19, x21)\n    x23 = rot90(x22)\n    x24 = normalize(x23)\n    x25 = rot180(x24)\n    x26 = normalize(x25)\n    x27 = solve(x16, x23)\n    x28 = objects(x23, T, F, F)\n    x29 = rbind(occurrences, x28)\n    x30 = compose(x29, outbox)\n    x31 = fork(apply, x17, x30)\n    x32 = multiply("], [1.1, "def solve_760a4231(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(shape, THREE_BY_THREE)\n    x3 = matcher(size, FIVE)\n    x4 = partition(I)\n    x5 = sfilter(x4, x2)\n    x6 = fork(intersection, dneighbors, toindices)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = sfilter(x6, x8)\n    x10 = fork(intersection,ineighbors, size)\n    x11 = fork(equality, toindices, x10)\n    x12 = sfilter(x9, x11)\n    x13 = lbind(argmax, x5)\n    x14 = chain(x13, x12, x5)\n    x15 = fork(difference, totuple, x14)\n    x16 = mapply(x15, x12)\n    x17 = fill(I, ZERO, x16)\n    x18 =19888(x17)\n    799998(contained, x9)\n    x19 = branch(x18, vline, hline)\n    x20 = branch(x18, dmirror, hmirror)\n    x21 = x15(x20)\n    x22 = ulcorner(x21)\n    x23 = branch(x18, center, linearmost)\n    x24 = x23(x22)\n    x25 = multiply(x24, x227)\n    x26 = lbind(lbind, shift)\n    x27 = x26(x22)\n    x28 = multiply(x27, x22)\n    x29 = shift(x21, x28)\n    x30 = x29(x22)\n    x31 = palette(x30)\n    x32 = x27(x31)\n    x33 = x26(x25)\n    x34 = rbind(multiply, x33)\n    x35 = apply(x34, x32)\n    x36 = pair(x32, x35)\n    x37 = mapply(x26, x36)\n    O"], [1.1, "def solve_186b58c0(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = x6(I)\n    x8 = maximum(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x9, x9)\n    x11 = sfilter(x10, first)\n    x12 = mapply(last, x11)\n    x13 = paint(I, x12)\n    x14 = interval(ZERO, x8, ONE)\n    x15 = pair(x14, x14)\n    x16 = mapply(first, x15)\n    x17 = fill(x13, ZERO, x16)\n    x18 = astuple(x17, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = portrait(x19)\n    x22 = branch(x21, identity, dmirror)\n    x23 = x22(x28)\n    x24 = dmirror(x23)\n    x25 = papply(pair, x23, x24)\n    x26 = lbind(apply, uppermost)\n    x27 = chain(x26, toindices, x25)\n    x28 = matcher(x27, x29)\n    x29 = fork(add, first, last)\n    x30 = rbind(sfilter, x28)\n    x31 = chain(toindices, x30, x29)\n    x32 = fork(mapply, x31, x21)\n    x33 = rbind(branch, x79)\n    x34 = rbind(x33, x70)\n    x35 = chain(size, dedupe, x28)\n    x36 = fork(pair, x41, x35)\n    x37 = fork(add, x29, x36)\n    x38 = multiply(x38, x37)\n    x39 ="], [1.1, "def solve_a55b4308(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x7)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = normalize(x4)\n    x24 = apemin(x1, x23)\n    x25 = mostcolor(I)\n    x26 = colorcount(x24, x25)\n    x27 =count(x7, x26)\n    x28 = positive(x27)\n    x29 = branch(x28, x24, x27)\n    x30 = multiply(x19, x29)\n    x31 = positive(x30)\n    x32 = branch(x28, x25, x27)\n    x33 = multiply(x26, x32)\n    x34 = tojvec(x33)\n    x35 = double(x customary)\n    x36 = shift(x34, x35)\n    x37 = double(x31)\n    x38 = astuple(x37, x31)\n    x39 = shoot(x28, x38)\n    x40 = mapply(x29, x39)"], [1.1, "def solve_0e5f0731(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(normalize, toindices)\n    x8 = x7(x6)\n    x9 = objects(I, T, F, F)\n    x10 = lbind(apply, x9)\n    x11 = compose(x10, palette)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x12, leftmost)\n    x14 = chain(size, x13, toindices)\n    x15 = fork(minimum, x7, x14)\n    x16 = x15(x6)\n    x17 = extract(x16, x12)\n    x18 = subgrid(x17, I)\n    x19 = trim(x18)\n    x20 = leastcolor(x19)\n    x21 = matcher(x18, x20)\n    x22 = rbind(sfilter, x21)\n    x23 = compose(x22, vline)\n    x24 = rbind(sfilter, x23)\n    x25 = compose(x24, dmirror)\n    x26 = matcher(x25, x20)\n    x27 = lefthalf(x16)\n    x28 = righthalf(x16)\n    x29 = palette(x27)\n    x30 = totuple(x29)\n    x31 = palette(x28)\n    x32 = first(x30)\n    x33 = first(x31)\n    x34 = last(x30)\n    x35 = flip(x34)\n    x36 = ofcolor(x41, x22)\n    x37 = lbind(ofcolor, x41)\n    x38 = compose(x37,x52)\n    x39 = fork(270, x38, identity)\n    x40 = mapply(x39, x29)\n    x41 = dmirror("], [1.1, "def solve_3bc578d9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_c5a0e6f0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_50e97960(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind( colorfilter, x6)\n    x8 = lbind(sfilter, x6)\n    x9 = chain( size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = ofcolor(I, x12)\n    x17 = leftmost(x16)\n    x18 = leftmost(x17)\n    x19 = colorfilter(x16, x14)\n    x20 = incrementa89999)\n    x21 = incrementa89999\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    080000000000000000000000\n    170000000000000000000000\n    17500000000000000000000000\n    000000800000000000000000\n    000000800000000 width00000000\n    02867000000000027\n     incrementment0000000000 width00000000\n    00000040008500)\n    608015404704 vsplitout00\n    00080040800404c444766660000\n    0008004080040464114648880000\n    0004002803389740440648080000\n    00048504000644700164279808\n    0084544509090406428946664880\n    9470848329933404704563384998\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = extract(x1, x5)\n    x2 = subgrid(x1, I)\n    x3 = output:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0001000000000000000000000\n    00018111000000000000000000\n    00018111000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000"], [1.1, "def solve_d4891fb3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = greater(x5, TWO)\n    x7 = branch(x6, I, outbox)\n    x8 = uppermost(x2)\n    x9 = valmin(x1, x8)\n    x10 = double(xx18)\n    x11 = equality(x9, x10)\n    x12 = branch(x11, uppermost, outbox)\n    x13 = branch(x11, uppermost, initset)\n    x14 = branch(x11, uppermost, DOWN)\n    x15 = minimum(x14)\n    x16 = maximum(x14)\n    x17 = astuple(x15, x16)\n    x18 = astuple(x15, x16)\n    x19 = repeat(x17, x18)\n    x20 = CRidentity(x2)\n    x21 = solve(x20, identity)\n    x22 = combine(x19, x21)\n    x23 = center(x2)\n    x24 = astuple(x23, x26)\n    x25 = repeat(x23, x24)\n    x26 = combine(x24, x25)\n    x27 =identity(x6)\n    x28 = leftmost(x2)\n    x29 = equality(x27, x28)\n    x30 = branch(x29, identity, initset)\n    x31 = x30(x22)\n    x32 = x30(x26)\n    x33 =(rapply, x31)\n    x34 = ulcorner(x2)\n    x35 = branch(x as, x33, x34)\n    x36 = subtract(x35, x31)\n    x37 = upscale(x22, x36)\n    x38 =42949(x37)\n    x39 = double(x38)\n    x40 = power(outbox, x39)\n    x41 = leastcolor(I)"], [1.1, "def solve_4827e430(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = frontiers(I)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = objects(I, T, F, T)\n    x9 = rbind(toobject, I)\n    x10 = compose(first, merge)\n    x11 = chain(x10, palette, x9)\n    x12 = matcher(x11, x7)\n    x13 = sfilter(x8, x12)\n    x14 = argmax(x13, xinitset)\n    x15 = remove(x14, x13)\n    x16 = lbind(rbind, intersection)\n    x17 = chain(first, x16, toindices)\n    x18 = compose(x17, frontiers)\n    x19 = fork(argmin, x18, size)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x15)\n    x22 = paint(I, x21)\n    x23 = leftmost(x2)\n    x24 = leftmost(x2)\n    x25 = urcorner(x2)\n    x26 = ulcorner(x2)\n    x27 = shoot(x23, NEG_UNITY)\n    x28 = shoot(x24, DOWN_LEFT)\n    x29 = shoot(x25, UP_R_TWO_BY_ZERO)\n    x30 = combine(x27, x28)\n    x31 = combine(x29, x30)\n    x32 =704(x23, x23)\n    x33 = rbind(contained, x32)\n    x34 = compose(x33, first)\n    x35 = sfilter(x32, x34)\n    x36 = colorfilter(x32, x\n    x37 = combine(x39, x35)\n    x38 = fork(mapply, x45, x37)\n    x39 ="], [1.1, "def solve_c66138ec(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_e37a3fab(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x91)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, shape, x18)\n    x21 = size(x31)\n    x22 = apply(x20, x3)\n    x23 = mapply(x19, x22)\n    x24 = paint(I, x23)\n    x25 = toindices(x11)\n    x26 = x24(x25)\n    x27 = fork(either, vline, hline)\n    x28 = rbind( shoot, x26)\n    x29 = rbind(shoot, x27)\n    x30 = mapply(x28, x27)\n    x31 = underpaint(x24, x30)\n    x32 = objects(x31, T, F, T)\n    x33 = colorfilter(x32, x9)\n    x34 = rbind(manhattan, x30)\n    x35 = compose(x34, initset)\n    x36 = argmin(x33, x35)\n    x37 = sfilter(x33, x28)\n    x38 =vmline(x37)\n    x39 = urcorner"], [1.1, "def solve_654cd64f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =:\n    00000008\n    00088888\n    00008228\n    00008484\n    00008888\n    00000008\n    00000008\n    00000008\n    000000008\n    000000009\n    000000009\n    00000008\n    08888888\n    08888888\n    08888899\n    03886888\n    03886283\n    88886883\n    88886683\n    83886283\n    88886883\n    08888883\n    \"\"\"\n    x1 = sfilter(x1, square)\n    x2 = apply(center, x1)\n    x3 = shift(x2, UNITY)\n    x4 = frontiers(I)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = leastcommon(x6)\n    x8 = rbind(colorcount, x7)\n    x9 = argmin(x5, x8)\n    x10 = repeat(x9, ONE)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, color)\n    x13 = sfilter(x1, x12)\n    x14 = difference(x2, x13)\n    x15 = mostcolor(I)\n    x16 = merge(x14)\n    x17 = fill(I, x15, x16)\n    x18 = compose(cmirror, dmirror)\n    x19 = x18(x17)\n    x20 = initset(x19)\n    x21 = box(x20)\n    x22 = fill(x17, x19, x21)\n    x23 = repeat(x22, ONE)\n    x24 = combine(x3, x23)\n    x25 = merge(x24)\n    double85380000(x25)\n    x25 =    Example output:\n    00000018\n     palette888830\n    00800080000(x25, x83)\n    x39 = vmirror(x25)\n    x40 = asindices(x39)\n    x41"], [1.1, "def solve_b38b899a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(FOUR, FOUR)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(FOUR, FOUR)\n    x9 = canvas(NEG_ONE, x8)\n    x10 = insert(x9, x4)\n    x11 = lbind(contained, x10)\n    x12 = chain(flip, x66, x11)\n    x13 = sfilter(x6, x12)\n    x14 = fork(equality, toindices, box)\n    x15 = fork(add, ulcorner, x14)\n    x16 = fork(connect, lrcorner, x15)\n    x17 = x15(x9)\n    x18 = fork(09629, identity, rot90)\n    x19 = fork(09629, identity, rot180)\n    x20 = compose(last, x18)\n    x21 = compose(first, x19)\n    x22 = fork(astuple, x20, x21)\n    x23 = apply(x22, x13)\n    x24 = size(x1)\n    x25 = greater(x24, FOUR)\n    x26 = interval(TWO, x25, ONE)\n    x27 = apply(x26, x26)\n    x28 = interval(TWO, x25, ONE)\n    x29 = pair(x28, x28)\n    x30 = pair(x29, x28)\n    x31 = fork(equality, identity, rot90)\n    x32 =\u24d8(x31, ONE)\n    x33 = fork(difference, x32, identity)\n    x34 = ofcolor(x31, ZERO)\n    x35 = ulcorner(x34)\n    x36 = lbind(shift, x35)\n    x37 = pair(x34, x36)\n    x38 = lbind(shift, x31)\n    x"], [1.1, "def solve_5240ca47(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = chain(double, dmirror, merge)\n    x4 =equality(x1, x2)\n    x5 = dmirror(x4)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, identity, hmirror)\n    x8 = size(x6)\n    x9 = positive(x8)\n    x10 = branch(x9, vmirror, hmirror)\n    x11 = x10(I)\n    x12 = matcher(identity, ZERO)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(first, x13, color)\n    x15 = subgrid(x6, x4)\n    x16 = difference(x15, x8)\n    x17 = asobject(x16)\n    x18 = matcher(first, ZERO)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = partition(x20)\n    x22 = objects(x11, T, F, F)\n    x23 = colorfilter(x22, ZERO)\n    x24 = compose(toindices, normalize)\n    x25 = matcher(x24, x22)\n    x26 = mfilter(x23, x25)\n    x27 = outbox(x26)\n    x28 = toobject(x27, x11)\n    x29 = difference(x18, x28)\n    x30 = subgrid(x26, x11)\n    x31 = order(x29, identity)\n    x32 = product(x31, x31)\n    x33 = ofcolor(x30, ONE)\n    x34 = ofcolor(x30, TWO)\n    x35 = combine(x33, x34)\n    x36 = mapply(x21, x21)\n    x37 = difference(x35, x36)\n    x38 = power(x44, TWO)\n    x39 = x48(x37)\n    x40 ="], [1.1, "def solve_8d5f43e3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner43(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(either)\n    x20 = partition(I)\n    x21 = matcher(color, ZERO)\n    x22 = sfilter(x20, x21)\n    x23 = difference(x20, x22)\n    x24 = colorfilter(x23, ZERO)\n    x25 = apply( similarlyatching, x24)\n    x26 = size(x25)\n    x27 = equality(x26, something)\n    x28 = branch(x27, positive, size)\n    x29 = ofcolor(I, TWO)\n    x30 = sfilter(x29, x28)\n    x31 = Reasonmax(x30, x29)\n    x32 = ofcolor(I, FOUR)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(manhattan, x33)\n    x35 = argmin(x33, x34)\n    x36 = x32(x35)\n    x37 = ofcolor(I, FOUR)\n    x38 = sizefilter(x37, x36)\n    x39 = apply(initset, x38)\n    x40 = size(x39)\n    "], [1.1, "def solve_4a39ec9c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(Fccorner, first, last)\n    x7 = x6(x2)\n    x8 = lbind(greater, x7)\n    x9 = chain(x8, first, last)\n    x10 = switch(x5, x7, x9)\n    x11 = switch(x10, EIGHT, x9)\n    x12 = switch(x11, TWO, x9)\n    x13 = switch(x12, EIGHT, x9)\n    x14 = lbind(contained, TWO)\n    x15 = chain(toindices, x14, lowermost)\n    x16 = fgpartition(x13)\n    x17 = sfilter(x16, x15)\n    x18 = center(x17)\n    x19 = color(x18)\n    x20 =toindices(x18)\n    x21 = compose(x20, normalize)\n    x22 = matcher(x21, x18)\n    x23 = size(x2)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, x8)\n    x26 = branch(x24, x13, x10)\n    x27 = apply(initset, x22)\n    x28 = sfilter(x27, x26)\n    x29 = rightmost(x28)\n    x30 = increment(x29)\n    x31 = interval(ZERO, x30, ONE)\n    x33 = leftmost(x28)\n    x34 = interval(first, x33, FOUR)\n    x35 = fork(add, x25, x28)\n    x36 = branch(x24, x34, x35)\n    x37 = lbind(shift, x22)\n    x38 = compose(x37,666)\n    x39 = fork(combine, x36, x38)\n    x40 = m"], [1.1, "def solve_131e8da3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, size)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, identity)\n    x15 = subgrid(x14, I)\n    x16 = trim(x15)\n    x17 = asobject(x16)\n    x18 = vperiod(x17)\n    x19 = height(I)\n    x20 = vsplit(I, x19)\n    x21 = apply(asobject, x20)\n    x22 = apply(hperiod, x21)\n    x23 = argmax(x22, identity)\n    x24 = asindices(x23)\n    x25 = ofcolor(x23, ZERO)\n    x26 = difference(x24, x25)\n    x27 =object(x26, x23)\n    x28 = colorfilter(x27, ZERO)\n    x29 = lbind(shift, x23)\n    x30 = mapply(x29, x28)\n    x31 = height(I)\n    x32 = divide(x31, x19)\n    x33 = increment(x32)\n    x34 = width(I)\n    x35 = divide(x34, x39)\n    x36 = increment(x35)\n    x37 = cellwise(x30, x32, x36)\n    x38 = asobject(x37)\n    x39 = occurrences(x34, x38)\n    x40 = shift(x34, x39)\n    x41 = mapply(x44, x40"], [1.1, "def solve_0da97e11(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_f7efaba9(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(x1)\n    x7 = leindices(x6)\n    x8 = rbind(77IG McGill LEind77fd23\n    253263813211163864967667\n    565018668727(x8)\n    x8 = chain(first, input:\n    5111678\"\"\"\n    x9 =91682159(x6, x7)\n    x10 = partition(x6)\n    x11 = order(x10, size)\n    x12 = fork(equality, height, width)\n    x13 = extract(x11, x12)\n    x14 = raise officially(x13)\n    x15 = toindices(x14)\n    x16 = remove(x15, x10)\n    x17 = lbind(vmatching, x35)\n    x18 = x17(x16)\n    x19 = TWO(x18, leftmost)\n    x20 = x17(x19)\n    x21 = shape(x20)\n    x22 = increment(x21)\n    x23 = multiply(x22, x21)\n    x24 = interval(x15, x23, ONE)\n    x25 = apply(invert, x24)\n    x26 = lbind(shift, x15)\n    x27 = mapply(x26, x25)\n    O = paint(x3, x27)\n    return O"], [1.1, "def solve_bc5ee494(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = lefthalf(x7)\n    x9 = palette(x8)\n    x10 = righthalf(x8)\n    x11 = palette(x9)\n    x12 =either(x10, x11)\n    x13 = branch(x12, tophalf, lefthalf)\n    x14 =815(x13, x4)\n    x15 =218rcorner(x14)\n    x16 =da(x15, x14)\n    x17 = palette(x16)\n    x18 = rbind(remove, xIVE)\n    x19 =784(x16, x18)\n    x20 = vmirror(x1999)\n    x21 = matcher(identity, x20)\n    x22 = branch(x12, bottom, x21)\n    O = extract(x19, x22)\n    return O"], [1.1, "def solve_35647b81(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =483\n    68006660\n    66006600\n    80000000\n    10003330\n    60033309\n    06330060\n    38806008\n    83390060\n    88306660\n    \"\"\"\n    x1 = fork(multiply, height, width)\n    x2 = argmax(x1, x1)\n    x3 =363(x2)\n    x4 = leastcommon(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x2)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x12)\n    O = paint(x7, x12)\n    return O"], [1.1, "def solve_a0cafc4f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = leastcolor(I)\n    x10 = ofcolor(I, x9)\n    x11 = shape(I)\n    x12 =850(x11, x12)\n    x13 = normalize(x10)\n    x14 = objects(I, T, F, T)\n    x15 = ofcolor(I, x9)\n    x16 = colorllcorner(x15)\n    x17 = shape(x13)\n    x18 = shoot(x16, x17)\n    x19 =, proly(x18, UNITY)\n    x20 = shoot(x16, DOWN_LEFT)\n    x21 = shoot(x16, 5_rIGHT)\n    x22 = shoot(x16, T, TEN_BY_ZERO)\n    x29 = shoot(x16, UP_RIGHT)\n    x30 = shoot(x16, DOWN_LEFT)\n    x31 = combine(x29, x30)\n    x32 = combine(x27, x31)\n    x33 = ofcolor(I, x9)\n    x34 = ofcolor(I, x8)\n    x35 = combine(x33, x34)\n    x36 = combine(x32, x35)\n    x37 = ofcolor(I, x10)\n    x38 = ofcolor(I, x8)\n    x39 = combine(x37, x38)\n    x40 = fill(I, x9, x39)\n    x41 = fill(x40, x10, x36)\n    O = fill(x41, x8, x36)\n    return O"], [1.1, "def solve_c282a284(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmin(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = colorfilter(x8, x4)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 =greater(x11, ZERO)\n    x13 = branch(x12, dmirror, identity)\n    x14 = x13(x10)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = fgpartition(x16)\n    x18 = merge(x17)\n    x19 = center(x18)\n    x20 = subtract(x19, internalt)\n    x21 = shift(x18, x20)\n    x22 = paint(x7, x21)\n    x23 = first(x22)\n    x24 = remove(x23, x22)\n    x25 = last(x24)\n    x26 = subgrid(x25, x20)\n    x27 = leftmost(x26)\n    x28 = replace(x26, x4, ZERO)\n    x29 = recolor(x28, x27)\n    x30 = shift(x29, x28)\n    x31 = apply(a78 as x30)\n    x32 = merge(x35)\n    x33 = cover(x32, x3)\n    x34 = mapply(vfrontier, x21)\n    x35 = mapply( hfrontier, x21)\n    x36 = shift(x34, x35)\n    x37 =(O = fill(x33, x4, x36)\n    x38 = shift(x35, x37)\n    O = fill(x37, x4, x38)\n    return O"], [1.1, "def solve_36ac4a18(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)f5(shift)\n    x14 = lbind(shift, x11)\n    x15 = lbind(mapply, vfrontier)\n    x16 = lbind(mapply, hfrontier)\n    x17 = fork(intersection, x13, x14)\n    x18 = fork(intersection, x16, x17)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x3)\n    x21 = paint(I, x20)\n    x22 = chain(merge, x19, outbox)\n    x23 = fork(recolor, x7, x22)\n    x24 = mapply(x23, x3)\n    O = paint(x21, x24)\n    return O"], [1.1, "def solve_792058e7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(equality, toindices, corners)\n    x5 = extract(x3, x4)\n    x6 = x5(x2)\n    x7 = fgpartition(I)\n    x8 = merge(x7)\n    x9 =IG9565(x8)\n    x10 = hmirror(x9)\n    x11 = objects(x10, T, F, T)\n    x12 = vmirror(x11)\n    x13 = toindices(x12)\n    x14 = rbind(multiply, UNITY)\n    x15 = lbind(lbind, shift)\n    x16 = compose(x14, x15)\n    x17 = lbind(rbind, toindices)\n    x18 = rbind(intersection, x13)\n    x19 = chain(x17, x18, inl83)\n    x20 =\n     x16(x12)\n    x21 =663(x20)\n    x22 =545(x12)\n    x23 =055(x21, x22)\n    x24 =argmax(x23, size)\n    x25 = matcher(x19, x24)\n    x26 = sfilter(x1, x25)\n    x27 = paint(I, x26)\n    x28 = argmax(x6, size)\n    x29 = subgrid(x28, x4)\n    O = vmirror(x29)\n    return O"], [1.1, "def solve_345e4277(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = extract(x3, hline)\n    x5 = extract(x3, vline)\n    x6 = ulcorner(x4)\n    x7 = ulcorner(x5)\n    x8 = subgrid(x11, I)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    x11 = color(x4)\n    x12 = replace(x8, x11, x10)\n    x13 = argmin(x10, uppermost)\n    x14 = argmax(x10, uppermost)\n    x15 = difference(x13, x14)\n    x16 = leftmost(x14)\n    x17 = difference(x16, x15)\n    x18 = subgrid(x9, I)\n    x19 = merge(x17)\n    x20 =8896044006646(x19)\n    x21 = palette(x19)\n    x22 = lbind(90, x20)\n    x23 = compose(first, x22)\n    x24 = lbind(recolor, x4)\n    x25 = palette(x9)\n    x26 = compose(x24, x25)\n    x27 = fork(combine, x23, x26)\n    x28 = mapply(x27, x5)\n    O = paint(x8, x28)\n    return O"], [1.1, "def solve_4ec1f617(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(FOUR, FOUR)\n    x4 = contained(TWO, x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x16 = astuple(NEG_TWO, ONE)\n    x17 = rbind(shift, x16)\n    x18 = combine(x17, x7)\n    x19 = merge(x7)\n    x20 = astuple(x1, x15)\n    x21 = cmirror(x19)\n    x22 = x5(x21)\n    x23 = paint(x7, x22)\n     x24 = separate(x2, FOUR)\n    x25 =99fa16(x24)\n    x26 = cover(x23, x25)\n    O = paint(x26, x26)\n    return O"], [1.1, "def solve_28802b58(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = extract(x4, size)\n    x6 = objects(I, T, F, F)\n    x7 = color(x5)\n    x8 = matcher(color, x7)\n    x9 = extract(x6, x8)\n    x10 = subgrid(x9, I)\n    x11 = backdrop(x3)\n    x12 = toobject(x11, I)\n    x13 = matcher(first, x9)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x12, x14)\n    x16 = normalize(x15)\n    x17 = palette(x16)\n    x18 = compose(toindices, normalize)\n    x19 = matcher(x18, x12)\n    x20 =436(x16, x15)\n    x21 = colorfilter(x20, x9)\n    x22 = sfilter(x21, x19)\n    x23 = rbind(subgrid, I)\n    x24 = order(x22, uppermost)\n    x25 = apply(uppermost, x24)\n    x26 = vmirror(x25)\n    x27 = shape(x26)\n    x28 = add(TWO, x27)\n    x29 = canvas(x8, x28)\n    x30 = asobject(x26)\n    x31 = shift(x30, UNITY)\n    x32 = paint(x29, x31)\n    x33 = rot90(x32)\n    x34 =80(x33)\n    x35 = hmirror(x34)\n    x36 = vmirror(x34)\n    x37 = sfilter(x35, x36)\n    x38 = combine(x47, x37)\n    x39 = paint(x32, x38)\n    O = x30(x39)\n    return O"], [1.1, "def solve_35bcaa9d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, T, F, T)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 =659(x5)\n    x8 =697e82c(x7)\n    x9 = astuple(x6, x3)\n    x10 = decrement(x9)\n    x11 = remove(x10, x8)\n    x12 = first(x11)\n    x13 = objects(x6, T, F, T)\n    x14 = mapply(toindices, x13)\n    x15 = astuple(x12, x13)\n    x16 = canvas(ZERO, x15)\n    x17 = paint(x16, x9)\n    x18 = objects(x13, T, F, T)\n    x19 = remove(x12, x18)\n    x20 = apply(hfrontier, x19)\n    x21 = mapply(vfrontier, x20)\n    x22 = objects(x17, T, F, T)\n    x23 = size(x12)\n    x24 = power(double, x23)\n    x25 = astuple(x22, x21)\n    x26 = lbind(astuple, x25)\n    x27 = compose(x26, ulcorner)\n    x28 = argmax(x22, x27)\n    x29 = remove(x28, x22)\n    x30 = first(x29)\n    x31 = rbind(multiply, x30)\n    x32 = apply(double, x31)\n    x33 = rbind(multiply, FOUR)\n    x34 = apply(double, x33)\n    x35 = initset(x40)\n    x36 = cover(x17, x35)\n    x37 = fill(x36, THREE, x32)\n    O = fill(x37, astuple, x34)\n    return O"], [1.1, "def solve_5a079597(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(contained, sfilter, Trash)\n    x3 = sfilter(x1, x2)\n    x4 = Tbordering(I)\n    x5 = minimum(x3)\n    x6 =49699992223333\n    x7 = switch(x4, x5, TWO)\n    x8 = argmin(x3, size)\n    x9 = normalize(x8)\n    x10 = color(x9)\n    x11 = palette(x1)\n    x12 = remove(x10, x11)\n    x13 = lbind(colorcount, FOUR)\n    x14 = argmin(x12, x13)\n    x15 =12 normalize(x8)\n    x16 = color(x15)\n    x17 = ofcolor(x16, x9)\n    x18 = subgrid(x17, x8)\n    x19 = leftmost(x17)\n    x20 = width(x16)\n    x21 = increment(x20)\n    x22 = lbind(greater, x21)\n    x23 = compose(x22, last)\n    x24 = sfilter(x17, x23)\n    x25 = asobject(x24)\n    x26 = matcher(first, x14)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = totuple(x28)\n    x30 = apply(increment, x29)\n    x31 = leastcommon(normalize)\n    x32 = rbind(objects, T)\n    x33 =F(x32)\n    x34 = remove(ZERO, x30)\n    x35 = apply(x34, x32)\n    x36 = ofcolor(x35, xOUR)\n    x37 = lbind(shift, x36)\n    x38 = mapply(x37, x32)\n    x39 = fill(x38, TWO, x21)\n    x40 = replace(x39, x10, ZERO)\n    O = fill(x40, x6, x33)\n    return O"], [1.1, "def solve_53cc3ccf(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = chain(dedupe, merge, fgpartition)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, lefthalf, palette)\n    x5 = rbind(greater, TWO)\n    x6 = compose(x5, x4)\n    x7 = lbind(98800\n    x8 = chain(initset, x7, x6)\n    x9 = fork(rapply, x8, identity)\n    x10 = compose(x4, x9)\n    x11 = extract(x1, x10)\n    x12 = x11(x11)\n    x13 = first(x12)\n    x14 = leastcommon(x13)\n    x15 = last(x12)\n    x16 = remove(x14, x1)\n    x17 = heightye17x16)\n    x18 = equality(x17, THREE)\n    x19 = branch(x18, identity, dmirror)\n    x20 = x19(I)\n    x21 = ofcolor(x20, x14)\n    x22 = gravitate(x21, x22)\n    O = shift(x22, x22)\n    return O"], [1.1, "def solve_a3f21570(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = x12(x16)\n    x18 = objects(x5, T, F, T)\n    x19 =6772888\n    018\n    \"\"\"\n    x1 = underfill(x5, x10, x17)\n    x2 = hconcat(x19, x1)\n    x3 = hconcat(x5, x2)\n    x4 =877001(x6, x4)\n    x5 = mapply(dneighbors, x7)\n    x6 = objects(x5, T, F, T)\n    x7 =679(x4)\n    x8 = astuple(x9, x6)\n    x9 = connect(x7, x8)\n    x10 = underfill(x3, x10)\n    O = x4(x10)\n    return O"], [1.1, "def solve_e0170b5a(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = width(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = argmax(x4, size)\n    x6 = canvas(x5, x1)\n    x7 = normalize(x3)\n    x8 = cmirror(x7)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    x11 = cover(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x12)\n    x14 = divide(x13, x12)\n    x15 = width(x12)\n    x16 =extrapply(greater, x15, x12)\n    x17 =377(x16, x14)\n    x18 = vupscale(x17, x12)\n    x19 = shift(x18, UNITY)\n    O = paint(x6, x19)\n    return O"], [1.1, "def solve_69276b2b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = x1(I)\n    x3 = argmax(x2, size)\n    x4 = partition(x3)\n    x5 = color(x3)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x4, x7)\n    x9 = remove(x8, x4)\n    x10 = shape(x8)\n    x11 = center(x8)\n    x12 = crop(x8, DOWN, x10)\n    x13 = first(x12)\n    x14 = objects(x13, product, F, T)\n    x17 = colorfilter(x14, x5)\n    x18 = rbind(manhattan, x3)\n    x19 = order(x17, x18)\n    x20 = first(x19)\n    x21 = subtract(x16, x20)\n    x22 =REE(x21)\n    x23 = replace(x6, x5, x22)\n    x24 = ofcolor(x23, x5)\n    x25 = compose(color, x24)\n    x26 = lbind(recolor, x3)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x27, x26)\n    x29 = mapply(x28, x24)\n    x30 = ofcolor(x29, x5)\n    x31 = rbind(contained, x31)\n    x32 = compose(x31, x30)\n    x33 = sfilter(x30, x32)\n    x34 =7601dmirror(x303)\n    x35 = branch(x34, x24, x28)\n    x36 = shift(x35, x33)\n    x37 = apply(x26, x36)\n    x38 = fork(paint, x24, x28)\n    x39 = mapply(x38, x37)\n    O = paint(x39, x3)\n    return O"], [1.1, "def solve_1f51eb17(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = matcher(x5, hsplit)\n    x7 = extract(x2, x6)\n    x8 = remove(x7, x2)\n    x9 = extract(x8, x6)\n    x10 = greater(x9, EIGHT)\n    x11 = branch(x10, x7, x6)\n    x12 = canvas(x4, THREE_BY_THREE)\n    x13 = branch(x10, TWO, ONE)\n    x14 = branch(x10,993, x13)\n    x15 = branch(x10, FOUR, EIGHT)\n    x16 = ZERO(x11)\n    x17 =649(x16)\n    x18 = multiply(ZERO, THREE)\n    x19 = power(multiply, x18)\n    x20 = astuple(x17, x19)\n    x21 = x20(I)\n    x22 = x11(x21)\n    x23 =ract(x8, x12)\n    x24 = decrement(x23)\n    x25 =lyrcorner(x28)\n    x26 = ulcorner(x28)\n    x27 = subgrid(x25, x119)\n    x28 = trim(x27)\n    x29 = shift(x28, x26)\n    O = paint(x19, x29)\n    return O"], [1.1, "def solve_466287e1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = first(x2)\n    x4 = normalize(x3)\n    x5 = last(x2)\n    x6 = normalize(x5)\n    x7 = color(x4)\n    x8 = color(x6)\n    x9 = toindices(x4)\n    x10 = toindices(x6)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = lbind(shift, x9)\n    x14 = lbind(shift, x10)\n    x15 = compose(x13, first)\n    x16 = compose(x14, last)\n    x17 = fork(intersection, x15, x16)\n    x18 = compose(size, x17)\n    x19 = compose(x13, first)\n    x20 = compose(x14, last)\n    x21 = fork(combine, x19, x20)\n    x22 = compose(x12, x21)\n    x23 = difference(x0, x9)\n    x24 = power(x22, FIVE)\n    x25 = astuple(x23, x24)\n    x26 = astuple(NEG_TWO, x25)\n    x27 = astuple(rot90, rot270)\n    x28 = astuple(rot180, rot180)\n    x29 = astuple(rot270, rot90)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(recolor, x9)\n    x33 = rbind(ofcolor, x7)\n    x34 = mapply(x32, x31)\n    x35 = mapply(x33, x34)\n    x36 =222(x35, x31)\n    x37 = paint(I, x36)\n    O = x10(x37)\n    return O"], [1.1, "def solve_45b492e4(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = subgrid(x5, I)\n    x7 = shoot(x5, UNITY)\n    x8 = power(outbox, TWO)\n    x9 = chain( trials, x8, initset)\n    x10 = power(x9, FOUR)\n    x11 = lowermost(x4)\n    x12 = rightmost(x4)\n    x13 = lbind(greater, x11)\n    x14 = compose(x13, last)\n    x15 = rbind(greater, x12)\n    x16 = compose(x15, last)\n    x17 = combine(x7, x16)\n    x18 =229088775(x5)\n    x19 = merge(x7)\n    x20 = cover(I, x19)\n    x21 = leftmost(x4)\n    x22 = chain(first, last, first)\n    x23 = power(x22, FOUR)\n    x24 = x23(x2)\n    x25 = fork(connect, x23, x24)\n    x26 = fork(recolor, color, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x20, x27)\n    return O"], [1.1, "def solve_4f50167a(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = astuple(TEN, TEN)\n    x3 = canvas(ZERO, x2)\n    x4 =figurebackdrop(x3, ONE)\n    x5 = compose(last, last)\n    x6 = order(x1, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x10 = center(x7)\n    x11 = invert(x10)\n    x12 = shift(x7, x11)\n    x13 = repeat(x9, ONE)\n    x14 = rbind(shift, x11)\n    x15 = compose(x14, last)\n    x16 = apply(x15, x13)\n    x17 = rot90(x16)\n    x18 = shape(x17)\n    x19 = shift(x17, x18)\n    x20 = replace(x17, x9, xIVE)\n    x21 = mostcolor(I)\n    x22 = ofcolor(x20, x21)\n    x23 = lbind(canvas, x22)\n    x24 = apply(x23, x19)\n    x25 = branch(x21, x24, x25)\n    x26 = asobject(x25)\n    x27 = palette(I)\n    x28 = matcher(first, x21)\n    x29 = argmin(x27, x28)\n    x30 = ofcolor(x20, x29)\n    x31 = ofcolor(x20, x1111)\n    x32 = initset(x20)\n    x33 = = rbind(shoot, x32)\n    x34 = vbranch(x30, x33)\n    x35 = mapply(mostcommon, x31)\n    x36 = other(x27, x35)\n    x37 = apply(x31, x36)\n    x38 = apply(x37, x37)\n    x39 = mapply(x38, x36)\n    O = fill(x20, x139, x39)\n    return O"], [1.1, "def solve_4239b9f3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = size(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = apply(tojvec, x3)\n    x5 = astuple(ONE, FIVE)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = chain( Dublinitate, last, shape)\n    x9 = lbind(26666888446387\n    x10 = initset(ORIGIN)\n    x11 = lbind(extract, x10)\n    x12 = lbind(matcher, first)\n    x13 = chain(x12,flip, mostcolor)\n    x94 =45(x6)\n    x15 =545(x6)\n    x16 = compose(first, x13)\n    x17 = compose(last, x13)\n    x18 = lbind(matcher, first)\n    x19 = compose( last, x13)\n    x20 = fork(astuple, x18, x19)\n    x21 = compose(indices, x20)\n    x22 = fork(m5, x21, outbox)\n    x23 = compose(backdrop, x22)\n    x24 = mapply(x23, x4)\n    O = fill(I, FOUR, x24)\n    return O"], [1.1, "def solve_2614f82c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = leftmost(x3)\n    x6 = interval(x5, TEN, TWO)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x5)\n    x11 = add(x5, THREE)\n    x12 = interval(x10, TEN, FOUR)\n    x13 = astuple(x11, x12)\n    x14 = lbind(shoot, x5)\n    x15 = tojvec(x10)\n    x16 = matcher(last, x15)\n    x17 = apply(x16, x13)\n    x18 = lbind(bordering, x...)\n    x19 = compose(x18, asobject)\n    x20 = rbind(compose, last)\n    x21 = lbind(rbind, valmin)\n    x22 = chain(x20, x21, x19)\n    x23 = lbind(rbind, mostcolor)\n    x24 = chain(x23, x22, x12)\n    x25 = lbind( mapply, x4)\n    x26 = rbind(sfilter, x12)\n    x27 = compose(x25, x26)\n    x28 = chain(x30, x27, xp)\n    x29 = mapply(x28, x17)\n    x30 = combine(x29, x15)\n    x31 = fill(I, x4, x30)\n    x32 = combine(x28, x130)\n    x33 = replace(x31, x4, FIVE)\n    O = fill(x33, x1, x32)\n    return O"], [1.1, "def solve_f6df5a27(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = sizefilter(x4, x5)\n    x7 = merge(x6)\n    x8 = width(x6)\n    x9 = subtract(x8, x5)\n    x10 = upscale(x7, x9)\n    x11 = asobject(x10)\n    x12 = palette(I)\n    x13 = other(x12, ZERO)\n    x14 = ofcolor(I, x13)\n    x15 = asindices(I)\n    x16 = outbox(x15)\n    x17 = lbind(rbind, difference)\n    x18 = compose(x17, toindices)\n    x19 = lbind(lbind, colorcount)\n    x20 =355(x16)\n    x21 = matcher(x19, x20)\n    x22 = lbind(colorcount, I)\n    x23 = subtract(x20, x22)\n    x24 = repeat(x23, ONE)\n    x25 = rbind(rapply, x I)\n    x26 = chain(first, x25, initset)\n    x27 = lbind(apply, x36)\n    x28 = chain(lowermost, x27, x26)\n    x29 = fork(apply, x28, x24)\n    x30 = x29(I)\n    x31 = ofcolor(x30, ZERO)\n    x32 = extract(x31, x22)\n    x33 = x32(x32)\n    x34 = shift(x31, x33)\n    x35 = paint(I, x34)\n    O = x10(x35)\n    return O"], [1.1, "def solve_437bf081(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf88\n    phalf)\n    gighthalf88\n     EIGHT16100000000000000\n    0000000770000000000000\n    000000000001888888000\n    0000000000000044444400\n    00000000000000033333000\n    5555555550000003333000\n    5555555550000000000000\n    52222554000000000000000\n    5222255400000000000000\n    55555550000000000000\n    \"\"\"\n    x1 = palette(x3)\n    x2 = other(x1, ZERO)\n    x3 = colorfilter(x1, x2)\n    x4 = first(x3)\n    x5 = dmirror(x4)\n    x6 = shape(x5)\n    x7 =1000(ZERO, x6)\n    x8 = multiply(ONE, x6)\n    x9 = canvas(x2, x8)\n    x10 = lefthalf(x9)\n    x11 = righthalf(x9)\n    x12 = righthalf(x11)\n    x13 = palette(x10)\n    x14 = palette(x12)\n    x15 = intersection(x13, x14)\n    x16 = difference(x15, x12)\n    x17 =2 fill(x11, THREE, x16)\n    x18 = objects(x17, T, T, T)\n    x19 = argmin(x18, size)\n    x20 = shift(x19, UNITY)\n    O = paint(x17, x20)\n    return O"], [1.1, "def solve_dc1aa23f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = r(x6, x4)\n    x8 = leftmost(x2)\n    x9 = color(x8)\n    x10 =uppermost(x2)\n    x11 =99(x10, x8)\n    x12 = uppermost(x2)\n    x13 = increment(x12)\n    x14 = insert(x13, x4)\n    x15 = width(x2)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = width(x2)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = product(x17, x19)\n    x21 = rbind(shoot, DOWN)\n    x22 = mapply(x21, x4)\n    x23 = fill(I, x5, x22)\n    x24 = mapply(x21, x3)\n    O = fill(x23, x9, x24)\n    return O"], [1.1, "def solve_a8018a61(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement,x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 =158(x1, x10)\n    x12 = toindices(x11)\n    x13 =pose(ZERO, x12)\n    x14 = outbox(x13)\n    x15 = ulcorner(x11)\n    x16 = invert(x15)\n    x17 = shift(x14, x16)\n    x18 = apply(ulcorner, x9)\n    x19 = lbind(shift, x17)\n    x20 = mapply(x19, x18)\n    x21 = cover(I, x19)\n    O = fill(x21, ONE, x20)\n    return O"], [1.1, "def solve_dd6afbf6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = width(I)\n    x2 = ofcolor(I, EIGHT)\n    x3 = vline(x2)\n    x4 = height(I)\n    x5 = equality(x4, ZERO)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = order(x7, numcolors)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = vmirror(x10)\n    x12 =\n    x13 = trim(x11)\n    x14 = dmirror(x12)\n    x15 = vconcat(x14, x13)\n    x16 = vconcat(x15, x14)\n    x17 =1511117concat(x16, x16)\n    O = trim(x17)\n    return O"], [1.1, "def solve_f1e1871a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    x7 = last(x6)\n    x8 =69last(x7)\n    x9 = admon head(x8, x6)\n    x10 = shoot(x4, DOWN)\n    x11 = mapply(x26, x10)\n    x12 = fill(I, x6, x11)\n    x13 = partition(x12)\n    x14 = sizefilter(x13, ONE)\n    x15 = difference(x13, x14)\n    x16 = merge(x15)\n    x17 = color(x36)\n    x18 = fill(x12, x17, x16)\n    x19 = shape(x18)\n    x20 = lbind(hfrontier, x19)\n    x21 = identity(ZERO)\n    x22 = cover(x18, x21)\n    x23 = apply(x20, x21)\n    x24 = lbind(shift, x8)\n    x25 = mapply(x24, x23)\n    O = fill(x22, x4, x25)\n    return O"], [1.1, "def solve_3bc1c712(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = NEG_UNITY(x25)\n    x27 = fill(x13, x24, x26)\n    x28 =279(x1)\n    x29 = asobject(x28)\n    x30 = identity(x33)\n    x31 = shape(x31)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, ONE)\n    x35 = mapply(x33, x34)\n    x36 = shift(x35, x12)\n    O = paint(x27, x36)\n    return O"], [1.1, "def solve_bd47fff1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = width(x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = urcorner(x3)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = combine(x6, x8)\n    x10 = fill(I, x4, x9)\n    x11 = ulcorner(x3)\n    x12 = remove(x11, x8)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 =356(x14, ORIGIN)\n    x16 = lbind(multiply, x15)\n    x17 = apply(x16, x13)\n    x18 = mapply(x17, x12)\n    O = paint(x10, x18)\n    return O"], [1.1, "def solve_bf80f4e4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = objects(I, T, F, T)\n    x4 =3305c(I)\n    x5 = astuple(ORIGIN, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = rbind(colorcount,200)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = remove(x10, x3)\n    x12 = lbind(hupscale, x11)\n    x13 = chain(x12, first, first)\n    x14 = fork(combine, x7, x13)\n    x15 = mapply(x14, x11)\n    O = canvas(ZERO, x15)\n    return O"], [1.1, "def solve_554bd58a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = compose(normalize, toindices)\n    x3 = extract(x1, x2)\n    x4 = first(x3)\n    x5 = output:\n    333333\n    0000000\n    333330\n    0000000\n    0000008\n    0000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = ofcolor(x7, TWO)\n    x9 = portrait(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x7)\n    x12 = objects(x7, T, F, T)\n    x13 = order(x12, uppermost)\n    x14 = first(x13)\n    x15 = rightmost(x13)\n    x16 = remove(x14, x13)\n    x17 = apply( uppermost, x16)\n    x18 = increment(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = apply(tojvec, x19)\n    x21 = lbind(shift, x17)\n    x22 = mapply(x21, x20)\n    O = x10(x22)\n    return O"], [1.1, "def solve_fb1b1299(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(occurrences, xf)\n    x15 = compose(x14, x9)\n    x16 = lbind(greater, x10)\n    x17 = compose(x16, x11)\n    x18 = lbind(greater, x11)\n    x19 = compose(x18, x15)\n    x20 =89 compose(x17, x19)\n    x21 = astuple(x15, x17)\n    x22 = fork( combine, x19, x21)\n    x23 = fork(combine, x22, x17)\n    x24 = fork(difference, x23, toindices)\n    x25 = mapply(x24, x5)\n    x26 = intersection(x25, x1)\n    x27 = fill(I, FOUR, x25)\n    x28 = fill(x27, THREE, x26)\n    O = fill(x28,149, x25)\n    return O"], [1.1, "def solve_c23fc1dc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = palette(I)\n    x8 = lrcorner(x3)\n    x9 =685288(x8)\n    x10 = ulcorner(x3)\n    x11 = lrcorner(x3)\n    x12 = remove(x10, x3)\n    x13 = rbind(shift, x11)\n    x14 = argmin(x12, I)\n    x15 = color(x14)\n    x16 = subgrid(x14, I)\n    x17 =21116tmirror(x16)\n    x18 = replace(x17, x90, x15)\n    x19 = normalize(x18)\n    x20 = x14(x19)\n    x21 = shift(x19, UNITY)\n    x22 = delta(x21)\n    O = paint(x18, x22)\n    return O"], [1.1, "def solve_b9c4290e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 =includes ofcolor(x14, x6)\n    x19 = insert(x18, x16)\n    x20 = insert(x16, x19)\n    x21 = apply(x20, x17)\n    x22 = rbind(intersection, x5)\n    x23 = chain(size, x22, F)\n    x24 = argmax(x21, x23)\n    x25 = remove(x24, x21)\n    x26 = lbind(arg neighbors, x24)\n    x27 = compose(x26, last)\n    x28 = rbind(sfilter, x27)\n    x29 = chain(inee, x28, initset)\n    x30 = lbind(mapply, x29)\n    x31 = chain(x30, ofcolor, x24)\n    x32 = fork(difference, x31, x29)\n    x33 = fork(recolor, x30, x32)\n    x34 = mapply(x33, x26)\n    O = paint(x14, x34)\n    return O"], [1.1, "def solve_83bb6632(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(argmax, rightmost)\n    x4 = chain(x3, positive, size)\n    x5 = fork(sfilter, toindices, x4)\n    x6 = mapply(x5, x2)\n    x7 = lbind(greater, x3)\n    x8 = compose(x7, size)\n    x9 = sfilter(x2, x8)\n    x10 = fill(I, TWO, x9)\n    x11 = portrait(x4)\n    x12 = branch(x11, identity, dmirror)\n    x13 = x12(x10)\n    x14 = extract(x6, x13)\n    x15 = ulcorner(x14)\n    x16 = increment(x15)\n    x17 =770(x14)\n    x18 =006000(x17, x16)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x12, x19)\n    0177fc Bamter(x4, x16)\n    x12 = lbind(shift, x4)\n    x13 =6666(x12, x17)\n    x14 = mapply(x13, x12)\n    x15 = ulcorner(x14)\n    x16 = increment(x15)\n    x17 = remove(x16, x1)\n    x18 = subgrid(x14, I)\n    x19 = lbind(colorcount, x18)\n    x20 = argmin(x17, x19)\n    x21 = shift(x23, x20)\n    x22 = other(x23, x21)\n    x23 = ofcolor(x20, x22)\n    x24 = ofcolor(x20, x16)\n    x25 = combine(x23, x24)\n    x26 = difference(x25, x26)\n    x27 = fill(x20, THREE, x27)\n    O = x10(x27)\n    return O"], [1.1, "def solve_65b94470(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = width(I)\n    x2 = rbind(branch, ZERO)\n    x3 = rbind(x2, FIVE)\n    x4 = rbind(32, RIGHT)\n    x5 = chain(x4, decrement, tojvec)\n    x6 = lbind( apply, x5)\n    x7 = compose(x6, tojvec)\n    x8 = ofcolor(I, ZERO)\n    x9 = lefthalf(I)\n    x10 = righthalf(I)\n    x11 = tophalf(x9)\n    x12 = tophalf(x10)\n    x13 = rbind(toobject, I)\n    x14 =8888 bottomhalf(x9)\n    x15 = chain(leastcolor, x13, x14)\n    x16 = palette(x15)\n    x17 = matcher(x15, ZERO)\n    x18 =443(x16, x17)\n    x19 = asindices(x18)\n    x20 = box(x19)\n    x21 = intersection(x19, x20)\n    x22 = first(x21)\n    x23 = asindices(x18)\n    x24 = center(x23)\n    x25 = index(I, x24)\n    x26 =bearing(x22)\n    x27 = paint(I, x26)\n    x28 = x25(x22)\n    x29 = paint(x27, x28)\n    x30 = palette(x29)\n    x31 = lbind(ofcolor, x50)\n    x32 = compose(x31, x15)\n    x33 = fork(rapply, x32, identity)\n    x34 = mapply(x33, x30)\n    x35 = subgrid(x34, x29)\n    x36 = ofcolor(x35, x50)\n    x37 = recolor(x26, x36)\n    x38 = contained(x37, x34)\n    x39 = branch(x38, x20, x37)\n    O = rot90(x39)\n    return O"], [1.1, "def solve_61343fc5(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x258)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = portrait(x23)\n    x26 = branch(x25, x23, x24)\n    x27 = multiply(x28, x26)\n    x28 = greater(x27, ONE)\n    x29 = branch(x25, x23, x248)\n    x30 = branch(x25, x23,x28)\n    x31 = branch(x25, x20, x29)\n    x32 = shape(x26)\n    x33 = addition(x32, x31)\n    x34 = order(x26, x33)\n    x35 = x24(x34)\n    x36 = ofcolor(x35, x ZERO)\n    O = subgrid(x36, x35)\n    return O"], [1.1, "def solve_f6636c60(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(toindices, normalize)\n    x4 = fork( normalize, x3, normalize)\n    x5 = lbind(apply, difference)\n    x6 = compose(cavec, rot90)\n    x7 = chain(x5, x6, x4)\n    x8 = fork(shift, identity, x7)\n    x9 = switch(I, EIGHT, ONE)\n    x10 = cover(x9, x2)\n    x11 = rbind(compose, last)\n    x12 = compose(x11, x10)\n    x13 = fork(argmin, x8, x12)\n    x14 = merge(x1)\n    x15 = compose(size, x13)\n    x16 = argmax(x14, x15)\n    x17 = shift(x16, UP)\n    x18 = paint(x9, x17)\n    x19 = fork(vmirror, x18, identity)\n    x20 = matcher(x19, x17)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(positive, size, x21)\n    x23 = rbind(sfilter, x17)\n    x24 = chain(center, x23, x10)\n    x25 = rbind(f25fbde4(ORIGIN)\n    x26 = chain(first, x25, x19)\n    x27 = compose(x22, x26)\n    x28 = fork(recolor, x27, x24)\n    x29 = mapply(x28, x3)\n    O = paint(x18, x29)\n    return O"], [1.1, "def solve_8e7daf74(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = objects(I, F, F, T)\n    x3 = order(x1, height)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = normalize(x8)\n    x10 = shift(x9, NEG_UNITY)\n    x11 = fill(I, x6, x10)\n    x12 =63ac128(x11)\n    x13 = shift(x12, DOWN_LEFT)\n    x14 = fill(x11, objects, x13)\n    x15 = sizefilter(x4, ONE)\n    x16 = merge(x15)\n    x17 = fill(x14, x7, x16)\n    x18 = mapply(ba97422 fill, x17)\n    O = fill(x18,40168, x3)\n    return O"], [1.1, "def solve_66914d21(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge remove(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [1.1, "def solve_f2b3554d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = center(x13)\n    x15 = subgrid(x2, x5)\n    x16 = branch(x6, hmirror, vmirror)\n    x17 = x16(x10)\n    x18 = height(x17)\n    x19 = width(x17)\n    x20 = toivec(x19)\n    x21 = Fgpartition(x13)\n    x22 = merge(x21)\n    x23 = center(x22)\n    x24 = subtract(x50, x23)\n    x25 = shift(x4, x24)\n    x26 =28(x25)\n    x27 = paint(x15, x26)\n    x28 = objects(x27, F, F, T)\n    x29 = interval(ZERO, x5, ONE)\n    x30 = pair(x29, x28)\n    x31 = apply(first, x30)\n    x32 = astuple(ONE, THREE)\n    x33 = invert(x32)\n    x34 = shift(x31, x33)\n    x35 = fork(shift, identity, x34)\n    x36 = paint(x27, x34)\n    x37 = lbind(shift, x33)\n    x38 = mapply(x37, x35)\n    O = paint(x38, x37)\n    return O"], [1.1, "def solve_0cb312b1(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = fork(equality, toindices, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = toindices(x7)\n    x9 = sizefilter(x8, ONE)\n    x10 = apply(initset, x9)\n    x11 = lbind(argmin, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, initset)\n    x14 = chain(x11, x12, x13)\n    x15 = fork(argmin, x14, size)\n    x16 = cover(I, x7)\n    x17 =595(x16, x15)\n    x18 = fork(both, x17, x15)\n    x19 = mfilter(x18, trip)\n    O = fill(x17, FOUR, x19)\n    return O"], [1.1, "def solve_d16ed9ee(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = ofcolor(I, x2)\n    x4 = size(x3)\n    x5 = positive(x4)\n    7 = branch(ONE, identity, vsplit)\n    x6 = x7(I)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = colorcount(x7, ZERO)\n    x10 = ofcolor(x7, x2)\n    x11 = subgrid(x10, x7)\n    x12 = increment(x11)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x10, x14)\n    x16 = increment(x15)\n    x17 = rbind(greater, x16)\n    x18 = compose(x17, last)\n    x19 = sfilter(x15, x18)\n    x20 = increment(x19)\n    x21 = subgrid(x20, x7)\n    x22 = asobject(x21)\n    x23 = ulcorner(x2)\n    x24 = llcorner(x2)\n    x25 = urcorner(x2)\n    x26 = ulcorner(x2)\n    x27 = objects(x T, T, F, T)\n    x28 = merge(x27)\n    x29 = paint(x7, x28)\n    x30 = subgrid(x2, x7)\n    ulcorner(x2)\n    O = sub12(x30, x30)\n    return O"], [1.1, "def solve_c5911961(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = astuple(TWO, ONE)\n    x6 = rbind(objects, x5)\n    x7 =000(x6, F)\n    x8 = vmirror(x7)\n    x9 = hmirror(x7)\n    x10 = astuple(x8, x9)\n    x11 = combine(x7, x10)\n    x12 =487(x11)\n    x13 = multiply(TWO, FOUR)\n    x14 = shift(x12, x13)\n    x15 = paint(I, x14)\n    x16 = fgpartition(x15)\n    x17 = merge(x16)\n    x18 = paint(x15, x17)\n    x19 = partition(x18)\n    x20 = apply(color, x19)\n    x21 = combine(x13, x20)\n    x22 = rbind(contained, x21)\n    x23 = compose(x22, color)\n    x24 = sfilter(x16, x23)\n    x25 = merge(x24)\n    x26 = palette(x25)\n    x27 = lbind(colorcount, x25)\n    x28 = argmin(x26, x27)\n    x29 = replace(x28, x31, x5)\n    x30 = subgrid(x25, x19)\n    x31 = ofcolor(x30, x31)\n    x32 = asindices(x30)\n    x33 = of color(x32, x31)\n    x34 = mapply(xfrontier, x31)\n    x35 = mapply(x434, x32)\n    x36 = shape(I)\n    x37 = crop(x35, ORIGIN, x36)\n    x38 = branch(x37, x33, x34)\n    x39 = canvas(x38, x36)\n    O = paint(x39, x35)\n    return O"]]}