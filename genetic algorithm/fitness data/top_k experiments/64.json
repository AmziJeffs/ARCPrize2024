{"d56f2372": [[0.273995593168007, "def solve_4e85ac93(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.2743476810143477, "def solve_06a14d96(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_1c4a9639(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_91569a84(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.29037478188052895, "def solve_3c29d6d9(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_eff8d8aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_0bb720d4(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29706172839506173, "def solve_838c46b5(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.30047113780447116, "def solve_e0bbd07c(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [0.31036002669336005, "def solve_b6dc73cb(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.31036002669336005, "def solve_e209b5b3(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3625835941945006, "def solve_1af08b59(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, RIGHT)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.36503557419499444, "def solve_66677735(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = canvas(ZERO, x3)\n    x5 = asindices(x4)\n    x6 = shift(x5, UNITY)\n    x7 = fill(x4, EIGHT, x6)\n    x8 = sizefilter(x1, ONE)\n    x9 = merge(x8)\n    O = fill(x7, TWO, x9)\n    return O"], [0.3700056407469819, "def solve_354d850d(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_609ac074(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_4f92b8b0(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_0f0de2f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_747ce96e(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_ba168895(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_1af721ff(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.370790560948482, "def solve_926b2d28(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [0.3752226479352916, "def solve_b4205573(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = difference(x2, x3)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, I)\n    O = replace(x7, x6, x1)\n    return O"], [0.39591901174509864, "def solve_a3007c1e(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_5c13b520(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_940659ab(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.41519016725520785, "def solve_c162680b(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.41617597321745253, "def solve_2ff5df59(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    O = subgrid(x2, I)\n    return O"], [0.41617597321745253, "def solve_e9447abe(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_33c1fe65(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = vmirror(x3)\n    return O"], [0.41617597321745253, "def solve_64a6b96a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_816c5e87(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_b96f0f15(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_9a2b5eeb(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.41617597321745253, "def solve_31bf0809(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 =subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.41617597321745253, "def solve_cc0f0541(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_f1bf1d51(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, THREE)\n    return O"], [0.41617597321745253, "def solve_f6e00c46(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_47927b08(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_63bf3805(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.41699831998382725, "def solve_931b9881(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.41699831998382725, "def solve_dc7fa2e3(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(colorcount, TWO)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.41699831998382725, "def solve_6434d769(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.4204508671590131, "def solve_1b40185f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_8dd8e318(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_893e1f88(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_7c51cb56(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4245388866968078, "def solve_4b83855d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_bf5f9067(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4245388866968078, "def solve_d60ec429(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_4b45c87f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_3d70225a(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_4c52b982(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_60554e23(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_86ca2e17(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4519109258964331, "def solve_b4e1444e(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4544472391184824, "def solve_1d8e6777(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4544472391184824, "def solve_88df6b03(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4544472391184824, "def solve_77e2e910(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4544472391184824, "def solve_83e23a4d(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4557081334207771, "def solve_23099518(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4557081334207771, "def solve_8374beae(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4647004005119946, "def solve_92c71db5(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [0.46626613107772524, "def solve_6910debe(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.46626613107772524, "def solve_fd0eaeee(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.46924601939094696, "def solve_3d5fe5b9(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.46924601939094696, "def solve_b66faaa4(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.46924601939094696, "def solve_3878e054(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.46924601939094696, "def solve_89c3a05f(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.46924601939094696, "def solve_6b2f99fb(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.47457571038730456, "def solve_7bf9a081(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4761967045300379, "def solve_1993e6e5(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    O = fill(x4, EIGHT, x5)\n    return O"], [0.4761967045300379, "def solve_5498620f(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    O = fill(x4, EIGHT, x5)\n    return O"], [0.4780512509934251, "def solve_f80a4961(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.47887719733946615, "def solve_555572e9(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.47887719733946615, "def solve_ec7f3298(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4838495551165023, "def solve_f8bf6c06(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4869187922819764, "def solve_89016bc5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.4869187922819764, "def solve_572aacd0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.4869187922819764, "def solve_7bd8dc23(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49611068641503425, "def solve_3ec6e59f(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [0.49680581361740783, "def solve_dd026892(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_ddf4daac(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_a1f13bd6(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_88645e22(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_afe519f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5135153382270797, "def solve_fad5d9bb(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5135153382270797, "def solve_61152ffc(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = size(x3)\n    x5 = subtract(FIVE, x4)\n    x6 = astuple(ONE, x4)\n    x7 = canvas(ONE, x6)\n    x8 = astuple(ONE, x5)\n    x9 = canvas(ZERO, x8)\n    O = hconcat(x7, x9)\n    return O"], [0.5135153382270797, "def solve_ad70259b(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5219398502731836, "def solve_ffebfe24(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.5285228126677403, "def solve_42fec540(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = switch(x3, ONE, shift)\n    O = replace(x4, ZERO, FOUR)\n    return O"], [0.5296244860882541, "def solve_385e4c99(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.536787912936649, "def solve_4af1be27(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [0.5492012056649737, "def solve_0aac8b94(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5492012056649737, "def solve_445f33c5(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5548474338329411, "def solve_493fbf8b(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = switch(x3, x4, x3)\n    O = replace(x5, x4, THREE)\n    return O"], [0.5618821514809843, "def solve_38f6e218(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = upscale(x3, TWO)\n    return O"], [0.5652441058672942, "def solve_01d394ee(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5652441058672942, "def solve_f967852c(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.5652441058672942, "def solve_77825d94(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5652441058672942, "def solve_ed807e27(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5728936785168669, "def solve_fed9867a(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5728936785168669, "def solve_fdf6594c(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5728936785168669, "def solve_f18fb790(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5728936785168669, "def solve_48f320c8(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5766800033031917, "def solve_f7d6899b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.5766800033031917, "def solve_8da5d5b1(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.5985774392006277, "def solve_f5979bae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(colorcount, EIGHT)\n    x9 = argmax(x2, x8)\n    O = subgrid(x9, x7)\n    return O"], [0.6151774967157192, "def solve_2daa067d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = lbind(contained, x16)\n    x18 = compose(flip, x17)\n    x19 = mfilter(x16, x18)\n    O = fill(x14, ZERO, x19)\n    return O"], [0.6195255835046275, "def solve_a96a5f0c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6215666154221785, "def solve_53b62efe(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [0.6285917506761496, "def solve_c1d38d56(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6285917506761496, "def solve_9829ae5d(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6572952903476961, "def solve_e657de1d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O"], [0.6624893203432826, "def solve_d2a10ea9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.6670971226328964, "def solve_4db2f834(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = upscale(x3, THREE)\n    return O"], [0.6674861298852472, "def solve_9f0f9fcf(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_a27b3d78(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_c639a856(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(x3)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_0d2a87a6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_752ef4b0(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6682601752430127, "def solve_57b30524(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [0.6682601752430127, "def solve_c0afcae0(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [0.6682601752430127, "def solve_86247db7(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [0.6978401405853463, "def solve_d48b2c92(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.7068705363346716, "def solve_0bcab1ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.7068705363346716, "def solve_8bab46f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.7068705363346716, "def solve_e8234b57(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.7101856891885264, "def solve_a1e583fc(I):\n    x1 = dmirror(I)\n    x2 = cmirror(I)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.7209610573661548, "def solve_b477557f(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ZERO, x3)\n    return O"], [0.7211161591879846, "def solve_f154ee4b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = chain(positive, decrement, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7220296100651739, "def solve_a97f4603(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7226167626040653, "def solve_23029a1b(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7226167626040653, "def solve_4b0417ce(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7226167626040653, "def solve_65679232(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7226167626040653, "def solve_061d094e(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7305542811310891, "def solve_55571bb5(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_f0f323da(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_7a0fb047(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_0d0f9550(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_31899c53(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_f548ce03(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, shape)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_6a0f5fe2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_4af48ba2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_5310a6da(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7328905276644612, "def solve_0e6f9beb(I):\n    x1 = rot90(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot270(x3)\n    return O"], [0.7343088992798957, "def solve_df495d99(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(box, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7346483141124492, "def solve_6efab61a(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.7357135548175452, "def solve_5cb37a19(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, ZERO, x3)\n    return O"], [0.7358950589096905, "def solve_d54796d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = shift(x4, DOWN)\n    x7 = lbind(shift, x6)\n    x8 = ofcolor(I, ONE)\n    x9 = mapply(x7, x8)\n    O = fill(x5, TWO, x9)\n    return O"], [0.7366714434090215, "def solve_31aa8707(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.737990666615944, "def solve_3ae9e594(I):\n    x1 = ofcolor(I, ONE)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(dneighbors, x1)\n    x4 = mapply(ineighbors, x2)\n    x5 = fill(I, SEVEN, x3)\n    O = fill(x5, FOUR, x4)\n    return O"], [0.739396261410893, "def solve_b156dbb8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_8dbe5da9(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_b6496b67(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7400226558178445, "def solve_f94c9bce(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400226558178445, "def solve_d8c4fb8b(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400264296438032, "def solve_42c72446(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7400292259447675, "def solve_c2a6d27d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = fill(x5, ZERO, x9)\n    return O"], [0.7402857765811778, "def solve_e20ab574(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_202eab8a(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_82b233fb(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_d991aeb0(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_66a7160d(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_b539f3d5(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_50a16d06(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7403016058295065, "def solve_fde8600b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_89cd62cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_a5a595f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_ed69c2d8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_86443844(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_4cc70321(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_73934d20(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_dd76ffde(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_34c7adce(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7409001892911791, "def solve_b0e89ee6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = subgrid(x4, I)\n    O = replace(x5, ZERO, TWO)\n    return O"], [0.7413643800290229, "def solve_aa9b3f1b(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.7413643800290229, "def solve_073ea3e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.7413643800290229, "def solve_aea8b87b(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.7413687029127463, "def solve_d4679f74(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, ZERO, x8)\n    return O"], [0.7414217191724711, "def solve_37b1b863(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_1c41336a(I):\n    x1 = objects(I, T, F, T)\n    x2 = objects(I, F, T, T)\n    x3 = argmax(x2, numcolors)\n    x4 = normalize(x3)\n    x5 = remove(x3, x2)\n    x6 = apply(ulcorner, x5)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    O = paint(I, x8)\n    return O"], [0.7414217191724711, "def solve_beaa92d3(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_187eaf30(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_5ceba4ac(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_46a29e61(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_576058b9(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_e880e220(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_4f1267d5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_e6e129e1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414345790655789, "def solve_20fea633(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    O = move(I, x2, DOWN)\n    return O"], [0.7414355847808533, "def solve_70ac5073(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414355847808533, "def solve_a8eeb8c8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414355847808533, "def solve_888cfc73(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414355847808533, "def solve_86d8fae9(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414654147115858, "def solve_3ca8905b(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7414654147115858, "def solve_9fd9d14c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_ddac9da9(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = sfilter(x2, x3)\n    x5 = lbind(mapply, dneighbors)\n    x6 = chain(x5, corners, outbox)\n    x7 = fork(difference, x6, outbox)\n    x8 = ofcolor(I, FIVE)\n    x9 = rbind(intersection, x8)\n    x10 = matcher(size, ZERO)\n    x11 = chain(x10, x9, x7)\n    x12 = mfilter(x4, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7414654147115858, "def solve_df3e4b61(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, TWO)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, THREE, x10)\n    return O"], [0.7414654147115858, "def solve_5af77a3f(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(maximum, shape)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [0.7414654147115858, "def solve_c18707c6(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, ONE, x4)\n    return O"], [0.7414654147115858, "def solve_ec8791b5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_202e2266(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_998c8dad(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_cd534261(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_cebcfbd9(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, size)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_96e0961e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_dd0adea3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, ONE, x4)\n    return O"], [0.7414654147115858, "def solve_1c376fbd(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7414654147115858, "def solve_f567aa7b(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7414654147115858, "def solve_b67e4fa2(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_02478a24(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = objects(I, T, F, T)\n    x7 = colorfilter(x6, ZERO)\n    x8 = rbind(bordering, I)\n    x9 = compose(flip, x8)\n    x10 = mfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7414654147115858, "def solve_faf22420(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.7414654147115858, "def solve_5e579ce0(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7414654147115858, "def solve_e12d1a78(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_b730a219(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7414654147115858, "def solve_405c2d36(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(initset, x2)\n    x4 = difference(x3, x2)\n    x5 = ofcolor(I, x1)\n    x6 = rbind(intersection, x5)\n    x7 = compose(x6, toindices)\n    x8 = mfilter(x4, x7)\n    x9 = fill(I, ZERO, x8)\n    O = fill(x9, leastcolor, x2)\n    return O"], [0.7414654147115858, "def solve_7e142852(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_2a3bc8a9(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = rbind(hmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O"], [0.7414654147115858, "def solve_7ffc006a(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, EIGHT, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.7414654147115858, "def solve_9ac09ed3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, EIGHT, x12)\n    return O"], [0.7414654147115858, "def solve_2a6e40ce(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 =sizefilter(x2, ONE)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7414654147115858, "def solve_e39eccb7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_1307a846(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.7414654147115858, "def solve_2c327830(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7414654147115858, "def solve_28f726fd(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_595f5def(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, ONE, x4)\n    return O"], [0.7414654147115858, "def solve_197c6c04(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(equality, NINE)\n    x3 = compose(x2, size)\n    x4 = fork(equality, height, width)\n    x5 = fork(both, x3, x4)\n    x6 = objects(I, T, F, F)\n    x7 = sfilter(x6, x5)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, center)\n    x10 = mapply(x9, x7)\n    O = underfill(I, EIGHT, x10)\n    return O"], [0.7414654147115858, "def solve_6e89b5f9(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_b1ca7edf(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, THREE, x3)\n    return O"], [0.7414654147115858, "def solve_4ee97e85(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7414949655390087, "def solve_c8627d86(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, THREE)\n    x3 = compose(x2, size)\n    x4 = sfilter(x1, x3)\n    x5 = merge(x4)\n    x6 = palette(x5)\n    x7 = remove(ZERO, x6)\n    x8 = lbind(colorcount, x5)\n    x9 = argmin(x7, x8)\n    x10 = ofcolor(I, x9)\n    x11 = recolor(x9, x10)\n    x12 = difference(x5, x11)\n    x13 = toobject(x12, I)\n    x14 = apply(initset, x13)\n    x15 = rbind(gravitate, x10)\n    x16 = compose(crement, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x14)\n    O = paint(I, x18)\n    return O"], [0.7415156912324505, "def solve_abd287d5(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.7416022713190306, "def solve_95b1b4ad(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.7416022713190306, "def solve_4c4f6ca4(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.7417406125100033, "def solve_4635ba03(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7417406125100033, "def solve_18a0cd20(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7417406125100033, "def solve_92e5191a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7417579528548929, "def solve_ded2df4e(I):\n    x1 = leastcolor(I)\n    x2 = lbind(recolor, NEG_ONE)\n    x3 = rbind(ofcolor, x1)\n    x4 = chain(x2, backdrop, x3)\n    x5 = fork(paint, identity, x4)\n    x6 = height(I)\n    x7 = vsplit(I, x6)\n    x8 = mapply(x5, x7)\n    x9 = ofcolor(x8, NEG_ONE)\n    x10 = dmirror(I)\n    x11 = width(I)\n    x12 = vsplit(x10, x11)\n    x13 = mapply(x5, x12)\n    x14 = dmirror(x13)\n    x15 = ofcolor(x14, NEG_ONE)\n    x16 = combine(x9, x15)\n    O = fill(I, x1, x16)\n    return O"], [0.7419718656880402, "def solve_451dd689(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [0.7420260064287781, "def solve_7a3c6c6c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7420260064287781, "def solve_929edaa9(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7420260064287781, "def solve_d0a3fc9c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7420260064287781, "def solve_0b177f81(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.7420260064287781, "def solve_f996227e(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7420260064287781, "def solve_8c4d2b21(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7421031990992425, "def solve_d77f96c5(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = lbind(prapply, connect)\n    x8 = fork(x7, x6, x6)\n    x9 = compose(merge, x8)\n    x10 = fork(recolor, identity, x9)\n    x11 = mapply(x10, x5)\n    O = paint(I, x11)\n    return O"], [0.7422929363945245, "def solve_e62b7c13(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, FIVE, ZERO)\n    x3 = colorfilter(x1, ZERO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, ONE)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [0.7429519914166027, "def solve_57ef75d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, ulcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [0.7430839091203382, "def solve_db0ad604(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.7431832795883769, "def solve_25b7a802(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7431832795883769, "def solve_73b44f72(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7431832795883769, "def solve_b0ac1319(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7432665475833614, "def solve_f8e4b88a(I):\n    x1 = width(I)\n    x2 = ofcolor(I, ZERO)\n    x3 = urcorner(x2)\n    x4 = shoot(x3, UP_RIGHT)\n    x5 = shoot(x3, DOWN_LEFT)\n    x6 = underfill(I, ZERO, x5)\n    x7 = underfill(x6, EIGHT, x4)\n    x8 = cover(x7, x2)\n    O = fill(x8, ONE, x5)\n    return O"], [0.7434663615646725, "def solve_4f9a08e3(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.7438671741299498, "def solve_950a9a67(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, uppermost)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(TWO, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(apply, x9)\n    x11 = lbind(compose, size)\n    x12 = lbind(lbind, intersection)\n    x13 = compose(x11, x12)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x10, x14, x7)\n    x16 = fork(argmax, x15, x13)\n    x17 = mapply(x16, x4)\n    O = underfill(I, ONE, x17)\n    return O"], [0.744052835815385, "def solve_4b937c96(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, THREE, x2)\n    return O"], [0.7445976659170882, "def solve_832e3b19(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = chain(double, decrement, width)\n    x7 = x6(x5)\n    x8 = compose(vfrontier, tojvec)\n    x9 = lbind(mapply, x8)\n    x10 = rbind(interval, x7)\n    x11 = width(x3)\n    x12 = rbind(x10, x11)\n    x13 = chain(x9, x12, leftmost)\n    x14 = fork(recolor, color, x13)\n    x15 = mapply(x14, x4)\n    x16 = paint(x3, x15)\n    O = x2(x16)\n    return O"], [0.7446400178861889, "def solve_25d96b3b(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.7446400178861889, "def solve_03030e7a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.7448834612331842, "def solve_6389fc4f(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = normalize(x2)\n    x5 = recolor(x3, x4)\n    x6 =shift(x5, UNITY)\n    x7 = merge(x1)\n    x8 = paint(I, x7)\n    O = paint(x8, x6)\n    return O"], [0.7450712646640288, "def solve_6f290a9e(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7450712646640288, "def solve_f99f30b8(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7452006096033813, "def solve_296b5da8(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.7452006096033813, "def solve_941b1436(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.7453226770852263, "def solve_4746a49d(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_d5f3ddea(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_4fd6ac35(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_4ee37969(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_54376769(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453281977266278, "def solve_c9ee19fa(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.7453281977266278, "def solve_d50d969e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.7454216969955122, "def solve_2c4b6ec7(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7456327502654959, "def solve_4d5f9149(I):\n    x1 = objects(I, T, T, T)\n    x2 = interval(ONE, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(ulcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, FOUR, x8)\n    return O"], [0.74590985915603, "def solve_0d214cac(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, ZERO)\n    x12 = fill(x11, THREE, x9)\n    O = fill(x12, EIGHT, x10)\n    return O"], [0.7469832415837261, "def solve_f8f75bfa(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    O = fill(I, THREE, x4)\n    return O"], [0.7473234534622014, "def solve_77a43c5a(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7474257038308011, "def solve_2e0e57e3(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = lbind(toobject, x1)\n    x4 = compose(x2, x3)\n    x5 = vmirror(I)\n    x6 = hmirror(I)\n    x7 = astuple(x5, x6)\n    x8 = argmin(x7, x4)\n    O = subgrid(x1, x8)\n    return O"], [0.7478492983407102, "def solve_acda877f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ZERO, x5)\n    return O"], [0.7480057468975833, "def solve_06dabd8c(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7480057468975833, "def solve_46c3426c(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7481533404620931, "def solve_d7610ea1(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7488659023144327, "def solve_ccaad175(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7489248997580903, "def solve_1577a3e7(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = merge(x1)\n    x4 = lbind(shift, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    O = rot90(x6)\n    return O"], [0.7491210583733974, "def solve_50b8a597(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.7496450540478259, "def solve_07fd68a4(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.7497680518914627, "def solve_e5275bda(I):\n    x1 = objects(I, T, T, T)\n    x2 = interval(ZERO, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(ulcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, EIGHT, x8)\n    return O"], [0.7498499462550435, "def solve_3defbd6d(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7498499462550435, "def solve_3edbfccf(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [0.7498948998515579, "def solve_51e92f40(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7498948998515579, "def solve_9db85a2f(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7498948998515579, "def solve_43b9e2b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7502934600072129, "def solve_e189b706(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, FOUR, x4)\n    return O"], [0.7507990216016639, "def solve_ea022e60(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(invert, halve, shape)\n    x4 = fork(combine, hfrontier, vfrontier)\n    x5 = compose(x2, vmirror)\n    x6 = fork(shift, x5, x3)\n    x7 = compose(toindices, x6)\n    x8 = lbind(mapply, x4)\n    x9 = compose(x8, toindices)\n    x10 = fork(difference, x7, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, EIGHT, x11)\n    return O"], [0.7513616932305588, "def solve_3c9c5c2a(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7517379313306956, "def solve_33af0a9a(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    O = replace(x6, ONE, SIX)\n    return O"], [0.7539502708371614, "def solve_a5aa457e(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, EIGHT, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.755468108640728, "def solve_a0a8b1cd(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.7561961853743412, "def solve_5df0d211(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.7562554233901319, "def solve_232b30ba(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = totuple(x1)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.7562861581891956, "def solve_157cc7e5(I):\n    x1 = objects(I, F, EIGHT, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    O = replace(x6, EIGHT, ONE)\n    return O"], [0.7572794043556649, "def solve_a6556214(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.7572794043556649, "def solve_01a3e763(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.7582273697592505, "def solve_29ceb030(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O"], [0.7586089607072758, "def solve_3f45537a(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.7771381822376172, "def solve_6227c3e7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.7993903947565274, "def solve_0db3c329(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [1.0, "def solve_b133f41b(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_fe016330(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leighbors, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x2)\n    x9 = objects(I, T, F, T)\n    x10 = colorfilter(x9, ONE)\n    x11 = compose(toindices, x6)\n    x12 = fork(either, x12, box)\n    x13 = sfilter(x10, x12)\n    x14 = mapply(x11, x13)\n    x15 = rightmost(x14)\n    x16 = equality(x15, ZERO)\n    x17 = branch(x16, x13, x15)\n    x18 = rbind(toobject, I)\n    x19 = chain(numcolors, x18, delta)\n    x20 = matcher(x19, TWO)\n    x21 = fork(both, x17, x20)\n    x22 = mfilter(x13, x21)\n    x23 = color(x22)\n    x24 = fill(I, x23, x11)\n    O = paint(x24, x22)\n    return O"], [1.0, "def solve_adc54a72(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(bordering, toindices)\n    x4 = extract(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(vmatching, x4)\n    x7 = rbind(hmatching, x4)\n    x8 = combine(x6, x7)\n    x9 = mfilter(x8, vline)\n    x10 = sfilter(x8, hline)\n    x11 = difference(x5, x10)\n    x12 = fill(I, SIX, x9)\n    O = fill(x12, SEVEN, x11)\n    return O"], [1.0, "def solve_1b4bc377(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(vmatching, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = sfilter(x1, x3)\n    x5 = difference(x1, x4)\n    x6 = merge(x1)\n    x7 = merge(x5)\n    x8 = uppermost(x6)\n    x9 = ulcorner(x6)\n    x10 =subtract(x8, x9)\n    x11 = index(I, x10)\n    x12 = equality(x11, ZERO)\n    x13 = branch(x12, vsplit, hsplit)\n    x14 = x13(I, TWO)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = palette(x15)\n    x18 = palette(x16)\n    x19 = intersection(x17, x18)\n    x20 = first(x19)\n    x21 = shape(x15)\n    x22 = canvas(x20, x21)\n    x23 = ofcolor(x15, x20)\n    x24 = ofcolor(x16, x20)\n    x25 = intersection(x23, x24)\n    O = fill(x22, TWO, x25)\n    return O"], [1.0, "def solve_51f8e469(I):\n    x1 = objects(I, T, F, T)\n    x2 = urcorner(x1)\n    x3 = subgrid(x2, I)\n    x4 = toindices(x3)\n    x5 = shoot(x4, x2)\n    x6 = intersection(x5, x4)\n    O = fill(x3, THREE, x6)\n    return O"], [1.0, "def solve_c17a18b8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = argmax(x1, size)\n    x4 = subgrid(x3, I)\n    x5 = width(x4)\n    x6 = divide(x5, THREE)\n    x7 = upscale(x3, x6)\n    x8 = lefthalf(x4)\n    x9 = righthalf(x4)\n    x10 = palette(x8)\n    x11 = palette(x9)\n    x12 = intersection(x10, x11)\n    x13 = EIGHT(x12)\n    x14 = cover(x4, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = lbind(colorcount, x16)\n    x19 = compose(x18, color)\n    x20 = argmin(x17, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = apply(x21, x17)\n    x23 = normalize(x8)\n    x24 = apply(x21, x22)\n    x25 = astuple(FOUR, FOUR)\n    x26 = ulcorner(x48)\n    x27 = shift(x25, x26)\n    x28 = paint(x14, x27)\n    O = subgrid(x3, x28)\n    return O"], [1.0, "def solve_9ad9b7c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = remove(x9, x8)\n    x12 = insert(x10, x11)\n    x13 = lbind(shift, x12)\n    x14 = mapply(x13, x12)\n    O = paint(x7, x14)\n    return O"], [1.0, "def solve_de64cbf5(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, merge, dmirror)\n    x7 = x6(I)\n    x8 = rbind(order, identity)\n    x9 = apply(x8, x7)\n    x10 = last(x7)\n    x11 = remove(x10, x7)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x15)\n    x14 = mpapply(recolor, x13, x9)\n    O = paint(x7, x14)\n    return O"], [1.0, "def solve_27396afc(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_6e31a7da(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, TWO)\n    x5 = branch(x3, TWO, ONE)\n    x6 = branch(x4, THREE, x5)\n    x7 = branch(x4, SEVEN, x6)\n    O = x7(x7)\n    return O"], [1.0, "def solve_2cff173a(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, TWO)\n    x3 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [1.0, "def solve_9e1574a2(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_2dcc38ff(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = llcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, x3)\n    x6 = chain(x5, decrement, width)\n    x7 = fork(greater, maximum, x6)\n    x8 = rbind(add, x3)\n    x9 = compose(x8, tojvec)\n    x10 = fork(equality, toindices, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x1, x11)\n    O = fill(x4, ZERO, x12)\n    return O"], [1.0, "def solve_e0cf1830(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, width, height)\n    x8 = x7(x2)\n    x9 = canvas(x8, UNITY)\n    x10 = multiply(x4, x8)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = prapply(multiply, x12, x214)\n    x14 = first(x13)\n    x15 = last(x13)\n    x16 = apply(tojvec, x12)\n    x17 = interval(x14, x15, ONE)\n    x18 = apply(tojvec, x15)\n    x19 = lbind(shift, x4)\n    x20 = lbind(shift, x9)\n    x21 = compose(x19, x20)\n    x22 = compose(x18, x21)\n    x23 = fork(combine, x17, x22)\n    x24 = mapply(x23, x18)\n    x25 = paint(x9, x24)\n    O = fill(x25, THREE, x2)\n    return O"], [1.0, "def solve_b28d7994(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = branch(x4, vmirror, hmirror)\n    x7 = x5(I)\n    x8 = ulcorner(x3)\n    x9 = subgrid(x3, I)\n    x10 = subtract(x8, x9)\n    x11 = subtract(NOUR, x10)\n    x12 = compose(first, totuple)\n    x13 = x12(x11)\n    x14 = first(x13)\n    x15 = last(x13)\n    x16 = x14(x6)\n    x17 = x5(x16)\n    x18 = crop(x17, x8, x5)\n    x19 = merge(x18)\n    x20 = vmirror(x19)\n    x21 = dmirror(x20)\n    x22 = astuple(x11, x12)\n    x23 = astuple(x25, x12)\n    x24 = compose(decrement, ulcorner)\n    x25 = compose(increment, x24)\n    x26 = apply(x25, x29)\n    x27 = merge(x26)\n    x28 = lbind(shift, x27)\n    x29 = mapply(x28, x26)\n    O = paint(x17, x29)\n    return O"], [1.0, "def solve_bef75f6a(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(compose, last)\n    x3 = lbind(rbind, contained)\n    x4 = chain(x2, x3, palette)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(color, x5)\n    x7 = fork(other, palette, x6)\n    x8 = chain(decide, decrement, height)\n    x9 = chain(decrement, decrement, width)\n    x10 = compose(toivec, x8)\n    x11 = fork(shift, toindices, x10)\n    x12 = chain(toivec, invert, x8)\n    x13 = fork(shift, toindices, x12)\n    x14 = compose(tojvec, x9)\n    x15 = fork(shift, toindices, x14)\n    x16 = chain(tojvec, invert, x9)\n    x17 = fork(shift, toindices, x16)\n    x18 = fork(combine, x11, x13)\n    x19 = fork(combine, x15, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = fork(combine, backdrop, x20)\n    x22 = fork(difference, x21, box)\n    x23 = fork(recolor, x6, x22)\n    x24 = fork(recolor, x7, box)\n    x25 = fork(combine, x23, x24)\n    x26 = mapply(x25, x1)\n    O = paint(I, x26)\n    return O"], [1.0, "def solve_6d4e2208(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ZERO, ORIGIN)\n    x3 = initset(x2)\n    x4 = upscale(x3, THREE)\n    x5 = toindices(x4)\n    x6 = lbind(shift, x5)\n    x7 = rbind(difference, x1)\n    x8 = chain(size, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = lbind(add, NEG_UNITY)\n    x11 = chain(flip, x9, x10)\n    x12 = fork(both, x9, x11)\n    x13 = sfilter(x1, x12)\n    x14 = mapply(x6, x13)\n    O = fill(I, ONE, x14)\n    return O"], [1.0, "def solve_0f6ddb96(I):\n    x1 = objects(I, T, F, F)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(subgrid, I)\n    x4 = order(x2, x3)\n    x5 = apply(toindices, x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, normalize)\n    x8 = mapply(x7, x4)\n    O = fill(I, ZERO, x8)\n    return O"], [1.0, "def solve_60567059(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, T, T)\n    x3 = argmin(x2, size)\n    x4 = argmax(x2, size)\n    x5 = ONE(x4, ONE)\n    x6 = urcorner(x3)\n    x7 = ulcorner(x3)\n    x8 = shoot(x6, NEG_UNITY)\n    x9 = shoot(x6, UNITY)\n    x10 = shoot(x7, DOWN_LEFT)\n    x11 = shoot(x7, UP_RIGHT)\n    x12 = combine(x8, x9)\n    x13 = combine(x10, x11)\n    x14 = fill(x1, SIX, x12)\n    x15 = fill(x14, TWO, x13)\n    O = fill(x15, ONE, x11)\n    return O"], [1.0, "def solve_4e3b2939(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, include, x11)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x9, x14)\n    x16 = matcher(numcolors, ONE)\n    x17 = sfilter(x15, x16)\n    x18 = apply(color, x17)\n    x19 = lbind(contained, x7)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = compose(flip, x21)\n    x23 = fork(both, x21, x22)\n    x24 = fork(both, x17, x23)\n    x25 = fork(combine, hfrontier, vfrontier)\n    x26 = chain(x25, size, x24)\n    x27 = fork(mapply, x26, x24)\n    x28 = fork(apply, x27, x25)\n    x29 = lefthalf(x5)\n    x30 = righthalf(x5)\n    x31 = compose(vert, x28)\n    x32 = righthalf(x28)\n    x33 = fork(shift, x31, x32)\n    x34 = mapply(x33, x19)\n    x35 = paint(x5, x34)\n    O = fill(x35, EIGHT, x3)\n    return O"], [1.0, "def solve_81665022(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, size)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x4, x5)\n    x7 = fill(I, ZERO, x6)\n    x8 = fork(recolor, color, x3)\n    x9 = mapply(x8, x7)\n    O = paint(x7, x9)\n    return O"], [1.0, "def solve_46bcbb21(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = hconcat(x3, x3)\n    x5 = hconcat(x4, x3)\n    x6 = vconcat(x5, x5)\n    x7 = vconcat(x6, x5)\n    O = cellwise(x7, ZERO, TWO)\n    return O"], [1.0, "def solve_d4ccab55(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(backdrop, x1)\n    x3 = mapply(x2, x2)\n    O = fill(I, ONE, x3)\n    return O"], [1.0, "def solve_0b96fc3b(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = merge(x1)\n    x7 = backdrop(x6)\n    x8 = box(x6)\n    x9 = fill(I, x3, x7)\n    x10 = fill(x9, x5, x8)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = cover(x2, x12)\n    x14 = shift(x12, DOWN)\n    x15 = paint(x13, x14)\n    x16 = height(x12)\n    x17 = width(x12)\n    x18 = accurate(x16, x17)\n    x19 = leftmost(x18)\n    x20 = increment(x19)\n    x21 = width(x12)\n    x22 = increment(x21)\n    x23 = frontiers(I)\n    x24 =allastuple(x23, x22)\n    x25 = decrement(x24)\n    x26 = shape(I)\n    x27 = canvas(x5, x26)\n    x28 = tojvec(x12)\n    x29 = shift(x28, x25)\n    x30 = tojvec(x25)\n    x31 =lbind( shift, x30)\n    x32 = height(x12)\n    x33 = decrement(x92)\n    x34 = subtract(x32, x33)\n    x35 = shift(x29, x34)\n    x36 = merge(x31)\n    x37 = fill(x35, x3, x36)\n    x38 = combine(x31, x35)\n    x39 = fill(x37, x5, x38)\n    O = trim(x39)\n    return O"], [1.0, "def solve_32c6c82a(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f3fc6613(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(mapply, x1)\n    x3 = compose(even, x2)\n    x4 = sfilter(x1, x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = switch(I, x5, x6)\n    x8 = color(x7)\n    x9 = lbind(connect, x5)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    O = paint(x7, x11)\n    return O"], [1.0, "def solve_e95f94d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(argmin, x3)\n    x5 = lbind(rbind, manhattan)\n    x6 = compose(x5, initset)\n    x7 = compose(x4, x6)\n    x8 = argmin(x2, x7)\n    x9 = rbind(argmin, x8)\n    x10 = rbind(gravitate, x8)\n    x11 = compose(x10, initset)\n    x12 = fork(add, identity, x11)\n    x13 = fork(connect, identity, x12)\n    x14 = mapply(x13, x2)\n    O = fill(I, ONE, x14)\n    return O"], [1.0, "def solve_e5bd71a9(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, T, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = subgrid(x3, x1)\n    x6 = subgrid(x4, I)\n    x7 = width(x6)\n    x8 = add(x6, x7)\n    x9 = downscale(x3, x8)\n    x10 = ofcolor(x9, ZERO)\n    O = fill(x9, ZERO, x10)\n    return O"], [1.0, "def solve_34bbc582(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    x6 = partition(I)\n    x7 = merge(x6)\n    x8 = color(x2)\n    x9 = subgrid(x2, I)\n    x10 = cover(I, x7)\n    O = paint(x10, x9)\n    return O"], [1.0, "def solve_bc944707(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = objects(x1, T, T, T)\n    x3 = argmin(x2, size)\n    x4 = argmax(x2, size)\n    x5 = ulcorner(x3)\n    x6 = urcorner(x3)\n    x7 = index(I, x5)\n    x8 = equality(x7, EIGHT)\n    x9 = branch(x8, x5, x6)\n    x10 = branch(x8, UNITY, DOWN_LEFT)\n    x11 = multiply(x10, x5)\n    x12 = double(x11)\n    x13 = add(x13, x5)\n    x14 = decrement(x13)\n    x15 = lbind(astuple, x14)\n    x16 = lbind(shift, x3)\n    x17 = compose(x15, x16)\n    x18 = fork(recolor, identity, x17)\n    x19 = mapply(x18, x2)\n    O = paint(x1, x19)\n    return O"], [1.0, "def solve_7ce8673d(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(mapply, dneighbors)\n    x3 = compose(x2, toindices)\n    x4 = fork(recolor, mostcolor, x3)\n    x5 = compose(decrement, ulcorner)\n    x6 = compose(increment, lrcorner)\n    x7 = fork(connect, x5, x6)\n    x8 = compose(hmirror, x7)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(recolor, leastcolor, x9)\n    x11 = mapply(x4, x1)\n    x12 = paint(I, x11)\n    x13 = mapply(x10, x1)\n    O = paint(x12, x13)\n    return O"], [1.0, "def solve_7bbfad94(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, NINE)\n    x3 = colorfilter(x1, ONE)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x2, x5)\n    x7 = rbind(adjacent, x6)\n    x8 = mfilter(x3, x7)\n    O = fill(I, SIX, x8)\n    return O"], [1.0, "def solve_4743dcba(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(toobject, I)\n    x4 = compose(first, delta)\n    x5 = rbind(colorcount, x1)\n    x6 = matcher(x5, TWO)\n    x7 = chain(x6, x3, dneighbors)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(first, x8, toindices)\n    x10 = fork(subtract, x4, x9)\n    x11 = fork(shoot, x4, x10)\n    x12 = mapply(x11, x2)\n    x13 = fill(I, x1, x12)\n    x14 = mapply(delta, x2)\n    O = fill(x13, ZERO, x14)\n    return O"], [1.0, "def solve_d814a401(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    x5 = outbox(x4)\n    x6 = chain(toindices, normalize, toindices)\n    x7 = x6(x6)\n    x8 = lbind(matcher, x7)\n    x9 = chain( seed, x8, x6)\n    x10 = lbind(apply, shape)\n    x11 = chain(size, x10, x6)\n    x12 = matcher(x11, ONE)\n    x13 = lbind(adjacent, x5)\n    x14 = sfilter(x7, x12)\n    x15 = sfilter(x7, x13)\n    x16 = compose(x14, uppermost)\n    x17 = fork(subtract, last, x16)\n    x18 = lbind(rbind, add)\n    x19 = compose(x18, leftmost)\n    x20 = fork(argmin, x18, x19)\n    x21 = compose(x20, x19)\n    x22 = fork(rightmost, x21, compose)\n    x23 = fork(add, x29, x22)\n    x24 = compose(x17, x23)\n    x25 = fork(argmin, x24, x23)\n    x26 = fork(combine, x28, x25)\n    x27 = fork(intersection, x26, last)\n    x28 = mapply(x27, x1)\n    O = fill(I, ZERO, x28)\n    return O"], [1.0, "def solve_b65fd3b4(I):\n    x1 = objects(I, T, F, T)\n    x2 = urcorner(x1)\n    x3 = shoot(x2, DOWN_LEFT)\n    x4 = shoot(x2, LEFT)\n    x5 = shoot(x2, UP_RIGHT)\n    x6 = shoot(x2, DOWN_LEFT)\n    x7 = combine(x3, x4)\n    x8 = combine(x5, x6)\n    x9 = combine(x7, x8)\n    x10 = mapply(delta, x9)\n    O = fill(I, THREE, x10)\n    return O"], [1.0, "def solve_001df345(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_63a40f07(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_786a88b8(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, SIX, x6)\n    return O"], [1.0, "def solve_45314109(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(rbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = intersection(x7, x21)\n    O = fill(x17, EIGHT, x22)\n    return O"], [1.0, "def solve_1da408e5(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_563ecfc8(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_23e899cd(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_d4d7de16(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = ofcolor(x5, ZERO)\n    x7 =0000000000000000\n    x7 = replace(x5, ZERO, x6)\n    x8 = vmirror(x7)\n    x9 = dmirror(x8)\n    x10 = branch(x3, x8, x9)\n    x11 = x4(x10)\n    x12 = ofcolor(x11, ZERO)\n    x13 = subgrid(x12, x11)\n    x14 = trim(x13)\n    x15 = x4(x14)\n    x16 = shift(x15, UNITY)\n    O = fill(x13, ZERO, x16)\n    return O"], [1.0, "def solve_1dfafd9a(I):\n    x1 = objects(I, T, T, T)\n    x2 = interval(ONE, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = astuple(ONE, THREE)\n    x5 = astuple(THREE, ONE)\n    x6 = astuple(THREE, ONE)\n    x7 = halve(x4)\n    x8 = astuple(THREE, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = matcher(first, ZERO)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, I)\n    x14 = compose(x13, toindices)\n    x15 = fork(sfilter, x14, x12)\n    x16 = lbind(lbind, shift)\n    x17 = lbind(occurrences, I)\n    x18 = compose(x16, x17)\n    x19 = fork(6082, x18, outbox)\n    x20 = compose(x7, x19)\n    x21 = sfilter(x3, x20)\n    x22 = multiply(TEN, TEN)\n    x23 = lbind(multiply, x22)\n    x24 = compose(x23, x12)\n    x25 = fork(shift, identity, x24)\n    x26 = mapply(x25, x21)\n    O = paint(x9, x26)\n    return O"], [1.0, "def solve_f4424210(I):\n    x1 = fgpartition(I)\n    x2 = rbind(other, TWO)\n    x3 = compose(x2, palette)\n    x4 = matcher(first, THREE)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(x5, normalize)\n    x7 = lbind(apply, double)\n    x8 = chain(x7, toindices, x6)\n    x9 = rbind(add, NEG_ONE)\n    x10 = lbind(apply, x9)\n    x11 = compose(x10, x8)\n    x12 = lbind(rbind, shoot)\n    x13 = rbind(compose, x12)\n    x14 = lbind(rbind, mapply)\n    x15 = chain(x13, x14, toindices)\n    x16 = fork(mapply, x15, x11)\n    x17 = fork(recolor, x3, x16)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_6817dbda(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8a65afd0(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = argmin(x3, size)\n    x5 = argmax(x3, size)\n    x6 = ONE(x4)\n    x7 = ONE(x5)\n    x8 = combine(x6, x7)\n    x9 = power(outbox, TWO)\n    x10 = fill(I, ONE, x9)\n    x11 = height(x4)\n    x12 = width(x4)\n    x13 = subtract(x11, x12)\n    x14 = add(x13, THREE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = crop(x13, THREE_BY_THREE, x14)\n    x17 = hconcat(x15, x16)\n    x18 = hconcat(xly, x17)\n    x19 = vconcat(x18, x18)\n    x20 = vconcat(x19, x14)\n    x21 = asobject(x20)\n    x22 = multiply(UNITY, TEN)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = mostcolor(I)\n    x26 = toindices(x25)\n    x27 = rbind(multiply, THREE)\n    x28 = toindices(x25)\n    x29 = rbind(multiply, FOUR)\n    x30 = shift(x24, x27)\n    x31 = shift(x25, x28)\n    x32 = combine(x29, x30)\n    x33 = paint(x20, x32)\n    x34 = ofcolor(x33, x25)\n    x35 = gravitate(x34, x33)\n    x36 = shift(x34, x35)\n    O = fill(x33, x25, x36)\n    return O"], [1.0, "def solve_03420572(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = lbind(contained, x16)\n    x18 = compose(x17, size)\n    x19 = sfilter(x16, x18)\n    x20 = subgrid(x19, x14)\n    x21 = fgpartition(x20)\n    x22 = merge(x21)\n    x23 = cover(I, x22)\n    x24 = shift(x22, UNITY)\n    x25 = paint(x23, x24)\n    O = rot90(x25)\n    return O"], [1.0, "def solve_09507553(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(rbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = intersection(x7, x21)\n    O = fill(x17, EIGHT, x22)\n    return O"], [1.0, "def solve_049e6f1a(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = difference(x1, x3)\n    x5 = lbind(matcher, first)\n    x6 = compose(x5, mostcolor)\n    x7 = fork(sfilter, identity, x6)\n    x8 = fork(other, palette, x7)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x7)\n    x11 = compose(x9, x8)\n    x12 = compose(ulcorner, x8)\n    x13 = fork(subtract, ulcorner, x12)\n    x14 = lbind(rbind, add)\n    x15 = compose(x14, x13)\n    x16 = fork(apply, x15, x11)\n    x17 = lbind(lbind, shift)\n    x18 = compose(x17, normalize)\n    x19 = fork(mapply, x18, x10)\n    x20 = fork(mapply, x18, x16)\n    x21 = mapply(x19, x4)\n    x22 = mapply(x20, x4)\n    x23 = paint(I, x21)\n    O = paint(x23, x22)\n    return O"], [1.0, "def solve_9b90ab75(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = corners(x2)\n    x4 = difference(x3, x2)\n    x5 = toobject(x4, I)\n    x6 = mostcolor(x5)\n    x7 = palette(I)\n    x8 = rbind(equality, x6)\n    x9 = argmin(x7, x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = difference(x10, x11)\n    x13 = fill(I, x9, x12)\n    x14 = frontiers(x13)\n    x15 = sfilter(x14, vline)\n    x16 = difference(x14, x15)\n    x17 = fill(x13, x9, x16)\n    x18 = color(x5)\n    x19 = color(x2)\n    x20 = rbind(multiply, UNITY)\n    x21 = apply(x20, x18)\n    x22 = mapply(x22, x21)\n    x23 = fill(x17, x19, x22)\n    x24 = replace(x23, x19, x0)\n    O = fill(x24, x18, x22)\n    return O"], [1.0, "def solve_e788fe4c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizem(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_27f5d1b5(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose( size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = equality(x10, x11)\n    x13 = branch(x12, identity, dmirror)\n    x14 = x13(I)\n    x15 = x13(x14)\n    x16 = x13(x15)\n    x17 = shape(x16)\n    x18 = multiply(x17, x17)\n    x19 = canvas(ZERO, x18)\n    x20 = x13(x16)\n    x21 = x13(x16)\n    x22 = intersection(x19, x21)\n    O = fill(x19, THREE, x22)\n    return O"], [1.0, "def solve_6e938f79(I):\n    x1 = objects(I, T, T, T)\n    x2 = interval(ZERO, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(67385, x5)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, FOUR, x8)\n    return O"], [1.0, "def solve_18384b4b(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = chain(toindices, normalize, x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(rbind, manhattan)\n    x8 = compose(x7, initset)\n    x9 = lbind(remove, ZERO)\n    x10 = compose(x9, x8)\n    x11 = fork(argmin, x10, x7)\n    x12 = fork(gravitate, initset, x5)\n    x13 = compose(crement, x12)\n    x14 = fork(add, identity, x13)\n    x15 = fork(gravitate, initset, x)\n    x16 = compose(crement, x15)\n    x17 = fork(add, identity, x16)\n    x18 = argmin(x1, x17)\n    x19 = rbind(argmin, x18)\n    x20 = rbind(toobject, I)\n    x21 = chain(x19, x20, toindices)\n    x22 = asindices(x21)\n    x23 = difference(x22, x22)\n    x24 = normalize(x21)\n    x25 = color(x24)\n    x26 =indices(x24)\n    x27 = compose(toindices, normalize)\n    x28 = matcher(x27, x25)\n    x29 = asindices(x21)\n    x30 = sfilter(x29, x28)\n    x31 = normalize(x30)\n    x32 = lbind(shift, x31)\n    x33 = mapply(x32, x22)\n    O = paint(I, x33)\n    return O"], [1.0, "def solve_8ffdde18(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_a7c09490(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_b3960996(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = rot270(I)\n    x5 = leastcolor(x4)\n    x6 = mostcolor(x4)\n    O = canvas(x6, x4)\n    return O"], [1.0, "def solve_ba777ddb(I):\n    x1 = objects(I, T, F, T)\n    x2 =Tmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = objects(x7, T, F, T)\n    x10 = objects(x8, T, F, T)\n    x11 = order(x9, leftmost)\n    x12 = apply(color, x11)\n    x13 = repeat(x12, ONE)\n    O = x5(x13)\n    return O"], [1.0, "def solve_ed5df724(I):\n    x1 = objects(I, T, T, T)\n    x2 = size(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = apply(tojvec, x3)\n    x5 = apply(shift, x4)\n    x6 = mapply(vfrontier, x5)\n    x7 = fill(I, EIGHT, x6)\n    x8 = index(x7, DOWN)\n    x9 = fill(x7, x8, x6)\n    x10 = shift(x9, LEFT)\n    x11 = fill(x7, x10, x6)\n    x12 = shift(x9, RIGHT)\n    x13 = fill(x11, x12, x6)\n    x14 = shift(x9, UP)\n    x15 = fill(x13, x14, x6)\n    x16 = shift(x9, DOWN)\n    x17 = fill(x15, x16, x6)\n    x18 = shift(x3, x17)\n    O = fill(x17, x8, x18)\n    return O"], [1.0, "def solve_f65a8021(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = subtract(x2, TWO)\n    x4 = astuple(ONE, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = astuple(ONE, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = hconcat(x5, x7)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [1.0, "def solve_e9d6c0ab(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, TWO, x5)\n    return O"], [1.0, "def solve_8c0c51ed(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(colorcount, FOUR)\n    x3 = argmax(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = remove(x3, x1)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = normalize(x7)\n    x9 = shift(x8, UNITY)\n    O = paint(x7, x9)\n    return O"], [1.0, "def solve_cdd2d4a9(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vmirror(x1)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, ONE, SEVEN)\n    O = canvas(x4, UNITY)\n    return O"], [1.0, "def solve_98d7af51(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [1.0, "def solve_7dc2ec4d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, ONE)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, x3, x4)\n    x9 = x8(x3)\n    x10 = gravitate(x9, x4)\n    x11 = sign(x10)\n    x12 = multiply(x11, x9)\n    x13 = crement(x12)\n    x14 = recolor(EIGHT, x4)\n    x15 = shift(x14, x13)\n    x16 = paint(I, x15)\n    O = move(x16, x3, x5)\n    return O"], [1.0, "def solve_24082e4d(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = merge(x4)\n    x6 = width(x2)\n    x7 = halve(x6)\n    x8 = upscale(x3, x7)\n    x9 = height(x2)\n    x10 = astuple(x9, x8)\n    x11 = canvas(ZERO, x10)\n    x12 = asobject(x8)\n    x13 = matcher(first, ZERO)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x12, x14)\n    x16 = occurrences(I, x15)\n    x17 = lbind(shift, x15)\n    x18 = mapply(x17, x16)\n    O = fill(I, EIGHT, x18)\n    return O"], [1.0, "def solve_55b08be5(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(ONE, THREE)\n    x4 = astuple(TWO, ONE)\n    x5 = initset(x3)\n    x6 = insert(x4, x5)\n    x7 = insert(x6, x2)\n    x8 = merge(x7)\n    x9 = fill(I, THREE, x8)\n    x10 = astuple(TWO, ONE)\n    x11 = astuple(THREE, ONE)\n    x12 = rbind(THREE, x10)\n    x13 = compose(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = lbind(mapply, neighbors)\n    x16 = compose(x15, toindices)\n    x17 = chain(x13, x14, x16)\n    x18 = rbind(argmin, x17)\n    x19 = compose(x18, toindices)\n    x20 = x19(x8)\n    x21 = x19(x70)\n    x22 = x19(x24)\n    x23 = x19(x22)\n    x24 = fill(x9, THREE, x20)\n    x25 = fill(x24, ONE, x23)\n    O = fill(x25, TWO, x28)\n    return O"], [1.0, "def solve_92555d47(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NINE, NINE)\n    x4 = canvas(ZERO, x3)\n    x5 = asindices(x4)\n    x6 = shift(x5, x2)\n    O = fill(I, ONE, x6)\n    return O"], [1.0, "def solve_c1ce72b0(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_107f5778(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(center, x1)\n    x3 = astuple(ONE, THREE)\n    x4 = x2(x3)\n    x5 = dneighbors(x4)\n    x6 = insert(x4, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [1.0, "def solve_7564ec2b(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = multiply(x2, TWO)\n    x4 = interval(ZERO, x3, TWO_BY_TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = asobject(x7)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = rot90(x10)\n    x12 = rot180(x11)\n    x13 = rot270(x12)\n    x14 = hconcat(x11, x1)\n    x15 = hconcat(x12, x8)\n    x16 = vconcat(x13, x9)\n    x17 = vconcat(x15, x16)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_5af3b71e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_f2af38ba(I):\n    x1 = objects(I, T, T, T)\n    x2 = mapply(normalize, x1)\n    x3 = leastcolor(I)\n    x4 = mostcolor(I)\n    x5 = ofcolor(I, x3)\n    x6 = recolor(FIVE, x5)\n    x7 = initset(ORIGIN)\n    x8 = insert(x7, x5)\n    x9 = insert(x6, x8)\n    x10 = combine(x6, x9)\n    x11 = recolor(x3, x10)\n    x12 = outbox(x11)\n    x13 = replace(I, x4, x12)\n    x14 = shift(x13, UNITY)\n    O = fill(x13, x3, x14)\n    return O"], [1.0, "def solve_d9ddf299(I):\n    x1 = ofcolor(I, FOUR)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, FOUR, ZERO)\n    x5 = replace(x4, EIGHT, ZERO)\n    x6 = compress(x5)\n    x7 = upscale(x6, THREE)\n    O = fill(x7, ZERO, x3)\n    return O"], [1.0, "def solve_939e3232(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = interval(NEG_TWO, FIVE, ONE)\n    x4 = apply(tojvec, x3)\n    x5 = lbind(shift, x4)\n    x6 = mapply(x5, x2)\n    O = fill(I, FOUR, x6)\n    return O"], [1.0, "def solve_7284e014(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = canvas(ZERO, THREE_BY_THREE)\n    x4 = normalize(x2)\n    x5 = shape(x2)\n    x6 = divide(x5, THREE)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = fork(multiply, identity, last)\n    x9 = product(x7, x8)\n    x10 = interval(ZERO, first, ONE)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = compose(x11, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = lbind(multiply, x6)\n    x16 = neighbors(ORIGIN)\n    x17 = mapply(neighbors, x16)\n    x18 = sfilter(x15, x14)\n    x19 = lbind(shift, x4)\n    x20 = mapply(x19, x18)\n    O = paint(x3, x20)\n    return O"], [1.0, "def solve_fa4c5a3a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = width(x4)\n    x6 = divide(x5, THREE)\n    x7 = first(x6)\n    x8 = downscale(x3, x7)\n    x9 = ofcolor(x8, THREE)\n    x10 = matcher(first, THREE)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(ofcolor, x8)\n    x14 = compose(x12, x13)\n    x15 = fork(subtract, last, x14)\n    x16 = compose(normalize, x15)\n    x17 = fork(shift, x16, ulcorner)\n    x18 = mapply(x17, x9)\n    O = paint(x4, x18)\n    return O"], [1.0, "def solve_7cbd8727(I):\n    x1 = objects(I, T, F, T)\n    x2 = cmirror(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = shoot(x5, DOWN_LEFT)\n    x7 = shoot(x6, UP_RIGHT)\n    x8 = shoot(x7, shoot)\n    x9 = fill(I, EIGHT, x9)\n    x10 = fill(x9, FOUR, x8)\n    O = fill(x10, hline, x9)\n    return O"], [1.0, "def solve_7e0aa598(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x6, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = paint(I, x13)\n    x15 = ofcolor(x14, x9)\n    x16 = ofcolor(x14, x10)\n    x17 = center(x16)\n    x18 = ofcolor(x14, x9)\n    x19 = center(x18)\n    x20 = hfrontier(x17)\n    x21 = mapply(x20, x19)\n    O = fill(x14, x9, x21)\n    return O"], [1.0, "def solve_98328ef9(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = difference(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = rbind(greater, TWO)\n    x6 = compose(x5, x4)\n    x7 = sfilter(x3, x6)\n    x8 = difference(x3, x7)\n    x9 = fork(both, x7, x8)\n    x10 = extract(x5, x9)\n    x11 = subgrid(x10, I)\n    x12 = increment(x8)\n    x13 = interval(x12, FOUR, EIGHT)\n    x14 = prapply(shift, x11, x13)\n    x15 = merge(x11)\n    x16 = cover(I, x15)\n    x17 = mapply(x12, x14)\n    x18 = paint(x16, x17)\n    O = replace(x18, ONE, SIX)\n    return O"], [1.0, "def solve_a32fecfd(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [1.0, "def solve_48438b37(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_7d8fa186(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(size, TWO)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [1.0, "def solve_1f248fc2(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = rbind(colorcount, TWO)\n    x8 = argmax(x6, x7)\n    x9 = mapply(vfrontier, x8)\n    x10 = fill(I, TWO, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = colorfilter(x11, TWO)\n    x13 = rbind(bordering, I)\n    x14 = compose(flip, x13)\n    x15 = mfilter(x12, x14)\n    x16 = mapply(hfrontier, x15)\n    x17 = center(x16)\n    x18 = hfrontier(x17)\n    x19 = center(x18)\n    x20 = vfrontier(x19)\n    x21 = vfrontier(x20)\n    x22 = combine(x16, x21)\n    x23 = llcorner(x15)\n    x24 = rbind(add, x23)\n    x25 = chain(invert, x24, neighbors)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x22)\n    O = paint(x10, x27)\n    return O"], [1.0, "def solve_f97fc8c0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = toindices(x2)\n    x4 = normalize(x2)\n    x5 = lbind(argmin, x4)\n    x6 = lbind(shift, x3)\n    x7 = compose(x5, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_9e5d75f5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = height(x2)\n    x4 = normalize(x2)\n    x5 = width(x2)\n    x6 = neighbors(ORIGIN)\n    x7 = toindices(x4)\n    x8 = toindices(x5)\n    x9 = add(x07, x8)\n    x10 = fill(I, NEG_ONE, x9)\n    x11 = lbind(shift, x4)\n    x12 = lbind(shift, x5)\n    x13 = branch(x11, x12, x7)\n    x14 = rbind(multiply, x30)\n    x15 = chain(x14, toindices, x12)\n    x16 = lbind(shift, x6)\n    x17 = lbind(shift, x8)\n    x18 = fork(x16, x17, x15)\n    x19 = compose(x18, minimum)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x3)\n    O = paint(x10, x21)\n    return O"], [1.0, "def solve_02d58d0e(I):\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, ONE)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f4226f05(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = objects(I, T, F, T)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, EIGHT, x4)\n    x6 = replace(x5, ONE, SIX)\n    O = fill(x6, TWO, x4)\n    return O"], [1.0, "def solve_00594e93(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = andcolor(x2, ZERO)\n    x4 = remove(x2, x1)\n    x5 = frontiers(I)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = shape(x2)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x9, x7)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_4a7f818a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ONE, x2)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = portrait(x5)\n    x7 = branch(x6, lowermost, uppermost)\n    x8 = x7(x5)\n    x9 = x7(x8)\n    x10 = fill(x3, THREE, x9)\n    x11 = replace(x10, EIGHT, ZERO)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = cover(x11, x13)\n    x15 = shift(x15, UNITY)\n    O = fill(x11, THREE, x15)\n    return O"], [1.0, "def solve_018414fd(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b48bd31f(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, TWO, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = mapply(toindices, x3)\n    x5 = fill(x2, FOUR, x4)\n    x6 = mapply(vfrontier, x3)\n    x7 = fill(x5, EIGHT, x6)\n    x8 = size(x1)\n    x9 = downscale(x7, x8)\n    x10 = leastcolor(x9)\n    x11 = fill(x7, x10, x1)\n    O = fill(x11, x10, x2)\n    return O"], [1.0, "def solve_ad5d45af(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_3c4008a7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = objects(x5, F, T, T)\n    x7 = interval(ONE, FIVE, FOUR)\n    x8 = vupscale(x5, x6)\n    x9 = hupscale(x8, FIVE)\n    O = fill(x9, FIVE, x7)\n    return O"], [1.0, "def solve_69652f06(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = compose(center, x6)\n    x8 = fork(shoot, identity, x7)\n    x9 = mapply(x8, x2)\n    O = fill(I, EIGHT, x9)\n    return O"], [1.0, "def solve_b22c2387(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    O = replace(x10, TWO, ZERO)\n    return O"], [1.0, "def solve_f7e69181(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, ONE, SEVEN)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [1.0, "def solve_4c4e5227(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(TEN, TEN)\n    x3 = invert(x2)\n    x4 = color(x3)\n    x5 = halve(x4)\n    x6 = astuple(THREE, ONE)\n    x7 = inbox(x6)\n    x8 = rbind(toobject, I)\n    x9 = compose(x8, initset)\n    x10 = lbind(contained, ONE)\n    x11 = compose(x10, x9)\n    x12 = lbind(sfilter, x7)\n    x13 = rbind(compose, initset)\n    x14 = lbind(rbind, manhattan)\n    x15 = chain(x13, x14, dneighbors)\n    x16 = chain(x15, x12, first)\n    x17 = fork(gravitate, x16, toindices)\n    x18 = fork(shift, toindices, x17)\n    x19 = fork(mapply, x18, x15)\n    x20 = mapply(x19, x1)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_7213f2fd(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = compose(first, last)\n    x31 = fork(x24, x30, x29)\n    x32 = fork(mapply, x21, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x11)\n    O = paint(x14, x34)\n    return O"], [1.0, "def solve_8e6f8f3c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = rot90(x2)\n    x4 = normalize(x2)\n    x5 = lbind(shift, x4)\n    x6 = objects(x3, F, T, T)\n    x7 = argmax(x6, numcolors)\n    x8 = subgrid(x7, x3)\n    x9 = objects(x8, T, T, T)\n    x10 = normalize(x9)\n    x11 = lbind(mapply, dmirror)\n    x12 = matcher(x11, x10)\n    x13 = mapply(x12, x8)\n    x14 = fill(x8, ONE, x13)\n    x15 = toindices(x4)\n    x16 = lbind(index, x15)\n    x17 = compose(x16, x15)\n    x18 = fork(even, x17, identity)\n    x19 = lbind(sfilter, x17)\n    x20 = compose(x19, x15)\n    x21 = fork(difference, x20, identity)\n    x22 = compose(x21, toindices)\n    x23 = chain(x18, x20, x22)\n    x24 = rbind(apply, x3)\n    x25 = chain(x24, center, x23)\n    x26 = fork(recolor, color, x25)\n    x27 = mapply(x26, x9)\n    O = paint(x14, x27)\n    return O"], [1.0, "def solve_c10835b5(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = compose(double, height)\n    x4 = fork(equality, x3, size)\n    x5 = compose(double, width)\n    x6 = fork(equality, x5, size)\n    x7 = fork(either, x4, x6)\n    x8 = rbind(equality, TWO)\n    x9 = lbind(colorfilter, x2)\n    x10 = rbind(sfilter, vline)\n    x11 = rbind(sfilter, hline)\n    x12 = chain(x10, x9, color)\n    x13 = chain(x8, size, x12)\n    x14 = chain(x11, x9, color)\n    x15 = chain(x8, size, x14)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x7, x16)\n    x18 = extract(x1, x17)\n    x19 = color(x18)\n    x20 = colorfilter(x2, x19)\n    x21 = first(x20)\n    x22 = vline(x21)\n    x23 = ulcorner(x18)\n    x24 = lrcorner(x18)\n    x25 = branch(x22, UP, LEFT)\n    x26 = add(x23, x25)\n    x27 = branch(x22, DOWN, RIGHT)\n    x28 = add(x24, x27)\n    x29 = initset(x28)\n    x30 = insert(x26, x29)\n    O = subgrid(x30, I)\n    return O"], [1.0, "def solve_432be82d(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(chain, size)\n    x3 = rbind(x2, frontiers)\n    x4 = lbind(matcher, positive)\n    x5 = lbind( literal, ZERO)\n    x6 = chain(x5, x4, x4)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, toindices)\n    x9 = lbind(x8, NEG_UNITY)\n    x10 = lbind(x9, x8)\n    x11 = chain(x10, toindices, x6)\n    x12 = lbind(apply, x11)\n    x13 = chain(x12, corners, outbox)\n    x14 = mapply(x13, x1)\n    x15 = mostcolor(I)\n    x16 = fill(I, x15, x14)\n    O = fill(x16, EIGHT, x15)\n    return O"], [1.0, "def solve_3a9ece17(I):\n    x1 = rot90(I)\n    x2 = ofcolor(I, EIGHT)\n    x3 = rot270(I)\n    x4 = lefthalf(x1)\n    x5 = righthalf(x1)\n    x6 = vmirror(x5)\n    x7 = ofcolor(x4, EIGHT)\n    x8 = order(x7, identity)\n    x9 = apply(color, x8)\n    x10 = last(x8)\n    x11 = remove(x10, x8)\n    x12 = repeat(x11, ONE)\n    O = xconcat(x4, x12)\n    return O"], [1.0, "def solve_f4cdd581(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, FIVE)\n    x3 = sizefilter(x1, ONE)\n    x4 = apply(initset, x2)\n    x5 = lbind(argmin, x4)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x5, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    x10 = merge(x3)\n    x11 = cover(I, x10)\n    O = paint(x11, x9)\n    return O"], [1.0, "def solve_103c975f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_1764a07e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x4)\n    x6 = righthalf(x5)\n    x7 = palette(x6)\n    x8 = combine(x5, x7)\n    x9 = palette(x6)\n    x10 = pair(x8, x9)\n    x11 = rbind(colorcount, SIX)\n    x12 = compose(x11, other)\n    x13 = fork(combine, first, x12)\n    x14 = apply(x13, x10)\n    x15 = palette(x6)\n    x16 = other(x15, ZERO)\n    x17 = palette(x6)\n    x18 = shape(x6)\n    x19 = invert(x18)\n    x20 = canvas(ZERO, x19)\n    x21 = normalize(x6)\n    x22 = lbind(shift, x21)\n    x23 = compose(x22, ulcorner)\n    x24 = argindices(x2)\n    x25 = add(x24, x20)\n    x26 = lbind(multiply, x28)\n    x27 = DOWNbox(x2)\n    x28 = matcher(x26, x27)\n    x29 = objects(x30, T, F, T)\n    x30 = sfilter(x29, x28)\n    x31 = lbind(shift, x10)\n    x32 = mapply(x31, x30)\n    x33 = paint(x10, x32)\n    x34 = ofcolor(x33, x67)\n    x35 = mapply(x34, x34)\n    O = paint(x33, x35)\n    return O"], [1.0, "def solve_7ea56660(I):\n    x1 = objects(I, T, T, T)\n    x2 = compose(normalize, toindices)\n    x3 = mapply(x2, x1)\n    O = paint(I, x3)\n    return O"], [1.0, "def solve_a2e64c37(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(normalize, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_b60827ba(I):\n    x1 = partition(I)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = argmin(x1, x2)\n    x4 = x3(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [1.0, "def solve_2700499c(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_07fe3f04(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = cellwise(I, x4, ZERO)\n    x6 = paint(x5, x4)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(toindices, x7)\n    x9 = lbind(index, x1)\n    x10 = lbind(extract, x8)\n    x11 = rbind(compose, initset)\n    x12 = lbind(rbind, manhattan)\n    x13 = chain(x11, x12, initset)\n    x14 = lbind(argmin, x5)\n    x15 = chain(first, x14, x13)\n    x16 = fork(astuple, x15, x13)\n    x17 = fork(astuple, x15, x16)\n    x18 = share(x2, x17)\n    O = underfill(x6, x18, UNITY)\n    return O"], [1.0, "def solve_749734b6(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, lowermost)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = difference(x1, x3)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [1.0, "def solve_28b42c8e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_127a3336(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_0a71eb41(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(shift, x1)\n    x3 = mapply(delta, x2)\n    O = fill(I, toindices, x3)\n    return O"], [1.0, "def solve_ecd379e9(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = argmax(x1, size)\n    x4 = canvas(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, toindices)\n    x8 = fork(recolor,color, x7)\n    x9 = mapply(x8, x3)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_fb7d38ff(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lbind(contained, ZERO)\n    x5 = compose(x4, hmirror)\n    x6 = compose(x4, vmirror)\n    x7 = fork(equality, toindices, x5)\n    x8 = fork(equality, toindices, x6)\n    x9 = sfilter(x1, x7)\n    x10 = sfilter(x1, x8)\n    x11 = replace(x3, EIGHT, ONE)\n    x12 = dmirror(x11)\n    x13 = merge(x12)\n    x14 = rot90(x13)\n    x15 = power(x14, TWO)\n    x16 = astuple(x15, x15)\n    x17 = lbind(apply, first)\n    x18 = rbind(sfilter, x16)\n    x19 = chain(x17, x18, ulcorner)\n    x20 = lbind(apply, x4)\n    x21 = rbind(sfilter, x16)\n    x22 = chain(x20, x21, ulcorner)\n    x23 = compose(x17, x9)\n    x24 = fork(apply, x23, x22)\n    x25 = fork(ofcolor, x12, ZERO)\n    x26 = compose(x17, x19)\n    x27 = fork(difference, x26, x25)\n    x28 = fork(recolor, x27, x23)\n    x29 = fork(mapply, x28, x24)\n    x30 = fork(combine, x29, x25)\n    x31 = mapply(x30, x6)\n    O = paint(x3, x31)\n    return O"], [1.0, "def solve_8ec6cbbe(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(size, x1)\n    x3 = argmax(x1, size)\n    x4 = canvas(FIVE, UNITY)\n    x5 = fill(x4, EIGHT, x2)\n    x6 = fill(x5, TWO, x3)\n    O = fill(x6, ONE, x4)\n    return O"], [1.0, "def solve_f3292747(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, lrcorner)\n    x4 = matcher(x3, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = apply(initset, x7)\n    x9 = rbind(shoot, UNITY)\n    x10 = mapply(x9, x8)\n    x11 = fill(I, EIGHT, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = compose(vline, ulcorner)\n    x14 = mapply(x13, x12)\n    O = fill(x11, TWO, x14)\n    return O"], [1.0, "def solve_69dc891e(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, ONE)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, width, height)\n    x9 = x8(x3)\n    x10 = gravitate(x4, x3)\n    x11 = sign(x10)\n    x12 = multiply(x11, x9)\n    x13 = crement(x12)\n    x14 = recolor(EIGHT, x4)\n    x15 = shift(x14, x13)\n    x16 = paint(I, x15)\n    O = move(x16, x3, x5)\n    return O"], [1.0, "def solve_832426d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(increment, double)\n    x3 = order(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = matcher(identity, ZERO)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(toindices, x8, normalize)\n    x10 = lbind(shift, x4)\n    x11 = compose(x10, x9)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x2)\n    O = paint(x6, x13)\n    return O"], [1.0, "def solve_763e9093(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_09c5447a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = width(x4)\n    x6 = ulcorner(x2)\n    x7 = toindices(x4)\n    x8 = lbind(shift, x7)\n    x9 = height(x4)\n    x10 = increment(x9)\n    x11 = divide(x10, x5)\n    x12 = divide(x5, x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = apply(double, x13)\n    x15 = apply(increment, x14)\n    x16 = lbind(shift, x9)\n    x17 = mapply(x16, x15)\n    x18 =90000090000090\n    x19 = lbind(shift, x8)\n    x20 = rbind(multiply, x19)\n    x21 = apply(x20, x17)\n    x22 = mapply(x21, x16)\n    x23 = combine(x17, x22)\n    O = fill(x3, EIGHT, x23)\n    return O"], [1.0, "def solve_ded2c090(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = argmax(x1, x3)\n    x5 = leastcolor(x4)\n    O = canvas(x5, UNITY)\n    return O"], [1.0, "def solve_dba4a9c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x2)\n    O = paint(x5, x8)\n    return O"], [1.0, "def solve_8c35cbb5(I):\n    x1 = objects(I, T, F, F)\n    x2 = astuple(NINE, NINE)\n    x3 = canvas(ZERO, x2)\n    x4 = matcher(normalize, x3)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x1, x5)\n    x7 = difference(x1, x2)\n    x8 = apply(color, x7)\n    O = fill(x3, ZERO, x8)\n    return O"], [1.0, "def solve_39acb8a9(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_27ce8c94(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = apply(x4, x3)\n    x6 = fork(recolor, color, backdrop)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = mapply(x6, x3)\n    return O"], [1.0, "def solve_c00c97d9(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_ada1bc46(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x2, x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = remove(x9, x2)\n    x12 = apply(x11, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = cmirror(x12)\n    x17 = paint(I, x13)\n    x18 = paint(x17, x14)\n    x19 = paint(x18, x15)\n    O = paint(x19, x16)\n    return O"], [1.0, "def solve_158ec240(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(colorcount, ZERO)\n    x3 = matcher(x2, NINE)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = index(x7, DOWN)\n    x9 = subgrid(x4, I)\n    x10 = lefthalf(x9)\n    x11 = palette(x10)\n    x12 = other(x11, ZERO)\n    x13 = equality(x8, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(x4)\n    x16 = normalize(x15)\n    x17 = shift(x16, UNITY)\n    O = paint(x7, x17)\n    return O"], [1.0, "def solve_f2ca6e32(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(vfrontier, x2)\n    x4 = fill(I, EIGHT, x3)\n    x5 = hmirror(x4)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_306f6fce(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_5adb31d2(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(9, x10)\n    x13 = matcher(9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_6363d83c(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = other(x1, x2)\n    x4 = color(x3)\n    x5 = objects(I, T, T, T)\n    x6 = colorfilter(x5, x4)\n    x7 = difference(x5, x6)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = normalize(x9)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x8)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_017ce902(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(other, TWO)\n    x3 = compose(x2, palette)\n    x4 = matcher(first, TWO)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(x5, normalize)\n    x7 = lbind(apply, double)\n    x8 = chain(x7, toindices, x6)\n    x9 = rbind(add, NEG_ONE)\n    x10 = lbind(apply, x9)\n    x11 = compose(x10, x8)\n    x12 = lbind(rbind, shoot)\n    x13 = rbind(compose, x12)\n    x14 = lbind(rbind, mapply)\n    x15 = chain(x13, x14, toindices)\n    x16 = fork(mapply, x15, x11)\n    x17 = fork(recolor, x3, x16)\n    x18 = mapply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_a583dcff(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(combc, identity, vmirror)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_65816470(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, merge)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_60ae4768(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x2, I)\n    x6 = lbind(shift, x4)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(ZERO, NINE, ONE)\n    x9 = mapply(x7, x8)\n    O = fill(x5, TEN, x9)\n    return O"], [1.1, "def solve_0c944efe(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = sizefilter(x1, ONE)\n    x4 = difference(x1, x2)\n    x5 = apply(toindices, x4)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = add(TWO, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = compose(toindices, x9)\n    x11 = matcher(x10, x1)\n    x12 = extract(x5, x11)\n    x13 = fill(I, TWO, x12)\n    x14 = replace(x13, ONE, ZERO)\n    x15 = ofcolor(x14, ONE)\n    x16 = ulcorner(x15)\n    x17 =88 urcorner(x15)\n    x18 = shoot(x16, UNITY)\n    x19 = shoot(x17, NEG_UNITY)\n    x20 = combine(x18, x19)\n    x21 = underfill(x14, TWO, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = compose(backdrop, inbox)\n    x24 = mapply(x23, x22)\n    x25 = fill(x21, TWO, x24)\n    x26 = replace(x25, ONE, ZERO)\n    x27 = dmirror(x26)\n    x28 = papply(pair, x26, x27)\n    x29 = lbind(apply, toindices)\n    x30 = lbind(pair, x28)\n    x31 = compose(x29, x30)\n    x32 = papply(pair, x28, x30)\n    x33 = compose(x31, x32)\n    x34 = ofcolor(x34, TWO)\n    x35 = mapply(x33, x34)\n    x36 = fill(x54, TWO, x35)\n    x37 =63146(x33, x33)"], [1.1, "def solve_c8c5fc73(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(rbind, manhattan)\n    x8 = rbind(compose, initset)\n    x9 = chain(x6,x7, x8)\n    x10 = chain(first, x9, initset)\n    x11 = fork(contained, x10, x5)\n    x12 = compose(x11, x9)\n    x13 = fork(astuple, x12, ulcorner)\n    x14 = extract(x1, x13)\n    x15 = color(x14)\n    x16 = subgrid(x14, I)\n    x17 = replace(x16, x15, x)\n    x18 = objects(x17, T, F, T)\n    x19 = rbind(colorcount, x15)\n    x20 = argmax(x18, x19)\n    x21 = fork(colorcount, x17, x20)\n    x22 = rbind(occurrences, x23)\n    x23 = chain(x21, x22, normalize)\n    x24 = rbind(argmax, x23)\n    x25 = normalize(x21)\n    x26 = matcher(first, x15)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = normalize(x28)\n    x30 = matcher(first, x14)\n    x31 = sfilter(x29, x30)\n    x32 = shape(x28)\n    x33 = subtract(x32, x31)\n    x34 = multiply(x33, x33)\n    x35 = multiply(UNITY, x34)\n    x36 = canvas(x15, x35)\n    x37 = paint(x36, x28)\n    x38 = fork(combine,"], [1.1, "def solve_e6bdc314(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add,x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 =0000000(x33, x35)\n    x37 =0000000(x34, x35)\n    x38 = intersection(x36, x37)\n    x39 = paint"], [1.1, "def solve_d81e047f(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =sizefilter(x1, ONE)\n    x3 = apply(color, x2)\n    x4 = difference(x1, x2)\n    x5 = apply(color, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = ofcolor(I, x7)\n    x10 = rbind(shoot, UNITY)\n    x11 = rbind(shoot, NEG_UNITY)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = combine(x11, x12)\n    x15 = combine(x13, x14)\n    x16 = height(xLE)\n    x17 = height(x12)\n    x18 = increment(x16)\n    x19 = LEFT(x17)\n    x20 = astuple(x18, x19)\n    x21 = double(x20)\n    x22 = decrement(x21)\n    x23 = recolor(x6, x22)\n    x24 = combine(x21, x23)\n    x25 = rbind(shoot, x24)\n    x26 = UNITY(x8)\n    x27 = rbind(shoot, x26)\n    x28 = ulcorner(x8)\n    x29 = rbind(shoot, x28)\n    x30 = asindices(I)\n    x31 = rbind(shoot, x30)\n    x32 = llcorner(x8)\n    x33 = rbind(shoot, x32)\n    x34 = mapply(x33, x29)\n    x35 = fill(I, x6, x34)\n    x36 = add(x25, DOWN)\n    x37 = initset(x36)\n    x38 = insert(x80, x37)\n    x39 = toobject(x38, I)\n    x40 = rbind(shift, x39)\n    x41 = apply(x40"], [1.1, "def solve_1c8d78c3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, palette)\n    x4 = matcher(x3, ZERO)\n    x5 = extract(x1, x4)\n    x6 = ulcorner(x5)\n    x7 = subgrid(x5, I)\n    x8 = lefthalf(x7)\n    x9 = palette(x8)\n    x10 = toindices(x5)\n    x11 = toindices(x10)\n    x12 = lbind(ofcolor, x8)\n    x13 = compose(x12, palette)\n    x14 =53(x13, x9)\n    x15 = extract(x15, x14)\n    x16 = other(x15, x5)\n    x17 = subgrid(x16, x8)\n    x18 = righthalf(x17)\n    x19 = replace(x18, x16, x5)\n    x20 = dmirror(x19)\n    x21 = replace(x20, x16, x5)\n    x22 = vmirror(x21)\n    x23 = dmirror(x22)\n    x24 = ofcolor(x14, x16)\n    x25 = x24(x16)\n    x26 = dedupe(x25)\n    x27 = size(x26)\n    x28 = equality(x27, ONE)\n    x29 = branch(x28, x15, x16)\n    x30 = x29(x16)\n    x31 = x30(x5)\n    x32 = x30(x5)\n    x33 = hmirror(x32)\n    x34 = lewise(x33)\n    x35 = other(x34, x15)\n    x36 = ofcolor(x35, x16)\n    x37 = branch(x36, x19, x20)\n    x38 = branch(x36, x16, x33)\n    x39 =combine(x38, x37)\n    O = fill(x35, x166, x39"], [1.1, "def solve_e1ed3842(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, rot90)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = trim(x4)\n    x6 = leastcolor(x5)\n    x7 = subgrid(x3, x4)\n    x8 = replace(x7, x6, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = rbind(colorcount, x6)\n    x11 = argmax(x9, x10)\n    x12 = normalize(x11)\n    x13 = lbind(toindices, x12)\n    x14 = compose(x13, normalize)\n    x15 = fork(add, x14, ulcorner)\n    x16 = argmax(x12, x15)\n    x17 = rbind(toobject, x15)\n    x18 = rbind(colorcount, x6)\n    x19 = chain(x18, x17, x19)\n    x20 = matcher(x19, TWO)\n    x21 = rbind(adjacent, x16)\n    x22 = rbind(subtract, x16)\n    x23 = compose(x21, x22)\n    x24 = fork(argmin, x15, x23)\n    x25 = fork(astuple, x23, x24)\n    x26 = apply(x25, x50)\n    x27 = subgrid(x26, x8)\n    x28 = rbind(colorcount, x6)\n    x29 = rbind(x28, x186)\n    x30 = fork(subtract, x28, x29)\n    x31 = fork( upscale, x30, x30)\n    x32 = rbind(branch, x31)\n    x33 = rbind(x32, x51)\n    x34 = rbind(ORIGIN, x16)\n    x35 = compose(x34, x41)\n    x36 = fork(argmin, x35, x31)\n    x37 ="], [1.1, "def solve_708b4a83(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, x, compress)\n    x7 = x6(O = upscale)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(first, x10, delta)\n    x12 = lbind(contained, RIGHT)\n    x13 = chain(x12, x11, x11)\n    x14 = compose(numcolors, x13)\n    x15 = fork(subtract, identity, x14)\n    x16 = delta(x2)\n    x17 = rbind(multiply, x16)\n    x18 = chain(positive, size, x17)\n    x19 = sfilter(x9, x18)\n    x20 = compose(toindices, x11)\n    x21 = lbind(index, x5)\n    x22 = compose(x21, x20)\n    x23 = fork(subtract, x22, x21)\n    x24 = fork(multiply, x23, x17)\n    x25 = x24(x19)\n    x26 = matcher(x25, ZERO)\n    x27 = extract(x19, x26)\n    x28 = lbind(colorcount, x7)\n    x29 = argmax(x28, x27)\n    x30 = remove(x29, x28)\n    x31 = rbind(contained, x30)\n    x32 = compose(x31, last)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(toindices, x33, x21)\n    x35 = lbind(contained, x9)\n    x36 = compose(x35, x41)\n    x37 = fork(contained, x36, x41)\n    x38 = fork"], [1.1, "def solve_c31629db(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = astuple(ONE, canvas)\n    x24 = canvas(x22, x23)\n    x25 = hconcat(x21, x24)\n    x26 = hsplit(x25, TWO)\n    x27 = merge(x26)\n    x28 = crop(x27, ORIGIN, x7)\n    x29 = vmirror(x28)\n    x30 = vconcat(x27, x29)\n    x31 = asobject(x30)\n    x32 = matcher(first, x2)\n    x33 = compose(flip, x32)\n    x34 = sfilter(x31, x33)\n    x35 = rbind(contained, x34)\n    x36 = compose(x35, color)\n    x37 = sfilter(x32, x36)\n    x38 = compose(hmirror, x37)\n    x39 = fork(equality, toindices, x38)\n    x40 = sfilter(x33, x39)\n"], [1.1, "def solve_72713d9f(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = first(x27)\n    x29 = subtract(NINE, x28)\n    x30 = ofcolor(I, x22)\n    x31 = ofcolor(I, x28)\n    x32 = recolor(x31, x30)\n    x33 = initset(x32)\n    x34 = recolor(x33, x24)\n    x35 = recolor(x16, x34)\n    x36 = combine(x29, x35)\n    x37 = product(x36, x36)\n    x38 = rbind(intersection, x37)\n    x39 = fgpartition(I)\n    x40 = sfilter(x39,"], [1.1, "def solve_bd8babf8(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(size, TWO)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(ZERO, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, leftmost)\n    x12 = rbind(colorcount, x8)\n    x13 = hleftmost(x12)\n    x14 =rbind(colorcount, x8)\n    x15 = rightmost(x13)\n    x16 = matcher(x14, x15)\n    x17 = fork(both, x13, x16)\n    x18 = subgrid(x3, I)\n    x19 = rbind(greater, x17)\n    x20 = compose(x19, numcolors)\n    x21 = sfilter(x18, x20)\n    x22 =58(x21)\n    x23 = colorfilter(x1, x8)\n    x24 = rbind(toobject, x23)\n    x25 = chain(leastcolor, x24, delta)\n    x26 = lbind(greater, x12)\n    x27 = compose(x26, numcolors)\n    x28 = sfilter(x23, x27)\n    x29 = rbind(toobject, x28)\n    x30 =877ind99matcher(first, x8)\n    x31 = chain(x29, x30, box)\n    x32 = fork(both, x27, x31)\n    x33 = fork(both, x31, x32)\n    x34 = vmirror(x28)\n    x35 = mfilter(x34, x33)\n    x36 = first(x35)\n    x37 = x30(x36)\n    x38 = objects(x38, T, F, T)\n    x39 = color"], [1.1, "def solve_b9ad9862(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_30919acd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_6a1467e8(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = replace(x3, ZERO, ONE)\n    x6 = box(x2)\n    x7 = palette(x2)\n    x8 = lbind(position, x2)\n    x9 = chain(c8, toindices, x8)\n    x10 = fork(add, x9, x7)\n    x11 = lbind(add, DOWN)\n    x12 = compose(x11, x10)\n    x13 = fork(add, x12, x7)\n    x14 = fork( resources, x12, x13)\n    x15 = lbind(toobject, x4)\n    x16 = compose(x15, x14)\n    x17 = fork(add, x16, x9)\n    x18 = fork(equality, x17, ulcorner)\n    x19 = lbind(argmin, x5)\n    x20 = chain(normalize, x19, x8)\n    x21 = compose(x19, x20)\n    x22 = fork(insert, x21, x5)\n    x23 = compose(initset, x22)\n    x24 = fork(insert, x18, x23)\n    x25 = compose(normalize, x24)\n    x26 = fork(insert, x21, x25)\n    x27 = fork(insert, x26, x5)\n    x28 = compose(cmirror, x27)\n    x29 = fork(insert, x27, x28)\n    x30 = fork(insert, x29, x5)\n    x31 = fork(subtract, x18, x30)\n    x32 = compose(center, x31)\n    x33 = fork(subtract, x32, x23)\n    x34 = fork( interpretation, x33, x28)\n    x35 = compose(toindices, x29)\n    x36 = fork(both, x34, x35)\n    x37 ="], [1.1, "def solve_516d2248(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = remove(x3, x1)\n    x6 = extract(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = llcorner(x6)\n    x9 = urcorner(x6)\n    x10 = ulcorner(x6)\n    x11 = shoot(x7, UNITY)\n    x12 = shoot(x9, DOWN_LEFT)\n    x13 = shoot(x10, UP_RIGHT)\n    x14 = shoot(x11, NEG_UNITY)\n    x15 = combine(x11, x12)\n    x16 = combine(x13, x14)\n    x17 = combine(x15, x16)\n    x18 = subgrid(x3, I)\n    x19 = mapply(toindices, x17)\n    x20 = delta(x3)\n    x21 = box(x15)\n    x22 = intersection(x20, x21)\n    x23 = uppermost(x5)\n    x24 = interval(ZERO, x23, ONE)\n    x25 = rbind(multiply, x24)\n    x26 = apply(x25, x18)\n    x27 = interval(ZERO, x23, ONE)\n    x28 = pair(x26, x27)\n    x29 = sfilter(x28, x27)\n    x30 = mapply(tojvec, x29)\n    x31 = fill(x18, ZERO, x30)\n    x32 = hmirror(x31)\n    x33 = vmirror(x32)\n    x34 = dmirror(x33)\n    x35 = fill(x41, ONE, x34)\n    x36 = fill(x35, FOUR, x28)\n    x37 = merge(x28)\n    x38 = cover(x37, x37)\n    x39 = paint(x38"], [1.1, "def solve_24f0b2a4(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = order(x1, leftmost)\n    x4 = rbind(canvas, TWO_BY_TWO)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    x7 = lbind(contained, TWO)\n    x8 = chain(outbox, x7, palette)\n    x9 = leastcolor(x6)\n    x10 = ofcolor(x6, x9)\n    x11 = rbind(argmax, numcolors)\n    x12 = matcher(x11, x10)\n    x13 = chain(flip, x12, frontiers)\n    x14 = extract(x1, x12)\n    x15 = extract(x1, x13)\n    x16 = ulcorner(x14)\n    x17 = ulcorner(x15)\n    x18 = subgrid(x14, I)\n    x19 = subgrid(x15, I)\n    x20 = hmirror(x18)\n    x21 = hmirror(x19)\n    x22 = ofcolor(x20, x9)\n    x23 = height(x22)\n    x24 = lbind(repeat, x23)\n    x25 = chain(xO = x24, decrement, height)\n    x26 = x25(x36)\n    x27 = x25(x65)\n    x28 = replace(x22, ZERO, x9)\n    x29 = colorfilter(x2, x10)\n    x30 = extract(x29, x28)\n    x31 = center(x30)\n    x32 = x25(x65)\n    x33 = initset(x32)\n    x34 = shift(x31, x33)\n    x35 = apply(maximum, x30)\n    x36 = lbind(add, x267)\n    x37 = branch(x36, x35, x34)\n    x38 = x37(x32)\n    x39 = cover(x18, x39)\n    x40 ="], [1.1, "def solve_3620451f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = shoot(ORIGIN, UNITY)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = compose(x18, x7)\n    x23 = fork(sfilter, x21, x22)\n    x24 = lbind(recolor, ZERO)\n    x25 = compose(x24, x23)\n    x26 = fork(combine, x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x27, x16)\n    x29 = lbind(compose, x5)\n    x30 = fork(shift, x28, x29)\n    x31 = lbind(lbind, shift)\n    x32 = compose(x31, x16)\n    x33 = lbind(compose, x10)\n    x34 = fork(shift, x30, x33)\n    x35 = compose(x32, x34)\n    x36 = lbind(lbind, shift)\n    x37 = compose(x36, x17)\n    x38 = fork(apply"], [1.1, "def solve_b6fc86e7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = extract(x7, x3)\n    x9 = cellwise(x8, normalize, x4)\n    x10 = replace(x9, normalize, x4)\n    x11 = replace(x10,993, x1)\n    x12 = toindices(x11)\n    x13 = objects(x11, T, F, F)\n    x14 = colorfilter(x13, x6)\n    x15 = difference(x13, x14)\n    x16 = rbind(greater, TWO)\n    x17 = compose(x16, size)\n    x18 = sfilter(x15, x17)\n    x19 = merge(x18)\n    x20 = fill(x11, THREE, x19)\n    x21 = fill(x20, TWO, x18)\n    x22 = switch(x21, objects, x19)\n    x23 = compose(toindices, normalize)\n    x24 = apply(x23, x22)\n    x25 = lbind(argmin, x24)\n    x26 = lbind(rbind, manhattan)\n    x27 = rbind(compose, initset)\n    x28 = chain(x26, x27, initset)\n    x29 = chain(x25, x27, x28)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x25)\n    x32 = objects(x31, T, F, F)\n    x33 = colorfilter(x32, x6)\n    x34 = rbind(manhattan, x3)\n    x35 = chain(even, x34, initset)\n    x36 = sfilter(x33, x35)\n    "], [1.1, "def solve_57afe24c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = rbind(rapply, I)\n    x11 = initset(identity)\n    x12 = lbind(rapply, x11)\n    x13 = chain(first, x10, x12)\n    x14 = lbind(apply, initset)\n    x15 = lbind(rbind, rapply)\n    x16 = compose(x14, x15)\n    x17 = lbind(compose, x1)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, insert)\n    x20 = lbind(x19, identity)\n    x21 = lbind(x20, x21)\n    x22 = compose(x18, x21)\n    x23 = rbind(rapply, I)\n    x24 = chain(first, x23, initset)\n    x25 = lbind(24, TWO)\n    x26 = compose(x25, x22)\n    x27 = lbind(compose, x12)\n    x28 = lbind(x27, x24)\n    x29 = compose(x28, x22)\n    x30 = fork(apply, x26, x29)\n    x31 = compose(x30, x21)\n    x32 = fork(sfilter, identity, x31)\n    x33 = fork(difference, identity, x32)\n    x34 = lbind(rbind, add)\n    x35 = compose(x34, x33)\n    x36 = fork(apply, x35, x32)\n    x37 = lbind(rbind, shift)\n    x38 ="], [1.1, "def solve_c70370f8(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = normalize(x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(TWO, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(add, x9)\n    x11 = apply(x10, x2)\n    x12 = lbind(shift, x5)\n    x13 = rbind(add, x12)\n    x14 = chain(x11, x13, ulcorner)\n    x15 = fork(combine, x7, x14)\n    x16 = fork(combine, x11, x15)\n    x17 = lbind(shift, x5)\n    x18 = rbind(multiply, THREE)\n    x19 = chain(x17, x18, halve)\n    x20 = fork(combine, x16, x19)\n    x21 = fork(combine, x16, x20)\n    x22 = fork(combine, x21, x17)\n    x23 = rbind(shift, NEG_UNITY)\n    x24 = lbind(shift, x5)\n    x25 = rbind(multiply, THREE)\n    x26 = chain(x23, x24, x25)\n    x27 = fork(combine, x22, x26)\n    x28 = lbind(hsplit, I)\n    x29 = compose(x28, x17)\n    x30 = fork(combine, x27, x29)\n    x31 = lbind(rbind, rot90)\n    x32 = compose(x31, x17)\n    x33 = fork(compose, x30, x32)\n    x34 = lbind(rbind, rot270)\n    x35 = compose(x34, x17)\n    x36 = fork(com"], [1.1, "def solve_b68deac8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_2dd7d8c2(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = lbind(shift, x28)\n    x30 = toivec(x12)\n    x31 = lbind(shift, x29)\n    x32 = index(x3, x31)\n    x33 = equality(x38, x32)\n    x34 = branch(x33, x24, x25)\n    x35 = multiply(x34, x31)\n    x36 = decrement(x35)\n    x37 = index(x3, x36)\n    x38 = equality(x32, x37)\n    x39 = astuple(x36, x38)\n    x40 = x2dmirror(x39)\n    "], [1.1, "def solve_060ac9ab(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = lbind(apply, lrcorner)\n    x4 = lbind(apply, toindices)\n    x5 = chain(x2, x4, x3)\n    x6 = compose(rot90, x5)\n    x7 = power(x6, FOUR)\n    x8 = chain(rot180, x5, x6)\n    x9 = astuple(x8, x7)\n    x10 = initset(x9)\n    x11 = insert(ZERO, x10)\n    x12 = width(I)\n    x13 =rbind(515, x12)\n    x14 = toivec(x12)\n    x15 = lbind(shift, x14)\n    x16 = compose(x13, x15)\n    x17 = toI(x16)\n    x18 = rot270(x17)\n    x19 = shape(x18)\n    x20 = increment(x19)\n    x21 = canvas(ZERO, x20)\n    x22 = asobject(x21)\n    x23 = occurrences(x18, x22)\n    x24 = argmax(x23, size)\n    x25 =shift(x24, ONE)\n    x26 = occurrences(x18, x25)\n    x27 = totuple(x26)\n    x28 = apply(x25, x27)\n    x29 = combine(x28, x25)\n    x30 = fill(x18, EIGHT, x29)\n    x31 = paint(x30, x29)\n    x32 = index(x31, ORIGIN)\n    x33 = equality(x32, ZERO)\n    x34 = branch(x33, x24, x28)\n    x35 = hmirror(x34)\n    x36 = x35(I)\n    x37 = equality(x32, TWO)\n    x38 = branch(x37, x24, x28)\n    x39 = branch(x37, x34, x38)\n    x40 ="], [1.1, "def solve_0440cb2b(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_5c040d9f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, NINE)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, width, height)\n    x9 = x8(x3)\n    x10 = gravitate(x4, x3)\n    x11 = difference(x4, x10)\n    x12 = fill(I, THREE, x11)\n    x13 = ofcolor(x12, NINE)\n    x14 = normalize(x13)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = paint(x12, x15)\n    x17 = rbind(shift, NEG_UNITY)\n    x18 = remove(x17, x1)\n    x19 = rbind(mapply, x18)\n    x20 = lbind(rbind, subtract)\n    x21 = chain(x19, x20, last)\n    x22 = rbind(apply, x1)\n    x23 = lbind(rbind, subtract)\n    x24 = chain(x22, x23, last)\n    x25 = fork(recolor, x21, x24)\n    x26 = fork(other, palette, identity)\n    x27 = compose(x25, x26)\n    x28 = compose(x27, x71)\n    x29 = fork(paint, x25, x28)\n    x30 = rbind(order, x identity)\n    x31 = apply(x30, x29)\n    x32 = rbind(vupscale, x30)\n    x33 = apply(x32, x31)\n    x34 = merge(x33)\n    x35 = cover(x16, x34)\n    x36 =:\n    88188\n     m808\n    08408\n    0805\n    00488\n    Example output:\n    888\n    808\n    840\n    \"\"\"\n    x"], [1.1, "def solve_67f22893(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_673b5fcd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(multiply, THREE)\n    x4 = rbind(toobject, I)\n    x5 = chain(x3, x4, delta)\n    x6 = lbind(mapply,35853)\n    x7 = rbind(interval, ONE)\n    x8 = rbind(x7, THREE)\n    x9 = lbind(rbind, subtract)\n    x10 = lbind(apply, increment)\n    x11 = chain(x9, x10, x8)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(apply, halve)\n    x14 = chain(x12, x13, x8)\n    x15 = fork(x14, x11, x7)\n    x16 = fork(x11, x13, ulcorner)\n    x17 = fork(x11, ulcorner, x16)\n    x18 = fork(x11, toindices, x17)\n    x19 = compose(x15, x18)\n    x20 = fork(sfilter, toindices, x19)\n    x21 = compose(a53, x20)\n    x22 = fork(recolor, x21, x17)\n    x23 = fork(mapply, x22, x10)\n    x24 = fork( paint, identity, x23)\n    x25 = size(x2)\n    x26 = positive(x25)\n    x27 = branch(x26, identity, x24)\n    x28 = ofcolor(I, ZERO)\n    x29 = astuple(NINE, NEG_TWO)\n    x30 = rbind(multiply, x29)\n    x31 = valmax(x2, x30)\n    x32 = rbind(astuple, x31)\n    x33 = apply(x32, x2)\n    x34 = mapply(x33, x2)\n    x35 = fill(I, ONE, x34)\n    x36 = ofcolor(x35, ZERO)\n    x37"], [1.1, "def solve_a1c98838(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, toindices)\n    x4 = matcher(x3, ZERO)\n    x5 = compose(flip, x4)\n    x6 = lbind(sfilter, x1)\n    x7 = rbind(compose, palette)\n    x8 = lbind(lbind, contained)\n    x9 = chain(x6, x7, x8)\n    x10 = compose(size, x9)\n    x11 = fork(sfilter, x4, x10)\n    x12 = compose(x5, x11)\n    x13 = fork(c909, identity, x12)\n    x14 = compose(rot90, x13)\n    x15 = power(x14, FOUR)\n    x16 = x15(I)\n    x17 = dedupe(x16)\n    x18 = size(x17)\n    x19 = equality(x18, ONE)\n    x20 = branch(x19, dmirror, identity)\n    x21 = x20(x16)\n    x22 = x20(x21)\n    x23 = branch(x19, height, width)\n    x24 = x23(x41)\n    x25 = multiply(x24, x24)\n    x26 = x23(x22)\n    x27 = crop(x21, x26, x25)\n    x28 = rot90(x27)\n    x29 = branch(x19, vmirror, hmirror)\n    x30 = x29(x28)\n    x31 = multiply(x30, x30)\n    x32 = x23(x23)\n    x33 = crop(x21, x32, x31)\n    x34 = rot90(x33)\n    x35 = ofcolor(x16, ZERO)\n    x36 = ofcolor(x16, ONE)\n    x37 = intersection(x35, x36)\n    x38 = size(x37)\n    x39 = equality(x38, ZERO)\n    x40 = branch(x"], [1.1, "def solve_04fc118e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = colorfilter(x8, x4)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = height(x11)\n    x14 = toivec(x13)\n    x15 = hfrontier(x14)\n    x16 = colorfilter(x8, x4)\n    x17 = size(x16)\n    x18 = hfrontier(x17)\n    x19 = colorfilter(x13, x4)\n    x20 = toindices(x3)\n    x21 = ofcolor(x15, x4)\n    x22 = ofcolor(x18, x4)\n    x23 = intersection(x21, x22)\n    x24 = first(x23)\n    x25 = inbox(x24)\n    x26 = center(x24)\n    x27 = initset(x26)\n    x28 = insert(x25, x27)\n    x29 = insert(xr, x28)\n    x30 = insert(x21, x29)\n    x31 = literally364(x30)\n    x32 = replace(x7, x4, ZERO)\n    x33 = branch(x12, identity, dmirror)\n    x34 = x33(x32)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x35, x4)\n    x37 =481(x36)\n    x38 = last(x34)\n    x39 = trim(x37)\n    x40 = shift(x39, UNITY)\n    x41 = fill(x77, x4, x40)\n    x42"], [1.1, "def solve_24e9ed83(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(subgrid, I)\n    x6 = chain(palette, trim, x5)\n    x7 = compose(maximum, x6)\n    x8 = add(TWO, x7)\n    x9 = asobject(x4)\n    x10 = rbind(colorcount, x8)\n    x11 = apply(x10, x9)\n    x12 =128f(x11)\n    x13 = rbind(subgrid, I)\n    x14 = apply(x13, x12)\n    x15 =283(x14)\n    x16 = apply(first, x15)\n    x17 = apply(x16, x13)\n    x18 =argmax(x17, numcolors)\n    x19 = contained(x18, x16)\n    x20 = branch(x19, x22, ZERO)\n    x21 = asindices(x20)\n    x22 = outbox(x21)\n    x23 = center(x22)\n    x24 =(x18, x23)\n    x25 =initset(x24)\n    x26 = objects(I, T, F, T)\n    x27 = colorfilter(x26, x8)\n    x28 = difference(x26, x27)\n    x29 = first(x28)\n    x30 = rbind(colorcount, x8)\n    x31 = valmax(x30, x30)\n    x32 = rbind(toobject, I)\n    x33 = chain(x32, x33, outbox)\n    x34 = mapply(x33, x29)\n    x35 = astuple(x31, x34)\n    x36 = palette(I)\n    x37 = other(x37, x8)\n    x38 = matcher(first, x37)\n    x39 = rbind(sfilter, x38)\n    x40 = chain(invert,"], [1.1, "def solve_b190a16f(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = rbind(apply, TWO)\n    x4 = chain(lowermost, x3, numcolors)\n    x5 = x4(I)\n    x6 = x4(I)\n    x7 = objects(x6, T, F, T)\n    x8 = merge(x7)\n    x9 = lbind(colorfilter, x7)\n    x10 = rbind(argmax, numcolors)\n    x11 = compose(x10, x4)\n    x12 = argmin(x9, x11)\n    x13 = rightmost(x12)\n    x14 = leftmost(x12)\n    x15 = color(x12)\n    x16 = uppermost(x12)\n    x17 = rightmost(x12)\n    x18 = leftmost(x12)\n    x19 = shoot(x13, UP_RIGHT)\n    x20 = shoot(x14, DOWN_LEFT)\n    x21 = combine(x19, x20)\n    x22 = combine(x17, x21)\n    x23 = argmax(x22, numcolors)\n    x24 = leftmost(x12)\n    x25 = rightmost(x12)\n    x22 = astuple(x24, x25)\n    x23 = add(x22, x24)\n    x24 = repeat(x23, ONE)\n    x25 = combine(x22, x24)\n    x26 = combine(x28, x25)\n    x27 = apply(x23, x26)\n    x28 = mapply(x21, x27)\n    x29 = combine(xhit, x28)\n    x30 = x29(x29)\n    x31 = apply(first, x30)\n    x32 = reproduce(x31, x18)\n    x33 = x20(x32)\n    x34 = mapply(last, x30)\n    x35 = apply(first, x34)\n    x36 = repeat(x35, ONE)\n    x37 = combine(x33,"], [1.1, "def solve_80897d17(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(compose, flip)\n    x7 = lbind(matcher, first)\n    x8 = chain(x6, x7, mostcolor)\n    x9 = fork(sfilter, identity, x8)\n    x10 = chain(increment, ulcorner, x9)\n    x11 = compose(normalize, x9)\n    x12 = fork(shift, identity, x11)\n    x13 = chain(decrement, ulcorner, x12)\n    x14 = fork(multiply, x10, x13)\n    x15 = fork(equality, identity, x14)\n    x16 = sfilter(x2, x15)\n    x17 = chain(invert, x10, x(x17)\n    x18 = fork(shift, identity, x17)\n    x19 = fork(multiply, x10, x18)\n    x20 = fork(equality, identity, x19)\n    x21 = sfilter(x16, x20)\n    x22 = compose(last, first)\n    x23 = chain(\ufffdplit, cxment, x22)\n    x24 = fork(apply, x23, x21)\n    x25 = fork(mapply, x24, x18)\n    x26 = mapply(x25, x21)\n    x27 = palette(I)\n    x28 =uple(x27, x22)\n    x29 = ulcorner(x28)\n    x30 = index(I, x29)\n    x31 = equality(x30, x16)\n    x32 = urcorner(x28)\n    x33 = index(I, x32)\n    x34 = equality(x33, x31)\n    x35 = llcorner(x28)\n    x36 = index(I, x35)\n    x37 = equality(x36, x31)\n    x"], [1.1, "def solve_c68d015c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = interval(ONE, NINE, ONE)\n    x3 = sizefilter(x1, NINE)\n    x4 = first(x3)\n    x5 = center(x4)\n    x6 = astuple(NEG_TWO, NEG_TWO)\n    x7 = canvas(ZERO, x6)\n    x8 = astuple(NEG_TWO, FOUR)\n    x9 = canvas(ZERO, x8)\n    x10 = hconcat(x7, x9)\n    x11 = hsplit(x10, TWO)\n    x12 = lbind(apply, numcolors)\n    x13 = compose(x12, palette)\n    x14 = matcher(x13, TWO_BY_TWO)\n    x15 = palette(x11)\n    x16 = sfilter(x15, x14)\n    x17 = difference(x15, x16)\n    x18 = lbind(colorcount, I)\n    x19 = argmin(x17, x18)\n    x20 = rbind(colorcount, x19)\n    x21 = rbind(toobject, I)\n    x22 = chain(x20, x21, backdrop)\n    x23 = compose(x5, x22)\n    x24 = chain(palette, x23, normalize)\n    x25 = objects(x11, T, F, T)\n    x26 = matcher(x24, FOUR)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, toindices)\n    x29 = lbind(apply, x28)\n    x30 = lbind(colorfilter, x25)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(lbind, shift)\n    x33 = compose(x31, x2)\n    x34 = chain(x29, x32, x33)\n    x35 = rbind(compose, initset)\n    x36 = lbind(rbind, manhattan)\n    x37 ="], [1.1, "def solve_030a6226(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(x3, cellwise, x5)\n    x7 = x6(x2)\n    x8 = lbind(contained, x7)\n    x9 = chain(flip, x8, x6)\n    x10 = sfilter(x3, x9)\n    x11 = vsplit(x10, TWO)\n    x12 = vapply(numcolors, x11)\n    x13 = equality(x12, TWO_BY_TWO)\n    x14 = branch(x13, x12, x11)\n    x15 = vsplit(x14, TWO)\n    x16 = vapply(x11, x15)\n    x17 = ofcolor(x16, ZERO)\n    x18 = asindices(x16)\n    x19 = shift(x18, UNITY)\n    x20 = fill(x17, FIVE, x19)\n    x21 = toobject(x20, x16)\n    x22 = size(x21)\n    x23 = positive(x22)\n    x24 = branch(x23, x20, x11)\n    x25 = matcher(x24, ZERO)\n    x26 = sfilter(x21, x25)\n    x27 = branch(x23, x20, x11)\n    x28 = matcher(x27, ZERO)\n    x29 = sfilter(x26, x28)\n    x30 = branch(x29, x20, x11)\n    x31 = mapply(x30, x26)\n    x32 = fill(x20, ONE, x31)\n    x33 = ofcolor(x32, FIVE)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x13, x35)\n    x37 = center(x36)\n    x38 ="], [1.1, "def solve_52135c4f(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_fd5a0a73(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FIVE)\n    x3 = extract(x2, square)\n    x4 = neighbors(x3)\n    x5 = insert(ZERO, x4)\n    x6 = lbind(remove, x3)\n    x7 = compose(x6, toindices)\n    x8 = rbind(remove, x5)\n    x9 = compose(x8, toindices)\n    x10 = lbind(lbind, positive)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x8)\n    x13 = lbind(lbind,sfilter)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = lbind(rbind, subtract)\n    x20 = chain(x19, toindices, x8)\n    x21 = fork(552, x18, x20)\n    x22 = fork(vaint, identity, x21)\n    x23 = compose(asobject, x22)\n    x24 = apply(x23, x4)\n    x25 = chain(size, dedupe,00000000 size)\n    x26 = x25(x24)\n    x27 = matcher(x26, ZERO)\n    x28 = sfilter(x24, x27)\n    x29 = argmax(x28, leftmost)\n    x30 = color(x29)\n    x31 = palette(I)\n    x32 = compose(maximum, shape)\n    x33 = argmin(x31, x30)\n    x34 = ofcolor(I, x33)\n    x35 = contained(ONE, x34)\n    x36 = ofcolor(I, x33)\n    x37 =166(x36)\n    x38 = leftmost(x37)\n    x39 = invert(x38)\n    x40 = shift(x"], [1.1, "def solve_cd9d1dbb(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = width(I)\n    x2 = ofcolor(I, EIGHT)\n    x3 = urcorner(x2)\n    x4 = shoot(x3, UP_RIGHT)\n    x5 = shoot(x3, DOWN_LEFT)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = underfill(x6, ZERO, x1)\n    x8 = rbind(shoot, LEFT)\n    x9 = mapply(x8, x4)\n    x10 = mapply(x8, x4)\n    x11 = recolor(ZERO, x1)\n    x12 = ulcorner(x2)\n    x13 = ulcorner(x6)\n    x14 = subtract(x12, x13)\n    x15 = increment(x14)\n    x16 = power(outbox, x15)\n    x17 = x16(x9)\n    x18 = height(I)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = index(I, x20)\n    x22 = asindices(I)\n    x23 = box(x22)\n    x24 = toobject(x23, I)\n    x25 = mostcolor(x24)\n    x26 = palette(I)\n    x27 = remove(x25, x26)\n    x28 = other(x27, x35)\n    x29 = ofcolor(xI, x28)\n    x30 = vmirror(x29)\n    x31 = ofcolor(x10, x28)\n    x32 = vmirror(x31)\n    x33 = ofcolor(x32, x28)\n    x34 = ofcolor(x30, ZERO)\n    x35 = astuple(x34, x33)\n    x36 = lbind(add, x35)\n    x37 = shoot(x36, UNITY)\n    x38 = height(x34)\n    x39 = rbind(subtract, x38)\n    x40 = chain(x39, double, last)\n    x41 = fork(shift"], [1.1, "def solve_174e87dc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = normalize(x3)\n    x5 = shape(x4)\n    x6 = canvas(ZERO, x5)\n    x7 = normalize(x4)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41"], [1.1, "def solve_30467232(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_de901d62(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(other, ZERO)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = order(x5, leftmost)\n    x7 = compose(last, last)\n    x8 = lbind(matcher, x7)\n    x9 = compose(x8, leftmost)\n    x10 = compose(x8, rightmost)\n    x11 = fork(sfilter, identity, x9)\n    x12 = fork(difference, identity, x10)\n    x13 = chain(positive, size, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = fgpartition(I)\n    x16 = objects(I, T, F, T)\n    x17 = colorfilter(x16, ZERO)\n    x18 =141(x17)\n    x19 = ulcorner(x18)\n    x20 = subgrid(x18, I)\n    x21 = matcher(first, ZERO)\n    x22 = compose(flip, x21)\n    x23 = fork(sfilter, identity, x22)\n    x24 = chain(positive, vline, x23)\n    x25 = matcher(first, ZERO)\n    x26 = compose(flip, x25)\n    x27 = fork(sfilter, identity, x26)\n    x28 = fork(combine, dmirror, x27)\n    x29 = x28(x10)\n    x30 = dmirror(x29)\n    x31 = papply(pair, x29, x30)\n    x38 = lbind(apply, maximum)\n    x39 = apply(x38, x31)\n    x40 = papply(pair, x39, x31)\n    x41 = apply(x40, x40)\n    x42 = papply(pair, x41, x27)\n    x43 = apply(x42, x40)\n    x44 = papply(pair, x43"], [1.1, "def solve_b775ae3f(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = neighbors(ORIGIN)\n    x3 = lbind(extract, x2)\n    x4 = matcher(first, ZERO)\n    x5 = matcher(last, ZERO)\n    x6 = rbind(branch, hmirror)\n    x7 = rbind(x6, identity)\n    x8 = rbind(branch, vmirror)\n    x9 = rbind(x8, identity)\n    x10 = compose(x7, x4)\n    x11 = compose(x9, x5)\n    x12 = fork(compose, x10, x11)\n    x13 = lbind(matcher, first)\n    x14 = compose(x13, mostcolor)\n    x15 = fork(sfilter, identity, x14)\n    x16 = fork(difference, identity, x15)\n    x17 = lbind(rbind, multiply)\n    x18 = chain(x17, shape, x15)\n    x19 = lbind(lbind, shift)\n    x20 = chain(x19, backdrop, x15)\n    x21 = fork(compose, x20, x18)\n    x22 = lbind(lbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x23)\n    x25 = lbind(rbind, compose)\n    x26 = chain(x24, x25, x21)\n    x27 = lbind(fork, recolor)\n    x28 = lbind(x27, first)\n    x29 = lbind(fork, shift)\n    x30 = lbind(chain, x12)\n    x31 = lbind(x30, x3)\n    x32 = rbind(compose, x3)\n    x33 = compose(x32, x8)\n    x34 = fork(compose, x33, x26)\n    x35 = compose(x31, x26)\n    x36 = lbind(chain, first)\n    x37 = lbind(rbind, rapply)\n    x38 = compose("], [1.1, "def solve_8bd9e106(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = rot270(I)\n    x2 = fork(product, identity, identity)\n    x3 = rot90(x1)\n    x4 = fork(multiply, height, width)\n    x5 = size(x1)\n    x6 = interval(ZERO, x5, ONE)\n    x7 = rbind(rapply, x3)\n    x8 = compose(initset, x7)\n    x9 = chain(first, x7, x8)\n    x10 = multiply(TEN, THREE)\n    x11 =divide(x10)\n    x12 = astuple(x11, x11)\n    x13 =Example output:\n    x12, x6)\n    x14 = crop(x13, ORIGIN, x12)\n    x15 = rot90(x14)\n    x16 = subtract(x15, TWO)\n    x17 = rot180(x16)\n    x18 = astuple(x17, x14)\n    x19 = crop(x18, ORIGIN, x12)\n    x20 = rbind(order, identity)\n    x21 = apply(x20, x19)\n    x22 = crop(x21, ORIGIN, x12)\n    x23 = rot90(x22)\n    x24 = downscale(x23, x12)\n    x25 = objects(x24, T, F, F)\n    x26 = lbind(colorfilter, x25)\n    x27 = compose(size, x26)\n    x28 = matcher(x27, TWO)\n    x29 = palette(x25)\n    x30 = sfilter(x29, x28)\n    x31 = argmax(x30, x29)\n    x32 = lbind(colorcount, x15)\n    x33 = apply(x32, x31)\n    x34 = partition(x25)\n    x35 = argmax(x34, x31)\n    x36 = shape(x35)\n    x37 = canvas(x35, x36)\n    x38 = normalize(x31)\n    x39 = lbind(colorcount, x38)\n    x40 ="], [1.1, "def solve_c626b568(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, vfrontier)\n    x3 = lbind(mapply, hfrontier)\n    x4 = chain(x2, x3, apply(x4, delta)\n    x5 = chain(x5, x4, outbox)\n    x6 = fork(recolor, color, x5)\n    x7 = compose(x6, delta)\n    x8 = fork(ofcolor, x7, outbox)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.1, "def solve_e73d4a06(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x2, x5)\n    x9 = compose(positive, size)\n    x10 = lbind(intersection, x6)\n    x11 = chain(x9, x10, dneighbors)\n    x12 = chain(positive, size, x11)\n    x13 = sfilter(x8, x12)\n    x14 = rbind(shoot, DOWN)\n    x15 = compose(x14, last)401)\n    x16 = chain(x13, x15, leftmost)\n    x17 = fork(recolor, color, x16)\n    x18 = mapply(x17, x4)\n    x19 = paint(I, x18)\n    O = replace(x19, ZERO, THREE)\n    return O"], [1.1, "def solve_2e8c7dba(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = height(I)\n    x2 = rbind(last, ONE)\n    x3 = compose(last, x2)\n    x4 = apply(x3, I)\n    x5 = decrement(x1)\n    x6 = apply(last, x4)\n    x7 = repeat(x6, ONE)\n    x8 = merge(x7)\n    x9 = fill(I, THREE, x8)\n    x10 = decrement(x1)\n    x11 = apply(lessastuple, x10)\n    x12 =\n    x12 = height(I)\n    x13 = subtract(x12, x11)\n    x14 =ivec(x13)\n    x15 = shift(x11, x14)\n    x16 = width(I)\n    x17 = subtract(x16, x10)\n    x18 = tojvec(x17)\n    x19 = shift(x11, x18)\n    x20 = palette(x15)\n    x21 =lrcorner(x15)\n    x22 = palette(x19)\n    x23 = intersection(x21, x22)\n    x24 = rbind(colorcount, THREE)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x15, x25)\n    x28 = ofcolor(x19, x25)\n    x29 = combine(x27, x28)\n    x30 = difference(x29, x41)\n    x31 = fill(x19, THREE, x30)\n    O = fill(x31, x26, x30)\n    return O"], [1.1, "def solve_49b1706d(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = compose(x5, x4)\n    x7 = argmax(x1, x6)\n    x8 = color(x7)\n    x9 = palette(I)\n    x10 = remove(x8, x9)\n    x11 = lbind(colorcount, I)\n    x12 = argmin(x10, x11)\n    x13 = rbind(colorcount, x12)\n    x14 = rbind(toobject, I)\n    x15 =5555(x13, I)\n    x16 = ulcorner(x15)\n    x17 = chain(x13, x14, x16)\n    x18 = colorfilter(x11, x12)\n    x19 = argmax(x18, x17)\n    x20 = objects(I, T, F, T)\n    x21 = colorfilter(x20, x12)\n    x22 = rbind(adjacent, x7)\n    x23 = sfilter(x21, x22)\n    x24 = apply(x17, x23)\n    x25 = difference(x24, x23)\n    x26 = ofcolor(I, x12)\n    x27 = rbind(adjacent, x426)\n    x28 = sfilter(x26, x27)\n    O = subgrid(x28, I)\n    return O"], [1.1, "def solve_da2f7add(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(apply, trim)\n    x5 = compose(x4, x3)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(size, x6, palette)\n    x8 = matcher(x7, TWO)\n    x9 = mfilter(x1, x8)\n    x10 = replace(I, x9, ZERO)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x10)\n    x14 = toindices(x12)\n    x15 = lbind(646, x14)\n    x16 =698(equality(x15, NEG_UNITY)\n    x17 = sfilter(x15, x16)\n    x18 = fork(gravitate, first, last)\n    x19 = compose(crement, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x17)\n    O = paint(x10, x21)\n    return O"], [1.1, "def solve_b3103969(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 =0000000\n    00000001110000000\n    00000011011000000\n    00040001101000000\n    04444001111000000\n    04444000000000000\n    04400000000000000\n    04000000000000000\n    04000000100000000\n    00400001000000040\n    00000110001100000\n    00000011011000000\n    00040011011000000\n    00000100111100000\n    00000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, DOWN)\n    x4 = fill(I, ZERO, x3)\n    x5 = shift(x2, NEG_UNITY)\n    x6 = fill(x4, x1, x5)\n    x7 = shift(x2, UPIGHT)\n    x8 = fill(x6, x1, x7)\n    x9 = shift(x2, DOWN)\n    O = fill(x8, x1, x9)\n    return O"], [1.1, "def solve_7d10f93c(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(difference, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, x4)\n    x7 = mfilter(x1, x6)\n    x8 = replace(I, FOUR, ZERO)\n    x9 = fill(x8,00000000, x5)\n    x10 = fill(x9,00000000, x7)\n    O = fill(x10, nonex triangle, x8)\n    return O"], [1.1, "def solve_f02ce152(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = equality(x2, FOUR)\n    x4 = branch(x3, NEG_ONE, ONE)\n    x5 = multiply(x4, THREE)\n    x6 = tojvec(x5)\n    x7 = crop(I, x6, x4)\n    x8 = objects(x7, T, F, T)\n    x9 = lbind(colorfilter, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, TWO)\n    x12 = palette(x7)\n    x13 = sfilter(x12, x11)\n    x14 = totuple(x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = colorfilter(x8, x15)\n    x18 =44(x17)\n    x19 = hmirror(x18)\n    x20 = crop(x19, ORIGIN, x5)\n    O = hmirror(x20)\n    return O"], [1.1, "def solve_dcadea7e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, ONE)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x9 = branch(x7, width, height)\n    x10 = x9(x3)\n    x11 = gravitate(x4, x3)\n    x12 = sign(x11)\n    x13 = multiply(x12, x10)\n    x14 =07(x13)\n    x15 = color(x3)\n    x16 = gravitate(x4, x3)\n    x17 = sign(x16)\n    x18 = multiply(x17, x10)\n    x19 = shift(x11, x18)\n    x20 = paint(I, x19)\n    x21 = ofcolor(I, ONE)\n    O = fill(x20, EIGHT, x21)\n    return O"], [1.1, "def solve_a28c3b7c(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = objects(x2, T, F, T)\n    x4 = merge(x3)\n    x5 = mostcolor(x4)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(x7, x7)\n    x9 = objects(x8, F, T, T)\n    x10 = argmax(x9, numcolors)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 =877678(x12)\n    x14 = lbind(argmin, x5)\n    x15 = lbind(lbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = rbind(other, x5)\n    x18 = compose(x17, palette)\n    x19 = fork(astuple, x18, identity)\n    x20 = apply(x19, x12)\n    x21 = x20(x2)\n    x22 = x19(x2)\n    x23 = normalize(x11)\n    x24 = remove(x23, x2)\n    x25 = ulcorner(x2)\n    x26 = lbind(shift, x24)\n    x27 = rbind(multiply, x26)\n    x28 = chain(x27, x25, xlbind)\n    x29 = rbind(argmin, x27)\n    x30 = compose(x29, x28)\n    x31 = fork(shift, identity, x30)\n    x32 = x31(x2)\n    x33 = x30(x2)\n    x34 = shape(x23)\n    x35 = canvas(x5, x34)\n    x36 = normalize(x23)\n    x37 = shift(x36, UNITY)\n    O = paint(x35, x37)\n    return O"], [1.1, "def solve_43fa958a(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, x2, trim)\n    x4 = objects(x3, T, F, T)\n    x5 = chain(palette, x3, palette)\n    x6 = totuple(x4)\n    x7 = order(x6, x5)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(positive, size)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(first, x13, toindices)\n    x15 = rbind(apply, x11)\n    x16 = lbind(lbind, shift)\n    x17 = compose(x15, x16)\n    x18 = lbind(recolor, x10)\n    x19 = chain(x18, toindices, x17)\n    x20 = fork(mapply, x18, x19)\n    x21 = fork(paint, identity, x20)\n    x22 = chain(rot90, x21, normalize)\n    x23 = fork(shift, x21, x22)\n    x24 = astuple(x23, x23)\n    x25 = x24(x24)\n    x26 = intersection(x7, x25)\n    x27 = first(x26)\n    x28 =453(x27)\n    x29 = fill(I, x10, x28)\n    x30 = difference(x27, x26)\n    x31 = asindices(x30)\n    x32 = apply(x19, x31)\n    x33 = rbind(adjacent, x31)\n    x34 = extract(x32, x33)\n    x35 = remove(x34, x32)\n    x36 = lbind(shift, x33)\n    x37 = mapply(x36, x35)\n    O = paint(x29, x37)\n    return O"], [1.1, "def solve_267ea712(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = normalize(x3)\n    x5 = identity(hmirror)\n    x6 = identity(vmirror)\n    x7 = combine(x5, x6)\n    x8 = leftmost(x7)\n    x9 = interval(ONE, x8, ONE)\n    x10 = leftmost(x4)\n    x11 = interval(ONE, x10, ONE)\n    x12 = rbind(multiply, x5)\n    x13 = rbind(divide, x6)\n    x14 = chain(x12, x13, leftmost)\n    x15 = rbind(multiply, x11)\n    x16 = subtract(x15, x6)\n    x17 =271(x3)\n    x18 = rbind(multiply, x14)\n    x19 = rbind(multiply, x16)\n    x20 = compose(x18, x19)\n    x21 = fork(add, last, x20)\n    x22 = compose(decrement, x21)\n    x23 = fork(add, x21, x22)\n    x24 = fork(insert, x23, first)\n    x25 = compose(backdrop, x24)\n    x26 = lbind(extract, x25)\n    x27 = first(x12)\n    x28 = insert(x27, x1)\n    x29 = product(x28, x28)\n    x30 = mapply(x26, x29)\n    O = fill(I, x3, x30)\n    return O"], [1.1, "def solve_288706a8(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(flip, x2)\n    x4 = extract(x2, x3)\n    x5 = mapply(dneighbors, x4)\n    x6 = astuple(x1, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = import(x7)\n    O = fill(x7, EIGHT, x8)\n    return O"], [1.1, "def solve_4db4d379(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = difference(x8, x9)\n    x11 = power(x9, SEVEN)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, first)\n    x14 = lbind(sfilter, x10)\n    x15 = lbind(matcher, first)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x12)\n    x19 = lbind(168, x18)\n    x20 = chain(x19, width, x5)\n    x21 = lbind(sfilter, x10)\n    x22 = lbind(matcher, first)\n    x23 = compose(x21, x22)\n    x24 = chain(x17, x19, x23)\n    x25 = rbind(rapply, x2)\n    x26 =14(x25)\n    x27 = compose(first, x22)\n    x28 = compose(first, x24)\n    x29 = compose(last, x24)\n    x30 = fork(astuple, x27, x28)\n    x31 = fork(astuple, x29, x30)\n    x32 = compose(x5, x31)\n    x33 = mapply(x32, x10)\n    O = paint(x5, x33)\n    return O"], [1.1, "def solve_ee4f51ae(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 =181(x6)\n    x8 = apply(dedupe, x7)\n    O = fill(x6, x3, x8)\n    return O"], [1.1, "def solve_0c752ebe(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(rbind, manhattan)\n    x8 = compose(x7, initset)\n    x9 = fork(compose, x8, initset)\n    x10 = compose(x6, x9)\n    x11 = fork(66666666, x9, x10)\n    x12 = fork(equality, toindices, x11)\n    x13 = lbind(argmin, x5)\n    x14 = rbind(525ordering, x6)\n    x15 = chain(first, x13, x14)\n    x16 = fork(sfilter, x12, x15)\n    x17 = fork(identity, identity, x16)\n    x81 = apply(x17, x7)\n    x82 = maximum(x1)\n    x83 = interval(ZERO, x82, ONE)\n    x84 = pair(x83, x8)\n    x85 = mapply(toindices, x4)\n    x86 = mapply(toindices, x4)\n    x87 = fill(I, ZERO, x86)\n    x88 = fill(x87, EIGHT, x85)\n    O = fill(x88, FOUR, x85)\n    return O"], [1.1, "def solve_a9cd0e0d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = shift(x2, DOWN)\n    x4 = power(x2, TWO)\n    x5 = paint(I, x4)\n    x6 = fill(x5, ONE, x3)\n    x7 = palette(x6)\n    x8 = remove(ZERO, x7)\n    x9 = lbind(ofcolor, x6)\n    x10 = center(x9)\n    x11 = initset(x10)\n    x12 = lbind(prapply, connect)\n    x13 = fork(x12, x11, identity)\n    x14 = compose(x13, first)\n    x15 = power(x14, TWO)\n    x16 = lbind(sfilter, x9)\n    x17 = lbind(matcher, vline)\n    x18 = compose(x16, x17)\n    x19 = fork(either, x15, x18)\n    x20 = rbind(sfilter, x19)\n    x21 = compose(x20, normalize)\n    x22 = rbind(sfilter, x21)\n    x23 = compose(x22, dmirror)\n    x24 = rbind(sfilter, x23)\n    x25 = compose(x24, cmirror)\n    x26 = rbind(shift, x10)\n    x27 = combine(x26, x25)\n    x28 =\n    x29 = paint(x6, x27)\n    O = x2(x28)\n    return O"], [1.1, "def solve_d7c41b21(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = apply(toindices, x2)\n    x4 = lbind(lbind, contained)\n    x5 = lbind(extract, x3)\n    x6 = chain(x4, x5, x4)\n    x7 = compose(x6, asindices)\n    x8 = fork( suffice Cubonic, identity, x7)\n    x9 = mapply(x8, x2)\n    x10 = fill(I, ONE, x9)\n    x11 = paint(x10, x3)\n    O = subgrid(x9, x11)\n    return O"], [1.1, "def solve_1bb7ce6d(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind( rbind, NEG_ONE)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x16)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(branch, x9)\n    x21 = compose(x20, x19)\n    x22 =31677(x6)\n    x23 = downscale(x22, x3)\n    x24 = fork(combine, x21, x23)\n    x25 = mapply(x24, x5)\n    O = fill(x13, FOUR, x25)\n    return O"], [1.1, "def solve_e377cd41(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = fork(add, height, width)\n    x4 = compose(decrement, x3)\n    x5 = fork(equality, x4, size)\n    x6 = rbind(bordering, I)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(x5, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = rbind(colorcount, sfilter)\n    x11 = compose(x10, x9)\n    x12 = argmax(x2, x11)\n    x13 = subgrid(x12, I)\n    x14 =\n    \"\"\"\n    x15 = objects(x13, T, F, F)\n    x16 = colorfilter(x15, ONE)\n    x17 = rbind(adjacent, x12)\n    x18 = rbind(adjacent, x12)\n    x19 = fork(both, x17, x18)\n    x20 = sfilter(x16, x19)\n    x21 = rbind(gravitate, x12)\n    x22 = compose(x21, initset)\n    x23 = fork(add, center, x22)\n    x24 = fork(connect, ulcorner, x23)\n    x25 = fork(recolor, color, x24)\n    x26 = mapply(x25, x20)\n    O = paint(x13, x26)\n    return O"], [1.1, "def solve_c77664a2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(maximum, shape)\n    x4 = apply(x3, x2)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x4, x8)\n    x10 = increment(x5)\n    x11 = add(x5, THREE)\n    x12 = interval(ZERO, x11, FOUR)\n    x13 = lbind(astuple, x10)\n    x14 = lbind(multiply, x11)\n    x15 = compose(x13, first)\n    x16 = chain(x14, x14, x15)\n    x17 = rbind(shift, ORIGIN)\n    x18 = lbind(shift, x9)\n    x19 = compose(x17, x18)\n    x20 = fork(combine, x15, x19)\n    x21 = compose(x11, x20)\n    x22 = fork(mapply, x21, x16)\n    x23 = compose(rot90, x22)\n    x24 = power(x23, FOUR)\n    x25 = x24(I)\n    x26 =28(x25)\n    x27 = lefthalf(x26)\n    O = paint(x27, x27)\n    return O"], [1.1, "def solve_19740318(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = size(x10)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = product(x12, x12)\n    x14 = totuple(x13)\n    x15 = apply(first, x14)\n    x16 = last(x14)\n    x17 = lbind(recolor, x5)\n    x18 =348(x16, x17)\n    x19 = recolor(x5, x18)\n    x20 = astuple(cmirror, dmirror)\n    x21 = astuple(hmirror, vmirror)\n    x22 = insert(x20, x21)\n    x23 = dmirror(x22)\n    x24 = papply(pair, x22, x23)\n    x25 = lbind(contained, ZERO)\n    x26 = compose(flip, x25)\n    x27 = sfilter(x24, x26)\n    x28 = mapply(x17, x27)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_f50d827a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(vfrontier, x1)\n    x3 = fill(I, EIGHT, x2)\n    x4 = hsplit(x3, THREE)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 =423a0727(x6)\n    x8 = first(x7)\n    x9 = box(x8)\n    x10 = center(x8)\n    x11 = hfrontier(x10)\n    x12 = fill(I, x8, x11)\n    x13 = hsplit(x12, THREE)\n    x14 = merge(x13)\n    x15 =95992977(x14)\n    x16 = cover(x12, x15)\n    x17 =423a07 first(x16)\n    x18 =123019(x17)\n    x19 =22connect(x18, x18)\n    x20 = replace(x12, THREE, x9)\n    x21 = replace(x17, THREE, x10)\n    x22 =contained(x19, x21)\n    x23 = branch(x22, x20, x22)\n    O = branch(x22, x22, x23)\n    return O"], [1.1, "def solve_bafc0c42(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(x4)\n    x6 = leastcolor(x4)\n    x7 = objects(I, T, F, F)\n    x8 = merge(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = cover(I, x10)\n    x12 =81efilter(x7, x11)\n    x13 = argmax(x12, size)\n    x14 = color(x13)\n    x15 = ofcolor(x13, x14)\n    x16 =72(x15)\n    x17 = rbind(argmin, x16)\n    x18 = normalize(x13)\n    x19 = matcher(first, x14)\n    x20 = sfilter(x18, x19)\n    x21 = difference(x16, x20)\n    x22 = colorfilter(x21, x14)\n    x23 = rbind(sfilter, x15)\n    x24 = rbind( stuff, x22)\n    x25 = lbind(rbind, subtract)\n    x26 = chain(x24, x25, last)\n    x27 = fork(recolor, first, x26)\n    x28 = fork(other, palette, identity)\n    x29 = extract(x15, x27)\n    x30 = other(x22, x29)\n    x31 = paint(x11, x30)\n    O = normalize(x13)\n    return O"], [1.1, "def solve_9eb30407(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =30(x1)\n    x3 = interval(NEG_TWO, FOUR, NEG_ONE)\n    x4 = lbind(shift, x2)\n    x5 = height(x2)\n    x6 = interval(NEG_ONE, x5, NEG_ONE)\n    x7 = pair(x4, x6)\n    x8 = compose(decrement, first)\n    x9 = chain(most, x8, last)\n    x10 = apply(x9, x7)\n    x11 = mostcolor(I)\n    x12 = lbind(add, x11)\n    x13 = chain(increment, x12, x8)\n    x14 = fork(add, x13, x9)\n    x15 = toindices(x2)\n    x16 = lbind(apply, x14)\n    x17 = lbind(rbind, contained)\n    x18 = compose(x16, x17)\n    x19 = fork(indices, x18, x14)\n    x20 = mapply(x19, x15)\n    x21 = paint(I, x20)\n    O = rot90(x21)\n    return O"]], "1e97544e": [[0.05704558404558405, "def solve_b704342b(I):\n    x1 = leastcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = ofcolor(I, x1)\n    x7 = ofcolor(I, x5)\n    x8 = combine(x6, x7)\n    x9 = mapply(neighbors, x8)\n    x10 = difference(x9, x8)\n    x11 = toobject(x10, I)\n    x12 = leastcolor(x11)\n    x13 = ofcolor(I, x1)\n    x14 = first(x13)\n    x15 = initset(x14)\n    x16 = objects(I, T, F, F)\n    x17 = colorfilter(x16, x12)\n    x18 = lbind(adjacent, x8)\n    x19 = mfilter(x17, x18)\n    x20 = toindices(x19)\n    x21 = rbind(manhattan, x15)\n    x22 = chain(even, x21, initset)\n    x23 = sfilter(x20, x22)\n    x24 = fill(I, x5, x20)\n    O = fill(x24, x1, x23)\n    return O"], [0.05704558404558405, "def solve_b592dd0d(I):\n    x1 = leastcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = ofcolor(I, x1)\n    x7 = ofcolor(I, x5)\n    x8 = combine(x6, x7)\n    x9 = mapply(neighbors, x8)\n    x10 = difference(x9, x8)\n    x11 = toobject(x10, I)\n    x12 = leastcolor(x11)\n    x13 = ofcolor(I, x1)\n    x14 = first(x13)\n    x15 = initset(x14)\n    x16 = objects(I, T, F, F)\n    x17 = colorfilter(x16, x12)\n    x18 = lbind(adjacent, x8)\n    x19 = mfilter(x17, x18)\n    x20 = toindices(x19)\n    x21 = rbind(manhattan, x15)\n    x22 = chain(even, x21, initset)\n    x23 = sfilter(x20, x22)\n    x24 = fill(I, x5, x20)\n    O = fill(x24, x1, x23)\n    return O"], [0.06555616266185658, "def solve_754d6af7(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_e9fef4b0(I):\n    x1 = fork(multiply, height, width)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = sizefilter(x6, ONE)\n    x8 = apply(initset, x7)\n    x9 = toindices(x6)\n    x10 = lbind(shift, x9)\n    x11 = mapply(x10, x8)\n    O = fill(I, TWO, x11)\n    return O"], [0.06555616266185658, "def solve_ffb8924a(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_41a59c38(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, F, F, T)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_a70e6d3a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = recolor(ZERO, x2)\n    x4 = normalize(x3)\n    x5 = occurrences(I, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, x1, x8)\n    return O"], [0.06555616266185658, "def solve_bb9422eb(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.06555616266185658, "def solve_ac560388(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06675361835120039, "def solve_d58919aa(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = sizefilter(x2, ONE)\n    x6 = apply(initset, x4)\n    x7 = lbind(argmin, x6)\n    x8 = lbind(rbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x5)\n    x12 = merge(x5)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O"], [0.06675361835120039, "def solve_d689b202(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = sizefilter(x2, ONE)\n    x6 = apply(initset, x4)\n    x7 = lbind(argmin, x6)\n    x8 = lbind(rbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x5)\n    x12 = merge(x5)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O"], [0.06777471491217195, "def solve_6c7a12c7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.06858821998557219, "def solve_714b88e3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.06858821998557219, "def solve_e41457f0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.06959741552663885, "def solve_a731f670(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_5a106ab7(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_272fe424(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_5125da12(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_38bd1df3(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_64065fb4(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_cd4a30c6(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0702135574591548, "def solve_6c2a0de4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_a88f83d3(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_b531d8ba(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_a5deb92c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_b3f0acdb(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.07068642804421423, "def solve_a1af189e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.07215121867613122, "def solve_6e48a73b(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.07215121867613122, "def solve_48381971(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.07443857865203833, "def solve_3bb54d3b(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [0.0747180717801148, "def solve_04f407f3(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.07480974811635467, "def solve_2a57f324(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = fork(add, height, width)\n    x4 = compose(decrement, x3)\n    x5 = fork(equality, x4, size)\n    x6 = rbind(bordering, I)\n    x7 = fork(both, x5, x6)\n    x8 = rbind(toobject, I)\n    x9 = chain(numcolors, x8, delta)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = sfilter(x1, x11)\n    x13 = argmax(x12, size)\n    x14 = delta(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x2)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = toindices(x19)\n    x21 = compose(toindices, normalize)\n    x22 = matcher(x21, x20)\n    x23 = remove(x18, x1)\n    x24 = argmax(x23, x22)\n    x25 = color(x13)\n    O = fill(I, x25, x24)\n    return O"], [0.07716705788350309, "def solve_06451c47(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = leftmost(x3)\n    x6 = interval(x5, TEN, TWO)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x5)\n    x11 = add(x5, THREE)\n    x12 = interval(x10, TEN, FOUR)\n    x13 = interval(x11, TEN, FOUR)\n    x14 = lbind(astuple, NINE)\n    x15 = apply(tojvec, x12)\n    x16 = apply(x14, x13)\n    x17 = fill(I, x4, x9)\n    x18 = fill(x17, FIVE, x15)\n    O = fill(x18, FIVE, x16)\n    return O"], [0.08283557492092357, "def solve_5275f138(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_8d0f893c(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_2e0b8d4d(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08377274368997174, "def solve_c2e6389a(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.08598473307451636, "def solve_d435938c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.08876046799403392, "def solve_4ef73ac2(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [0.09043595976481883, "def solve_b554654b(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x5, THREE)\n    return O"], [0.09043595976481883, "def solve_e8103c2c(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x5, THREE)\n    return O"], [0.09043595976481883, "def solve_e7cd7de7(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x5, THREE)\n    return O"], [0.09320112108071621, "def solve_a4bea0d5(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = totuple(x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = ofcolor(I, x7)\n    x10 = backdrop(x9)\n    x11 = ofcolor(I, x8)\n    x12 = backdrop(x11)\n    x13 = intersection(x10, x12)\n    x14 = outbox(x13)\n    O = fill(I, FOUR, x14)\n    return O"], [0.09972248586286768, "def solve_ded830b3(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.09972248586286768, "def solve_a5c6a695(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.09972248586286768, "def solve_a1bd5bf2(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.09972248586286768, "def solve_5246033e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.09972248586286768, "def solve_ded8ed50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.10302238859150492, "def solve_9bfcd98d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [0.10700430869603801, "def solve_a685f6eb(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.10849910269253649, "def solve_eeee35bf(I):\n    x1 = fork(multiply, height, width)\n    x2 = lbind(ofcolor, I)\n    x3 = palette(I)\n    x4 = compose(x1, x2)\n    x5 = argmax(x3, x4)\n    x6 = leastcolor(I)\n    x7 = palette(I)\n    x8 = remove(x5, x7)\n    x9 = other(x8, x6)\n    x10 = replace(I, x6, x5)\n    O = replace(x10, x9, x6)\n    return O"], [0.11033822332653574, "def solve_be807e6b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.11033822332653574, "def solve_7d08692d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.11204588705000114, "def solve_6459edb0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.11410495726315961, "def solve_b1bc711d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.11410495726315961, "def solve_b6a80385(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.11873730483078786, "def solve_54b34c82(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_c780ac51(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_c1f706f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.12169800916884342, "def solve_591403b0(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_9db27259(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_cc9d3c0a(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_d71cfb93(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.1239852807263826, "def solve_6f8f8d1f(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.12419944694607093, "def solve_1778359d(I):\n    x1 = objects(I, T, F, T)\n    x2 = interval(ONE, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(ulcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, FOUR, x8)\n    return O"], [0.12583356972621706, "def solve_a6724861(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12583356972621706, "def solve_31ab16c5(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12638696646420425, "def solve_99eb6e6e(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.1272674526856875, "def solve_83b23d4c(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(I, x1, x8)\n    O = replace(x9, ZERO, THREE)\n    return O"], [0.1291415585217549, "def solve_cacc34ea(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_28c4a81b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_decb2ad2(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_9a6721dd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_f81d67c2(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.13078052388070555, "def solve_a07d8bf6(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(I, x9)\n    return O"], [0.13134103434345124, "def solve_34754458(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_237569ce(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_f3223d54(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_3d352046(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_93da9b98(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_2b8c3627(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.1314364028975242, "def solve_718c9aea(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.13351065044779606, "def solve_2358cb0b(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = fork(combine, hfrontier, vfrontier)\n    x6 = lbind(mapply, x5)\n    x7 = lbind(ofcolor, I)\n    x8 = compose(x6, x7)\n    x9 = first(x4)\n    x10 = last(x4)\n    x11 = x8(x9)\n    x12 = x8(x10)\n    x13 = ofcolor(I, x1)\n    x14 = intersection(x13, x11)\n    x15 = intersection(x13, x12)\n    x16 = intersection(x11, x12)\n    x17 = intersection(x13, x16)\n    x18 = fill(I, x9, x14)\n    x19 = fill(x18, x10, x15)\n    O = fill(x19, TWO, x17)\n    return O"], [0.13508938916939192, "def solve_62b2c659(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13718770801295074, "def solve_178d8725(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.13732320260021091, "def solve_cb096428(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.1390792334867075, "def solve_fd4165dd(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 =ofcolor(I, x4)\n    x7 = mapply(neighbors, x6)\n    x8 = difference(x7, x6)\n    O = fill(I, ONE, x8)\n    return O"], [0.1391543174866792, "def solve_67a3d24d(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.14169822982995706, "def solve_8378cf0e(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, THREE, x3)\n    return O"], [0.1430138225359875, "def solve_a4a3fd7a(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.15595293774320831, "def solve_9926a12e(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15924388832696912, "def solve_1e40f3f8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_01fedef1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_e2e64a29(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_c8d1c077(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_0234ec4c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_30956261(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_6140dd43(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_3a629c30(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_64c4b9a8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_0fa204bd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_38b672e2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_10b7a512(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_e92278a4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.1674035410278312, "def solve_842bc082(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.16854326214335902, "def solve_7c857e84(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.1744829489578147, "def solve_8d536cf7(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I,139, x3)\n    return O"], [0.17484544732743457, "def solve_ebac69e7(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = colorfilter(x1, ZERO)\n    x8 = difference(x1, x7)\n    x9 = first(x8)\n    O = paint(x6, x9)\n    return O"], [0.1773065582183363, "def solve_73dd898b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_26a6b5f4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_9445c704(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_647a4741(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_067dfa31(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_97b9d3c3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_5db74cd0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_885ca539(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_9ca5247c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.17772191094295955, "def solve_60a34c14(I):\n    x1 = asindices(I)\n    x2 = dmirror(I)\n    x3 = invert(NINE)\n    x4 = papply(pair, I, x2)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = ofcolor(x6, ZERO)\n    x8 = difference(x1, x7)\n    x9 = toobject(x8, x6)\n    x10 = interval(x3, NINE, ONE)\n    x11 = interval(NINE, x3, NEG_ONE)\n    x12 = pair(x10, x11)\n    x13 = lbind(shift, x9)\n    x14 = mapply(x13, x12)\n    O = paint(x6, x14)\n    return O"], [0.17772191094295955, "def solve_c47b2a22(I):\n    x1 = asindices(I)\n    x2 = dmirror(I)\n    x3 = invert(NINE)\n    x4 = papply(pair, I, x2)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = ofcolor(x6, ZERO)\n    x8 = difference(x1, x7)\n    x9 = toobject(x8, x6)\n    x10 = interval(x3, NINE, ONE)\n    x11 = interval(NINE, x3, NEG_ONE)\n    x12 = pair(x10, x11)\n    x13 = lbind(shift, x9)\n    x14 = mapply(x13, x12)\n    O = paint(x6, x14)\n    return O"], [0.18190769514794702, "def solve_5a86caff(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.18710677081569096, "def solve_f12405dc(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [0.18967220198830603, "def solve_ff94740c(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind(ofcolor, I)\n    x5 = lbind(prapply, connect)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, identity, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [0.18967220198830603, "def solve_fa9f16cb(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind(ofcolor, I)\n    x5 = lbind(prapply, connect)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, identity, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [0.1968197311802683, "def solve_8b313f8c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.210198949121458, "def solve_b314a457(I):\n    x1 = replace(I, EIGHT, NINE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2112948124350816, "def solve_4ee272fe(I):\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.21391916164730382, "def solve_2aff4876(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_22ed3882(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_73c2be1f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_d17dfbda(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_06fe1764(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_60f2ce6a(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_55ac63ce(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_1240936b(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_c23e9bb2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_6162a217(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21924101368423873, "def solve_9abfb038(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.21924101368423873, "def solve_912c69ca(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.227204304172087, "def solve_d584be0a(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = difference(x1, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = replace(I, TWO, ZERO)\n    O = fill(x6, THREE, x5)\n    return O"], [0.23424985902563292, "def solve_c58eea3c(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.23424985902563292, "def solve_a127c4db(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.2499819232253754, "def solve_5a1079f3(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.2537260279414613, "def solve_e8a99c1f(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2686091447400782, "def solve_57f4afbd(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2686091447400782, "def solve_3a9897b5(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2737085951518015, "def solve_58d8ebd3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.2737085951518015, "def solve_9f1178da(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.27482311667088305, "def solve_e09e65c0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x1)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x1)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x1, x3)\n    O = fill(x38, x1, x37)\n    return O"], [0.2775299604968739, "def solve_e2308a40(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.29118241282602314, "def solve_90d10cd0(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29385612715783005, "def solve_858b4a68(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.2949368095103424, "def solve_bf58ba6d(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [0.29493888612223423, "def solve_22d81b23(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29493888612223423, "def solve_573328bd(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29493888612223423, "def solve_d7fe358e(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29664969986532563, "def solve_d40e8ede(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.29664969986532563, "def solve_d43f41fc(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.2969700117912533, "def solve_fadf2d4e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_ad8821b4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_bf2a9a3f(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_4756cb78(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_ce17f163(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_e8dff7b7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_8845ae16(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_f4857aae(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_5ec99ac5(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_499ddcd1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3063136421137608, "def solve_f1f10e80(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3066763611693097, "def solve_1a4bf392(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.3082441023536176, "def solve_a214d11f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_a3766a9d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_a137cac6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_4947b2f6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.31011174594270147, "def solve_929c8152(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_9bb00cdf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_899f6868(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_9c243a56(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first,x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_7693845e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_076b1921(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_668d198f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_5236704d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_8f220e7c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31036393428386627, "def solve_d152b557(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = paint(I, x2)\n    x4 = compose(increment, height)\n    x5 = fork(greater, x4, width)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = paint(x3, x7)\n    x9 = index(I, ORIGIN)\n    x10 = recolor(x9, x2)\n    O = paint(x8, x10)\n    return O"], [0.3104501482052144, "def solve_95c890df(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.315862919980845, "def solve_613e4bd4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.31764457572059407, "def solve_9288a794(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shift(x2, DOWN)\n    x5 = fill(I, x3, x4)\n    x6 = shift(x2, RIGHT)\n    x7 = fill(x5, x3, x6)\n    x8 = shift(x2, LEFT)\n    O = fill(x7, x3, x8)\n    return O"], [0.3314449532924934, "def solve_e5938837(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3384341187221576, "def solve_e69bbf73(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.3387087982661474, "def solve_4d306779(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.3646584896584897, "def solve_ff8b7e65(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4062968519814561, "def solve_c27ef0a3(I):\n    x1 = vsplit(I, TWO)\n    x2 = rbind(hsplit, TWO)\n    x3 = mapply(x2, x1)\n    O = argmax(x3, numcolors)\n    return O"], [0.4170310435194296, "def solve_f388cf09(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.4170310435194296, "def solve_9b933cc9(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.4170310435194296, "def solve_75b1d71a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.4231949243417133, "def solve_a2894978(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4825225778615609, "def solve_dee938c0(I):\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [0.5277777777777778, "def solve_d401492f(I):\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = multiply(x4, x4)\n    x6 = canvas(x3, x5)\n    x7 = asobject(I)\n    x8 = shift(x7, UNITY)\n    x9 = paint(x6, x8)\n    x10 = objects(x9, T, F, T)\n    x11 = rbind(colorcount, TWO)\n    x12 = argmax(x10, x11)\n    O = subgrid(x12, I)\n    return O"], [0.5371132714255592, "def solve_7452b20d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = compose(dneighbors, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x6)\n    x10 = paint(I, x9)\n    x11 = replace(x10, FIVE, ZERO)\n    O = downscale(x11, THREE)\n    return O"], [0.5455548516524127, "def solve_1f74bd70(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5541888959519033, "def solve_4be88d75(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [0.5541888959519033, "def solve_4be2a2a4(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [0.6, "def solve_2a2a33d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6052508022657276, "def solve_88ae2968(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.6052508022657276, "def solve_37f378d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.6185357460219338, "def solve_9336e11e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_d9606ff5(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_ae0236c1(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_93413a5b(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.656779053865826, "def solve_e3e53fb7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.6793066105327229, "def solve_d2ebfae4(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.7047029674817701, "def solve_ff8aab8a(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.7378724375915388, "def solve_79dc7998(I):\n    x1 = ofcolor(I, TWO)\n    x2 = palette(I)\n    x3 = contained(ONE, x1)\n    x4 = contained(TWO, x1)\n    x5 = branch(x3, UNITY, TWO_BY_TWO)\n    x6 = branch(x4, RIGHT, x5)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x9, FIVE, x8)\n    return O"], [0.791362834696168, "def solve_72ca50a2(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [1.0, "def solve_12e392d6(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = other(x2, x5)\n    x7 = subtract(SIX, x6)\n    x8 = astuple(ONE, x7)\n    x9 = partition(I)\n    x10 = color(x5)\n    x11 = matcher(color, x10)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x9, x12)\n    x14 = height(x13)\n    x15 = width(x13)\n    x16 = divide(x14, x15)\n    x17 = increment(x16)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = merge(x18)\n    x20 = transform(x6, x19)\n    x21 = multipl34(x20, x17)\n    x22 = add(x21, x22)\n    x23 = astuple(x17, x18)\n    x24 = repeat(x22, x23)\n    x25 = combine(x19, x24)\n    x26 = hmirror(x25)\n    x27 = vmirror(x25)\n    x28 = asindices(x6)\n    x29 = objects(x27, T, T, T)\n    x30 = combine(x28, x29)\n    x31 = paint(x6, x30)\n    x32 = height(x6)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = invert(x33)\n    x35 = insert(x34, x34)\n    x36 = tojvec(x327)\n    x37 = lbind(shift, x35)\n    x38 = mapply(x37, x36)\n    x39 = paint(x31, x38)\n    O = rot90(x39)\n    return O"], [1.0, "def solve_59948156(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_fbd1c335(I):\n    x1 = palette(I)\n    x2 = rotother(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = height(I)\n    x5 = width(I)\n    x6 = multiply(x4, x5)\n    x7 = subtract(x6, x3)\n    O = upscale(I, x7)\n    return O"], [1.0, "def solve_c2c965a4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = other(x15, x17)\n    x19 = color(x18)\n    x20 = astuple(x19, RIGHT)\n    x21 = initset(ZERO_BY_TWO)\n    x22 = insert(ORIGIN, x21)\n    x23 = recolor(x4, x22)\n    x24 = insert(x20, x23)\n    x25 = dmirror(x24)\n    x26 = lbind(shift, x24)\n    x27 = occurrences(x10, x24)\n    x28 = mapply(x26, x27)\n    x29 = lbind(shift, x25)\n    x30 = occurrences(x10, x25)\n    x31 = mapply(x29, x30)\n    x32 = combine(x28, x31)\n    x33 = fill(x10, x4, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = gravitate(x34, x17)\n    x36 = replace(x10, x19, x4)\n    x37 = shift(x34, x35)\n    x38 = fill(x36, x19, x37)\n    O = trim(x38)\n    return O"], [1.0, "def solve_b87e49ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shape(x2)\n    x6 = halve(x5)\n    x7 = canvas(x8, x6)\n    x8 = objects(x4, F, F, T)\n    x9 = rbind(colorcount, x3)\n    x10 = compose(x9, palette)\n    x11 = matcher(x10, TWO)\n    x12 = extract(x8, x11)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = color(x13)\n    x16 = width(I)\n    x17 = ulcorner(x13)\n    x18 = subgrid(x13, I)\n    x19 = height(x18)\n    x20 = asobject(x18)\n    x21 = matcher(first, x10)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = sizefilter(x23, ONE)\n    x25 = merge(x24)\n    O = paint(x7, x25)\n    return O"], [1.0, "def solve_69c9c34d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_7ee3b81c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_0dbe190b(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_5fce2511(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = difference(x1, x3)\n    x8 = apply(toindices, x7)\n    x9 = rbind(adjacent, x6)\n    x10 = mfilter(x8, x9)\n    O = fill(I, EIGHT, x10)\n    return O"], [1.0, "def solve_0a10af11(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(I, x5)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = add(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind( toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, first, last)\n    x28 = fork(shoot, x27, x26)\n    x29 = mapply(x28, x24)\n    O = fill(x13, FOUR, x29)\n    return O"], [1.0, "def solve_e53cf717(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_9fe7bccf(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9c2f5c0a(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, TWO)\n    x8 = astuple(TWO, x2)\n    x9 = power(decrement, TWO)\n    x10 = x9(x1)\n    x11 = x9(x2)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = crop(I, x12, x8)\n    x15 = crop(I, x13, x7)\n    x16 = asobject(x15)\n    x17 = asobject(x14)\n    x8 = vperiod(x16)\n    x09 = hperiod(x17)\n    x10 = astuple(x4, x9)\n    x11 = lbind(multiply, x10)\n    x12 = neighbors(ORIGIN)\n    x13 = mapply(neighbors, x12)\n    x14 = apply(x11, x13)\n    x15 = lbind(shift, x6)\n    x16 = mapply(x15, x14)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_4002153e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = lbind(multiply, x10)\n    x12 = lbind(shift, x9)\n    x13 = mapply(x11, x8)\n    x14 = paint(I, x13)\n    x15 = lbind(hmatching, x6)\n    x16 = compose(x15, vmirror)\n    x17 = mapply(x16, x12)\n    x18 = paint(x14, x17)\n    x19 = hmirror(x18)\n    O = paint(x18, x19)\n    return O"], [1.0, "def solve_ec684d2c(I):\n    x1 = leastcolor(I)\n    x2 = frontiers(I)\n    x3 = merge(x2)\n    x4 = color(x3)\n    x5 = shape(I)\n    x6 = canvas(x1, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = leftmost(x9)\n    x13 = width(I)\n    x14 = lbind(subtract, x13)\n    x15 = width(I)\n    x16 = divide(x14, x15)\n    x17 =ottage(x9, x16)\n    x18 = rot90(x17)\n    x19 = double(x13)\n    x20 = divide(x19, x16)\n    x21 = rot270(x20)\n    x22 = astuple(x11, x12)\n    x23 = canvas(x1, x22)\n    x24 = lbind(multiply, x6)\n    x25 = height(x9)\n    x26 = asobject(x25)\n    x27 = occurrences(x26, x8)\n    x28 = mapply(x24, x27)\n    O = paint(x23, x28)\n    return O"], [1.0, "def solve_ebc1ead9(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = remove(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, ONE)\n    x7 = lbind(crop, I)\n    x8 = astuple(x7, x6)\n    x9 = ONE(x8)\n    x10 = pair(x4, x9)\n    x11 = fork(divide, first, last)\n    x12 = compose(normalize, last)\n    x13 = fork(multiply, first, last)\n    x14 = chain(invert, x12, x13)\n    x15 = fork(intersection, x12, x14)\n    x16 = compose(size, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x17, x11)\n    x19 = sfilter(x10, x18)\n    x20 = compose(size, first)\n    x21 = matcher(x20, ZERO)\n    x22 = sfilter(x19, x21)\n    x23 = difference(x19, x22)\n    x24 = color(x12)\n    x25 = ofcolor(I, x24)\n    x26 = rbind(adjacent, x25)\n    x27 = fork(both, x26, last)\n    x28 = sfilter(x23, x27)\n    O = underfill(I, x24, x28)\n    return O"], [1.0, "def solve_c0e394f8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = ascontained(x23, x21)\n    x25 = astuple(x24, x18)\n    x26 = canvas(ZERO, x25)\n    x27 = asindices(x26)\n    x28 = cardinalilWAYS(x27)\n    x29 = matcher(first, x1)\n    x30 = compose(flip, x29)\n    x31 = rbind(sfilter, x30)\n    x32 = SEVEN(x28)\n    x33 = apply(x31, x32)\n    x34 = fork(shift, identity, ulcorner)\n    x35 = mapply(x34, x33)\n    O = paint(I, x35)\n    return O"], [1.0, "def solve_7b05f5bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = frontiers(I)\n    x6 = sfilter(x5, hline)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = x9(I)\n    x11 = color(x10)\n    x12 = shape(x10)\n    x13 = increment(x12)\n    x14 = canvas(x11, x13)\n    x15 = partition(x10)\n    x16 = lbind(colorcount, I)\n    x17 = compose(x16, palette)\n    x18 = argmin(x15, x17)\n    x19 = ofcolor(x10, x18)\n    x20 = ofcolor(x10, x6)\n    x21 = subgrid(x20, x10)\n    x22 = intersection(x19, x21)\n    O = fill(x17, FOUR, x22)\n    return O"], [1.0, "def solve_43594c4c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, cgrid)\n    x9 = lbind(matcher, first)\n    x10 = lbind(sfilter, x6)\n    x11 = chain(x8, x9, x10)\n    x12 = lbind(chain, size)\n    x13 = rbind(x12, initset)\n    x14 = lbind(rbind, manhattan)\n    x15 = chain(x13, x14, toindices)\n    x16 = fork(argmin, x15, x11)\n    x17 = fork(insert, x4, x16)\n    x18 = compose(340, x17)\n    x19 = fork(manhattan, x18, toindices)\n    x20 = compose(x19, x15)\n    x21 = fork(gravitate, x20, x15)\n    x22 = fork(add, x22, x25)\n    x23 = compose(x22, x21)\n    x24 = fork(insert, x4, x23)\n    x25 = compose(x24, x10)\n    x26 = fork(equality, toindices, x25)\n    x27 = sfilter(x6, x26)\n    x28 = fork(connect, ulcorner, urcorner)\n    x29 = fork(connect, ulcorner, llcorner)\n    x30 = fork(combine, x28, x29)\n    x31 = mapply(x30, x27)\n    x32 = fill(I, x4, x31)\n    x33 =GEmirror(x32)\n    x34 = replace(x33, x4, ZERO)\n    O = replace(x34, x4, EIGHT)\n    return O"], [1.0, "def solve_40c92e55(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = dmirror(I)\n    x5 = matcher(identity, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(size, x6)\n    x8 = apply(x7, x4)\n    x9 = sfilter(x8, identity)\n    x10 = identity(I)\n    x11 = shape(I)\n    x12 = canvas(x10, x11)\n    x13 = hconcat(x12, x12)\n    x14 = upscale(x13, TWO)\n    x15 = ofcolor(x14, x3)\n    x16 = ZERO(x15)\n    x17 = shift(x16, UP)\n    x18 = ulcorner(x15)\n    x19 =lrcorner(x15)\n    x20 = shoot(x17, NEG_UNITY)\n    x21 = shoot(x19, UNITY)\n    x22 = shoot(x20, DOWN_LEFT)\n    x23 = shoot(x21, UP_RIGHT)\n    x24 = combine(x22, x23)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x7, x26)\n    x28 = mapply(x21, x27)\n    O = fill(x14, x3, x28)\n    return O"], [1.0, "def solve_ff39b533(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(sfilter, x2)\n    x4 = compose(size, x3)\n    x5 = argmin(x1, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x5, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = mostcolor(I)\n    x12 = colorfilter(x8, x11)\n    x13 = mapply(toindices, x12)\n    x14 = apply(urcorner, x12)\n    x15 = mapply(toindices, x14)\n    x16 = apply(llcorner, x12)\n    x17 = mapply(toindices, x16)\n    x18 = combine(x13, x17)\n    x19 = fill(I, x10, x18)\n    x20 = difference(x19, x2)\n    O = fill(x19, x05, x20)\n    return O"], [1.0, "def solve_38334081(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(last, x5)\n    x8 = sfilter(x6, x4)\n    x9 = compose(color, first)\n    x10 =sfilter(x7, x9)\n    x11 = combine(x8, x10)\n    x12 = paint(I, x11)\n    x13 = compose(rot90, first)\n    x14 = power(last, SEVEN)\n    x15 = power(x13, EIGHT)\n    x16 = fork(combine, x12, x15)\n    x17 = compose(x14, x16)\n    x18 = compose(x1, first)\n    x19 = fork(remove, x18, first)\n    x20 = compose(last, last)\n    x21 = fork(occurrences, x19, x20)\n    x22 = compose(x17, x21)\n    x23 = fork(mapply, x18, x22)\n    x24 = fork(astuple, x23, identity)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas(x38, UNITY)\n    return O"], [1.0, "def solve_bae6546f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x3)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, I)\n    x7 = matcher(first, x3)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x6, x8)\n    x10 = manhattan(x9, x2)\n    x11 = dneighbors(x10)\n    x12 = toobject(x11, I)\n    x13 = matcher(first, x2)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = difference(x11, x15)\n    x17 = mapply(dneighbors, x16)\n    x18 = apply(urcorner, x27)\n    x19 = lowermost(x12)\n    x20 = leftmost(x15)\n    x21 = subtract(x20, x19)\n    x22 = increment(x21)\n    x23 = multiply(THREE,22)\n    x24 = add(x23, x11)\n    x25 = shift(x17, x24)\n    x26 = combine(x18, x25)\n    x27 = paint(I, x26)\n    O = fill(x27, x1, x27)\n    return O"], [1.0, "def solve_f3c5637d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_38d61f61(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter,imp224)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_d110cdfa(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_9f25b7fd(I):\n    x1 = compose(normalize, toindices)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.0, "def solve_2d3a1482(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ea94ea54(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = normalize(x1)\n    x4 = lbind(shift, x3)\n    x5 = compose(x4, decrement)\n    x6 = apply(x5, x2)\n    x7 = rbind(multiply, x6)\n    x8 = apply(x7, x2)\n    x9 = asindices(I)\n    x10 = shape(x3)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = increment(x22)\n    x14 = interval(x12, x13, ONE)\n    x15 = palette(I)\n    x16 = lbind(shift, x9)\n    x17 = mapply(x16, x14)\n    x18 = combine(x15, x17)\n    x19 = paint(I, x18)\n    O = halve(x)\n    return O"], [1.0, "def solve_30133983(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = rbind(rbind, contained)\n    x6 = lbind(compose, x5)\n    x7 = lbind(lbind, contained)\n    x8 = compose(x6, x7)\n    x9 = lbind(rbind, adjacent)\n    x10 = compose(x9, x8)\n    x11 = fork(sfilter, identity, x10)\n    x12 = compose(color, x11)\n    x13 = fork(recolor, x12, delta)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_a462e81b(I):\n    x1 = papply( divor, x1)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = lbind(recolor, EIGHT)\n    x5 = rbind(ofcolor, x2)\n    x6 = chain(x4, x5, outbox)\n    x7 = fork(paint, identity, x6)\n    x8 = x7(I)\n    x9 = objects(x8, T, F, T)\n    x10 = mapply(delta, x9)\n    O = fill(x8, ZERO, x10)\n    return O"], [1.0, "def solve_9a63fcbd(I):\n    x1 = objects(I, T, F, F)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(subgrid, I)\n    x4 = chain(x3, mostcolor,677)\n    x5 = mapply(x4, x2)\n    x6 = difference(x1, x5)\n    x7 = compose(size, dedupe)\n    x8 = matcher(x7, ONE)\n    x9 = compose(size, last)\n    x10 = matcher(x9, ONE)\n    x11 = fork(both, x8, x10)\n    x12 = sfilter(x6, x11)\n    x13 = difference(x6, x12)\n    x14 = power(x11, TWO)\n    x15 = fork(multiply, first, last)\n    x16 = apply(x15, x13)\n    x17 = lbind(sfilter, x13)\n    x18 = lbind(matcher, x14)\n    x19 = compose(x17, x18)\n    x20 = apply(x19, x16)\n    x21 = lbind(occurrences, I)\n    x22 = lbind(recolor, ZERO)\n    x23 = compose(x21, x22)\n    x24 = rbind(ofcolor, ZERO)\n    x25 = chain(x24, backdrop, x23)\n    x26 = lbind(mapply, x25)\n    x27 = compose(x26, x20)\n    x28 = apply(x27, x21)\n    x29 = mapply(x25, x28)\n    x30 =yaint(I, x29)\n    x31 = subgrid(x2, x30)\n    x32 = mapply( x27, x31)\n    O = trim(x32)\n    return O"], [1.0, "def solve_56c8002b(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = hconcat(I, x2)\n    x4 = hmirror(x3)\n    x5 = vconcat(x3, x4)\n    x6 = vconcat(x5, x3)\n    O = cellwise(x6, ZERO, ONE)\n    return O"], [1.0, "def solve_8ec9ea78(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = tojvec(x5)\n    x7 = height(x3)\n    x8 = decrement(x7)\n    x9 = lbind(astuple, x8)\n    x10 = toivec(x3)\n    x11 = rbind(subtract, x10)\n    x12 = compose(x9, x11)\n    x13 = shape(x3)\n    x14 = maximum(x13)\n    x15 = rbind(multiply, x14)\n    x16 = apply(x15, x1)\n    x17 = lbind(shift, x3)\n    x18 = mapply(x17, x16)\n    x19 = fill(I, TWO, x18)\n    O = replace(x19, FIVE, ZERO)\n    return O"], [1.0, "def solve_1cbe0a20(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = solve(x2, x1)\n    x4 = rot180(I)\n    x5 = apply(toindices, x4)\n    x6 = lbind(rbind, contained)\n    x7 = compose(x6, x5)\n    x8 = fork(sfilter, identity, x7)\n    x9 = mapply(toindices, x4)\n    x10 = apply(x8, x9)\n    x11 = fork(difference, identity, identity)\n    x12 = mapply(x11, x10)\n    O = fill(I, ZERO, x12)\n    return O"], [1.0, "def solve_e89097c3(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, frontiers)\n    x7 = sfilter(x2, x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(I)\n    x12 = frontiers(I)\n    x13 = LEFT(x12)\n    x14 = mostcolor(x13)\n    x15 = ofcolor(x11, x14)\n    x16 = subgrid(x15, x11)\n    x17 = leftmost(x15)\n    x18 = leftmost(x16)\n    x19 = greater(x17, x18)\n    x20 = vmirror(x12)\n    x21 = matcher(identity, x14)\n    x22 = merge(x12)\n    x23 = leftmost(x22)\n    x24 = rightmost(x12)\n    x25 = leftmost(x24)\n    x26 = greater(x24, x25)\n    x27 = ofcolor(x11, x14)\n    x28 = ofcolor(x11, x25)\n    x29 = combine(x27, x28)\n    x30 = intersection(x29, x25)\n    x31 = fill(x11, THREE, x30)\n    O = fill(x31, x14, x30)\n    return O"], [1.0, "def solve_1b7c9e35(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = compose(first, normalize)\n    x5 = power(x4, FOUR)\n    x6 = TWO(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(apply, neighbors)\n    x9 = compose(x8, toindices)\n    x10 = lbind(rbind, intersection)\n    x11 = chain(x9, x10, toindices)\n    x12 = chain(size, x7, x11)\n    x13 = argmax(x3, x12)\n    x14 = repeat(x2, ONE)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = increment(x17)\n    x19 = width(I)\n    x20 = astuple(x19, x18)\n    x21 = increment(x20)\n    x22 = astuple(x19, x21)\n    x23 = repeat(x22, ONE)\n    x24 = combine(x19, x23)\n    x25 = branch(x64, x22, x24)\n    x26 = width(I)\n    x27 = increment(x26)\n    x28 = astuple(x27, x18)\n    x29 = canvas(ZERO, x28)\n    x30 = astuple(x27, x12)\n    x31 = shift(x30, UNITY)\n    x32 = combine(x31, x25)\n    x33 = paint(x29, x32)\n    O = toindices(x33)\n    return O"], [1.0, "def solve_d3e716b4(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    x4 = add(TWO, x3)\n    x5 = canvas(x2, x4)\n    x6 = asobject(I)\n    x7 = shift(x6, UNITY)\n    x8 = paint(x5, x7)\n    x9 = astuple(TWO, ONE)\n    x10 = dneighbors(UNITY)\n    x11 = remove(x9, x10)\n    x12 = rbind(colorcount, TWO)\n    x13 = argmin(x11, x12)\n    x14 = ofcolor(I, x2)\n    x15 = ofcolor(I, x1)\n    x16 = combine(x14, x15)\n    x17 = combine(x13, x16)\n    x18 = mapply(neighbors, x17)\n    O = fill(x8, x2, x18)\n    return O"], [1.0, "def solve_c2c2efe5(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(lowermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = lbind(compose, x4)\n    x7 = compose(initset, x6)\n    x8 = chain(first, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_601b5222(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, toindices)\n    x8 = interval(ZERO, NINE, ONE)\n    x9 = mapply(x7, x8)\n    x10 = shape(x5)\n    x11 = add(x10, ONE)\n    x12 = canvas(ZERO, x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, x1)\n    O = paint(x14, x14)\n    return O"], [1.0, "def solve_9b524ee4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8e22d455(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x2)\n    x4 = matcher(identity, x1)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x1)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x1)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = fill(I, x1, x28)\n    return O"], [1.0, "def solve_8b0cf692(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x1)\n    x10 = width(x1)\n    x11 = height(x2)\n    x12 = width(x2)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = pair(x7, x19)\n    x21 = lbind(shift, x3)\n    x22 = mapply(x21, x20)\n    O = paint(x17, x22)\n    return O"], [1.0, "def solve_3ac11618(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_80a89679(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_d8b603b7(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [1.0, "def solve_7019dc31(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_09fea659(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_708050c1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_dec9281f(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = decrement(x1)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(I, x6)\n    x8 = double(x3)\n    x9 = astuple(x8, x2)\n    x10 = crop(x7, DOWN, x9)\n    O = vconcat(x7, x10)\n    return O"], [1.0, "def solve_58d3c72e(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(lowermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = lbind(compose, x4)\n    x7 = compose(initset, x6)\n    x8 = chain(first, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x1214)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_d9faeb3a(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_d582374a(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_707afb0d(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_a23d7753(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = height(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = width(x2)\n    x6 = astuple(x5, x4)\n    x7 = canvas(x1, x6)\n    x8 = increment(SIX)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = product(x4, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(mapply, last)\n    x13 = first(x11)\n    x14 = lbind(recolor, x1)\n    x15 = compose(x12, x14)\n    x16 = fork(hconcat, identity, x15)\n    x17 = mapply(x16, x12)\n    x18 = paint(I, x17)\n    x19 = first(x13)\n    x20 = lbind(mapply, x10)\n    x21 = shape(x19)\n    x22 = add(x21, TWO_BY_ZERO)\n    x23 = canvas(x1, x22)\n    x24 = asobject(x23)\n    x25 = shift(x24, UNITY)\n    O = paint(x23, x25)\n    return O"], [1.0, "def solve_40e01877(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_6ff662e1(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = tophalf(I)\n    x5 = lefthalf(x4)\n    x6 = tophalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(I)\n    x11 = lefthalf(x9)\n    x12 = righthalf(x11)\n    x13 = combine(x7, x12)\n    x14 = combine(x3, x13)\n    x15 = paint(I, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = apply(toindices, x16)\n    x18 = fork(either, vline, hline)\n    x19 = lbind(sfilter, x17)\n    x20 = rbind(matcher, hmirror)\n    x21 = chain(x19, x20, apply)\n    x22 = compose(x21, color)\n    x23 = extract(x18, x22)\n    x24 = lbind(sfilter, x17)\n    x25 = rbind(matcher, vmirror)\n    x26 = compose(x24, x25)\n    x27 = fork(either, x25, x26)\n    x28 = sfilter(x23, x27)\n    x29 = lbind(argmax, x5)\n    x30 = chain(x29, x28, x22)\n    x31 = compose(x30, x29)\n    x32 = fork(difference, x31, box)\n    x33 = mapply(x32, x22)\n    O = fill(x15, x3, x33)\n    return O"], [1.0, "def solve_e0bc9184(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = frontiers(I)\n    x6 = colorfilter(x5, x4)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(ONE, x13)\n    x15 = mostcolor(I)\n    x16 = canvas(x15, x14)\n    x17 = hconcat(x16, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = rbind(subgrid, x10)\n    x20 = apply(x19, x18)\n    x21 = rbind(colorcount, x4)\n    x22 = argmax(x20, x21)\n    x23 = remove(x22, x20)\n    x24 = argmax(x23, x22)\n    x25 = last(x24)\n    x26 = ofcolor(x10, x4)\n    x27 = ofcolor(x11, x4)\n    x28 = combine(x26, x27)\n    x29 = fill(x14, THREE, x28)\n    x30 = mapply(vfrontier, x22)\n    x31 = mapply(hfrontier, x22)\n    x32 = combine(x30, x31)\n    x33 = fill(x29, TWO, x32)\n    x34 = fill(x33, THREE, x28)\n    x35 = fill(x34, SIX, x29)\n    O = x9(x35)\n    return O"], [1.0, "def solve_2efc36e6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x2, x3)\n    x5 = fork(equality, size, x4)\n    x6 = compose(x5, color)\n    x7 = extract(x1, x6)\n    x8 = remove(x7, x1)\n    x9 = argmax(x8, x4)\n    x10 = canvas(x9, TWO_BY_TWO)\n    x11 = normalize(x9)\n    x12 = lbind(shift, x11)\n    x13 = occurrences(x10, x12)\n    x14 = mapply(x12, x13)\n    x15 = toindices(x14)\n    x16 = shift(x15, UNITY)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x12)\n    x19 = fill(x10, x9, x18)\n    x20 = fill(x19, x9, x15)\n    O = fill(x20, x9, x15)\n    return O"], [1.0, "def solve_3d79ffaf(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = compose(double, height)\n    x4 = fork(equality, x3, size)\n    x5 = compose(double, width)\n    x6 = fork(equality, x5, size)\n    x7 = fork(either, x4, x6)\n    x8 = rbind(equality, TWO)\n    x9 = lbind(colorfilter, x2)\n    x10 = rbind(sfilter, vline)\n    x11 = rbind(sfilter, hline)\n    x12 = chain(x10, x9, color)\n    x13 = chain(x8, size, x12)\n    x14 = chain(x11, x9, color)\n    x15 = chain(x8, size, x14)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x7, x16)\n    x18 = extract(x1, x17)\n    x19 = color(x18)\n    x20 = colorfilter(x2, x19)\n    x21 = first(x20)\n    x22 = vline(x21)\n    x23 = ulcorner(x18)\n    x24 = lrcorner(x18)\n    x25 = branch(x22, UP, LEFT)\n    x26 = add(x23, x25)\n    x27 = branch(x22, DOWN, RIGHT)\n    x28 = add(x24, x27)\n    x29 = initset(x28)\n    x30 = insert(x26, x29)\n    O = subgrid(x30, I)\n    return O"], [1.0, "def solve_5d0533e5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = shape(x4)\n    x6 = maximum(x5)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = interval(ONE, x6, ONE)\n    x9 = rbind(toobject, I)\n    x10 = rbind(shoot, RIGHT)\n    x11 = chain(x9, x10, toivec)\n    x12 = rbind(shoot, DOWN)\n    x13 = chain(x9, x12, tojvec)\n    x14 = matcher(x11, ONE)\n    x15 = matcher(x13, x2)\n    x16 = rbind(shoot, x15)\n    x17 = chain(x14, x16, toivec)\n    x18 = fork(combine, x17, x15)\n    x19 = lbind(shift, x4)\n    x20 = compose(x19, x18)\n    x21 = fork(recolor, color, x20)\n    x22 = mapply(x21, x7)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_73fdb22c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, toindices)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [1.0, "def solve_eb4be1c9(I):\n    x1 = compose(first, last)\n    x2 = fork(equality, x1, first)\n    x3 = sfilter(x1, x2)\n    x4 = compose(last, last)\n    x5 = fork(equality, x4, first)\n    x6 = sfilter(x3, x5)\n    x7 = compose(first, last)\n    x8 = fork(equality, x7, first)\n    x9 = sfilter(x6, x8)\n    x10 = compose(last, last)\n    x11 = fork(equality, x10, first)\n    x12 = sfilter(x9, x11)\n    x13 = compose(first, last)\n    x14 = fork(remove, x13, last)\n    x15 = fork(astuple, x14, x12)\n    x16 = size(x1)\n    x17 = order(x15, x16)\n    x18 = size(x12)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = apply(x15, x19)\n    x21 = apply(x12, x20)\n    x22 = papply(equality, x21, x17)\n    x23 = pair(x20, x22)\n    x24 = pair(x31, x23)\n    x25 = apply(last, x24)\n    x26 = mpapply(recolor, x25, x3)\n    O = paint(I, x26)\n    return O"], [1.0, "def solve_2c4b0d50(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape51027(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_90187741(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_e8b5c813(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_09b6386c(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(multiply, shape)\n    x3 = chain(x2, divide, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [1.0, "def solve_cea4f48f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(5521, x25)\n    x27 = fork(recolor, identity, x26)\n    x28 = mapply(x27, x3)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_224ae191(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_d392d2a0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = fork(multiply, height, width)\n    x5 = fgpartition(x3)\n    x6 = merge(x5)\n    x7 = index(x3, x6)\n    x8 = positive(x7)\n    x9 = branch(x8, x5, x6)\n    x10 = branch(x8, positive, size)\n    x11 = x10(x9)\n    x12 = subtract(x8, x11)\n    x13 = branch(x12, x5, x6)\n    x14 = canvas(x13, UNITY)\n    x15 = x13(x14)\n    x16 = objects(x3, F, F, T)\n    x17 = rbind(colorcount, TWO)\n    x18 = argmax(x16, x17)\n    O = subgrid(x18, I)\n    return O"], [1.0, "def solve_ccdc2bc0(I):\n    x1 = ofcolor(I, ONE)\n    x2 = center(x1)\n    x3 = hmirror(I)\n    x4 =ixels(x3, x2)\n    x5 = fork(add, last, first)\n    x6 = compose(decrement, x5)\n    x7 = power(x6, FOUR)\n    x8 = fork(connect, first, x7)\n    x9 = apply(x8, x4)\n    x10 = intersection(x9, x4)\n    x11 = lbind(difference, x10)\n    x12 = lbind(rec, NEG_UNITY)\n    x13 = chain(x12, x11, x8)\n    x14 = fork(ofcolor, x13, identity)\n    x15 = mapply(x14, x1)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_ce3367af(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(extract, x6)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, x11)\n    x13 = lbind(mapply, x12)\n    x14 = lbind(rot90, x4)\n    x15 = power(x14, FOUR)\n    x16 = x15(I)\n    x17 = x15(x16)\n    x18 = rot270(x17)\n    x19 = astuple(x15, x18)\n    x20 = x15(x19)\n    x21 = rbind(shoot,ORIGIN)\n    x22 = compose(x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = mapply(x23, x3)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_d6fa6988(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2f0be9a9(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_a8812506(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_554351f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_a7ddec1f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_323f2140(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_7d77b30c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = rbind(ofcolor, x13)\n    x23 = compose(x21, x22)\n    x24 = fork(subtract, first, last)\n    x25 = compose(x23, x24)\n    x26 = lbind(apply, x16)\n    x27 = rbind(ofcolor, x13)\n    x28 = compose(x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = rbind(compose, x5)\n    x31 = lbind(x30, x29)\n    x32 = compose(x31, x25)\n    x33 = fork(sfilter, x30, x32)\n    x34 = chain(positive, size, x33)\n    x35 = sfilter(x19, x34)\n    x36 = apply(x16, x35)\n    x37 = rbind(shift, x36)\n    x38 = mapply(x37, x35)\n    O = fill(x14, x3, x38)\n    return O"], [1.0, "def solve_4a800c91(I):\n    x1 = objects(I, F, T, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = totuple(x4)\n    x6 = lbind(colorcount, I)\n    x7 = compose(x6, urcorner)\n    x8 = totuple(x5)\n    x9 = other(x8, x12)\n    x10 = ofcolor(I, x9)\n    x11 = toindices(x10)\n    x12 = combine(x11, x11)\n    x13 = difference(x55, x12)\n    x14 = normalize(x10)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x13)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_826eaee2(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = compose(even, x2)\n    x4 = sfilter(x1, x3)\n    x5 = difference(x1, x4)\n    x6 = merge(x5)\n    x7 = compose(hmirror, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = sfilter(x4, x8)\n    x10 = vmirror(x9)\n    x11 = papply(add, x11, x1)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_af2dc0d2(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = apply(x5, x2)\n    x7 = sfilter(x6, vline)\n    x8 = mfilter(x6, hline)\n    x9 = sfilter(x6, cline)\n    x10 = mfilter(x6, hline)\n    x11 = fill(I, x1, x7)\n    x12 = fill(x11, x1, x8)\n    O = fill(x12, x1, x10)\n    return O"], [1.0, "def solve_f9f0ad86(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = mostcolor(I)\n    x4 = add(max, THREE)\n    x5 = tojvec(x4)\n    x6 = interval(x5, add, ONE)\n    x7 = rbind(add, THREE)\n    x8 = interval(x7, toivec, ONE)\n    x9 = rbind(add, FOUR)\n    x10 = rbind(add, FOUR)\n    x11 = fork(connect, x9, x10)\n    x12 = compose(x11, tojvec)\n    x13 = fork(add, x12, x5)\n    x14 = pair(x6, x13)\n    x15 = mapply(box, x14)\n    x16 = fill(I, x2, x15)\n    x17 = difference(x1, x14)\n    x18 = mapply(aba, x17)\n    O = fill(x16, FOUR, x18)\n    return O"], [1.0, "def solve_fef5298d(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = colorfilter(x1, FIVE)\n    x4 = sfilter(x3, hline)\n    x5 = sfilter(x3, vline)\n    x6 = ulcorner(x4)\n    x7 = index(I, x6)\n    x8 = lrcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = initset(x9)\n    x11 = insert(x7, x10)\n    x12 = toobject(x11, I)\n    x13 = toindices(x12)\n    x14 = rbind(shift, x13)\n    x15 = mapply(x14, x12)\n    x16 = replace(I, FIVE, ZERO)\n    x17 = paint(x16, x15)\n    O = trim(x17)\n    return O"], [1.0, "def solve_e52e0732(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 =izefilter(x2, ONE)\n    x4 = fork(add, height, width)\n    x5 = compose(decrement, x4)\n    x6 = colorfilter(x3, x1)\n    x7 = compose(last, center)\n    x8 = fork(add, width, width)\n    x9 = compose(x8, first)\n    x10 = power(x9, TWO)\n    x11 = fork(connect, x7, x10)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x6)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_5e627134(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_351fa5df(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_878e8f83(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, outbox)\n    x8 = paint(x7, x4)\n    x9 = initset(x4)\n    x10 = insert(x6, x9)\n    x11 = insert(x7, x10)\n    x12 = toobject(x11, I)\n    x13 = toindices(x12)\n    x14 = fgpartition(x8)\n    x15 = merge(x14)\n    x16 = cover(I, x15)\n    x17 = difference(x13, x16)\n    x18 = colorfilter(x17, x6)\n    x19 = mapply(dneighbors, x18)\n    x20 = matcher(last, x5)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = difference(x19, x22)\n    x24 = colorfilter(x23, x6)\n    x25 = mapply(dneighbors, x24)\n    x26 =(recolor, x14)\n    x27 = paint(x26, x25)\n    O = paint(x27, x24)\n    return O"], [1.0, "def solve_b48bf8bb(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, x1, x4)\n    x6 = leastcolor(I)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = mostcolor(I)\n    x12 = shape(I)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(I, x13)\n    x15 = objects(x14, F, T, T)\n    x16 = colorfilter(x15, x6)\n    x17 = rbind(manhattan, x15)\n    x18 = order(x16, x17)\n    x19 = mostcolor(I)\n    x20 = ofcolor(x19, x6)\n    x21 = ulcorner(x20)\n    x22 = shoot(x21, UNITY)\n    O = underfill(x13, x9, x22)\n    return O"], [1.0, "def solve_f641348a(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_6ac39ade(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_abf37a76(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_cd890f7e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x8)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [1.0, "def solve_447b277e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = shape(I)\n    x5 = canvas(ZERO, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_109fdfb6(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_c51109d2(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = asindices(I)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = difference(x4, x5)\n    x7 = halve(x6)\n    x8 = color(x3)\n    x9 = lbind(fork, manhattan)\n    x10 = lbind(x9,363)\n    x11 = rbind(rapply, x7)\n    x12 = compose(initset, x11)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, x7)\n    x15 = compose(initset, x14)\n    x16 = chain(first, x14, x15)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = apply(x19, x2)\n    x21 = valmax(x20, width)\n    x22 = fgpartition(I)\n    x23 = merge(x22)\n    x24 = remove(x23, x22)\n    x25 = compose(asobject, first)\n    x26 = lbind(compose, x25)\n    x27 = lbind(shift, x39)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(difference, x28, last)\n    x30 = mapply(x29, x22)\n    O = fill(I, x1, x30)\n    return O"], [1.0, "def solve_6250a628(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_6cb63d1c(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_0d00b34f(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_fa4904a7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = sfilter(x11, last)\n    x13 = paint(I, x12)\n    x14 = rot90(x13)\n    x15 = rot180(x13)\n    x16 = rot270(x13)\n    x17 = leastcolor(x14)\n    x18 = ofcolor(x14, x17)\n    x19 = ofcolor(x15, x18)\n    x20 = recolor(x17, x19)\n    O = x13(x20)\n    return O"], [1.0, "def solve_b53b9c96(I):\n    x1 = leastcolor(I)\n    x2 = compose(dmirror, dedupe)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, size)\n    x6 = x5(x4)\n    x7 = x5(x6)\n    x8 = argmin(x7, x5)\n    O = x5(x8)\n    return O"], [1.0, "def solve_9cfd3cac(I):\n    x1 = asindices(I)\n    x2 = dmirror(I)\n    x3 = invert(NINE)\n    x4 = interval(x3, I, ONE)\n    x5 = astuple(x4, x4)\n    x6 = lbind(shift, x5)\n    x7 = objects(x2, T, F, T)\n    x8 = mapply(x6, x7)\n    O = paint(x2, x8)\n    return O"], [1.0, "def solve_033ddb6e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_d1789c89(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, F)\n    x10 = rbind(x6, F)\n    x11 = rbind(x8, T)\n    x12 = rbind(subgrid, I)\n    x13 = chain(x11, x12, trim)\n    x14 = rot90(x13)\n    x15 = rot180(x13)\n    x16 = rot270(x13)\n    x17 = hconcat(x14, x14)\n    x18 = hconcat(x15, x16)\n    x19 = vconcat(x17, x18)\n    x20 = vconcat(x19, x15)\n    O = hconcat(x17, x20)\n    return O"], [1.0, "def solve_fc1470f9(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = Fgpartition(I)\n    x4 = argmax(x3, size)\n    x5 = remove(x4, x3)\n    x6 = merge(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asindices(x9)\n    x11 = lrcorner(x10)\n    x12 = increment(x11)\n    x13 = lrcorner(x12)\n    x14 = width(x9)\n    x15 = divide(x14, x13)\n    x16 = increment(x15)\n    x17 = width(x9)\n    x18 = divide(x17, x13)\n    x19 = increment(x18)\n    x20 = invert(x17)\n    x21 = increment(x19)\n    x22 = interval(x20, x21, ONE)\n    x23 = invert(x21)\n    x24 = increment(x23)\n    x25 = interval(x24, x24, ONE)\n    x26 = product(x22, x25)\n    x27 = invert(x15)\n    x28 = increment(x27)\n    x29 = interval(x28, x27, ONE)\n    x30 = apply(decrement, x26)\n    x31 = apply(decrement, x30)\n    x32 = papply(astuple, x30, x31)\n    x33 = lbind(shift, x10)\n    x34 = mapply(x33, x32)\n    O = paint(x9, x34)\n    return O"], [1.0, "def solve_cabcd614(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(dneighbors, center)\n    x4 = difference(x2, x3)\n    x5 = astuple(FOUR, FOUR)\n    x6 = ofcolor(I, x1)\n    x7 = difference(x5, x6)\n    x8 = rbind(shoot, UNITY)\n    x9 = rbind(shoot, NEG_UNITY)\n    x10 = fork(combine, x8, x9)\n    x11 = rbind(shoot, UP_RIGHT)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(combine, x10, x13)\n    x15 = mapply(x14, x4)\n    x16 = fill(I, x1, x15)\n    O = fill(x16, x7, x12)\n    return O"], [1.0, "def solve_f797cc6f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_66dd380e(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_5eebe5fa(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_96a25339(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmin(x5, x2)\n    x7 = mostcolor(I)\n    x8 = shape(x6)\n    x9 = canvas(x7, x8)\n    x10 = normalize(x6)\n    x11 = paint(x9, x10)\n    x12 = height(x6)\n    x13 = width(x6)\n    x14 = neighbors(ORIGIN)\n    x15 = toindices(x6)\n    x16 = inbox(x15)\n    x17 = recolor(ZERO, x16)\n    x18 = height(x7)\n    x19 = vsplit(x17, x18)\n    x20 = occurrences(x11, x19)\n    x21 = lbind(shift, x6)\n    x22 = mapply(x21, x20)\n    O = paint(x11, x22)\n    return O"], [1.0, "def solve_4f366625(I):\n    x1 = fgpartition(I)\n    x2 = compose(size, dedupe)\n    x3 = x2(x1)\n    x4 = branch(x3, height, width)\n    x5 = x4(I)\n    x6 = matcher(x2, x5)\n    x7 = fork(both, x4, x6)\n    x8 = extract(x1, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x8, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = subgrid(x17, I)\n    x19 = asindices(x18)\n    x20 = apply(x9, x19)\n    x21 = pair(x17, x20)\n    x22 = mapply(x21, x21)\n    O = fill(I, x12, x22)\n    return O"], [1.0, "def solve_34d6d36b(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x4)\n    x6 = mapply(ineighbors, x4)\n    x7 = fill(x5, ONE, x6)\n    O = fill(x7, x1, x5)\n    return O"], [1.0, "def solve_46ee5f01(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_b7eed2b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain( size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x12 = compose(x14, x15)\n    x13 = chain(xt, x13, x8)\n    x14 = mfilter(x3, x12)\n    x15 = mfilter(x3, x13)\n    x16 = paint(I, x14)\n    x17 = paint(x16, x15)\n    O = fill(x17, FIVE, x15)\n    return O"], [1.0, "def solve_b5606de9(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x2, x3)\n    x5 = fill(I, x1, x4)\n    O = replace(x5, x1, FOUR)\n    return O"], [1.0, "def solve_057e6db9(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = mostcolor(I)\n    x8 = subgrid(x5, I)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(x8, x9)\n    x11 = replace(x9, x9, x7)\n    x12 = combine(x10, x11)\n    x13 = argmin(x12, leastcolor)\n    x14 = replace(x13, x9, x7)\n    x15 = combine(x13, x14)\n    x16 = apply(first, x15)\n    x17 = mapply(last, x15)\n    x18 = fill(x17, x9, x16)\n    x19 = fill(x18, x9, x13)\n    O = fill(x19, ulcorner, x15)\n    return O"], [1.0, "def solve_d70e590e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_fb2b58cc(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(matcher, x3)\n    x10 = compose(x9, delta)\n    x11 = fork(sfilter, identity, x10)\n    x12 = mapply(x11, x8)\n    x13 = fill(I, FOUR, x12)\n    O = replace(x13, x1, ZERO)\n    return O"], [1.0, "def solve_3542518a(I):\n    x1 = mostcolor(I)\n    x2 = identity(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_f9206cf1(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = difference(x13, x14)\n    x16 = mapply(x12, x15)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_48dd02dd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_7f6c6031(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = difference(x1, x3)\n    return O"], [1.0, "def solve_5ed47952(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_dab17946(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_8f30cfba(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_0a179c55(I):\n    x1 = partition(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = apply(normalize, x1)\n    x5 = difference(x1, x4)\n    x6 = apply(normalize, x5)\n    x7 = lbind(intersection, x6)\n    x8 = chain(size, x7, dneighbors)\n    x9 = matcher(x8, ZERO)\n    x10 = objects(I, T, F, T)\n    x11 = sfilter(x10, x9)\n    x12 = difference(x10, x11)\n    x13 = toobject(x12, I)\n    x14 = chain(toobject, color, x13)\n    x15 = mapply(x14, x12)\n    x16 = ofcolor(I, x2)\n    x17 = rbind(subtract, x16)\n    x18 = chain(even, x17, width)\n    x19 = sfilter(x16, x18)\n    x20 = difference(x16, x19)\n    x21 = fill(I, x2, x19)\n    x22 = fill(x21, x2, x20)\n    O = fill(x22, TWO, x21)\n    return O"], [1.0, "def solve_c6ab77c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(I, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_9f5b9735(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = mapply(toindices, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x2, x5)\n    x7 = compose(box, center)\n    x8 = fork(difference, x7, fork)\n    x9 = mapply(x8, x6)\n    x10 = fill(I, THREE, x9)\n    x11 = merge(x6)\n    x12 = fill(x10, FOUR, x11)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = fill(x12, THREE, x14)\n    x16 = replace(x15, x5, FIVE)\n    O = objects(x16, T, F, F)\n    return O"], [1.0, "def solve_84291f1e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = lbind(rbind, colorcount)\n    x17 = compose(x16, palette)\n    x18 = fork(recolor, x17, x15)\n    x19 = mapply(x18, x9)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_2a09119c(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_3723d775(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = objects(I, T, F, F)\n    x13 = colorfilter(x12, x11)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, color)\n    x16 = sfilter(x1, x15)\n    x17 = lbind(colorcount, I)\n    x18 = argmin(x16, x17)\n    x19 = colorfilter(x1, x18)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, color)\n    x22 = sfilter(x1, x21)\n    x23 = lbind(colorcount, I)\n    x24 = colorfilter(x1, x18)\n    x25 = rbind(contained, x24)\n    x26 = compose(x25, color)\n    x27 = sfilter(x2, x26)\n    x28 = size27(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_1bea2f7e(I):\n    x1 = fgpartition(I)\n    x2 = mapply(neighbors, x1)\n    x3 = height(x2)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = width(x2)\n    x7 = astuple(x6, x5)\n    x8 = crop(I, ORIGIN, x7)\n    x9 = leastcolor(x8)\n    x10 = increment(x4)\n    x11 = divide(x10, x9)\n    x12 = astuple(x1, x11)\n    x13 = crop(x8, DOWN, x12)\n    x14 = leastcolor(x13)\n    x15 = ofcolor(x13, x14)\n    x16 = crop(x8, first, x15)\n    x17 = fill(x16, x13, x15)\n    x18 = ofcolor(x17, x14)\n    x19 = ulcorner(x7)\n    x20 = lowermost(x7)\n    x21 = rightmost(x7)\n    x22 = astuple(x20, x21)\n    x23 = lbind(greater, x22)\n    x24 = compose(x23, first)\n    x25 = rbind(greater, x22)\n    x26 = compose(x25, last)\n    x27 = sfilter(x19, x26)\n    x28 = sfilter(x19, x24)\n    x29 = merge(x28)\n    x30 = fill(x17, x9, x29)\n    x31 = merge(x29)\n    x32 = fill(x30, x13, x31)\n    x33 = compose(first, last)\n    x34 = fork(recolor, x33, first)\n    x35 = mapply(x34, x29)\n    O = paint(x32, x35)\n    return O"], [1.0, "def solve_55bd32b4(I):\n    x1 = rot270(I)\n    x2 = papply(mostcommon, I)\n    x3 = delta(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x3)\n    x11 = asobject(x10)\n    x12 = lbind(shift, x11)\n    x13 = mapply(x12, x9)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_b578ac83(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices,boindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = fork(multiply, height, width)\n    x7 = argmin(x5, x6)\n    x8 = palette(I)\n    x9 = such74(x7)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = extract(x8, x11)\n    x13 = other(x8, x12)\n    x14 = ofcolor(I, x12)\n    x15 = leftmost(x14)\n    x16 = argmax(x15, x6)\n    x17 = difference(x16, x13)\n    x18 = prapply(extract, x17, x16)\n    x19 = initset(x16)\n    x20 = cover(I, x19)\n    x21 = mapply(x16, x18)\n    x22 = difference(x5, x21)\n    x23 = colorcount(I, x12)\n    x24 = divide(x23, x22)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = apply(tojvec, x26)\n    x28 = astuple(x25, x23)\n    x29 = canvas(x28, x27)\n    x30 = fill(x29, x13, x27)\n    x31 = normalize(x4)\n    x32 = lbind(shift, x31)\n    x33 = mapply(x32, x28)\n    O = fill(x30, x14, x33)\n    return O"], [1.0, "def solve_9371dfd5(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = cmirror(x2)\n    x7 = hconcat(x5, x6)\n    x8 = hmirror(x7)\n    O = xconcat(x7, x8)\n    return O"], [1.0, "def solve_ec5df745(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = recolor(x6, x2)\n    x8 = combine(x7, x2)\n    x9 = x7(x8)\n    x10 = hmirror(x9)\n    x11 = vmirror(x9)\n    x12 = invert(x6)\n    x13 = increment(x12)\n    x14 = astuple(x13, xcombine)\n    x15 = astuple(x41, x6)\n    x16 = astuple(x14, x15)\n    x17 = underfill(I, x1, x16)\n    x18 = astuple(x3, x425)\n    x19 = canvas(x18, x17)\n    O = hconcat(x19, x19)\n    return O"], [1.0, "def solve_7610c0a9(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_956eb667(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_dabb5276(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_66c23b2d(I):\n    x1 = mostcolor(I)\n    x2 = identity(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = difference(x2, x5)\n    x7 = fill(I, TWO, x6)\n    O = paint(x7, x7)\n    return O"], [1.0, "def solve_8d4e39e2(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, x10, x6)\n    x12 = x11(x9)\n    x13 = x10(x4)\n    x14 = add(x12, x13)\n    x15 = initset(x14)\n    x16 = insert(x11, x15)\n    x17 = width(x9)\n    x18 = decrement(x17)\n    x19 = tojvec(x18)\n    x20 = initset(x19)\n    x21 = insert(x11, x20)\n    x22 = width(x9)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(x9)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x11, x30)\n    x32 = lbind(greater, x19)\n    x33 = compose(x31, x32)\n    x34 = rbind(contained, x41)\n    x35 = compose(x34, last)\n    x36 = sfilter(x26, x35)\n    x37 =a79(x36)\n    x38 = cover(x22, x37)\n    x39 = fill(x38, THREE, x37)\n    O = x11(x39)\n    return O"], [1.0, "def solve_921d58fe(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_5f79059f(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = compose(double, height)\n    x4 = fork(equality, x3, size)\n    x5 = compose(double, width)\n    x6 = fork(equality, x5, size)\n    x7 = fork(either, x4, x6)\n    x8 = rbind(equality, TWO)\n    x9 = lbind(colorfilter, x2)\n    x10 = rbind(sfilter, vline)\n    x11 = rbind(sfilter, hline)\n    x12 = chain(x10, x9, color)\n    x13 = chain(x8, size, x12)\n    x14 = chain(x11, x9, color)\n    x15 = chain(x8, size, x14)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x7, x16)\n    x18 = extract(x1, x17)\n    x19 = color(x18)\n    x20 = colorfilter(x2, x19)\n    x21 = first(x20)\n    x22 = vline(x21)\n    x23 = ulcorner(x18)\n    x24 = lrcorner(x18)\n    x25 = branch(x22, UP, LEFT)\n    x26 = add(x23, x25)\n    x27 = branch(x22, DOWN, RIGHT)\n    x28 = add(x24, x27)\n    x29 = initset(x28)\n    x30 = insert(x26, x29)\n    O = subgrid(x30, I)\n    return O"], [1.0, "def solve_6f62a822(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x1, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_fc854169(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(contained, x4)\n    x6 = lbind(index, I)\n    x7 = compose(x5, x6)\n    x8 = argmin(x2, x7)\n    x9 = palette(I)\n    x10 = colorfilter(x9, x8)\n    x11 = lbind(adjacent, x8)\n    x12 = compose(x11, toindices)\n    x13 = order(x10, x12)\n    x14 = extract(x13, x13)\n    x15 = x14(x14)\n    x16 = last(x14)\n    x17 = remove(x16, x14)\n    x18 = repeat(x16, ONE)\n    x19 = combine(x18, x17)\n    x20 = mpapply(recolor, x19, x9)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_8b5ea3af(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_c13f1e28(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_5bed959f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e66fcc09(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_5a93098c(I):\n    x1 = frontiers(I)\n    x2 = rbind(sfilter, hline)\n    x3 = rbind(sfilter, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = subtract(x4, x5)\n    x7 = add(x4, uppermost)\n    x8 = add(x3, leftmost)\n    x9 = subtract(x4, x8)\n    x10 = width(I)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = lbind(shift, x12)\n    x14 = height(I)\n    x15 = decrement(x14)\n    x16 = toivec(x15)\n    x17 = lbind(shift, x16)\n    x18 = width(I)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = lbind(shift, x20)\n    x22 = palette(I)\n    x23 = lbind(multiply, x5)\n    x24 = ofcolor(I, x25)\n    x25 = ofcolor(I, x26)\n    x26 = combine(x24, x25)\n    x27 = intersection(x26, x2)\n    x28 = difference(x27, x2)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = recolor(x25, x9)\n    x32 = recolor(x30, x10)\n    x33 = combine(x31, x32)\n    x34 = branch(x36, x33, x29)\n    O = x74(x34)\n    return O"], [1.0, "def solve_b0d17118(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, TWO)\n    x3 = apply(first, x2)\n    x4 = asindices(x3)\n    x5 = apply(last, x2)\n    x6 = repeat(x4, ONE)\n    x7 = combine(x6, x5)\n    x8 = mpapply(recolor, x3, x7)\n    O = paint(x3, x8)\n    return O"], [1.0, "def solve_fe9eaa88(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_d883ddb3(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = rbind(ofcolor, x6)\n    x9 = compose(x8, delta)\n    x10 = lbind(prapply, I)\n    x11 = fork(x10, x9, identity)\n    x12 = compose(x11, x7)\n    x13 = rbind(ofcolor, x6)\n    x14 = compose(x13, outbox)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(shift, x7, x15)\n    x17 = mapply(x16, x3)\n    x18 = fill(I, ZERO, x3)\n    x19 = paint(x18, x17)\n    O = paint(x19, x2)\n    return O"], [1.0, "def solve_8e50a5f8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_7eace043(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(I)\n    x4 = matcher(identity, x1)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(double, width)\n    x7 = chain(size, x5, x6)\n    x8 = argmax(x2, x7)\n    x9 = lbind(shift, x8)\n    x10 = apply(x9, x2)\n    x11 = double(FOUR)\n    x12 = decrement(x11)\n    x13 = power(outbox, x12)\n    x14 = mapply(x9, x3)\n    x15 = maximum(x14)\n    x16 = double(x15)\n    x17 = increment(x16)\n    x18 = x15(I)\n    x19 = shape(x18)\n    x20 = lbind(multiply, x19)\n    x21 = apply(x20, x17)\n    x22 = mapply(x9, x21)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_45358431(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolter(x30, last)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 = recol"], [1.1, "def solve_ee7c9348(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_7a413a6c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = mostcommon(x7)\n    x9 = palette(I)\n    x10 = remove(x8, x9)\n    x11 = lbind(colorcount, I)\n    x12 = argmax(x10, x11)\n    x13 = colorfilter(x2, x12)\n    x14 = rbind(ofcolor, x8)\n    x15 = mapply(x14, x13)\n    x16 = difference(x1, x15)\n    x17 = apply(O = fill(I, x12, x16)\n    x18 = apply(initset, x15)\n    x19 = rbind( recolor, x8)\n    x20 = lbind(occurrences, x17)\n    x21 = compose(x20, x19)\n    x22 = fork(combine, x21, outbox)\n    x23 = fork(combine, ulcorner, x22)\n    x24 = lbind(rbind, subtract)\n    x25 = rbind(apply, x10)\n    x26 = lbind(lbind, shift)\n    x27 = compose(x26, x23)\n    x28 = fork(compose, x27, x24)\n    x29 = lbind(chain, x17)\n    x30 = lbind(x29, toindices)\n    x31 = rbind(rapply, x23)\n    x32 = initset(x16)\n    x33 = lbind(rapply, x32)\n    x34 = chain(first, x31, x33)\n    x35 = lbind(Given fork, combine)\n    x36 = compose(x35, x28)\n    x37 = fork(compose, x36, x34)\n    x38 = compose(x"], [1.1, "def solve_e9b24ee1(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = height(I)\n    x5 =55613(I)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = argmax(x6, x7)\n    x9 = partition(I)\n    x10 = remove(x8, x9)\n    x11 = difference(x10, x8)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = color(x12)\n    x15 = color(x13)\n    x16 = box(x12)\n    x17 = backdrop(x16)\n    x18 = toobject(x14, I)\n    x19 = difference(x17, x18)\n    x20 = mostcolor(x17)\n    x21 = color(x20)\n    x22 = subgrid(x12, I)\n    x23 = objects(x22, T, F, F)\n    x24 = colorfilter(x23, x21)\n    x25 = argmax(x24, size)\n    x26 = apply(ulcorner, x24)\n    x27 = lbind(shift, x25)\n    x28 = mapply(x27, x26)\n    x29 = paint(x22, x28)\n    x30 = height(x29)\n    x31 = width(x29)\n    x32 = divide(x30, x31)\n    x33 = increment(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = difference(x34, x25)\n    x36 = product(x35, x35)\n    x37 = lbind(shift, x29)\n    x38 = mapply(x37, x36)\n    x39 = corners(x98)\n    x40 = ofcolor(x19, x39)\n    x41 = apply(x37, x40)\n    x42 = asindices(x19)\n    x43 = corners(x42)"], [1.1, "def solve_42cc66a5(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_b1efc555(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_1c09dd2b(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_757ca8ae(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = asindices(I)\n    x4 = outbox(x3)\n    x5 = lbind(adjacent, x4)\n    x6 = compose(merge, x5)\n    x7 = rbind(compose, initset)\n    x8 = lbind(rbind, manhattan)\n    x9 = chain(x7, x8, initset)\n    x10 = lbind(compose, initset)\n    x11 = rbind(compose, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = chain(x11, x12, initset)\n    x14 = compose(maximum, x6)\n    x15 = fork(add, x14, x13)\n    x16 = compose(initset, x15)\n    x17 = fork(insert, x16, ulcorner)\n    x18 = compose(backdrop, x17)\n    x19 = rbind(compose, initset)\n    x20 = fork(add, x19, x14)\n    x21 = fork(insert, x20, x1)\n    x22 = compose(x21, x6)\n    x23 = fork(insert, x18, x22)\n    x24 = fork(insert, x23, x1)\n    x25 = lbind(contained, TWO)\n    x26 = lbind(index, I)\n    x27 = compose(x25, x26)\n    x28 = compose(invert, x227)\n    x29 = fork(compose, x28, x27)\n    x30 = fork(449subtract, x28, x29)\n    x31 = fork(apply, x30, x27)\n    x32 = lbind(add, DOWN)\n    x33 =Example output:\n    x32 = power(x31, TWO)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x31)\n    x36 = lbind(power, width)\n    x37 = rbind"], [1.1, "def solve_7602221c(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(shape, THREE_BY_THREE)\n    x3 = matcher(size, FIVE)\n    x4 = fork(intersection, toindices, box)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, FOUR)\n    x7 = fork(intersection, toindices, corners)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, FOUR)\n    x10 = fork(both, x2, x3)\n    x11 = fork(both, x6, x9)\n    x12 = fork(both, x10, x11)\n    x13 = extract(x1, x12)\n    x14 = toindices(x13)\n    x15 = lowermost(x13)\n    x16 = matcher(first, x15)\n    x17 = uppermost(x13)\n    x18 = matcher(first, x17)\n    x19 = rightmost(x13)\n    x20 = matcher(last, x19)\n    x21 = leftmost(x13)\n    x22 = matcher(last, x21)\n    x23 = sfilter(x14, x16)\n    x24 = size(x23)\n    x25 = equality(x24, TWO)\n    x26 = sfilter(x14, x18)\n    x27 = size(x26)\n    x28 = equality(x27, TWO)\n    x29 = sfilter(x14, x20)\n    x30 = size(x29)\n    x31 = equality(x30, TWO)\n    x32 = sfilter(x14, x22)\n    x33 = size(x32)\n    x34 = equality(x33, TWO)\n    x35 = either(x25, x28)\n    x36 = branch(x35, hmirror, vsplit)\n    x37 = multiply(x25, DOWN)\n    x38 = multiply(x28, UP)\n    x39 = crop(I, x37, x38)\n    x40 = multiply(x"], [1.1, "def solve_d2023b98(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, x1)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41"], [1.1, "def solve_cec33d94(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_edbf9dbf(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = pose(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = compose(positive, size)\n    x5 = fork(add, sign, x4)\n    x6 = compose(x5, x3)\n    x7 = asindices(I)\n    x8 = fork(add, x6, x7)\n    x9 = fork(interval, x8, identity)\n    x10 = lbind(rbind, compose)\n    x11 = rbind(compose, x10)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(rbind, positive)\n    x15 = compose(x14, x13)\n    x16 = fork(sfilter, x9, x15)\n    x17 = fork(matcher, identity, x16)\n    x18 = compose(x17, x7)\n    x19 = lbind(acdecbbc\n    x20 = chain(corners, halve, last)\n    x21 = compose(x20, x8)\n    x22 = fork(shift, x18, x21)\n    x23 = apply(x22, x1)\n    x24 = merge(x23)\n    x25 = dmirror(x24)\n    x26 = width(x24)\n    x27 = astuple(x26, x25)\n    x28 = crop(x25, ORIGIN, x27)\n    x29 = increment(x26)\n    x30 = insert(x29, x28)\n    x31 = asindices(x30)\n    x32 = ofcolor(x30, x1)\n    x33 = ofcolor(x30, x2)\n    x34 = mapply(xfrontier, x32)\n    x35 = mapply(xfrontier, x33)\n    x36 = recolor(x50, x34)\n    x37 = recolor(x50, x35)\n    x38 = combine(x36, x37)\n    x39 = combine(x3, x"], [1.1, "def solve_16854256(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = objects(I, T, F, F)\n    x9 = color(x6)\n    x10 = leftmost(x6)\n    x11 = argmin(x8, x10)\n    x12 = other(x8, x11)\n    x13 = color(x12)\n    x14 = colorfilter(x66, x13)\n    x15 =141(x14)\n    x16 = mapply(dneighbors, x15)\n    x17 = difference(x16, x55)\n    x18 = merge(x17)\n    x19 = color(x18)\n    x20 = lrcorner(x5)\n    x21 = rbind(subtract, x20)\n    x22 = chain(even, x21, last)\n    x23 = sfilter(x19, x22)\n    x24 =651(x23)\n    x25 = branch(x21, x23, x24)\n    x26 = difference(x23, x25)\n    x27 = toobject(x26, I)\n    x28 = color(x27)\n    x29 = rbind( contradictitate, x27)\n    x30 = compose(x29, initset)\n    x31 = rbind(colorcount, x27)\n    x32 = valmax(x26, x31)\n    x33 = matcher(x32, x29)\n    x34 = sfilter(x26, x33)\n    x35 = toobject(x34, I)\n    x36 = sfilter(x25, x35)\n    x37 = cellwise(x36, x22, x25)\n    x38 = combine(x29, x37)\n    x39 = merge(x38)\n    x40 = dmirror(x39)\n    "], [1.1, "def solve_91cc347a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_b9ad98ca(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = partition(I)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = canvas(x6, x20)\n    x15 = bluemost(x5)\n    x16 = ofcolor(I, x15)\n    x17 = subgrid(x16, I)\n    x18 = countedupe(x17)\n    x19 = rot90(x18)\n    x20 = ymirror(x19)\n    x21 = matcher(first, x19)\n    x22 = rbind(sfilter, x21)\n    x23 = compose(flip, x22)\n    x24 = rbind(textcount, x15)\n    x25 = rbind(divide, x15)\n    x26 = chain(x24, x25, x25)\n    x27 = apply(x26, x20)\n    x28 =71(x27)\n    x29 = colorcount(x28, x6)\n    x30 = divide(x29, x31)\n    x31 = powersplit(x28, x30)\n    x32 = apply(x26, x31)\n    x33 = rbind(ofcolor, x6)\n    x34 = mapply(x33, x32)\n    x35 = leastcolor(x24)\n    x36 = ofcolor(x24, x35)\n    x34 = subgrid(x36, x24)\n    x35 = astuple(x30, x34)\n    x36 =471(x35)\n    x37 = rbind(contained, x36)\n    x38"], [1.1, "def solve_28fb4b04(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = matcher(x2, FOUR)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(contained, TWO)\n    x7 =112(x6, width)\n    x8 = lbind(contained, FOUR)\n    x9 =112(x8, height)\n    x10 = lbind(contained, TWO)\n    x11 =112(x10, width)\n    x12 = lbind(compose, x5)\n    x13 = lbind(compose, x8)\n    x14 = chain(x12, x13, x7)\n    x15 =50000000(x4)\n    x16 = x15(x15)\n    x17 =2add(x16, UNITY)\n    x18 = height(x5)\n    x19 = vsplit(I, x18)\n    x20 = rbind(apply, x19)\n    x21 =00(x20, I)\n    x22 = x21(x19)\n    x23 = other(x1, x22)\n    x24 = color(x23)\n    x25 = extract(x21, x23)\n    x26 = other(x21, x25)\n    x27 = outbox(x26)\n    x28 = ofcolor(x22, x27)\n    x29 = asindices(x28)\n    x30 = urcorner(x29)\n    x31 = shoot(x30, NEG_UNITY)\n    x32 = lbind(greater, ONE)\n    x33 = rbind(add, x31)\n    x34 = compose(x32, x33)\n    x35 = rbind(sfilter, x34)\n    x36 = compose(x35, vline)\n    x37 = rbind(sfilter, x36)\n    x38 = compose(x37, dmirror)\n    x39 = rbind(shoot, x30)\n    x40 =88(x39,37)\n"], [1.1, "def solve_e7d8b555(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(last, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_6b080d9c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_f27b018e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = vconcat(x37, x38)\n    x40 = vmirror(x39)\n    O = x"], [1.1, "def solve_e54ebfc4(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = chain(x32, x33, x34)\n    x36 = lbind(fork, both)\n    x37 = rbind(compose, asobject)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, shift)\n    x40 = chain(x36, x39, x37)\n    x41 = lbind(compose, x43)\n    x42"], [1.1, "def solve_eb7c1ce1(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = mostcolor(I)\n    x6 = width(I)\n    x7 = astuple(x6, x6)\n    x8 = canvas(x5, x7)\n    x9 = asobject(I)\n    x10 = lbind(shift, x9)\n    x11 = compose(x10, double)\n    x12 = mapply(x11, x8)\n    x13 = paint(x8, x12)\n    x14 = width(I)\n    x15 = increment(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = apply(x11, x16)\n    x18 = height(I)\n    x19 = decrement(x18)\n    x20 = lbind(astuple, x19)\n    x21 = apply(x20, x17)\n    x22 = astuple(x11, x12)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = urcorner(x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    x28 = fill(x13, x4, x27)\n    x29 = width(I)\n    x30 = divide(x29, x31)\n    x31 = rbind(multiply, x30)\n    x32 = rbind(divide, x30)\n    x33 = compose(x31, x32)\n    x34 = fork(equality, identity, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x27, x35)\n    x37 =44(x36)\n    x38 = multiply(FIVE, x30)\n    x39 = rbind(multiply, x38)\n    x40 = compose(x39, x33)\n    x41 = fork(equality, identity, x40"], [1.1, "def solve_7668eb2b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x36)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = rbind(divide, x38)\n    x41 = compose(x39, x40)\n"], [1.1, "def solve_b6e388b2(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = replace(I, TWO, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = asindices(x1)\n    x4 = vperiod(x3)\n    x5 = height(x2)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = lbind(multiply, x4)\n    x10 = apply(x9, x8)\n    x11 = lbind(shift, x3)\n    x12 = mapply(x11, x10)\n    x13 = fill(x1, TWO, x12)\n    x14 = replace(x13, ONE, ZERO)\n    x15 = objects(x14, T, F, T)\n    x16 = mapply(toindices, x15)\n    x17 = fill(x14, THREE, x16)\n    x18 = lbind(shift, x3)\n    x19 = mapply(x18, x17)\n    x20 = fill(x17, TWO, x19)\n    x21 = replace(x20, ONE, ZERO)\n    x22 = objects(x21, T, F, T)\n    x23 = mapply(toindices, x22)\n    x24 = fill(x21, THREE, x23)\n    x25 = objects(x24, T, F, T)\n    x26 = mapply(toindices, x25)\n    x27 = fill(x24, THREE, x26)\n    x28 = objects(x27, T, F, T)\n    x29 = rbind(index, SIX)\n    x30 = compose(dneighbors, last)\n    x31 = fork(equality, x29, x30)\n    x32 = sfilter(x28, x31)\n    x33 = difference(x28, x32)\n    x34 =apply(toindices, x33)\n    x35 = lbind(shift, x3)\n    x36 = mapply(x35, x34)\n    x37 = fill(x24"], [1.1, "def solve_969c54b3(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = lbind(dmirror, I)\n    x2 = lbind(compose, flip)\n    x3 = lbind(matcher, first)\n    x4 = chain(x1, x2, x3)\n    x5 = rbind(compose, asobject)\n    x6 = lbind(rbind, sfilter)\n    x7 = chain(x5, x6, x4)\n    x8 = lbind(shift, x8)\n    x9 = fork(mapply,x7, x8)\n    x10 = compose(rot90, x7)\n    x11 = fork(mapply, x8, x10)\n    x12 = power(x11, TWO)\n    x13 = width(I)\n    x14 = hsplit(I, x13)\n    x15 = sfilter(x14, x12)\n    x16 = objects(x15, T, F, T)\n    x17 = apply(toindices, x16)\n    x18 = lbind(shift, x15)\n    x19 = compose(x18, toindices)\n    x20 = fork(difference, x19, identity)\n    x21 = canvas(x20, x13)\n    x22 = asindices(x21)\n    x23 = rbind(toobject, x41)\n    x24 = chain(size, x23, x11)\n    x25 = apply(x24, x22)\n    x26 = rbind(colorcount, ONE)\n    x27 = argmax(x25, x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(x28, x28)\n    x30 = product(x29, x29)\n    x31 = rbind( valmax, first)\n    x32 = lbind(apply, last)\n    x33 = compose(x32, x11)\n    x34 = lbind(fork,astuple)\n    x35 = lbind(x34, x41)\n    x36 = rbind(contained, x41)\n    x37 = compose(x36, x525)\n    x38 = lbind(sfilter"], [1.1, "def solve_94f3bb58(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = astuple(vsplit, hsplit)\n    x2 = vmirror(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4"], [1.1, "def solve_4365dedd(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_b9f28563(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = apply(x13, x27)\n    x28 = FOUR(x27)\n    x29 = canvas(ZERO, x22)\n    x30 = fill(x29, FOUR, x28)\n    x31 = ofcolor(x30, x8)\n    x32 = initset(x19)\n    x33 = lbind(rapply, x32)\n    x34 = compose(first, x33)\n    x35 = mapply(x34, x31)\n    x36 = fill(x30, FOUR, x35)\n    x37 = hconcat(x32, x36)\n    x38 = hsplit(x37, THREE)\n    x39 = merge(x38)"], [1.1, "def solve_bf9fef71(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_aafb9c8f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = fork(122,454, SIX)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = partition(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, corners)\n    x8 = extract(x6, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x9, x10)\n    x12 = lbind(colorcount, I)\n    x13 = argmin(x11, x12)\n    x14 = mostcolor(I)\n    x15 = ofcolor(I, x13)\n    x16 =lsrcorner(x15)\n    x17 = contained(x16, x15)\n    x18 = shoot(x16, UNITY)\n    x19 = shoot(x13, NEG_UNITY)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = rbind(shoot, x16)\n    x23 =oonsdro(x15)\n    x24 = rbind(shoot, x16)\n    x25 = unintentional(x23, UP_RIGHT)\n    x26 =olenrcorner(x25)\n    x27 = rbind(shoot, x26)\n    x28 = mapply(x27, x24)\n    x29 = rbind(shoot, x33)\n    x30 = sfilter(x1, x44)\n    x31 = mapply(x29, x30)\n    x32 = combine(x28, x31)\n    x33 = rbind( isobject, I)\n    x34 = compose(x33, delta)\n    x35 = apply(x34, x32)\n    x36 = hmirror(x35)\n    x37 = combine(x32, x36)\n    x38 = apply(x37, x35)\n    x39 = vmirror(x38)\n    x40 = hmirror(x39)\n    x41"], [1.1, "def solve_a1273258(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_7b92de72(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_f14f360c(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = Feel18(I)\n    x6 = ulcorner(x2)\n    x7 = index(I, x6)\n    x8 = dmirror(I)\n    x9 = vconcat(xI, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = asobject(x11)\n    x13 = matcher(first, ZERO)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x12, x14)\n    x16 = ulcorner(x2)\n    x17 = index(I, x16)\n    x18 = shoot(ORIGIN, UNITY)\n    x19 = add(x17, UNITY)\n    x20 = lrcorner(x2)\n    x21 = add(x20, DOWN_LEFT)\n    x22 = urcorner(x2)\n    x23 = add(x22, UP_RIGHT)\n    x24 = ulcorner(x2)\n    x25 = add(x24, RIGHT)\n    x26 = llcorner(x2)\n    x27 = add(x26, DOWN_LEFT)\n    x28 = add(x25, UP_RIGHT)\n    x29 = shoot(x28, UNITY)\n    x30 = llcorner(x2)\n    x31 = add(x30, NEG_UNITY)\n    x32 = rbind(add, x31)\n    x33 = subgrid(x15, x99)\n    x34 = rbind( add, x33)\n    x35 = compose(x34, first)\n    x36 = chain(x32, x33, x35)\n    x37 = lefthalf(x12)\n    x38 = righthalf(x12)\n    x39 = rbind(contained, x37)\n    x40 = compose(x39, first)\n"], [1.1, "def solve_e78a7996(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_ac4bce87(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = rbind(colorcount, x18)\n    x21 = compose(x20, subtract)\n    x22 = argmax(x6, x21)\n    x23 = other(x6, x22)\n    x24 = ofcolor(I, x18)\n    x25 = mapply(x26, x24)\n    x26 = ofcolor(I, x13)\n    x27 = initset(x18)\n    x28 = objects(I, T, F, T)\n    x29 = insert(x22, x28)\n    x30 = insert(x26, x29)\n    x31 =irbind(valmax, x30)\n    x32 = compose(x31, x18)\n    x33 = argmax(x26, x32)\n    x34 = apply(x33, x31)\n    x35 = rbind(contained, x74)\n    x36 = compose(x35, x22)\n    x37 = sfilter(x34, x36)\n    x38 = sizefilter(x37, x31)\n    x39 = difference(x37,"], [1.1, "def solve_21ee9cee(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45651123456712345671234\n    456712135456712345671234\n    45671233456712345671234\n    45673123456712345671234\n    4567123456712345671234\n    4567123456712345671234\n    4567123456712345671234\n    4567123456712345671234\n    45671234567124456712344\n    45671234567123445671234\n    456712345670133445671234\n    45671234567013444571234\n    45671234567013444571134\n    45671234567013444571234\n    45671234567123456711234\n    45671334567123456712344\n    45671334567123456711344\n    45571334567144444211444\n    45571334567144444213444\n    45571334567123454421644\n    45571334567123454421444\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = rot90(I)\n    x3 =normalize(I)\n    x4 = astuple(TWO, x1)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = increment(NEG_TWO)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = repeat(x6, x8)\n    x10 = combine(x3, x9)\n    x11 = astuple(NEG_TWO, portrait)\n    x12 = astuple(rot90, rot270)\n    x13 = astuple(x11, x12)\n    x14 = combine"], [1.1, "def solve_66737b12(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_cb366d70(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_63454915(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = product(x8, x5)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = mostcolor(x11)\n    x13 = color(x10)\n    x14 = fill(I, x12, x13)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x12)\n    x17 = difference(x15, x16)\n    x18 = rbind(toobject, I)\n    x19 = colorfilter(x17, x12)\n    x20 = rbind(rbind,584)\n    x21 = chain(x20, x18, last)\n    x22 = rbind(vmatching, x11)\n    x23 = shape(x11)\n    x24 = multiply(x23, x23)\n    x25 = decrement(x24)\n    x26 = lbind(astuple, x25)\n    x27 = shoot(ORIGIN, x27)\n    x28 = recolor(x12, x27)\n    x29 = shoot(x26, x28)\n    x30 = branch(x22, x29, x21)\n    x31 = branch(x55, x30, x21)\n    x32 =455(x31, x32)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = toindices(x33)\n    x36 = x34(x33)\n    x37 = first(x36)\n    x38 = mostcolor(x33)\n    x39 = fill(x35, x38, x37)\n    O = fill(x39, x12, x34)\n    "], [1.1, "def solve_60e8cd80(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = identity(I)\n    x6 = matcher(identity, x4)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x6)\n    x9 = sfilter(x1, x8)\n    x10 = hperiod(x9)\n    x11 = size(x9)\n    x12 = rbind(adjacent, x11)\n    x13 = sfilter(x8, x12)\n    x14 = center(x13)\n    x15 = matcher(first, x4)\n    x16 = sfilter(x8, x15)\n    x17 = center(x16)\n    x18 = matcher(first, x4)\n    x19 = sfilter(x8, x18)\n    x20 = center(x19)\n    x21 = matcher(first, x4)\n    x22 = sfilter(x8, x21)\n    x23 = center(x22)\n    x24 = matcher(first, x4)\n    x25 = sfilter(x8, x24)\n    x26 = center(x25)\n    x27 = matcher(first, x4)\n    x28 = sfilter(x8, x27)\n    x29 = center(x28)\n    x30 = matcher(first, x4)\n    x31 = sfilter(x8, x30)\n    x32 = center(x31)\n    x33 = matcher(first, x4)\n    x34 = sfilter(x8, x33)\n    x35 = center(x34)\n    x36 = matcher(first, x4)\n    x37 = sfilter(x8, x36)\n    x38 = center(x37)\n    x39 = matcher(first, x4)\n    x40 = sfilter(x8, x39)\n    x41 = center(x40)\n    x42 = subtract(x38, x41)\n"], [1.1, "def solve_ff39d31a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(remove, FIVE)\n    x3 = chain(first, x2, palette)\n    x4 = chain(hline, identity, x3)\n    x5 = astuple(stemEN, DOWN)\n    x6 = astuple(numcolors, bottom)\n    x7 = astuple(x5, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(x7, x9)\n    x11 = x10(I)\n    x12 = palette(x11)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = difference(x13, x14)\n    x16 = compose(color, first)\n    x17 = color(x11)\n    x18 = rbind(contained, x15)\n    x19 = compose(x18, color)\n    x20 = sfilter(x1, x19)\n    x21 = compose(cmirror, x20)\n    x22 = lbind(compose, flip)\n    x23 = x22(x14)\n    x24 = x22(x16)\n    x25 = compose(x22, x24)\n    x26 = lbind(rbind, branch)\n    x27 =55x26(x25)\n    x28 = rbind(compose, x27)\n    x29 = lbind(lbind, contained)\n    x30 = chain(x28, x29, x25)\n    x31 = lbind(fork, x27)\n    x32 = compose(x31, x30)\n    x33 = rbind(compose, x32)\n    x34 = lbind(lbind, flip)\n    x35 = x34(x28)\n    x36 = x34(x26)\n    x37 = lbind(rbind, contained)\n    x38 = compose(x37, x35)\n    x39 = chain(x3333, x37, x38)\n    x40 =\n    x41 = fork(sfilter, identity, x39)\n    "], [1.1, "def solve_5b0caeea(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = objects(x9, T, F, T)\n    x13 = sfilter(x12, x17)\n    x14 = size(x13)\n    x15 = positive(x14)\n    x16 = branch(x15, ulcorner, llcorner)\n    x17 = branch(x15, urcorner, lrcorner)\n    x18 = branch(x15, NEG_UNITY, x17)\n    x19 = multiply(x15, x18)\n    x20 = add(x19, TWO_BY_TWO)\n    x21 = x20(x9)\n    x22 = asindices(x21)\n    x23 = shape(x22)\n    x24 = maximum(x23)\n    x25 = matcher(x24, ZERO)\n    x26 = lbind( sfilter, x22)\n    x27 = lbind(compose, x25)\n    x28 = chain(x26, x27, x20)\n    x29 = lbind(sfilter, x22)\n    x30 = compose(normalize, x29)\n    x31 = chain(x30, toindices, x18)\n    x32 = compose(27, x31)\n    x33 = fork(add, x32, x32)\n    x34 = x33(x21)\n    x35 = x33(x22)\n    x36 = x33(x15)\n    x37 = fill(x16, x5, x36)\n    x38 = fill(x37, x10, x35)"], [1.1, "def solve_72a03d44(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_7175bbb9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_043ada2e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_e0b8553c(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(positive, size)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(lowermost, x3, toindices)\n    x5 = rbind(greater, TWO)\n    x6 = compose(x5, x4)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorfilter, x1)\n    x9 = chain(first, x8, x4)\n    x10 = matcher(x9, TWO)\n    x11 = palette(I)\n    x12 = sfilter(x11, x10)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = rbind(colorcount, x14)\n    x16 = matcher(x15, TWO)\n    x17 = cellwise(x16, x8, x14)\n    x18 = remove(x17, x8)\n    x19 = argmin(x18, x14)\n    x20 = apply(first, x19)\n    x21 = first(x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = greater(x23, x22)\n    x25 = decrement(x24)\n    x26 = x25(x22)\n    x27 = shoot(x26, UPc)\n    x28 = shoot(x27, UNITY)\n    x29 = shoot(x28, LEFT)\n    x30 = shoot(x29, DOWN_LEFT)\n    x31 =778(x22, UNITY)\n    x32 =ieties(x31, x22)\n    x33 = rbind(contained, x32)\n    x34 = compose(x33, first)\n    x35 = sfilter(x24, x34)\n    x36 = difference(x24, x35)\n    x37 = apply(first, x35)\n    x38 = sfilter(x37, x34)\n    x39 =703240(x38)\n    x40 = shift("], [1.1, "def solve_b06a17a9(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_f58c3656(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x7)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = normalize(x4)\n    x24 = paint(x22, x23)\n    x25 = normalize(x7)\n    x26 = width(x7)\n    x27 = subtract(x19, x26)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = normalize(x10)\n    x32 = height(x10)\n    x33 = subtract(x16, x32)\n    x34 = toivec(x33)\n    x35 = shift(x31, x34)\n    x36 = paint(x30, x35)\n    x37 = normalize(x13)\n    x38 = shape(x13)\n    x39 = subtract(x20, x38)\n    x40 = shift(x37, x39)\n    O = paint(x36, x40"], [1.1, "def solve_aad8ad18(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = combine(x1, x1)\n    x3 = fork(subtract, height, width)\n    x4 = fork(multiply, x3, x4)\n    x5 = fork(equality, size, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = paint(I, x13)\n    x15 = toindices(x8)\n    x16 = sfilter(x15, x12)\n    x17 = difference(x15, x16)\n    x18 = fill(x14, EIGHT, x17)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(apply, x21, initset)\n    x23 = difference(x15, x21)\n    x24 = fork(argmin, x22, x23)\n    x25 = compose(last, x24)\n    x26 = compose(first, x24)\n    x27 = fork(astuple, x25, x26)\n    x28 = fork(connect, x27, x29)\n    x29 = rbind(contained, x11)\n    x30 = compose(normalize, last)\n    x31 = matcher(first, x9)\n    x32 = sfilter(x16, x31)\n    x33 = difference(x16, x32)\n    x34 = fork(astuple, x33, x29)\n    x35 = fork(connect, x19, x34)\n    x36 = sfilter(x16, x35)\n    x37 = compose(last, x35)\n    x38 = fork(astuple,"], [1.1, "def solve_836b1d65(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_7409707c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x25 = fork(equality, identity, x26)\n    x26 = compose(x27, last)\n    x25 = rbind(multiply, x19)\n    x26 = rbind(divide, x19)\n    x27 = compose(x25, x26)\n    x28 = fork(equality, identity, x27)\n    x29 = compose(x27, last)\n    x30 = lbind(subtract, x28)\n    x31 = rbind(multiply, x30)\n    x32 = rbind(divide, x30)\n    x33 = compose(x31, x32)\n    x34 = fork(equality, identity, x33)\n    x35 = compose(x34, last)\n    x36 = lbind(apply,"], [1.1, "def solve_813f9c79(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 =last(x24)\n    x27 = compose(last, first)\n    x28 =612(x26)\n    x29 = maximum(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = product(x30, x30)\n    x32 = interval(ZERO, x25, ONE)\n    x33 = product(x32, x32)\n    x34 = mpapply(multiply, x27, x31)\n    x35 = apply(decrement, x34)\n    x36 = lbind(subtract, x25)\n    x37 =53(x36, x35)\n    x38 = lbind(rbind, manhattan)\n    x39 = compose(x38, initset)\n    x40 = lbind(compose, x EIGHT)\n    x41 = compose(x40, x39)\n    x42 = lbind(lbind, shift"], [1.1, "def solve_4bc4799e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_99eaaa23(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_f4964b60(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x17, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(mapply, neighbors)\n    x31 = compose(x30, x29)\n    x32 = argmax(x28, x31)\n    x33 = rbind(multiply, x28)\n    x34 = apply(x33, x32)\n    x35 = rbind(shift, x32)\n    x36 = mapply(x35, x34)\n    x37 = paint(I, x36)\n    x38 = fork(connect, identity, identity)\n    x39 = apply(x38, x32)\n    x40 = asindices(I)\n    x41 = x38(x40)\n    x42 = apply(x38, x"], [1.1, "def solve_6ad3ce4b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = colorfilter(x8, x6)\n    x10 = difference(x8, x9)\n    x11 = ofcolor(x7, x6)\n    x12 = ofcolor(x10, x4)\n    x13 = rbind(gravitate, x11)\n    x14 = compose(x13, initset)\n    x15 = fork(add, identity, x14)\n    x16 = fork(connect, identity, x15)\n    x17 = shape(x6)\n    x18 = multiply(x17, x17)\n    x19 = canvas(x6, x18)\n    x20 =gravitate(x11, x4)\n    x21 = compose(double, halve)\n    x22 = upscale(x19, x21)\n    x23 = objects(x22, F, F, T)\n    x24 = rbind(add, x5)\n    x25 = compose(x24, ulcorner)\n    x26 = rbind(add, x8)\n    x27 = compose(x26, llcorner)\n    x28 = rbind(add, x8)\n    x29 = compose(x28, urcorner)\n    x30 = rbind(add, x29)\n    x31 = compose(x30, cmirror)\n    x32 = rbind(add, x28)\n    x33 = compose(x32, dmirror)\n    x34 = fork(add, x33, x31)\n    x35 = fork(connect, x25, x34)\n    x36 = rbind(contained, x21)\n    x37 = compose(x36, last)\n    x38 = sfilter(x23, x37)\n    x39 = rbind(_.b782,"], [1.1, "def solve_d8a5d444(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_6ad41da7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = mostcolor(I)\n    x3 = product(x1, x1)\n    x4 = fork(connect, first, last)\n    x5 = apply(x4, x3)\n    x6 = contained(ZERO, x5)\n    x7 = flip(x6)\n    x8 = switch(I, x2, x7)\n    x9 =0000000000000000(x8, x7)\n    x10 = switch(x9, EIGHT, x7)\n    x11 = switch(x10, TWO, x7)\n    x12 = switch(x11, THREE, x7)\n    x13 = switch(x12, FOUR, x7)\n    x14 = switch(x13, ONE, x7)\n    x15 = compress(x14)\n    x16 = leastcolor(x15)\n    x17 = mostcolor(x15)\n    x18 = ofcolor(x15, x16)\n    x19 = leftmost(x18)\n    x20 = height(x15)\n    x21 = width(x15)\n    x22 = astuple(x16, x17)\n    x23 = crop(x15, ORIGIN, x22)\n    x24 = dmirror(x23)\n    x25 = papply(pair, x23, x24)\n    x26 = lbind(apply, maximum)\n    x27 = apply(x26, x25)\n    x28 = partition(x27)\n    x29 = fork(colorcount, rbind, ONE)\n    x30 = argmin(x29, x28)\n    x31 = rbind(colorcount, x30)\n    x32 = apply(x31, x29)\n    x33 = ofcolor(x35, x30)\n    x34 = difference(x33, x34)\n    x35 = apply(x21, x34)\n    x36 = lbind(colorcount, x30)\n    x37 = argmax(x35, x36)\n    x38 = lowermost(x37)\n    x39 = dmirror(x38)\n    x40 = papply(pair, x"], [1.1, "def solve_2bc34c71(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_301e4b4c(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, portrait)\n    x14 = rbind(order, leftmost)\n    x15 = chain(lowermost, x14, x11)\n    x16 = lbind(sfilter, x12)\n    x17 = chain(x13, x16, x15)\n    x18 = lbind(compose, x8)\n    x19 = chain(x17, x18, x17)\n    x20 = lbind(lbind, shift)\n    x21 = compose(x20, x17)\n    x22 = lbind(mapply, x21)\n    x23 = chain(x22, x20, x17)\n    x24 = rbind(occurrences, x4)\n    x25 = chain(x24, x23, x2)\n    x26 = compose(x25, x17)\n    x27 = palette(I)\n    x28 = remove(x4, x27)\n    x29 = lbind(colorcount, I)\n    x30 = argmax(x28, x29)\n    x31 = x30(I)\n    x32 = palette(I)\n    x33 = remove(x4, x32)\n    x34 = lbind(ofcolor, I)\n    x35 = compose(x34, x26)\n    x36 = fork(upscale, identity, x35)\n    x37 = x36(x31)\n    x38 = ofcolor(I, x4)\n    x39 = rbind(intersection, x38)"], [1.1, "def solve_2ec60cd7(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = toobject(x4, I)\n    x6 = mostcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = power(775, TWO)\n    x9 = objects(I, T, T, F)\n    x10 = argmax(x9, x8)\n    x11 = subgrid(x10, I)\n    x12 = replace(x11, x6, x1)\n    x13 = replace(x12, x2, x5)\n    x14 = divide(x13, THREE)\n    x15 = width(x11)\n    x16 = interval(ZERO, x15, tojvec)\n    x17 = height(x11)\n    x18 = astuple(x17, x14)\n    x19 = crop(x11, ORIGIN, x18)\n    x20 = branch(x14, x9, x19)\n    x21 = repeating(x20, x7)\n    x22 = x21(x22)\n    x23 = multiply(x14, FOUR)\n    x24 = repeat(x22, x23)\n    x25 = x20(x24)\n    x26 = normalize(x25)\n    x27 = shift(x26, x24)\n    x28 = paint(I, x27)\n    x29 = height(x11)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = pair(x30, x30)\n    x32 = sfilter(x31, first)\n    x33 = size(x32)\n    x34 = sfilter(x32, last)\n    x35 = size(x34)\n    x36 = pair(x33, x35)\n    x37 = sfilter(x36, first)\n    x38 = height(x11)\n    x39 = interval(ZERO, x38, ONE)\n    x40 = pair(x39, x30)\n    "], [1.1, "def solve_e2a8021a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_51f37f7f(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = fork(hmatching, first, last)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(either, x3, x4)\n    x6 = sfilter(x2, x5)\n    x7 = mostcolor(I)\n    x8 = rbind(toobject, I)\n    x9 = compose(delta, merge)\n    x10 = chain(palette, x8, x9)\n    x11 = initset(x7)\n    x12 = matcher(x10, x11)\n    x13 = sfilter(x6, x12)\n    x14 = shape(I)\n    x15 = subtract(x14, TWO_BY_ZERO)\n    x16 = crop(I, DOWN, x15)\n    x17 = numcolors(x16)\n    x18 = equality(ONE, x17)\n    x19 = branch(x18, vline, hline)\n    x20 = compose(center, first)\n    x21 = compose(center, last)\n    x22 = fork(add, x20, x21)\n    x23 = compose(halve, x22)\n    x24 = compose(color, first)\n    x25 = compose(color, last)\n    x26 = fork(connect, x20, x23)\n    x27 = fork(remove, x23, x26)\n    x28 = fork(recolor, x24, x27)\n    x29 = fork(connect, x21, x23)\n    x30 = fork(remove, x23, x29)\n    x31 = fork(recolor, x25, x30)\n    x32 = lbind(recolor, FIVE)\n    x33 = chain(x32, initset, x23)\n    x34 = fork(combine, x28, x31)\n    x35 = fork(combine, x34, x33)\n    x36 = apply(x35, x13)\n    x37 = mfilter(x36, x19)\n    x"], [1.1, "def solve_921ce9df(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_daa3b3b6(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x1)\n    x11 = matcher(x9, x10)\n    x12 = palette(I)\n    x13 = sfilter(x12, x11)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, first)\n    x19 = fork(remove, x18, first)\n    x20 = rbind(compose, initset)\n    x21 = lbind(rbind, manhattan)\n    x22 = compose(initset, x18)\n    x23 = chain(x20, x21, x22)\n    x24 = fork(argmin, x19, x23)\n    x25 = compose(last, x18)\n    x26 = compose(first, x24)\n    x27 = fork(astuple, x26, x25)\n    x28 = fork(insert, x27, x19)\n    x29 = compose(last, last)\n    x30 = rbind(argmin, x29)\n    x31 = rbind(first, x15)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, initset)\n    x34 = lbind(rbind, manhattan)\n    x35 = compose(initset, x22)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(argmin, x35, x36)\n    x38 = compose("], [1.1, "def solve_904078da(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_8a0b0385(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(contained, ONE, minimum)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = chain(initset, positive, size)\n    x7 = fork(contained, rot270, identity)\n    x8 = compose(flip, x7)\n    x9 = extract(x5, x8)\n    x10 = yfilter(x6, x9)\n    x11 = fork(both, x3, x8)\n    x12 = sfilter(x10, x11)\n    x13 = merge(x12)\n    x14 = chain(merge, vfrontier, hfrontier)\n    x15 = x14(x13)\n    x16 = mapply(x16, x11)\n    x17 = underfill(I, x4, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = colorfilter(x18, ZERO)\n    x20 = valmax(x19, width)\n    x21 = valmax(x19, height)\n    x22 = astuple(x20, x21)\n    x23 = lbind(subtract, x22)\n    x24 =2822488255(x2, x23)\n    x25 = mapply(x24, x19)\n    x26 = frontiers(I)\n    x27 = sfilter(x26, x25)\n    x28 = difference(x27, x202)\n    x29 = colorfilter(x28, ZERO)\n    x30 = mapply(toindices, x29)\n    x31 = box(x15)\n    x32 = difference(x31, x30)\n    x33 = toobject(x32, I)\n    x34 = colorcount(x33, ONE)\n    x35 = uppermost(x3)\n    x36 = lbind(subtract, x35)\n    x37 =282248825(x33)\n    x38 = leftmost(x3)\n    x39 = right"], [1.1, "def solve_a83ee2f5(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x7)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = normalize(x4)\n    x24 = paint(x22, x23)\n    x25 = normalize(x7)\n    x26 = width(x7)\n    x27 = subtract(x19, x26)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = normalize(x10)\n    x32 = height(x10)\n    x33 = subtract(x16, x32)\n    x34 = toivec(x33)\n    x35 = shift(x31, x34)\n    x36 = paint(x30, x35)\n    x37 = normalize(x13)\n    x38 = shape(x13)\n    x39 = subtract(x20, x38)\n    x40 = shift(x37, x39)\n    O = paint(x36, x40"], [1.1, "def solve_e3616cb7(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_5a8ca20d(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_384af251(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_87439c2f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = center(x29)\n    x31 = matcher(first, x11)\n    x32 = compose(flip, x31)\n    x33 = center(x29)\n    x34 = matcher(first, x10)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x28, x35)\n    x37 = center(x36)\n    x38 = initset(x38)\n    x39 =77(x38)\n    x40 = insert(x39, x71)\n    x41 = backdrop(x40)\n    x42 = lbind(contained, x"], [1.1, "def solve_d1949461(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = order(x5, identity)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = ofcolor(I, x7)\n    x10 = leftmost(x9)\n    x11 = ofcolor(I, x8)\n    x12 = greater(x10, x11)\n    x13 = leftmost(x11)\n    x14 = greater(x13, x12)\n    x15 = greater(x41, x14)\n    x16 = toindices(x15)\n    x17 = lowermost(x15)\n    x18 = equality(x17, x16)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(I)\n    x21 = shape(x20)\n    x2 = decrement(x21)\n    x3 = multiply(x22, xinter)\n    x4 = crop(x20, DOWN, x3)\n    x5 =00000000(x4)\n    x6 = ofcolor(x5, x7)\n    x7 = urcorner(x6)\n    x8 = shoot(x7, UP_RIGHT)\n    x9 = shoot(x7, DOWN_LEFT)\n    x10 = branch(x18, shoot, x9)\n    x11 = branch(x18, rbind, vmirror)\n    x12 = x11(x10)\n    x13 = x11(x9)\n    x14 = insert(x8, x12)\n    x15 = insert(x13, x14)\n    x16 = width(x15)\n    x17 = halve(x16)\n    x18 = tojvec(x17)\n    x19 = height(x15)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = apply(x21, x17)"], [1.1, "def solve_83138e79(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_59e974db(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_9f081a28(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d2d8e648(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = repeat(x8, ONE)\n    x10 = objects(I, T, T, T)\n    x11 = color(x10)\n    x12 =443(x11)\n    x13 = argmin(x12, x8)\n    x14 =ulcorner(x13)\n    x15 = shoot(x14, NEG_UNITY)\n    x16 = urcorner(x15)\n    x17 = shoot(x16, UNITY)\n    x18 = llcorner(x17)\n    x19 = shoot(x18,___UNITY)\n    x20 = shoot(x16, DOWN_LEFT)\n    x21 = shoot(x16, UP_RIGHT)\n    x22 = combine(x15, x17)\n    x23 = combine(x20, x21)\n    x24 = combine(x22, x23)\n    x25 = dmirror(x24)\n    x26 = invert(x25)\n    x27 = shoot(x26, UP_RIGHT)\n    x28 = shoot(x26, DOWN_LEFT)\n    x29 = combine(x27, x28)\n    x30 = lbind(shift, x12)\n    x31 = mapply(x30, x29)\n    x32 = double(x31)\n    x33 = astuple(x32, x32)\n    x34 = canvas(ZERO, x33)\n    x35 = extensively(x31, x34)\n    x36 = OUTbox(x35)\n    x37 =66666666(x36)\n    x38 = combine(x31, x37)\n    x39 = paint(x35, x38)\n    x40 = shift(x39, LEFT)\n    x41 = paint("], [1.1, "def solve_93c4ad36(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_92b67cc3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_85bad8d9(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_08f8595c(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = colorfilter(x1, ZERO)\n    x4 = product(x3, x3)\n    x5 = fork(equality, toindices, backdrop)\n    x6 = sfilter(x4, x5)\n    x7 = lbind(mapply, dneighbors)\n    x8 = chain(x7, vmirror, initset)\n    x9 = product(x6, x4)\n    x10 = fork(difference, first, last)\n    x11 = chain(size, x8, x10)\n    x12 = compose(dmirror, x11)\n    x13 = x12(I)\n    x14 = merge(x6)\n    x15 = lbind(shift, x14)\n    x16 = x15(x13)\n    x17 =517126(x16, x12)\n    x18 = objects(x13, T, T, T)\n    x19 = colorfilter(x18, ZERO)\n    x20 = rbind(bordering, I)\n    x21 = compose(flip, x20)\n    x22 = mfilter(x19, x21)\n    x23 = remove(x22, x19)\n    x24 = lbind(vmatching, x22)\n    x25 = lfilter(x23, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = x26(x26)\n    x29 = x25(x28)\n    x30 = initset(x22)\n    x31 = insert(x119, x30)\n    x32 = insert(x29, x31)\n    x33 = argmax(x32, width)\n    x34 = astuple(x33, x33)\n    x35 = gravitate(x34, x33)\n    x36 = toobject(x35, x13)\n    x37 = increment(x33)\n    x38 = shift(x36, x37)\n    x39 = fill(x13, ZERO, x38)\n    x"], [1.1, "def solve_a8b345a9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_bd76037e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 =5371234567315345671234\n    x3 = trim(x1)\n    x4 = mostcolor(I)\n    x5 = tophalf(x3)\n    x6 = lefthalf(x5)\n    x7 = tophalf(x6)\n    x8 = righthalf(x7)\n    x9 = bottomhalf(x7)\n    x10 = lefthalf(x9)\n    x11 = tophalf(x10)\n    x12 = righthalf(x11)\n    x13 = merge(x1)\n    x14 = palette(x13)\n    x15 = palette(x4)\n    x16 = intersection(x14, x15)\n    x17 = palette(x6)\n    x18 = populated(x17, x16)\n    x19 = partition(x8)\n    x20 = argmax(x19, numcolors)\n    x21 = remove(x20, x19)\n    x22 = lbind(colorcount, x8)\n    x23 = argmin(x21, x22)\n    x24 = ofcolor(x13, x39)\n    x25 = ofcolor(x4, x23)\n    x26 = combine(x24, x25)\n    x27 = intersection(x21, x26)\n    x28 = toobject(x27, x8)\n    x29 = height(x28)\n    x30 = asobject(x28)\n    x31 = hperiod(x30)\n    x32 = height(x28)\n    x33 = interval(ZERO, x32, x31)\n    x34 = lbind(shift, x29)\n    x35 = apply(x34, x33)\n    x36 = tojvec(x37)\n    x37 = lbind(mapply, x26)\n    x38 = apply(x37, x34)\n    x39 =17(x38)\n    x40 = mapply(x35, x36)\n    x41 = combine(x39, x40)\n    x42 = paint(I, x41"], [1.1, "def solve_4e51c4bd(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =5678123456781234567812\n    66781234567812345678123\n    67781234567812345678123\n    67871234567812345678123\n    66781234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32,"], [1.1, "def solve_da8b599e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = mfilter(x2, x5)\n    x7 = lefthalf(I)\n    x8 = righthalf(I)\n    x9 = rbind(ofcolor, x1)\n    x10 = compose(first, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = leastcolor(x8)\n    x13 = palette(x8)\n    x14 = remove(x12, x13)\n    x15 = other(x14, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = ofcolor(x8, x15)\n    x18 = combine(x16, x17)\n    x19 = intersection(x16, x18)\n    x20 = difference(x19, x18)\n    x21 = initset(ORIGIN)\n    x22 = insert(x7, x21)\n    x23 = lbind(intersection, x22)\n    x24 = chain(positive, size, x23)\n    x25 = lbind(fork, shift)\n    x26 = lbind(chain, x24)\n    x27 = rbind(x26, x24)\n    x28 = lbind(rbind, shift)\n    x29 = compose(x27, x28)\n    x30 = lbind(chain, x24)\n    x31 = rbind(x30, x24)\n    x32 = lbind(rbind, difference)\n    x33 = compose(x31, x32)\n    x34 = rbind(apply, x20)\n    x35 = chain(x34, x33, x ofcolor)\n    x36 = fork(mapply, x35, x36)\n    x37 = fork(recolor, x35, x36)\n    x38 = mapply(x37, x30)\n    x39 = paint(x7, x38"], [1.1, "def solve_5145aba7(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_ff7c22a4(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_869bb39a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_18bf6809(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(multiply, height, width)\n    x8 = frontiers(x7)\n    x9 = argmax(x8, x7)\n    x10 = difference(x7, x9)\n    x11 = fill(x6, x1, x10)\n    x12 = leastcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, x12)\n    x16 = ofcolor(x6, x12)\n    x17 = ofcolor(x6, x15)\n    x18 = combine(x16, x17)\n    x19 = mapply(neighbors, x18)\n    x20 = difference(x19, x18)\n    x21 = toobject(x20, x6)\n    x22 = leastcolor(x21)\n    x23 = ofcolor(x6, x12)\n    x24 = inbox(x23)\n    x25 = center(x24)\n    x26 = initset(x25)\n    x27 = fill(x6, x12, x26)\n    x28 = objects(x27, T, F, T)\n    x29 = colorfilter(x28, x12)\n    x30 = shift(x29, x27)\n    x31 = ofcolor(x6, x12)\n    x32 = difference(x31, x30)\n    x33 = mapply(neighbors, x32)\n    x34 = toobject(x33, x6)\n    x35 = mostcolor(x34)\n    x36 = initset(x25)\n    x37 = toindices(x36)\n    x38 = insert(x55, x37)\n    x39 = fill(x76, x31, x38)\n    x40 = ofcolor"], [1.1, "def solve_3bbeecab(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 =difference(x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, first, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror(x38"], [1.1, "def solve_9ba57e1b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(lowermost, merge, fgpartition)\n    x55 = rbind(rapply, I)\n    x56 = lbind(compose, x4)\n    x57 = compose(initset, x56)\n    x58 = chain(first, x55, x57)\n    x59 = matcher(x58, ZERO)\n    x60 = extract(x3, x59)\n    x61 = x60(I)\n    x62 = objects(x61, T, F, T)\n    x63 = height(x61)\n    x64 = interval(ZERO, x63, ONE)\n    x65 = height(x61)\n    x66 = interval(ONE, x65, ONE)\n    x67 = rbind(apply, x14)\n    x68 = lbind(rbind, astuple)\n    x69 = chain(x67, x68, last)\n    x70 = rbind(apply, x66)\n    x71 = lbind(rbind, astuple)\n    x72 = compose(increment, last)\n    x73 = chain(x70, x71, x72)\n    x74 = rbind(apply, x66)\n    x75 = lbind(rbind, astuple)\n    x76 = compose(decrement, last)\n    x77 = chain(x74, x75, x76)\n    x78 = fork(combine, x21, x33)\n    x79 = fork(combine, x28, x73)\n    x80 = fork(combine, x78, x79)\n    x81 =364(x1)\n    x82 = dmirror(x81)\n    x83 = astuple(x89, x82)\n    x84 = power(x8000, TWO)\n    x85 = x84(x82)\n    x86 =ivec(x45)\n    x87 = lbind(add, x86)\n    x88 = chain(x87,"], [1.1, "def solve_354a7aab(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, SEVEN)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind"], [1.1, "def solve_364990ea(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_912c66c4(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_76206b58(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = sfilter(x16, x12)\n    x18 = difference(x16, x17)\n    x19 = rbind(manhattan, x13)\n    x20 = compose(x19, initset)\n    x21 = sfilter(x18, x20)\n    x22 = difference(x18, x21)\n    x23 = rbind(manhattan, x14)\n    x24 = compose(x23, initset)\n    x25 = rbind(manhattan, x13)\n    x26 = compose(x25, initset)\n    x27 = sfilter(x22, x26)\n    x28 = compose(backdrop, x14)\n    x29 = fork(equality, x27, x28)\n    x30 = extract(x2, x29)\n    x31 = ofcolor(I, x12)\n    x32 = backdrop(x31)\n    x33 = cover(I, x32)\n    x34 = normalize(x30)\n    x35 = lbind(shift, x34)\n    x36 = compose(x35, x33)\n    x37 = rbind(intersection, x36)\n    x38 = compose(x37, x31)\n    x39 = fill(x33, Z"], [1.1, "def solve_729d122b(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = lbind(apply, vfrontier)\n    x37 = x36(x22)\n    x38 = increment(x37)\n    x39 = lb"], [1.1, "def solve_ec146505(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(initset, x8)\n    x10 = fork(rapply, x9, identity)\n    x11 = compose(first, x10)\n    x12 = lbind(apply, lrcorner)\n    x13 = fork(ofcolor, x11, x12)\n    x14 = compose(x19, x13)\n    x15 = apply(x14, x1)\n    x16 = decrement(x15)\n    x17 = lbind(canvas, ZERO)\n    x18 = compose(x17, x16)\n    x19 = fork(vconcat, identity, x18)\n    x20 = compose(cmirror, x19)\n    x21 = fork(equality, x20, identity)\n    x22 = branch(x19, x25, x21)\n    x23 = apply(x22, x1)\n    x24 = decrement(x23)\n    x25 = branch(x24,ZERO, x24)\n    x26 = apply(x25, x1)\n    x27 = repeat(x26, ONE)\n    x28 = merge(x27)\n    x29 = chain(x double, last, first)\n    x30 = repeat(x29, ONE)\n    x31 = chain(x both, x27, x30)\n    x32 = fork(combine, x29, x31)\n    x33 = apply(x32, x30)\n    x34 = astuple(x23, x24)\n    x35 = astuple(x24, x930)\n    x36 = add(x34, x35)\n    x37 = apply(x36, x33)\n    x38 = interval(ZERO, x disclaimoy, ONE)\n    x39"], [1.1, "def solve_6ec7f84c(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =509(normalize, last)\n    x3 = fork(subtract, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = fork(multiply, height, width)\n    x9 = argmax(x7, x8)\n    x10 = mostcolor(I)\n    x11 = ofcolor(I, x10)\n    x12 = inbox(x11)\n    x13 = rbind(shoot, x12)\n    x14 = mapply(x13, x11)\n    x15 = fill(I, x10, x14)\n    x16 = ofcolor(I, x10)\n    x17 = difference(x16, x18)\n    x18 = mapply(vfrontier, x17)\n    x19 = mapply(hfrontier, x17)\n    x20 = size(x19)\n    x21 = size(x20)\n    x22 = greater(x20, x21)\n    x23 = difference(x17, x21)\n    x24 = toobject(x23, I)\n    x25 = matcher(x24, x22)\n    x26 = sfilter(x2, x25)\n    x27 = objects(x15, T, F, T)\n    x28 = colorfilter(x27, TWO)\n    x29 = rbind(adjacent, x28)\n    x30 = mfilter(x29, x25)\n    x31 = sfilter(x27, x30)\n    x32 = difference(x19, x31)\n    x33 = fill(x15, FOUR, x32)\n    x34 = mapply(x33, x29)\n    O = fill(x34, THREE, x3)\n    return O"], [1.1, "def solve_6a09d2b2(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(contained, ONE, T)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, height, width)\n    x9 = x8(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(both, x7, x10)\n    x12 = extract(x5, x11)\n    x13 =124inx12(x12)\n    x14 = shift(x13, UNITY)\n    x15 = initset(x9)\n    x16 = insert(x13, x15)\n    x17 = insert(x14, x16)\n    x18 = Weaint(x6, x17)\n    x19 = merge(x18)\n    x20 = cover(I, x19)\n    x21 = paint(x20, x17)\n    x22 = crop(x21, ORIGIN, THREE_BY_THREE)\n    O = rot90(x22)\n    return O"], [1.1, "def solve_c38b52d0(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = inbox(x2)\n    x5 = backdrop(x4)\n    x6 =3966 toobject(x5, I)\n    x7 = matcher(first, x3)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x6, x8)\n    x10 = normalize(x9)\n    x11 = ulcorner(x10)\n    x12 = increment(x11)\n    x13 = shift(x10, x12)\n    x14 = paint(I, x13)\n    x15 =320(x14)\n    x16 = dmirror(x15)\n    x17 = toindices(x16)\n    x18 = lbind(shift, x17)\n    x19 = occurrences(x14, x9)\n    x20 = mapply(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = intersection(x17, x21)\n    x23 = apply(last, x22)\n    x24 = mapply(last, x23)\n    x25 = combine(x21, x24)\n    x26 = shift(x25, x2)\n    x27 =66666666(x26)\n    O = fill(x14, x3, x27)\n    return O"], [1.1, "def solve_cb075b6e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 =9210(x23, width)\n    x25 = rbind(multiply, x15)\n    x26 = apply(x24, x25)\n    x27 = rbind(repeat, x6)\n    x28 = apply(x27, x26)\n    x29 = merge(x28)\n    x30 = asobject(x29)\n    x31 = apply(double, x30)\n    x32 = apply(increment, x31)\n    x33 = apply(tojvec, x32)\n    x34 = prapply(shift, x30, x33)\n    x35 = mapply(x27, x34)\n    x36 = paint(I, x35)\n    x37 = paint(x36, x20)\n    O = paint(x37, x v)\n    return O"], [1.1, "def solve_670b139b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, dmirror, identity)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n     x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x19, x11, x7)\n    return O"], [1.1, "def solve_682dcee1(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = equality(x2, TWO)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(I)\n    x6 = branch(x4, identity, dmirror)\n    x7 = x6(x5)\n    x8 =28(x7)\n    x9 = order(x8, identity)\n    x10 = last(x9)\n    x11 = remove(x10, x9)\n    x12 = compose(hmirror, vmirror)\n    x13 = x12(x11)\n    x14 = first(x11)\n    x15 = last(x11)\n    x16 = color(x10)\n    x17 = color(x14)\n    x18 = equality(x16, x17)\n    x19 = combine(x15, x18)\n    x20 = shift(x19, UNITY)\n    O = paint(x5, x20)\n    return O"], [1.1, "def solve_0fb7b013(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = recolor(x5, x3)\n    x7 = asobject(x6)\n    x8 = paint(x5, x7)\n    x9 =0200(TWO, ONE)\n    x10 = dmirror(x9)\n    x11 = astuple(x10, x9)\n    x12 = double(x11)\n    x13 = tojvec(x12)\n    x14 = shoot(x13, UP_RIGHT)\n    x15 = height(x10)\n    x16 = increment(x15)\n    x17 = rightmost(x4)\n    x18 = decrement(x17)\n    x19 = astuple(x18, x12)\n    x20 = astuple(x18, x12)\n    x21 = astuple(x19, x20)\n    x22 = canvas(x4, x21)\n    x23 = asindices(x22)\n    x24 = toobject(x23, x10)\n    x25 = increment(x12)\n    x26 = shift(x24, x25)\n    x27 = shift(x26, x12)\n    x28 = paint(x22, x27)\n    x29 = other(x1, x28)\n    x30 = normalize(x29)\n    x31 = lbind(shift, x30)\n    x32 = mapply(x31, x2)\n    O = paint(x30, x32)\n    return O"], [1.1, "def solve_3e38270a(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 =14424122342\n    \"\"\"\n    x7 = matcher(color, x1)\n    x8 = compose(flip, x7)\n    x9 = extract(x2, x8)\n    x10 = height(x5)\n    x11 = width(x5)\n    x12 = matcher(hfrontier, x10)\n    x13 = matcher(vfrontier, x11)\n    x14 = fork(combine, x12, x13)\n    x15 = fork( both, x11, x14)\n    x16 = last(x15)\n    x17 = palette(x9)\n    x18 = palette(x16)\n    x19 = intersection(x17, x18)\n    x20 = shape(x5)\n    x21 = canvas(ZERO, x20)\n    x22 = ofcolor(I, x1)\n    x23 = compose(x15, x22)\n    x24 = shape(x9)\n    x25 = canvas(ZERO, x24)\n    x26 = lbind(multiply, x22)\n    x27 = apply(x26, x19)\n    x28 = lbind(multiply, x26)\n    x29 = apply(x28, x16)\n    x30 = lbind(multiply, x31)\n    x31 = apply(x30, x29)\n    x32 = lbind(shift, x5)\n    x33 = mapply(x32, x27)\n    x34 = lbind(shift, x9)\n    x35 = mapply(x34, x31)\n    x36 = combine(x33, x35)\n    O = fill(I, x1, x36)\n    return O"], [1.1, "def solve_bca0c3fd(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =63(I)\n    x6 = asobject(x5)\n    x7 = matcher(first, x4)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x6, x8)\n    x10 = hperiod(x9)\n    x11 = vperiod(x9)\n    x12 = width(I)\n    x13 = width(x9)\n    x14 = subtract(x12, x13)\n    x15 = toivec(x14)\n    x16 = height(I)\n    x17 = height(x9)\n    x18 = subtract(x16, x17)\n    x19 = tojvec(x18)\n    x20 = height(I)\n    x21 =ismmax(x26, x20)\n    x22 = subtract(x12, x21)\n    x23 = shift(x9, x22)\n    x24 = fill(I, x4, x23)\n    x25 = shift(x9, x18)\n    x26 = fill(x24, x4, x25)\n    x27 = shift(x19, x00200000)\n    x28 = fill(x26, x4, x27)\n    x29 = shift(x23, x0050)\n    O = fill(x28, x4, x29)\n    return O"], [1.1, "def solve_8b42c7e4(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = paint(x3, x2)\n    x5 = objects(x4, T, F, F)\n    x6 = compose(dmirror, merge)\n    x7 = fork(equality, identity, x6)\n    x8 = extract(x5, x7)\n    x9 =52825ff28(x8)\n    O = last(x9)\n    return O"], [1.1, "def solve_7806948e(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 =875(x4)\n    x6 = shape(I)\n    x7 = canvas(x3, x6)\n    x8 = hconcat(I, x5)\n    x9 = objects(x8, T, F, T)\n    x10 = compose(last, centerofmass)\n    x11 = order(x9, x10)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = rbind(multiply, x12)\n    x17 = apply(x16, x11)\n    x18 = lbind(shift, x11)\n    x19 = mapply(x18, x17)\n    O = fill(I, x3, x19)\n    return O"], [1.1, "def solve_fa71a342(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = position(I, ORIGIN)\n    x2 = fork(add, first, last)\n    x3 = x2(x1)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = fork(multiply, first, last)\n    x6 = fork(553, last, x5)\n    x7 = compose(x6, first)\n    x8 = fork(multiply, last, x6)\n    x9 = fork(553, x7, x8)\n    x10 = fork(add, first, last)\n    x11 = compose(x10, first)\n    x12 = fork(add, x7, x11)\n    x13 = fork(subtract, x12, x7)\n    x14 = width(I)\n    x15 = astuple(x14, x13)\n    x16 = decrement(x15)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = astuple(x18, x13)\n    x20 = decrement(x19)\n    x21 = halve(x20)\n    x22 = asobject(I)\n    x23 =00000(x22)\n    x24 = lbind(shift, x23)\n    x25 = compose(x24, last)\n    x26 = mapply(x25, x4)\n    O = paint(I, x26)\n    return O"], [1.1, "def solve_735df264(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = equality(x2, ONE)\n    x4 = interval(ONE, SEVEN, ONE)\n    x5 = apply(outbox, x4)\n    x6 = lbind(power, index)\n    x7 = apply(x6, x5)\n    x8 = rbind(rapply, I)\n    x9 = chain(first, x8, initset)\n    x10 = lbind(rapply, x7)\n    x11 = chain(first, x10, initset)\n    x12 = sfilter(x5, x9)\n    x13 = lbind(astuple, x12)\n    x14 = lbind(apply, initset)\n    x15 = chain(x13, x14, outbox)\n    x16 = apply(x15, x12)\n    x17 =4416(x16, x4)\n    x18 = chain(dmirror, x17, x15)\n    x19 = apply(x18, x1)\n    x20 = lbind(repeat, x17)\n    x21 = compose(x20, x6)\n    x22 = fork(compose, x21, x19)\n    x23 = lbind(rbind, shift)\n    x24 = rbind(rapply, I)\n    x25 = chain(first, x24, initset)\n    x26 = fork(compose, x22, x25)\n    x27 = compose(x26, x24)\n    x28 = fork(compose, x17, x27)\n    x29 = compose(x28, x24)\n    x30 = fork(compose, x23, x29)\n    x31 = fork(shift, x30, x28)\n    x32 = mapply(x31, x19)\n    x33 = paint(I, x32)\n    O = x35(x33)\n    return O"], [1.1, "def solve_b68e268a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = mostcolor(I)\n    x6 = palette(I)\n    x7 = remove(x4, x6)\n    x8 = order(x7, identity)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = ofcolor(I, x9)\n    x12 = OFcolor(I, x10)\n    x13 =01(x11)\n    x14 =01(x12)\n    x15 =001110000000\n    x16 =001110000000\n    x17 =100000001100001\n    x18 =100000001100001\n    x19 =0000170011111010\n    x20 =0000100000114\n    x21 =0000100000144\n    x22 = upscale(x21, TWO)\n    x23 = maximum(x22)\n    x24 = rbind(add, x23)\n    x25 = chain(invert, last, x24)\n    x26 = x25(x4)\n    x27 = invert(x26)\n    x28 = toivec(x27)\n    x29 = rbind(add, x28)\n    x30 = chain(invert, x29, invert)\n    x31 = x30(x4)\n    x32 = invert(x31)\n    x33 =, urcorner)\n    x34 = lrcorner(x12)\n    x35 = llcorner(x12)\n    x36 = add(x34, UNITY)\n    x37 = add(x35, xR)\n    x38 = combine(x36, x37)\n    x39 = fill(I, x4, x38)\n    x40 = fill(x39, x10, x33)\n    O = fill(x40, x11, x36)\n    return O"], [1.1, "def solve_8b81c1d7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = height(I)\n    x5 = width(I)\n    x6 =187(x1)\n    x7 = partition(I)\n    x8 = lbind(colorfilter, x7)\n    x9 = matcher(size, x4)\n    x10 = extract(x6, x9)\n    x11 = color(x10)\n    x12 =772indices(I)\n    x13 = urcorner(x12)\n    x14 = circle(x13, identity)\n    x15 = product(x11, x14)\n    x16 = difference(x35, x15)\n    x17 = objects(I, T, F, F)\n    x18 = colorfilter(x17, x6)\n    x19 = rbind(adjacent, x18)\n    x20 = sfilter(x19, x18)\n    x21 = merge(x20)\n    x22 = recolor(x3, x21)\n    x23 = merge(x22)\n    x24 = double(x13)\n    x25 = multiply(x24, x23)\n    x26 = add(x25, THREE)\n    x27 = rbind(add, x26)\n    x28 = chain(x77, x27, last)\n    x29 = lbind(recolor, x11)\n    x30 = rbind(shoot, x29)\n    x31 = chain(x9, x30, last)\n    x32 = fork(combine, first, x31)\n    x33 = apply(x32, x22)\n    x34 = mapply(x33, x28)\n    O = paint(I, x34)\n    return O"], [1.1, "def solve_c8b85bcf(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = partition(I)\n    x5 = fork(multiply, height, width)\n    x6 = argmin(x4, x5)\n    x7 = rbind(adjacent, x6)\n    x8 = rbind(adjacent, x6)\n    x9 = extract(x8, x7)\n    x10 = extract(x8, x8)\n    x11 = found(x10, x9)\n    x12 =508(x11, color)\n    x13 = combine(x6, x12)\n    x14 = difference(x13, x2)\n    x15 = subgrid(x14, I)\n    x16 = trim(x15)\n    x17 = asobject(x16)\n    x18 = matcher(first, ZERO)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = vperiod(x20)\n    x22 = hperiod(x20)\n    x23 = neighbors(ORIGIN)\n    x24 = mapply(neighbors, x23)\n    x25 = lbind(shift, x20)\n    x26 = apply(x25, x2)\n    x27 = leastcolor(x16)\n    x28 = lbind(shift, x22)\n    x29 = apply(x28, x2)\n    x30 = astuple(x27, x26)\n    x31 = combine(x26, x30)\n    x32 = lbind(shift, x18)\n    x33 = mapply(x32, x31)\n    x34 = combine(x3, x33)\n    O = paint(x15, x34)\n    return O"], [1.1, "def solve_7d4bcfcb(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 =, x10)\n    x12 = increment(x11)\n    x13 = tojvec(x12)\n    x14 = shift(x11, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(shoot, lastscorner)\n    x18 = compose(x17, center)\n    x19 = fork(combine, x18, ulcorner)\n    x20 =object(x16, x4)\n    x21 = rbind(multiply, x30)\n    x22 = apply(x21, x20)\n    x23 = combine(x18, x22)\n    x24 = mapply(x19, x23)\n    O = fill(I, x3, x24)\n    return O"], [1.1, "def solve_b6e69031(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = fgpartition(I)\n    x4 = replace(I, x1, x2)\n    x5 =34(x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x5, x8)\n    x10 = outbox(x9)\n    x11 = outbox(x10)\n    x12 = ofcolor(x11, x1)\n    x13 =1111(x12, rot90)\n    x14 = ofcolor(x11, x1)\n    x15 =100(x14)\n    x16 = ofcolor(x11, x1)\n    x17 = rbind(multiply, THREE)\n    x18 = rbind(divide, THREE)\n    x19 = compose(x17, x18)\n    x20 = fork(equality, identity, x19)\n    x21 = compose(x20, initset)\n    x22 = extract(x3, x21)\n    x23 = x22(x110)\n    x24 = x22(x110)\n    x25 = fork(combine, vfrontier, hfrontier)\n    x26 = mapply(x25, x24)\n    x27 = fill(x4, x1, x26)\n    x28 = fill(x27, x1, x26)\n    O = fill(x28, x1, x26)\n    return O"], [1.1, "def solve_93d6f96a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = outbox(x17)\n    x19 = backdrop(x18)\n    x20 = cover(x10, x19)\n    x21 =01(x5)\n    x22 = positive(x21)\n    x23 = branch(x22, identity, dmirror)\n    x24 = x23(x20)\n    x25 = ofcolor(x24, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x24)\n    x28 = matcher(first, x4)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(indices, x29, normalize)\n    x31 = x30(x27)\n    x32 = x30(x22)\n    x33 = x30(x3333)\n    x34 = x30(x10)\n    x35 = intersection(x31, x32)\n    x36 = fill(x10, x4, x35)\n    x37 = fill(x36, x4, x31)\n    O = trim(x37)\n    return O"], [1.1, "def solve_560e2c94(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = frontiers(I)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = apply(toindices, x5)\n    x9 = fork(add, leftmost, uppermost)\n    x10 = argmin(x8, x9)\n    x11 = rightmost(x10)\n    x12 = uppermost(x11)\n    x13 = subtract(x11, x12)\n    x14 = add(x13, xExample output:\n    x15 = LEfthalf(I)\n    x16 = righthalf(I)\n    x17 = righthalf(I)\n    x18 = vmirror(x17)\n    x19 = hmirror(x18)\n    x20 = shift(x19, UNITY)\n    x21 = merge(x20)\n    x22 = vmirror(x21)\n    x23 = hmirror(x22)\n    x24 = shoot(x20, UNITY)\n    x25 = shoot(x24, x23)\n    x26 = combine(x28, x25)\n    x27 = paint(x15, x26)\n    x28 = fgpartition(x27)\n    x29 = argmax(x28, numcolors)\n    x30 = intersection(x29, x25)\n    x31 = fill(x27, ONE, x30)\n    x32 = difference(x31, x30)\n    O = fill(x32, x7, x32)\n    return O"], [1.1, "def solve_20f22eb9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x2, x3)\n    x5 = fork(equality, size, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = rbind( lodacent, x7)\n    x9 =006666(x8, toindices)\n    x10 = compose(flip, x5)\n    x11 = sfilter(x1, x10)\n    x12 = argmax(x11, size)\n    x13 = color(x12)\n    x14 = subgrid(x12, I)\n    x15 = cover(x14, x12)\n    x16 = shift(x12, DOWN)\n    x17 = paint(x15, x16)\n    x18 = ofcolor(x16, x13)\n    x19 = subgrid(x18, x17)\n    O = trim(x19)\n    return O"], [1.1, "def solve_1216df33(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(first, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = mostcolor(I)\n    x9 = lbind(colorcount, I)\n    x10 = rbind(toobject, I)\n    x11 = compose(x9, x10)\n    x12 = width(I)\n    x13 = subtract(x12, x22)\n    x14 =manhattan(x13, x7)\n    x15 =455(x14)\n    x16 = multiply(x12, LEFT)\n    x17 = lbind(shift, x15)\n    x18 = compose(x17, x10)\n    x19 = chain(x13, x17, x18)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.1, "def solve_8f88422b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =44(x2)\n    x4 = shape(x3)\n    x5 = halve(x4)\n    x6 = vincrement(x5)\n    x7 =446159(I, x6)\n    x8 = mostcolor(I)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, F, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [1.1, "def solve_f9446286(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add,00007)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add,00007)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [1.1, "def solve_524f1547(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = palette(x3)\n    x5 = other(x4, ZERO)\n    x6 = ofcolor(I, x5)\n    x7 = frontiers(I)\n    x8 = colorfilter(x7, ZERO)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x13)\n    x15 = ofcolor(x13, x5)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = vmirror(x20)\n    x22 = hmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = subgrid(x23, x14)\n    x26 = compress(x25)\n    x27 = asobject(x26)\n    x28 = vmirror(x27)\n    x29 = hmirror(x27)\n    x30 = astuple(x29, x28)\n    x31 = initset(x30)\n    x32 = insert(x15, x31)\n    x33 = backdrop(x32)\n    x34 = subgrid(x33, x30)\n    x35 = astuple(x34, x vmirror)\n    x36 = astuple(x34, x hmirror)\n    x37 = astuple(x35, x36)\n    x38 = combine(x35, x37)\n    x39 = fill(x38, x5, x36)\n    O = x12(x39)\n    return O"], [1.1, "def solve_98221e9b(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =5cphalf(I)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [1.1, "def solve_efb589e4(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = sizefilter(x5, ONE)\n    x9 = apply(neighbors, x8)\n    x10 = remove(x6, x9)\n    x11 = securelyneighbors(x6)\n    x12 =969hattan(x11, NEG_UNITY)\n    x13 = combine(x10, x12)\n    x14 = height(x6)\n    x15 = sfilter(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ONE)\n    x18 = combine(x13, x17)\n    x19 = height(x6)\n    x20 = sfilter(x18, x19)\n    x21 = size(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = combine(x17, x22)\n    x24 = product(x23, x18)\n    x25 = apply(tojvec, x24)\n    x26 = lbind(shift, x6)\n    x27 = mapply(x26, x25)\n    O = paint(I, x27)\n    return O"], [1.1, "def solve_fecfc33f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(difference, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(multiply, x26, x22)\n    x28 = mapply(x27, x10)\n    x29 = color(x6)\n    x30 = fill(I, x29, x28)\n    x31 =O = fill(x30, x9, x29)\n    O =7555(x31)\n    return O"], [1.1, "def solve_88419bf1(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = box(x1)\n    x3 = fork(multiply, height, width)\n    x4 = minimum(x1)\n    x5 = lbind(subtract, x4)\n    x6 = chain(positive, decrement, size)\n    x7 = rbind(toobject, I)\n    x8 = mostcolor(I)\n    x9 = lbind(colorfilter, x6)\n    x10 = compose(x9, color)\n    x11 = toindices(x2)\n    x12 = rbind(adjacent, x11)\n    x13 = mfilter(x12, x10)\n    x14 = mfilter(x12, x7)\n    x15 = width(I)\n    x16 = hsplit(I, x15)\n    x17 =242(x16)\n    x18 = double(x4)\n    x19 = divide(x18, x17)\n    x20 = multiply(x19, x5)\n    x21 = add(x20, x7)\n    x22 = add(x21, x14)\n    x23 = multiply(x22, x5)\n    x24 = repeat(x23, x9)\n    x25 = rbind(repeat, x224)\n    x26 = compose(x25, x10)\n    x27 = apply(x26, x24)\n    O = x21(x27)\n    return O"], [1.1, "def solve_cc125e68(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(contained, polymorph 99,459)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = dmirror(I)\n    x6 = objects(x5, T, F, F)\n    x7 = fork(multiply, height, width)\n    x8 = compose(flip, x7)\n    x9 = extract(x6, x8)\n    x10 = extract(x9, x8)\n    x11 = remove(x4, x1)\n    x12 =aclindices(x4)\n    x13 = subgrid(x12, I)\n    x14 = ulcorner(x4)\n    x15 = rightmost(x4)\n    x16 = decrement(x15)\n    x17 = subtract(x16, x14)\n    x18 = compose(first, last)\n    x19 = matcher(x18, x17)\n    x20 = toindices(x4)\n    x21 = sfilter(x20, x19)\n    x22 = objects(x5, T, F, F)\n    x23 = argmax(x22, size)\n    x24 = color(x23)\n    x25 = replace(x5, x24, x1)\n    x26 =insert(x14, x25)\n    x27 = ulcorner(x24)\n    x28 = increment(x27)\n    x29 = lrcorner(x24)\n    x30 = increment(x29)\n    x31 = pair(x26, x30)\n    x32 = sfilter(x216, first)\n    x33 = mapply(last, x32)\n    x34 = matcher(first, x24)\n    x35 = sfilter(x1, x34)\n    x36 = fill(x5, x24, x35)\n    x37 = fill(x36, x24, x36)\n    O = x2(x37)\n    return O"], [1.1, "def solve_d034dd47(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(initset, x2)\n    x4 = repeat(x1, ONE)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = x6(x3)\n    x8 = ofcolor(I, x1)\n    x9 =993(x8, x7)\n    x10 = sfilter(x7, x9)\n    x11 = compose(vfrontier, uppermost)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x10)\n    x14 = paint(I, x13)\n    x15 = branch(x14, x6, RIGHT)\n    x16 = difference(x10, x12)\n    x17 = apply(lrcorner, x16)\n    x18 =increment(x17)\n    x19 = branch(x18, x5, \u2192mirror)\n    x20 = sfilter(x17, x19)\n    x21 = combine(x15, x20)\n    O = underpaint(x14, x21)\n    return O"], [1.1, "def solve_b3204c3e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = remove(x4, x3)\n    x6 = lbind(chain, positive)\n    x7 = lbind(x6, size)\n    x8 = rbind(compose, backdrop)\n    x9 = lbind(lbind, intersection)\n    x10 = chain(x7, x8, x9)\n    x11 = chain(x10, backdrop, outbox)\n    x12 = lbind(contained, minimum)\n    x13 = compose(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(x13, x15)\n    x17 = sfilter(x4, x16)\n    x18 = argmax(x17, size)\n    x19 = color(x18)\n    x20 = ofcolor(I, x19)\n    x21 = inbox(x18)\n    x22 = cover(I, x21)\n    x23 = mapply(dneighbors, xdneighbors(x14)\n    x24 = difference(x23, x26)\n    x25 = delta(x18)\n    x26 = position(x25, x24)\n    x27 = mapply(x26, x25)\n    O = fill(x22, x19, x27)\n    return O"], [1.1, "def solve_9193f3a9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = solindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = palette(I)\n    x8 = remove(x5, x7)\n    x9 = other(x8, x6)\n    x10 = switch(I, x6, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = colorfilter(x11, x6)\n    x13 = rbind(toobject, I)\n    x14 = neighbors(x12)\n    x15 = lbind(mapply, neighbors)\n    x16 = lbind(lbind, shift)\n    x17 = compose(x15, x16)\n    x18 = apply(x17, x12)\n    x19 = rbind(shift, x6)\n    x20 =6666(x19,:\n    x21 = rbind(colorcount, x5)\n    x22 = valmax(x21, x17)\n    x23 = matcher(x21, x22)\n    x24 = mfilter(x18, x23)\n    x25 = mostcolor(I)\n    x26 = shape(I)\n    x27 = canvas(x25, x26)\n    x28 = normalize(x24)\n    x29 = paint(x27, x28)\n    x30 = toindices(x14)\n    x31 = matcher(first, x5)\n    x32 = sfilter(x30, x31)\n    O = paint(x29, x32)\n    return O"], [1.1, "def solve_ecaa72c1(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = toivec(x4)\n    x7 = tojvec(x5)\n    x8 = add(x7, NEG_UNITY)\n    x9 = add(x6, RIGHT)\n    x10 = add(x9, DOWN_LEFT)\n    x11 = compose(x10, astuple)\n    x12 = double(x5)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = rbind(multiply, x4)\n    x15 = apply(x14, x13)\n    x16 = rbind(multiply, x5)\n    x17 = apply(x16, x15)\n    x18 = mostcolor(I)\n    x19 = rbind(toobject, I)\n    x20 =2delta(x2)\n    x21 = rbind(colorcount, x18)\n    x22 = chain(x21, decrement, delta)\n    x23 = subtract(x22, TWO)\n    x24 =ivec(x23)\n    x25 = shift(x3, x24)\n    x26 = astuple(x23, x25)\n    x27 =nerner(x26)\n    x28 = matcher(first, x18)\n    x29 = rbind(sfilter, x28)\n    x30 = lbind(recolor, x18)\n    x31 = apply(x30, x9)\n    x32 = mapply(x26, x31)\n    x33 = paint(I, x32)\n    x34 = mapply(x30, x17)\n    O = paint(x33, x34)\n    return O"], [1.1, "def solve_abc8f296(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    4567123456712345671234\n    4567123456712345671234\n    4567123456712345671234\n    4567123456712345671234\n    45671234446712345671234\n    456712345666712345671234\n    4567123457612345671234\n    456712345666712345671234\n    45671234567123445671234\n    45671234567133345671234\n    4567123456711245671234\n    45671234567123456611214\n    45671234567123456712314\n    45671234567123456611214\n    45671234567123456712334\n    45673234567123456712344\n    45673234567123456712334\n    45673334466671234566134\n    45673334646667123456634\n    45673334646667123456444\n    \"\"\"\n    x2 = compose(positive, size)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(lowermost, x3)\n    x5 = chain(maximum, x3, x4)\n    x6 =586(I)\n    x7 = lbind(contained, x6)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = mostcolor(I)\n    x11 = fill(I, x10, x9)\n    O = replace(x11, x10, x5)\n    return O"], [1.1, "def solve_010403c4(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(equality, size, x2)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x3, x5)\n    x7 = objects(I, T, F, F)\n    x8 = sfilter(x7, x6)\n    x9 = difference(x7, x8)\n    x10 = colorfilter(x9, TWO)\n    x11 = mapply(toindices, x10)\n    x12 = apply(urcorner, x8)\n    x13 = shift(x12, UNITY)\n    x14 = rbind(shoot, UP)\n    x15 = mapply(x14, x13)\n    x16 = fill(I, ZERO, x11)\n    x17 = fill(x16, FOUR, x15)\n    x18 = size(x1)\n    x19 = decrement(x18)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x15)\n    x22 = fill(x17, ZERO, x21)\n    x23 =22200008OR678\n    O = replace(x22, ONE, x39)\n    return O"], [1.1, "def solve_c36915ef(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = difference(x1, x5)\n    x9 = astuple(x7, x8)\n    x10 = apply(c90928, x9)\n    x11 = increment(x10)\n    x12 = invert(x11)\n    x13 = h frontiers(I)\n    x14 = insert(x13, x10)\n    x15 = hmirror(x14)\n    x16 = astuple(x12, x15)\n    x17 = double(x16)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = lbind(multiply, x17)\n    x20 = apply(x19, x18)\n    x21 = lbind(shift, x455)\n    x22 = mapply(x21, x20)\n    x23 = toindices(x22)\n    x24 = lbind(canvas, x20)\n    x25 = chain(x24, shape, x22)\n    x26 =    x25(x23)\n    x27 = replace(I, x2, ZERO)\n    O = fill(x27, ZERO, x26)\n    return O"], [1.1, "def solve_70da87a9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = height(x2)\n    x4 = decrement(x3)\n    x5 = lbind(astuple, x4)\n    x6 = apply(x5, x2)\n    x7 = lefthalf(I)\n    x8 = color(x7)\n    x9 = palette(I)\n    x10 = RIREE(x9)\n    x11 =1111(x10)\n    x12 =dmirror(x11)\n    x13 = hconcat(x7, x11)\n    x14 = hconcat(x12, x7)\n    x15 = vconcat(x13, x14)\n    x16 = asobject(x15)\n    x17 = shift(x16, UNITY)\n    O = paint(x19, x17)\n    return O"], [1.1, "def solve_db695d42(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 =695(I)\n    x3 = ofcolor(I, x1)\n    x4 = center(x3)\n    x5 = merge(x3)\n    x6 = center(x5)\n    x7 = subtract(x6, x4)\n    x8 = shoot(x4, x7)\n    O = underfill(I, x1, x8)\n    return O"], [1.1, "def solve_dad1ce0f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 =1336(x2)\n    x7 = occurrences(I, x6)\n    x8 = lbind(power, manhattan)\n    x9 = initset(x8)\n    x10 = lbind(rapply, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(hline, x12)\n    x14 = fork(add, x13, ulcorner)\n    x15 = compose(last, x14)\n    x16 = compose(flip, x15)\n    x17 = fork(equality, x14, x16)\n    x18 = fork(difference, x17, toindices)\n    x19 = compose(size, x18)\n    x20 = matcher(x19, ZERO)\n    x21 = extract(x5, x20)\n    x22 = first(x21)\n    x23 = difference(x5, x22)\n    x24 = color(x22)\n    x25 = fill(I, x24, x23)\n    x26 = objects(x25, T, F, T)\n    x27 = difference(x26, x26)\n    x28 = colorfilter(x27, x24)\n    x29 = rbind(bordering, I)\n    x30 = compose(flip, x29)\n    x31 = mfilter(x28, x30)\n    x32 = fill(x25, x27, x31)\n    O = replace(x32, x24, ZERO)\n    return O"], [1.1, "def solve_79a44c1d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = palette(I)\n    x7 = sfilter(x6, x5)\n    x8 = fork(equality, toindices, box)\n    x9 = rbind(contained, x8)\n    x10 = compose(x9, first)\n    x11 = sfilter(x1, x10)\n    x12 =ract(x11, x7)\n    x13 =516161(x12, x7)\n    x14 =5556(x13, RIGHT)\n    x15 = normalize(x14)\n    x16 = paint(I, x15)\n    x17 = toindices(x15)\n    x18 = compose(first, last)\n    x19 = matcher(x18, x7)\n    x20 = sfilter(x19, x17)\n    x21 = subgrid(x20, x16)\n    x22 = objects(x21, T, F, F)\n    x23 = argmax(x22, size)\n    x24 = color(x23)\n    x25 = toindices(x23)\n    x26 = prapply(connect, x25, x25)\n    x27 = fork(either, vline, hline)\n    x28 = mfilter(x27, x26)\n    O = fill(x16, x24, x28)\n    return O"], [1.1, "def solve_ea955145(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =58912_ulative,lease(I)\n    x3 = colorfilter(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = remove(x7, x4)\n    x9 = lbind(vmatching, x7)\n    x10 = lbind(hmatching, x7)\n    x11 = sfilter(x8, x9)\n    x12 = sfilter(x8, x10)\n    x13 = argmin(x11, uppermost)\n    x14 = argmax(x11, uppermost)\n    x15 = argmin(x12, leftmost)\n    x16 = argmax(x12, leftmost)\n    x17 = fill(I, SIX, x7)\n    x18 = fill(x17, TWO, x13)\n    x19 = fill(x18, ONE, x14)\n    x20 = fill(x19, FOUR, x15)\n    O = fill(x20, THREE, x16)\n    return O"], [1.1, "def solve_1ae15ca9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(e26, x28)\n    x30 = matcher(first, x21)\n    x31 = sfilter(x28, x30)\n    x32 = delta(x31)\n    x33 = hmirror(x32)\n    x34 = combine(x27, x33)\n    x35 = center(x34)\n    x36 = urcorner(x34)\n    x37 =(x40_ LeiIGHT)\n    x38 = paint(x11, x37)\n    x39 = shift(x34, x38)\n    x40 = objects(x39, T, F, T)\n    O = paint(x37, x40)\n    return O"], [1.1, "def solve_b4935772(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = leastcolor(I)\n    x9 = subgrid(x5, I)\n    x10 =\n    \"\"\"\n    x11 = replace(x9, x7, x8)\n    x12 = leastcolor(x11)\n    x13 = replace(x9, x12, x8)\n    x14 = leastcolor(x13)\n    x15 = ofcolor(x11, x14)\n    x16 = last(x15)\n    x17 = objects(x66, T, F, T)\n    x18 = colorfilter(x17, x16)\n    x19 = rbind(toobject, x11)\n    x20 = compose(flip, x19)\n    x21 = rbind(toobject, x01)\n    x22 = chain(x20, x21, delta)\n    x23 = colorfilter(x18, x14)\n    x24 = rbind(adjacent, x5)\n    x25 = sfilter(x23, x24)\n    x26 = mapply(neighbors, x25)\n    x27 = rbind(adjacent, x6)\n    x28 = sfilter(x26, x27)\n    x29 = fill(x13, x18, x28)\n    x30 = mapply(x29, x37)\n    x31 = replace(x29, x10, x1)\n    O = fill(x30, x16, x31)\n    return O"], [1.1, "def solve_9de7633e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = dmirror(I)\n    x6 = hf(x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 =678(x7)\n    x10 = width(x6)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = index(x6, x12)\n    x14 = subgrid(x13, x6)\n    x15 = asobject(x14)\n    x16 = matcher(first, x4)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = paint(x6, x18)\n    O = subgrid(x19, x9)\n    return O"], [1.1, "def solve_78d5dad3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = objects(x3, F, F, T)\n    x5 = compose(toindices, normalize)\n    x6 = matcher(x5, x4)\n    x7 = extract(x6, x4)\n    x8 = lbind(adjacent, x7)\n    x9 = mfilter(x8, x6)\n    x10 = toindices(x7)\n    x11 = rbind(greater, x10)\n    x12 = lbind(lbind, shift)\n    x13 = compose(x11, ulcorner)\n    x14 = rbind(compose, x13)\n    x15 = lbind(rbind, intersection)\n    x16 = chain(x14, x15, mostcolor)\n    x17 = fork(sfilter, identity, x16)\n    x18 = compose(size, x17)\n    x19 = compose(x18, palette)\n    x20 =79(x19)\n    x21 = fork(difference, x19, x20)\n    x22 = compose(size, x21)\n    x23 = matcher(x22, ZERO)\n    x24 = rbind(28, UNITY)\n    x25 = chain(x24, x23, x22)\n    x26 = lbind(rbind, contained)\n    x27 = compose(x26, last)\n    x28 = rbind(compose, x last)\n    x29 = lbind(rbind, contained)\n    x30 = chain(x28, x29, x25)\n    x31 = fork(mapply, x15, x27)\n    x32 = fork(vfrontier, x30, x31)\n    x33 = mapply(x32, x8)\n    O = underfill(x1, x2, x33)\n    return O"], [1.1, "def solve_86cb0e2d(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =6316(I)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = color(x6)\n    x8 = rbind(add, UNITY)\n    x9 = rbind(subtract, UNITY)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x1, x10)\n    x12 = asindices(I)\n    x13 = corners(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x15)\n    x17 = mapply(dneighbors, x16)\n    x18 = difference(x17, x16)\n    x19 = toobject(x18, I)\n    x20 = matcher(first, x15)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = difference(x19, x22)\n    x24 = color(x23)\n    x25 = lbind(recolor, x24)\n    x26 = lbind(mapply, dneighbors)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, identity, x27)\n    x29 = apply(x28, x22)\n    O = fill(I, x24, x29)\n    return O"], [1.1, "def solve_c1345553(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =4(I)\n    x6 = colorfilter(x5, x4)\n    x7 = fork( prapply, hfrontier, vfrontier)\n    x8 = mapply(x7, x6)\n    x9 = leastcolor(I)\n    x10 = fill(I, x9, x8)\n    x11 = ofcolor(I, x4)\n    x12 = ofcolor(I, x5)\n    x13 = switch(x10, x12, x11)\n    x14 = combine(x11, x13)\n    x15 =15(x14)\n    x16 = vfrontier(x15)\n    x17 = mapply(x12, x16)\n    O = underfill(x10, x9, x17)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_6875b676(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_3a84b1b0(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_16b56d54(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_98635b6c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.08173484697705038, "def solve_fcf3a0f7(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = leastcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, x4)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.08173484697705038, "def solve_03eab13a(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_0167cbf6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_8251a83e(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.08173484697705038, "def solve_51ed775d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(hmatching, first, last)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = compose(center, first)\n    x9 = compose(center, last)\n    x10 = fork(connect, x8, x9)\n    x11 = chain(initset, center, x10)\n    x12 = compose(color, first)\n    x13 = fork(recolor, x12, x11)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.08173484697705038, "def solve_f3ad73d3(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_aa533cca(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_503def62(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    x9 = fill(I, THREE, x8)\n    x10 = leastcolor(I)\n    O = fill(x9, x10, x2)\n    return O"], [0.08173484697705038, "def solve_e9369f40(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_9cd44482(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_06cbc8d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_cd9009b6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_d163d580(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.08173484697705038, "def solve_d68bc9ef(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_dd653617(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_4a956713(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_849d194b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_5def9374(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_ed67315d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_24dea066(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_6d1fa2e2(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, EIGHT)\n    x3 = merge(x2)\n    x4 = cover(I, x3)\n    x5 = normalize(x3)\n    x6 = shift(x5, UNITY)\n    O = paint(x4, x6)\n    return O"], [0.08173484697705038, "def solve_7d1b5e81(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_0a28ca41(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_ab57c367(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_d4cdce46(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_71929de0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_69334b71(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.08173484697705038, "def solve_b17b2205(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_49139b13(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_203e00b6(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_1ccbf6cf(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_7e77d89e(I):\n    x1 = objects(I, F, F, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(mostcolor, totuple, palette)\n    x6 = chain(x5, totuple, palette)\n    x7 = lbind(matcher, first)\n    x8 = compose(x7, x6)\n    x9 = lbind(matcher, last)\n    x10 = compose(x9, x6)\n    x11 = fork(sfilter, identity, x8)\n    x12 = fork(sfilter, identity, x10)\n    x13 = lbind(occurrences, I)\n    x14 = chain(invert, ulcorner, x11)\n    x15 = chain(invert, ulcorner, x12)\n    x16 = lbind(lbind, shift)\n    x17 = fork(shift, identity, x14)\n    x18 = fork(shift, identity, x15)\n    x19 = compose(x16, x17)\n    x20 = compose(x13, x11)\n    x21 = fork(mapply, x19, x20)\n    x22 = compose(x16, x18)\n    x23 = compose(x13, x12)\n    x24 = fork(mapply, x22, x23)\n    x25 = fork(combine, x21, x24)\n    x26 = mapply(x25, x4)\n    O = paint(I, x26)\n    return O"], [0.08173484697705038, "def solve_48e7127f(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.08173484697705038, "def solve_ad985ce3(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.08173484697705038, "def solve_62d48323(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, FOUR, x8)\n    return O"], [0.08173484697705038, "def solve_a685bc23(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.08173484697705038, "def solve_7c2f8689(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_dc8e44fb(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_f70aaa1a(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_44be2ad0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_a489b894(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.08173484697705038, "def solve_4387c831(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_dbeafd63(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(shoot, UNITY)\n    x6 = compose(x5, center)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x2)\n    x9 = paint(I, x8)\n    x10 = interval(ZERO, NINE, ONE)\n    x11 = apply(double, x10)\n    x12 = apply(increment, x11)\n    x13 = apply(tojvec, x12)\n    x14 = prapply(shift, x2, x13)\n    x15 = merge(x14)\n    O = fill(x9, FIVE, x15)\n    return O"], [0.08173484697705038, "def solve_c1ad89f2(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_cfdaebb8(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_1f537b40(I):\n    x1 = objects(I, T, F, T)\n    x2 = objects(I, F, T, T)\n    x3 = lbind(lbind, shift)\n    x4 = compose(x3, normalize)\n    x5 = lbind(colorfilter, x2)\n    x6 = compose(x5, normalize)\n    x7 = fork(mapply, x4, x6)\n    x8 = mapply(x7, x1)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_cd9229b0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_8bb9e7b8(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_07e07ca8(I):\n    x1 = objects(I, F, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = lbind(greater, SEVEN)\n    x4 = compose(x3, x2)\n    x5 = fork(either, vline, hline)\n    x6 = fork(both, x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = compose(center, first)\n    x9 = compose(center, last)\n    x10 = fork(connect, x8, x9)\n    x11 = chain(initset, center, x10)\n    x12 = compose(color, first)\n    x13 = fork(recolor, x12, x11)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.08173484697705038, "def solve_163704bd(I):\n    x1 = leastcolor(I)\n    x2 = lbind(recolor, NEG_ONE)\n    x3 = rbind(ofcolor, x1)\n    x4 = chain(x2, backdrop, x3)\n    x5 = fork(paint, identity, x4)\n    x6 = height(I)\n    x7 = vsplit(I, x6)\n    x8 = mapply(x5, x7)\n    x9 = ofcolor(x8, NEG_ONE)\n    x10 = dmirror(I)\n    x11 = width(I)\n    x12 = vsplit(x10, x11)\n    x13 = mapply(x5, x12)\n    x14 = dmirror(x13)\n    x15 = ofcolor(x14, NEG_ONE)\n    x16 = combine(x9, x15)\n    O = fill(I, x1, x16)\n    return O"], [0.08173484697705038, "def solve_092aab67(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_5b1bd8f2(I):\n    x1 = objects(I, T, T, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_9da86c48(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.08173484697705038, "def solve_ac273b53(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = sfilter(x2, x3)\n    x5 = lbind(mapply, dneighbors)\n    x6 = chain(x5, corners, outbox)\n    x7 = fork(difference, x6, outbox)\n    x8 = ofcolor(I, FIVE)\n    x9 = rbind(intersection, x8)\n    x10 = matcher(size, ZERO)\n    x11 = chain(x10, x9, x7)\n    x12 = mfilter(x4, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.08173484697705038, "def solve_12da3270(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_569ba72d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_0b75a43c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_37603d8e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.08173484697705038, "def solve_989e9279(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_d39157ee(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_2b6b682a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.08173484697705038, "def solve_388e0783(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(vmatching, first, last)\n    x6 = sfilter(x4, x5)\n    x7 = compose(color, first)\n    x8 = fork(recolor, x7, last)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [0.08173484697705038, "def solve_91ca15f5(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_1e8781ea(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_0f5f7d13(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.08173484697705038, "def solve_090cc857(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = lbind(position, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shoot, identity, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, EIGHT, x8)\n    return O"], [0.08173484697705038, "def solve_92c869a0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_4801d889(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_9d6e832d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_43d77e9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08206691200645198, "def solve_1954d435(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_9b0d9de7(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_1a6c1d0f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_afd95195(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_971349f5(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_b589dd6a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08468134728045976, "def solve_164525ee(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    x10 = paint(x5, x9)\n    O = replace(x10, ONE, SIX)\n    return O"], [0.08468134728045976, "def solve_d5dd5b8e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mapply(x8, x2)\n    O = paint(x5, x9)\n    return O"], [0.08468134728045976, "def solve_b44ef4c7(I):\n    x1 = objects(I, F, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.08468134728045976, "def solve_16b0c618(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = paint(x5, x9)\n    return O"], [0.08468134728045976, "def solve_81178ba4(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.09909437803847193, "def solve_ea895945(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.10892835571159289, "def solve_876be93d(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = leftmost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x8, x9)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.11634314213316777, "def solve_c9526646(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_0256a407(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.12814991617905258, "def solve_8ee6bd70(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12814991617905258, "def solve_4b38f7cc(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12814991617905258, "def solve_3ef20ad5(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12993277496796057, "def solve_fe4771c5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_6551cc61(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_9bc7fc01(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_08d6a8b3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_006c5a09(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_544843a1(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.13194490800051364, "def solve_54f670f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x6 = positive(x4)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = rbind(subgrid, x8)\n    x10 = matcher(color, ZERO)\n    x11 = compose(flip, x10)\n    x12 = partition(x8)\n    x13 = sfilter(x12, x11)\n    x14 = rbind(ofcolor, ZERO)\n    x15 = lbind(mapply, vfrontier)\n    x16 = chain(x15, x14, x9)\n    x17 = fork(shift, x16, ulcorner)\n    x18 = fork(intersection, toindices, x17)\n    x19 = mapply(x18, x13)\n    x20 = fill(x8, ZERO, x19)\n    O = x7(x20)\n    return O"], [0.13468134728045977, "def solve_3ab48600(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_57a6e24d(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_096d0db2(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_b57e5122(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_b3aadb33(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x2, x8)\n    O = fill(x3, x4, x9)\n    return O"], [0.13468134728045977, "def solve_e5618b18(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_92cf0486(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x2, x8)\n    O = fill(x3, x4, x9)\n    return O"], [0.13468134728045977, "def solve_8dafb935(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.13468134728045977, "def solve_3c64f5d9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_68689a19(I):\n    x1 = objects(I, T, F, T)\n    x2 = sfilter(x1, square)\n    x3 = difference(x1, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = replace(I, TWO, ZERO)\n    O = fill(x6, THREE, x5)\n    return O"], [0.13468134728045977, "def solve_e66c501c(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_0d846225(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.13468134728045977, "def solve_1752a5b6(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_e8207cb2(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_b59db618(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x2, x8)\n    O = fill(x3, x4, x9)\n    return O"], [0.13468134728045977, "def solve_8c6e2567(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_9ca8fb5c(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_c1209e7d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_7e29e100(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13757267766397355, "def solve_89d8ec3f(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.13757267766397355, "def solve_2d11fea1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.13757267766397355, "def solve_e01c068a(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.14012102340220775, "def solve_b799b3db(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.14098233381512817, "def solve_3560a902(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.14098233381512817, "def solve_b060356f(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.14098233381512817, "def solve_b62f67e5(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.14238239608237185, "def solve_40f5ed1a(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, uppermost)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(TWO, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(apply, x9)\n    x11 = lbind(compose, size)\n    x12 = lbind(lbind, intersection)\n    x13 = compose(x11, x12)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x10, x14, x7)\n    x16 = fork(argmax, x15, x13)\n    x17 = mapply(x16, x4)\n    O = underfill(I, ONE, x17)\n    return O"], [0.14633502634498852, "def solve_9ecb5764(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_f1685387(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.147039853263387, "def solve_de78cb21(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_8257de99(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_f892bcd1(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_bb84bb8b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.147039853263387, "def solve_689b85db(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_d7263e33(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_f5678dca(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(backdrop, x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.1497728934434557, "def solve_8000a482(I):\n    x1 = objects(I, T, T, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, SEVEN, x7)\n    return O"], [0.1497728934434557, "def solve_a3022a8b(I):\n    x1 = leastcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = leastcolor(x2)\n    O = replace(x2, x3, x1)\n    return O"], [0.15329845560571315, "def solve_868ed34a(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [0.1666949415715136, "def solve_0fdb2933(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.167039853263387, "def solve_77646628(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    x10 = paint(x5, x9)\n    O = replace(x10, EIGHT, ONE)\n    return O"], [0.167039853263387, "def solve_1ce37740(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.167039853263387, "def solve_0963549b(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.168463732206312, "def solve_d99002f2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.1697728934434557, "def solve_bd322b1d(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.1697728934434557, "def solve_991df676(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_d70d0d9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.1697728934434557, "def solve_c47010f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_db715e57(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FOUR, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.1705557794573261, "def solve_045267fc(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_717391b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_4eff112b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_e32f1e74(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_f485f9d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1714130763927213, "def solve_2be6fe57(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.1714130763927213, "def solve_d055e52c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.19107391968801002, "def solve_03eaf454(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = center(x2)\n    x4 = color(x2)\n    x5 = astuple(UNITY, NEG_UNITY)\n    x6 = astuple(UP_RIGHT, DOWN_LEFT)\n    x7 = combine(x5, x6)\n    x8 = lbind(shoot, x3)\n    x9 = mapply(x8, x7)\n    O = fill(I, x4, x9)\n    return O"], [0.19326297813860446, "def solve_2530cf2a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.19326297813860446, "def solve_b15d97c3(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.1944995804573748, "def solve_b59d2497(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, x2)\n    x4 = leastcolor(x3)\n    x5 = mapply(dneighbors, x2)\n    O = fill(x3, x4, x5)\n    return O"], [0.20252763457609518, "def solve_a616a14d(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind(ofcolor, I)\n    x5 = lbind(prapply, connect)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, identity, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [0.20252763457609518, "def solve_795ed828(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20977289344345568, "def solve_7c423118(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.20977289344345568, "def solve_3ffab31d(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.20977289344345568, "def solve_ad537b9d(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.20977289344345568, "def solve_94d2f35a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.20977289344345568, "def solve_f118686d(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.2110590985215381, "def solve_52dd4945(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = box(x5)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x3, x11)\n    O = fill(x6, x1, x12)\n    return O"], [0.2133114088199879, "def solve_50cba98b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2164395601101224, "def solve_0e3d6d2d(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.22208695827893984, "def solve_a72cc117(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.22681970687279734, "def solve_a32dd879(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = leastcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = mostcolor(I)\n    x7 = other(x5, x6)\n    x8 = ofcolor(I, x7)\n    x9 = mapply(neighbors, x8)\n    x10 = difference(x9, x8)\n    O = fill(I, x7, x10)\n    return O"], [0.23130963499571885, "def solve_e1aa1d97(I):\n    x1 = objects(I, F, F, T)\n    x2 = leastcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = mapply(neighbors, x3)\n    x5 = underfill(I, ONE, x4)\n    x6 = height(x5)\n    x7 = width(x5)\n    x8 = neighbors(ORIGIN)\n    x9 = toindices(x8)\n    x10 = lbind(shift, x9)\n    x11 = mapply(x10, x8)\n    x12 = fill(x5, TWO, x11)\n    x13 = ofcolor(x12, ONE)\n    x14 = mapply(neighbors, x13)\n    O = underfill(x12, ONE, x14)\n    return O"], [0.23360789883471766, "def solve_d4d49b24(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, EIGHT)\n    x3 = center(x1)\n    x4 = center(x2)\n    x5 = hfrontier(x3)\n    x6 = vfrontier(x4)\n    x7 = intersection(x5, x6)\n    x8 = fill(I, TWO, x5)\n    x9 = fill(x8, EIGHT, x6)\n    O = fill(x9, FOUR, x7)\n    return O"], [0.23823994288959274, "def solve_b584329c(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_6f042a1a(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_40a4461e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_ba964440(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_c4aa01f9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_ba046052(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_5721c22b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_261857a2(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_ee77371b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_05bab31d(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_dc2110a9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_8f982774(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.2384010333421186, "def solve_b1de971e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.24440527968330814, "def solve_cdd5764d(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.2464702263154948, "def solve_3ce50418(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = lbind(toobject, x1)\n    x4 = compose(x2, x3)\n    x5 = vmirror(I)\n    x6 = hmirror(I)\n    x7 = astuple(x5, x6)\n    x8 = argmin(x7, x4)\n    O = subgrid(x1, x8)\n    return O"], [0.253858380731812, "def solve_479490e6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.26915094341200335, "def solve_e2bd7a7b(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ONE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.2735505434325868, "def solve_9732c02f(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2735505434325868, "def solve_dc23f8c1(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2735505434325868, "def solve_2cdb32e7(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.28046050168233005, "def solve_df426a87(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28046050168233005, "def solve_d3574206(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28046050168233005, "def solve_ff93ce59(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28046050168233005, "def solve_87d960e3(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28046050168233005, "def solve_fafcc003(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28271352439090625, "def solve_15501dfc(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28633740562992, "def solve_09b19b23(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [0.28633740562992, "def solve_e8c0b18e(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [0.28633740562992, "def solve_b9efb08e(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [0.2888686244192573, "def solve_76cf0387(I):\n    x1 = fgpartition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = mapply(x2, x1)\n    O = paint(I, x3)\n    return O"], [0.29024380546596323, "def solve_06a67461(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.29175210347734337, "def solve_2a7d3b8d(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(I, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(x13, THREE, x20)\n    return O"], [0.30536424408283025, "def solve_30fb11f4(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, ONE, x5)\n    x7 = lbind(power, outbox)\n    x8 = chain(x7, halve, width)\n    x9 = initset(x8)\n    x10 = lbind(rapply, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(backdrop, x12)\n    x14 = fork(difference, x13, toindices)\n    x15 = mapply(x14, x1)\n    x16 = mostcolor(I)\n    x17 = ofcolor(I, x16)\n    x18 = intersection(x15, x17)\n    O = fill(x6, THREE, x18)\n    return O"], [0.3097268917964705, "def solve_ad80b1a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = merge(x1)\n    x4 = lbind(shift, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    O = cover(x6, x3)\n    return O"], [0.31373011118259564, "def solve_5787df71(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, SIX, x4)\n    return O"], [0.31414873887079675, "def solve_1e491e00(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.31414873887079675, "def solve_ae88d2e4(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.31414873887079675, "def solve_39c61db7(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.3287128809709907, "def solve_6252e404(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = center(x2)\n    x4 = ulcorner(x2)\n    x5 = subtract(x3, x4)\n    x6 = multiply(NEG_ONE, NINE)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = interval(ZERO, x6, NEG_ONE)\n    x9 = lbind(multiply, x5)\n    x10 = apply(x9, x7)\n    x11 = apply(x9, x8)\n    x12 = pair(x10, x11)\n    x13 = mapply(box, x12)\n    x14 = shift(x13, x3)\n    O = fill(I, x1, x14)\n    return O"], [0.3416837773165455, "def solve_db4070d5(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork(add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, EIGHT, x29)\n    return O"], [0.3635444717906562, "def solve_fbc45864(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.3806851002468923, "def solve_b3b73ccf(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = merge(x1)\n    x7 = backdrop(x6)\n    x8 = box(x6)\n    x9 = fill(I, x3, x7)\n    O = fill(x9, x5, x8)\n    return O"], [0.3997728934434557, "def solve_f3eb0cea(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.3997728934434557, "def solve_dfd6eafb(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.3997728934434557, "def solve_3d7e8f94(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.3997728934434557, "def solve_b0f2ea2a(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.4092541979298261, "def solve_285461bb(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [0.4853084736970792, "def solve_00fc6c7d(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, FIVE, x7)\n    return O"], [0.4853084736970792, "def solve_0f945a79(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.4853084736970792, "def solve_be0fd85e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = replace(I, x1, ONE)\n    x4 = argmax(x2, size)\n    x5 = argmin(x2, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x3)\n    x10 = hline(x5)\n    x11 = hmirror(x9)\n    x12 = vmirror(x9)\n    x13 = branch(x10, x11, x12)\n    x14 = branch(x10, x7, ZERO)\n    x15 = branch(x10, ZERO, x8)\n    x16 = asobject(x13)\n    x17 = matcher(first, x1)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = ulcorner(x4)\n    x21 = shape(x4)\n    x22 = astuple(x14, x15)\n    x23 = multiply(x21, x22)\n    x24 = add(x20, x23)\n    x25 = shift(x19, x24)\n    O = paint(x3, x25)\n    return O"], [0.5063579939608678, "def solve_f4c5b1cc(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I,7777, x4)\n    return O"], [0.5202879261104161, "def solve_cd8dd030(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.5302879261104161, "def solve_7f00a7b0(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x3)\n    x5 = fill(I, TWO, x4)\n    O = replace(x5, ZERO, THREE)\n    return O"], [0.5430215763602573, "def solve_8a2a3f3a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_8d2ea65b(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_2ad8a192(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_b0f671b0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.6014849716551933, "def solve_b07fac32(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.6014849716551933, "def solve_a67e4e2d(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.6014849716551933, "def solve_5de9ed4f(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6460408141864922, "def solve_44119e11(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6797297721609603, "def solve_30dd6d72(I):\n    x1 = width(I)\n    x2 = leastcolor(I)\n    x3 = halve(x1)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O"], [0.7291258623937439, "def solve_d8cf79cb(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.7780474307942749, "def solve_610af08c(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.7825046979697893, "def solve_40a2f4d5(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7825046979697893, "def solve_a4b9e140(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7825046979697893, "def solve_37e24e92(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7915392052312495, "def solve_eda8ad78(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.8404842047930283, "def solve_fe8e5267(I):\n    x1 = width(I)\n    x2 = mostcolor(I)\n    x3 = halve(x1)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O"], [0.8413333333333334, "def solve_f2f23381(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.8642031835623443, "def solve_cde395e4(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.868349128540305, "def solve_e44c0e71(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = objects(x1, T, T, T)\n    x3 = first(x2)\n    x4 = vline(x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(x1)\n    x7 = objects(x6, T, T, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.8891326312670257, "def solve_a5d28a25(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = fill(x6, ONE, x4)\n    O = replace(x7, x1, ZERO)\n    return O"], [0.8923278125055653, "def solve_74bf2a00(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.8998030983313668, "def solve_06e632fe(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.8998030983313668, "def solve_52e94188(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.9182807290875006, "def solve_4bdb9298(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.9182807290875006, "def solve_1bf65c45(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.9183491285403049, "def solve_8f245b32(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_19b5fd6b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_ecb78dd8(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_e85bdeb1(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.9183491285403049, "def solve_4efc4ecd(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_9d5bdd3e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_f0c7dec1(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_90395b89(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_e9b90591(I):\n    x1 = objects(I, T, F, T)\n    x2 = fgpartition(I)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = lbind(power, inbox)\n    x8 = chain(x7, halve, width)\n    x9 = initset(x8)\n    x10 = lbind(rapply, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(backdrop, x12)\n    x14 = fork(recolor, x12, x13)\n    x15 = mapply(x14, x4)\n    O = paint(x6, x15)\n    return O"], [0.9183491285403049, "def solve_2d856518(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.9183491285403049, "def solve_1b45cab7(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.9183491285403049, "def solve_11883138(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_23b8d64d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [0.95, "def solve_6831a4c6(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [1.0, "def solve_6f19e65b(I):\n    x1 = width(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = astuple(x6, x4)\n    x8 = connect(ORIGIN, x7)\n    x9 = connect(ORIGIN, x7)\n    x10 = combine(x8, x9)\n    x11 = outbox(x10)\n    x12 = difference(x1, x11)\n    x13 = compose(backdrop, inbox)\n    x14 = mapply(x13, x12)\n    x15 = fill(I, TWO, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, TWO)\n    x18 = lbind(adjacent, x14)\n    x19 = sfilter(x17, x18)\n    x20 = difference(x17, x19)\n    x21 = merge(x20)\n    x22 = cover(x15, x21)\n    x23 = chain(merge, first, first)\n    x24 = fork(recolor, color, x23)\n    x25 = mapply(x24, x34)\n    O = paint(x22, x25)\n    return O"], [1.0, "def solve_90a428d2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(bordering, normalize)\n    x4 = mfilter(x2, x3)\n    x5 = mostcolor(I)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x5, x4)\n    return O"], [1.0, "def solve_288b9c9f(I):\n    x1 = objects(I, T, F, F)\n    x2 = index(I, ORIGIN)\n    x3 = colorfilter(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = remove(x7, x4)\n    x9 = lbind(vmatching, x7)\n    x10 = lbind(hmatching, x7)\n    x11 = sfilter(x8, x9)\n    x12 = sfilter(x8, x10)\n    x13 = argmin(x11, uppermost)\n    x14 = argmax(x11, uppermost)\n    x15 = argmin(x12, leftmost)\n    x16 = argmax(x12, leftmost)\n    x17 = fill(I, SIX, x7)\n    x18 = fill(x17, TWO, x13)\n    x19 = fill(x18, ONE, x14)\n    x20 = fill(x19, FOUR, x15)\n    O = fill(x20, THREE, x16)\n    return O"], [1.0, "def solve_aa87556a(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = greatest(x13)\n    x15 = mostcolor(x11)\n    x16 = palette(x11)\n    x17 = remove(x11, x16)\n    x18 = remove(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = palette(x11)\n    x22 = colorfilter(x21, x19)\n    x23 = size(x22)\n    x24 = interval(ZERO, x23, ONE)\n    x25 = product(x24, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = ofcolor(x11, x19)\n    x29 = ofcolor(x11, x20)\n    x30 = canvas(x19, x11)\n    x31 = fill(x30, x19, x28)\n    x32 = fill(x31, x20, x29)\n    O = x5(x32)\n    return O"], [1.0, "def solve_04788779(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(sfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_0947aa11(I):\n    x1 = objects(I, F, T, T)\n    x2 = lbind(rbind, equality)\n    x3 = rbind(compose, first)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = fork(sfilter, identity, x4)\n    x6 = fork(difference, identity, x5)\n    x7 = lbind(rbind, adjacent)\n    x8 = rbind(compose, initset)\n    x9 = chain(x8, x7, x6)\n    x10 = fork(extract, x5, x9)\n    x11 = fork(insert, x10, x6)\n    x12 = lbind(recolor, ZERO)\n    x13 = chain(x12, delta, x11)\n    x14 = fork(combine, x11, x13)\n    x15 = fork(position, x5, x6)\n    x16 = chain(toivec, first, x15)\n    x17 = chain(tojvec, last, x15)\n    x18 = compose(normalize, x1)\n    x19 = fork(shift, x18, x17)\n    x20 = fork(difference, x19, x6)\n    x21 = compose(size, x20)\n    x22 = fork(equality, x21, x19)\n    x23 = fork(both, x19, x22)\n    x24 = mfilter(x5, x23)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_f1516369(I):\n    x1 =000000000000000000\n    x2 = branch(connect, ulcorner, urcorner)\n    x3 = x2(x1)\n    x4 = intersection(x3, x2)\n    x5 = fork(equality, identity, hmirror)\n    x6 = extract(x4, x5)\n    x7 = x6(x3)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = vmirror(x8)\n    x11 = vmirror(x9)\n    x12 = ofcolor(I, ONE)\n    x13 = subgrid(x12, I)\n    x14 = trim(x13)\n    x15 = tophalf(x14)\n    x16 = lefthalf(x15)\n    x17 = vmirror(x16)\n    x18 = hmirror(x17)\n    x19 = righthalf(x18)\n    x20 = replace(x19, ONE, SIX)\n    x21 = replace(x20, TWO, SEVEN)\n    x22 = ofcolor(x21, ONE)\n    x23 = replace(x22, THREE, EIGHT)\n    x24 = compress(x23)\n    x25 = delta(x24)\n    O = replace(x24, FOUR, ZERO)\n    return O"], [1.0, "def solve_b96788b9(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = lbind(multiply, contained)\n    x5 = compose(x4, x3)\n    x6 = lbind(gravitate, ZERO)\n    x7 = compose(x6, toivec)\n    x8 = fork(add, identity, x7)\n    x9 = fork(insert, identity, x8)\n    x10 = compose(backdrop, x9)\n    x11 = mapply(x10, x1)\n    O = fill(I, THREE, x11)\n    return O"], [1.0, "def solve_008f810c(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(22, compose, invert, center)\n    x4 = fork(add, height, x3)\n    x5 = compose(decrement, x4)\n    x6 = lbind(position, x2)\n    x7 = fork(shoot, identity, x5)\n    x8 = compose(x6, x7)\n    x9 = fork(difference, x8, identity)\n    x10 = mapply(x9, x1)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_dad4edf9(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = chain(first, fill, inbox)\n    x4 = rbind(mapply, x3)\n    x5 = lbind(lbind, shoot)\n    x6 = compose(x5, x4)\n    x7 = x6(x2)\n    x8 = fill(I, x1, x7)\n    x9 = mapply(x8, x4)\n    O = fill(x9, x1, x6)\n    return O"], [1.0, "def solve_710a5593(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, fork)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, color, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, color, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_334c8917(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(positive, size)\n    x4 = lbind(compose, x3)\n    x5 = chain(x2, x4, mostcolor)\n    x6 = compose(sfilter, x5)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x1, x7)\n    x9 = chain(size, dedupe, first)\n    x10 = size(x8)\n    x11 = equality(x10, ONE)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = objects(x13, T, F, T)\n    x15 = order(x14, leftmost)\n    x16 = apply(color, x15)\n    x17 = repeat(x16, ONE)\n    O = x12(x17)\n    return O"], [1.0, "def solve_1e625be3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_41983a5c(I):\n    x1 = width(I)\n    x2 = objects(I, T, T, T)\n    x3 = astuple(FIVE, fill)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = colorfilter(x2, FIVE)\n    x6 = merge(x5)\n    x7 = cover(I, x6)\n    x8 = compose(toindices, normalize)\n    x9 = apply(x8, x5)\n    x10 = asindices(x4)\n    x11 = ofcolor(x4, ZERO)\n    x12 = ofcolor(x4, TWO)\n    x13 = rbind(multiply, x1)\n    x14 = rbind(multiply, x12)\n    x15 = rbind(intersection, x12)\n    x16 = rbind(intersection, x11)\n    x17 = rbind(intersection, x10)\n    x18 = chain(x13, size, x15)\n    x19 = chain(size, x16, delta)\n    x20 = compose(x14, uppermost)\n    x21 = chain(size, x16, outbox)\n    x22 = chain(x13, size, x17)\n    x23 = compose(invert, x18)\n    x24 = fork(shift, x22, x23)\n    x25 = fork(combine, x21, x24)\n    x26 = mapply(x25, x9)\n    O = fill(x7, ZERO, x26)\n    return O"], [1.0, "def solve_1c9cd7c8(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = power(outbox, TWO)\n    x5 = mapply(x4, x3)\n    x6 = ofcolor(I, TWO)\n    x7 = lbind(adjacent, x6)\n    x8 = apply(x7, x5)\n    x9 = mfilter(x8, vline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, tophalf, lefthalf)\n    O = x12(I)\n    return O"], [1.0, "def solve_5a235723(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    x7 = asindices(x6)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = chain(size, x9, toindices)\n    x11 = matcher(x10, ZERO)\n    x12 = extract(x3, x11)\n    x13 = last(x12)\n    x14 = x12(x13)\n    x15 = fill(I, x3, x14)\n    x16 = box(x7)\n    x17 = difference(x16, x17)\n    x18 = subgrid(x17, x15)\n    O = fill(x15, x3, x18)\n    return O"], [1.0, "def solve_763ead70(I):\n    x1 = fgpartition(I)\n    x2 = matcher(TEN, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_c03753ca(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = identity(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = identity(x10)\n    x13 = ofcolor(x12, x4)\n    x14 = mapply(neighbors, x13)\n    x15 = difference(x1, x14)\n    x16 = toobject(x15, x12)\n    x17 = difference(x1, x16)\n    x18 = rbind(recolor, x6)\n    x19 = mapply(x18, x17)\n    x20 = cover(x7, x19)\n    x21 = ofcolor(x20, x4)\n    x22 = mapply(neighbors, x21)\n    O = fill(x20, x6, x22)\n    return O"], [1.0, "def solve_46cc339e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_c9bc53ad(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_cba31788(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = remove(ZERO, x1)\n    x5 = other(x4, x3)\n    x6 = ofcolor(I, x5)\n    x7 = dmirror(x6)\n    x8 = fill(I, x3, x7)\n    x9 = leftmost(x6)\n    x10 = increment(x9)\n    x11 = rightmost(x6)\n    x12 = decrement(x11)\n    x13 = lbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x6, x16)\n    x18 = increment(x13)\n    x19 = increment(x18)\n    x20 = divide(x17, x19)\n    x21 = increment(x20)\n    x22 = canvas(x35, x21)\n    x23 = shift(x7, x22)\n    x24 = fill(x23, x3, x23)\n    O = x5(x24)\n    return O"], [1.0, "def solve_de1017df(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = compose(x6, urcorner)\n    x8 = fork(recolor, x5, x7)\n    x9 = compose(x5, x8)\n    x10 = fork(connect, x7, x9)\n    x11 = mapply(x10, x3)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_282069bf(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [1.0, "def solve_681e1c60(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x2)\n    x9 = paint(x7, x8)\n    x10 = height(x2)\n    x11 = width(x2)\n    x12 = interval(ZERO, x10, ONE)\n    x13 = interval(ZERO, x11, NEG_ONE)\n    x14 = lbind(shift, x2)\n    x15 = apply(x14, x12)\n    x16 = mapply(x13, x15)\n    O = fill(x9, FOUR, x16)\n    return O"], [1.0, "def solve_f1ca3fbb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = ofcolor(I, TWO)\n    x4 = mapply(vfrontier, x3)\n    x5 = underfill(I, ZERO, x3)\n    x6 = lbind(hfrontier, x5)\n    x7 = compose(x6, initset)\n    x8 = fork(combine, x7, x6)\n    x9 = mapply(x8, x1)\n    O = fill(x5, ZERO, x9)\n    return O"], [1.0, "def solve_0dc3e05f(I):\n    x1 = frontiers(I)\n    x2 = dmirror(I)\n    x3 = papply(pair, I, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cdecrmppaint(x5, x4)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [1.0, "def solve_44318199(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, FOUR, x7)\n    return O"], [1.0, "def solve_7ef78539(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(bordering, toindices)\n    x4 = mfilter(x2, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, THREE, x5)\n    return O"], [1.0, "def solve_7181c06c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(toindices, inbox)\n    x4 = chain(toindices, normalize, x3)\n    x5 = fork(difference, box, x4)\n    x6 = lbind(matcher, x5)\n    x7 = compose(x6, mostcolor)\n    x8 = fork(both, x7, x7)\n    x9 = mfilter(x2, x8)\n    x10 = fill(I, ZERO, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = rbind(adjacent, x8)\n    x13 = mfilter(x11, x12)\n    x14 = toindices(x13)\n    x15 = rbind(manhattan, x5)\n    x16 = chain(even, x15, initset)\n    x17 = sfilter(x14, x16)\n    x18 = difference(x14, x17)\n    x19 = fill(x10, ZERO, x18)\n    O = replace(x19, ONE, ZERO)\n    return O"], [1.0, "def solve_5b66177c(I):\n    x1 = objects(I, T, F, T)\n    x2 = lrcorner(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_76d3b3c4(I):\n    x1 = palette(I)\n    x2 = compose(positive, size)\n    x3 = rbind(sfilter, hline)\n    x4 = chain(x2, x3, frontiers)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = apply(dmirror, x8)\n    x10 = Fgpartition(x7)\n    x11 = merge(x10)\n    x12 = remove(x11, x10)\n    x13 = argmin(x12, size)\n    x14 = delta(x13)\n    x15 = ofcolor(x14, ZERO)\n    x16 = recolor(x13, x15)\n    x17 = shift(x16, ulcorner)\n    O = ulcorner(x17)\n    return O"], [1.0, "def solve_d1b15672(I):\n    x1 = fgpartition(I)\n    x2 = argequality( size, FOUR)\n    x3 = delta(x2)\n    x4 = argmin(x1, uppermost)\n    x5 = other(x1, x4)\n    x6 = uppermost(x5)\n    x7 = color(x6)\n    x8 = lowermost(x5)\n    x9 = greater(x8, x9)\n    x10 = uppermost(x5)\n    x11 = decrement(x10)\n    x12 = branch(x12, x9, x11)\n    x13 = leftmost(x5)\n    x14 = crop(I, x13, x12)\n    x15 = branch(x9, x8, x14)\n    x16 = rightmost(x5)\n    x17 = crop(I, x16, x20)\n    x18 = llcorner(x15)\n    x19 = x18(x15)\n    x20 = x19(x14)\n    x21 = x18(x17)\n    x22 = x18(x204)\n    x23 = fork(add, first, last)\n    x24 = fork(connect, x23, x22)\n    x25 = fork(recolor, x24, x23)\n    x26 = mapply(x25, x20)\n    O = paint(x14, x26)\n    return O"], [1.0, "def solve_68cc941e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_d2403df5(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = ofcolor(I, x2)\n    x4 = asobject(I)\n    x5 = vperiod(x4)\n    x6 = height(I)\n    x7 = halve(x6)\n    x8 = add(x6, x7)\n    x5 = width(I)\n    x4 = astuple(x8, x5)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = astuple(x5, x6)\n    x10 = crop(I, ORIGIN, x9)\n    x11 = compose(x10, last)\n    x12 = fork(recolor, first, x11)\n    x13 = normalize(x3)\n    x14 = mapply(x12, x13)\n    O = paint(x5, x14)\n    return O"], [1.0, "def solve_f841ed99(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_61079ccd(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = ofcolor(I, ONE)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, width, height)\n    x9 = x8(x3)\n    x10 = gravitate(x4, x3)\n    x11 = sign(x10)\n    x12 = multiply(x11, x9)\n    x13 = crement(x12)\n    x14 = recolor(EIGHT, x4)\n    x15 = shift(x14, x13)\n    x16 = paint(I, x15)\n    O = move(x16, x3, x5)\n    return O"], [1.0, "def solve_9fcee016(I):\n    x1 = rot270(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot90(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = fork(combine, vfrontier, hfrontier)\n    x6 = x5(x4)\n    x7 = intersection(x6, x2)\n    x8 = fill(x3, ZERO, x7)\n    O = x5(x8)\n    return O"], [1.0, "def solve_af6061c3(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(recolor, color)\n    x7 = lbind(mapply, vfrontier)\n    x8 = rbind(ofcolor, FIVE)\n    x9 = chain(x7, x8, x6)\n    x10 = mapply(x9, x5)\n    O = underpaint(I, x10)\n    return O"], [1.0, "def solve_99e2841e(I):\n    x1 = width(I)\n    x2 = asobject(I)\n    x3 = hperiod(x2)\n    x4 = height(x2)\n    x5 = astuple(x4, x3)\n    x6 = ulcorner(x2)\n    x7 = crop(I, x6, x5)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, x3)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = merge(x12)\n    x14 = rot270(x13)\n    x15 = astuple(x4, x9)\n    O = crop(x14, ORIGIN, x15)\n    return O"], [1.0, "def solve_47c5ce02(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(increment, merge)\n    x5 = apply(x4, x3)\n    x6 = product(x5, x5)\n    x7 = fork(combine, hfrontier, vfrontier)\n    x8 = apply(x7, x6)\n    x9 = mapply(x8, x8)\n    O = underfill(I, x1, x9)\n    return O"], [1.0, "def solve_fdc09b77(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = chain(x4, x3, initset)\n    x6 = lbind(ofcolor, I)\n    x7 = fork(recolor, x5, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_e49b0b36(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(I)\n    x5 = shape(I)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = rbind(multiply, x5)\n    x9 = apply(x8, x3)\n    x10 = objects(x3, T, F, T)\n    x11 = merge(x10)\n    x12 = shift(x11, TWO)\n    x13 = paint(x7, x12)\n    x14 = argmax(x1, size)\n    x15 = x14(x13)\n    x16 = Fgpartition(x15)\n    x17 = merge(x16)\n    x18 = recolor(x4, x17)\n    x19 = paint(x13, x18)\n    O = paint(x19, x2)\n    return O"], [1.0, "def solve_b69be9e3(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(resfrontier, x2)\n    x4 = box(x2)\n    x5 = difference(x4, x2)\n    x6 = fork(combine, x3, x5)\n    x7 = x6(x2)\n    O = fill(I, x1, x7)\n    return O"], [1.0, "def solve_cfe75078(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_cc339124(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = argmax(x1, x3)\n    x5 = difference(x1, x4)\n    x6 = prapply(equality, x4, x5)\n    x7 = compose(leastcolor, x6)\n    x8 = fork(recolor, x7, identity)\n    x9 = mapply(x8, x6)\n    x10 = paint(I, x9)\n    x11 = interval(ZERO, NINE, ONE)\n    x12 = apply(numcolors, x11)\n    x13 = difference(x1, x12)\n    x14 = toivec(NEG_ONE)\n    x15 = apply(first, x14)\n    x16 = recolor(x12, x15)\n    x17 = lbind(shift, x6)\n    x18 = mapply(x17, x16)\n    O = paint(x10, x18)\n    return O"], [1.0, "def solve_bb05eca6(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(rbind, equality)\n    x3 = rbind(compose, flip)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = fork(sfilter, identity, x4)\n    x6 = fork(difference, identity, x5)\n    x7 = rbind(chain, backdrop)\n    x8 = rbind(x7, x5)\n    x9 = lbind(lbind, contained)\n    x10 = chain(x8, x9, x5)\n    x11 = fork(matcher, x10, x4)\n    x12 = lbind(sfilter, x1)\n    x13 = chain(size, x12, x11)\n    x14 = valmax(x23, x13)\n    x15 = merge(x1)\n    x16 = cover(I, x15)\n    x17 = paint(x16, x14)\n    x18 = fork(multiply, height, width)\n    x19 = chain(positive, decrement, x18)\n    x20 = rbind(sfilter, x19)\n    x21 = chain(merge, x20, x17)\n    x22 = merge(x1)\n    x23 = cover(x17, x22)\n    x24 = chain(x19, first, last)\n    x25 = rbind(shoot,oireVEN)\n    x26 = chain(x24, x25, x19)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, identity, x27)\n    x29 = mapply(x28, x22)\n    O = paint(x17, x29)\n    return O"], [1.0, "def solve_9cbe684e(I):\n    x1 = objects(I, T, F, T)\n    x2 = hmirror(x1)\n    x3 = vmirror(x1)\n    x4 = ofcolor(I, ONE)\n    x5 = subgrid(x4, I)\n    x6 = ofcolor(x5, ONE)\n    x7 = replace(x6, ZERO, THREE)\n    x8 = replace(x7, ONE, ZERO)\n    x9 = compress(x8)\n    x10 = width(x9)\n    x11 = replace(x9, ONE, ZERO)\n    x12 = objects(x11, T, F, T)\n    x13 = merge(x12)\n    x14 = vmirror(x13)\n    x15 = papply(equality, x12, x14)\n    x16 = sfilter(x15, vline)\n    x17 = sfilter(x15, hline)\n    x18 = merge(x16)\n    x19 =valmax(x18, numcolors)\n    x20 = matcher(x18, x19)\n    x21 = extract(x16, x20)\n    x22 = ulcorner(x21)\n    x23 = subgrid(x22, x5)\n    O = hmirror(x23)\n    return O"], [1.0, "def solve_57dfcaf4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_b8d65e03(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, EIGHT, ONE)\n    x3 = astuple(TWO, ONE)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = argmin(x1, uppermost)\n    x6 = apply(uppermost, x4)\n    x7 = fork(subtract, maximum, minimum)\n    x8 = x7(x6)\n    x9 = toivec(x8)\n    x10 = leftmost(x5)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, LEFT, RIGHT)\n    x13 = rbind(shoot, x12)\n    x14 = mapply(x13, x2)\n    x15 = underfill(I, EIGHT, x14)\n    x16 = shift(x2, x9)\n    x17 = mapply(hfrontier, x16)\n    O = underfill(x15, SEVEN, x17)\n    return O"], [1.0, "def solve_fc452c83(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(maximum, shape)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(subtract, x4, normalize)\n    x6 = lbind(colorfilter, x1)\n    x7 = compose(first, x6)\n    x8 = chain(size, x7, x5)\n    x9 = subtract(ONE, x8)\n    x10 = astuple(ONE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = lefthalf(x11)\n    x13 = righthalf(x11)\n    x14 = tophalf(x12)\n    x15 = tophalf(x13)\n    x16 = bottomhalf(x12)\n    x17 = bottomhalf(x13)\n    x18 = astuple(x14, x15)\n    x19 = astuple(x16, x17)\n    x20 = combine(x18, x19)\n    O = paint(x11, x20)\n    return O"], [1.0, "def solve_a175a3d5(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_3e7bfa66(I):\n    x1 = width(I)\n    x2 = asobject(I)\n    x3 = hperiod(x2)\n    x4 = height(x2)\n    x5 = astuple(x4, x3)\n    x6 = ulcorner(x2)\n    x7 = crop(I, x6, x5)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, x3)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = merge(x12)\n    x14 = rot270(x13)\n    x15 = astuple(x4, x9)\n    O = crop(x14, ORIGIN, x15)\n    return O"], [1.0, "def solve_b5fb6618(I):\n    x1 = objects(I, T, T, T)\n    x2 = mapply(bordering, x1)\n    O = cover(I, x2)\n    return O"], [1.0, "def solve_a6681350(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = replace(x2, ONE, ZERO)\n    x4 = lbind(colorfilter, x1)\n    x5 = lbind(rbind, gravitate)\n    x6 = chain(x5, first, x4)\n    x7 = x6(TWO)\n    x8 = first(x1)\n    x9 = color(x8)\n    x10 = asobject(x8)\n    x11 = hperiod(x10)\n    x12 = lbind(shift, x10)\n    x13 = rbind(multiply, x11)\n    x14 = chain(x13, toivec, x12)\n    x15 = mapply(x14, x9)\n    O = paint(x3, x15)\n    return O"], [1.0, "def solve_fd4b6719(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 =ize(x11)\n    x13 = increment(x12)\n    x14 = box(x9)\n    x15 = apply(lowermost, x9)\n    x16 = lbind(shift, x14)\n    x17 = mapply(x16, x15)\n    x18 = rbind(shoot, UP)\n    x19 = mapply(x18, x17)\n    x20 = combine(x13, x19)\n    O = fill(I, x4, x20)\n    return O"], [1.0, "def solve_491c858f(I):\n    x1 = objects(I, T, F, T)\n    x2 = center(x1)\n    x3 = ofcolor(I, x2)\n    x4 = center(x3)\n    x5 = dneighbors(x4)\n    x6 = insert(x2, x5)\n    O = fill(I, SEVEN, x6)\n    return O"], [1.0, "def solve_da8d469b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = palette(I)\n    x4 = mostcolor(I)\n    x5 = remove(x4, x3)\n    x6 = lbind(greater, SEVEN)\n    x7 = compose(x6,52)\n    x8 = sfilter(x5, x7)\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = compose(x6, hmirror)\n    x11 = fork(combine, x9, x10)\n    x12 = apply(x11, x8)\n    x13 = compose(even, x12)\n    x14 = sfilter(x1, x13)\n    x15 = size(x14)\n    x16 = positive(x15)\n    x17 = branch(x16, vsplit, hsplit)\n    x18 = x17(I, TWO)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = palette(x19)\n    x22 = palette(x20)\n    x23 = intersection(x21, x22)\n    x24 = first(x23)\n    x25 = shape(x19)\n    x26 = canvas(x24, x25)\n    x27 = ofcolor(x19, x24)\n    x28 = ofcolor(x20, x24)\n    x29 = intersection(x27, x28)\n    O = fill(x26, TWO, x29)\n    return O"], [1.0, "def solve_7513fb2c(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = rbind(add, UNITY)\n    x4 = chain(x2, x3, lrcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(add, UP_RIGHT)\n    x8 = chain(x6, x7, urcorner)\n    x9 = fork(recolor, color, x8)\n    x10 = rbind(shoot, NEG_UNITY)\n    x11 = rbind(add, NEG_UNITY)\n    x12 = chain(x10, x11, ulcorner)\n    x13 = fork(recolor, color, x12)\n    x14 = rbind(shoot, DOWN_LEFT)\n    x15 = rbind(add, DOWN_LEFT)\n    x16 = chain(x14, x15, llcorner)\n    x17 = fork(recolor, color, x16)\n    x18 = fork(remove, lrcorner, toindices)\n    x19 = fork(equality, toindices, x18)\n    x20 = sfilter(x1, x19)\n    x21 = fork(remove, urcorner, toindices)\n    x22 = fork(equality, toindices, x21)\n    x23 = sfilter(x1, x22)\n    x24 = fork(remove, ulcorner, toindices)\n    x25 = fork(equality, toindices, x24)\n    x26 = sfilter(x1, x25)\n    x27 = fork(remove, llcorner, toindices)\n    x28 = fork(equality, toindices, x27)\n    x29 = sfilter(x1, x28)\n    x30 = mapply(x45, x20)\n    x31 = paint(I, x30)\n    O = fill(x31, ONE, x29)\n    return O"], [1.0, "def solve_1421e81c(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = lbind(recolor, ZERO)\n    x5 = rbind(ofcolor, x2)\n    x6 = chain(x4, x5, outbox)\n    x7 = papply(connect, x3, x6)\n    x8 = fork(either, vline, hline)\n    x9 = mfilter(x7, x8)\n    x10 = underfill(I, x2, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = size(x11)\n    x13 = positive(x12)\n    x14 = branch(x13, identity, hmirror)\n    x15 = x14(x10)\n    x16 = subgrid(x15, x15)\n    x17 = trim(x16)\n    x18 = asobject(x17)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x10, x19)\n    x21 =indices(x20)\n    x22 = vmirror(x21)\n    x23 = hmirror(x22)\n    x24 = mostcolor(I)\n    x25 = shape(x23)\n    x26 = combine(x24, x25)\n    x27 = fill(x20, x23, x26)\n    x28 = asobject(x27)\n    x29 = shift(x28, UNITY)\n    O = paint(x29, x29)\n    return O"], [1.0, "def solve_072218da(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, x1)\n    O = fill(I, TWO, x4)\n    return O"], [1.0, "def solve_57178042(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_dc327e77(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = other(x3, FOUR)\n    x5 = ofcolor(I, x4)\n    x6 = ofcolor(I, FOUR)\n    x7 = center(x5)\n    x8 = center(x6)\n    x9 = subtract(x8, x7)\n    x10 = sign(x9)\n    x11 = recolor(x4, x5)\n    O = move(I, x11, x10)\n    return O"], [1.0, "def solve_26ae66cf(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, hline)\n    x3 = first(x2)\n    x4 = toindices(x3)\n    x5 = difference(x1, x4)\n    x6 = fill(I, NEG_ONE, x5)\n    x7 = lbind(recolor, NEG_ONE)\n    x8 = rbind(ofcolor, NEG_ONE)\n    x9 = chain(x7, backdrop, x8)\n    x10 = fork(paint, identity, x9)\n    x11 = apply(x10, x5)\n    x12 = merge(x11)\n    x13 = mapply(x7, x12)\n    O = fill(x6, EIGHT, x13)\n    return O"], [1.0, "def solve_60ca779a(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, hmirror)\n    x8 = compose(flip, x3)\n    x9 = rbind(sfilter, x8)\n    x10 = chain(first, x9, leftmost)\n    x11 = apply(x10, x4)\n    x12 = ZERO(x11)\n    x13 = tojvec(x12)\n    x14 = prapply(shift, x4, x13)\n    x15 = branch(x6, identity, vmirror)\n    x16 = x15(I)\n    x17 = x15(I)\n    x18 = objects(x16, T, T, T)\n    x19 = subgrid(x18, x16)\n    x20 = mostcolor(x19)\n    x21 = colorfilter(x18, x20)\n    x22 = rbind(shoot, DOWN)\n    x23 = objects(x16, T, T, T)\n    x24 = rbind(x22, DOWN)\n    x25 = lbind(fork, intersection)\n    x26 = lbind(lbind, shift)\n    x27 = compose(x25, x26)\n    x28 = lbind(rbind, adjacent)\n    x29 = compose(x8, x27)\n    x30 = fork(extract, x28, x29)\n    x31 = compose(x3, x30)\n    x32 = fork(remove, x31, x30)\n    x33 = mapply(x32, x211)\n    x34 = fill(x16, x20, x33)\n    x35 =recolor(x34, x20)\n    O = x7(x35)\n    return O"], [1.0, "def solve_1f1b6b4f(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_270d5fcb(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_b8a44cfb(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = leastcolor(x2)\n    x4 = ofcolor(I, x3)\n    x5 = partition(I)\n    x6 = difference(x5, x4)\n    x7 = fork(combine, hfrontier, vfrontier)\n    x8 = mapply(x7, x6)\n    O = fill(I, x3, x8)\n    return O"], [1.0, "def solve_1f1575df(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(velta, x1)\n    O = fill(I,777, x2)\n    return O"], [1.0, "def solve_0fcc9e4f(I):\n    x1 = objects(I, F, F, T)\n    x2 = objects(I,208, DOWN)\n    x3 = first(x1)\n    x4 = rbind(subgrid, I)\n    x5 = apply(x4, x3)\n    x6 = mapply(tophalf, x5)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = occurrences(x11, x5)\n    x13 = combine(x12, x5)\n    O = fill(x11, EIGHT, x13)\n    return O"], [1.0, "def solve_ffe09156(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, THREE)\n    x3 = compose(x2, size)\n    x4 = sfilter(x1, x3)\n    x5 = apply(toindices, x4)\n    x6 = rbind(lessmin, ORIGIN)\n    x7 = compose(x6, size)\n    x8 = sfilter(x5, x7)\n    x9 = compose(vline, asindices)\n    x10 = fork(both, x8, x9)\n    x11 = mfilter(x10, x9)\n    O = fill(I, FOUR, x11)\n    return O"], [1.0, "def solve_b0308079(I):\n    x1 = leastcolor(I)\n    x2 = astuple(dmirror, cmirror)\n    x3 = astuple(hmirror, identity)\n    x4 = combine(x2, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x1)\n    x8 = chain(lowermost, x7, x6)\n    x9 = chain(decrement, height, x6)\n    x10 = fork(equality, x8, x9)\n    x11 = extract(x4, x10)\n    x12 = x11(I)\n    x13 = ofcolor(x12, x1)\n    x14 = shift(x13, UP)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(x12, x1, x19)\n    O = x11(x20)\n    return O"], [1.0, "def solve_c59996da(I):\n    x1 = ofcolor(I, TWO)\n    x2 = lbind(add,ZERO)\n    x3 = rbind(x2, x1)\n    x4 = compose(x3, llcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = add(ZERO, THREE)\n    x9 = rbind(add, x8)\n    x10 = compose(x9, tophalf)\n    x11 = fgpartition(x7)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(x13, x13)\n    x15 = shift(x12, x14)\n    x16 = toindices(x15)\n    x17 = rbind(toobject, x15)\n    x18 = lbind(contained, x16)\n    x19 = compose(x18, palette)\n    x20 = product(x61, x15)\n    x21 =flip(x19, x20)\n    x22 = sfilter(x21, x19)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = difference(x22, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x24, x27)\n    x29 = rbind(toobject, x17)\n    x30 = chain(x29, backdrop, first)\n    x31 = fork(combine, x27, x30)\n    x32 = mapply(x31, x28)\n    O = paint(x7, x32)\n    return O"], [1.0, "def solve_95baf20c(I):\n    x1 = objects(I, T, F, T)\n    x2 = shape(I)\n    x3 = normalize(x1)\n    x4 = lbind(shift, x3)\n    x5 = compose(x4, ulcorner)\n    x6 = paint(I, x5)\n    x7 = compose(x4, llcorner)\n    x8 = apply(x7, x1)\n    O = rot90(x8)\n    return O"], [1.0, "def solve_1e776254(I):\n    x1 = objects(I, F, F, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(first, totuple, palette)\n    x6 = chain(last, contraryly, x5)\n    x7 = lbind(matcher, first)\n    x8 = compose(x7, x6)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, x6)\n    x11 = fork(sfilter, identity, x8)\n    x12 = fork(sfilter, identity, x10)\n    x13 = lbind(occurrences, I)\n    x14 = chain(invert, ulcorner, x11)\n    x15 = chain(invert, ulcorner, x12)\n    x16 = lbind(lbind, shift)\n    x17 = fork(shift, identity, x14)\n    x18 = fork(shift, identity, x15)\n    x19 = compose(x16, x17)\n    x20 = compose(x13, x11)\n    x21 = fork(mapply, x19, x20)\n    x22 = compose(x16, x18)\n    x23 = compose(x13, x12)\n    x24 = fork(mapply, x22, x23)\n    x25 = fork(combine, x21, x24)\n    x26 = mapply(x25, x4)\n    O = paint(I, x26)\n    return O"], [1.0, "def solve_19d58749(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_b77e8582(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ONE)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_a5c984a5(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, FIVE, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_930e2c51(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_b5777822(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(rbind, subtract)\n    x3 = compose(x2, llcorner)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX,SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [1.0, "def solve_e00481e7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_89eeb5f1(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_060e8ad8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 =armax(x9, x8)\n    x11 = commitmi(x10)\n    x12 = objects(I, T, T, T)\n    x13 = colorfilter(x12, x4)\n    x14 = difference(x12, x13)\n    x15 = subgrid(x13, I)\n    x16 = colorfilter(x14, x4)\n    x17 = rbind(toobject, x15)\n    x18 = lbind(e349, x17)\n    x19 = chain(x18, palette, outbox)\n    x20 = x19(x15)\n    x21 = x19(x16)\n    x22 = x19(x20)\n    x23 = colorfilter(x16, x4)\n    x24 = rbind(subgrid, x15)\n    x25 = chain(x24, corners, outbox)\n    x26 = rbind(argmax, x25)\n    x27 = subgrid(x13, x15)\n    x28 = apply(x26, x23)\n    x29 = mapply(x25, x28)\n    x30 = fill(x27, x4, x29)\n    O = replace(x30, x4, x5)\n    return O"], [1.0, "def solve_755ab1a6(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = colorcount(I, ZERO)\n    x5 = dmirror(I)\n    x6 = repeat(x5, x3)\n    x7 = dmirror(I)\n    x8 = shape(x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x4, x4)\n    x11 = subtract(x10, x3)\n    x12 = repeat(x9, x11)\n    x13 = combine(x6, x12)\n    x14 = merge(x13)\n    x15 = dmirror(x14)\n    x16 = hsplit(x15, x4)\n    O = merge(x16)\n    return O"], [1.0, "def solve_7d77834a(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, hmirror)\n    x9 = branch(x6, index, ZERO)\n    x10 = branch(x6, width, ZERO)\n    x11 = x7(x10)\n    x12 = x7(x11)\n    x13 = hconcat(x7, x12)\n    x14 = hconcat(x13, x1)\n    x15 =O = vconcat(x9, x14)\n    x16 = vconcat(x15, x1)\n    O = replace(x16, ZERO, EIGHT)\n    return O"], [1.0, "def solve_6dc34796(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = fill(I, THREE, x1)\n    x3 = replace(x2, EIGHT, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x8)\n    x10 = fill(x3, x4, x9)\n    x11 = apply(x4, x10)\n    x12 = ofcolor(x11, EIGHT)\n    x13 = rbind(adjacent, x12)\n    x14 = mfilter(x12, x13)\n    x15 = fill(x11, x4, x14)\n    x16 = apply(x4, x12)\n    x17 = rbind(adjacent, x16)\n    x18 = mfilter(x61, x17)\n    x19 = fill(x15, x4, x18)\n    O = fill(x19, x4, x5)\n    return O"], [1.0, "def solve_a28596c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = apply(x4, x3)\n    x6 = sfilter(x5, x4)\n    x7 = fork(hmatching, first, last)\n    x8 = apply(x7, x6)\n    x9 = sfilter(x8, x7)\n    x10 = fork(either, vline, hline)\n    x11 = sfilter(x9, x10)\n    x12 = compose(center, first)\n    x13 = compose(center, last)\n    x14 = fork(either, x12, x13)\n    x15 = compose(color, first)\n    x16 = compose(color, last)\n    x17 = fork(equality, x15, x16)\n    x18 = pair(x5, x6)\n    x19 = extract(x18, x17)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = double(TEN)\n    x24 = interval(ZERO, x23, ONE)\n    x25 = combine(x20, x24)\n    x26 = product(x25, x25)\n    x27 = lbind(multiply, x25)\n    x28 = apply(x27, x26)\n    x29 = lbind(shift, x25)\n    x30 = mapply(x29, x28)\n    x31 = paint(I, x30)\n    O = trim(x31)\n    return O"], [1.0, "def solve_12037421(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_cdcd5207(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(llcorner, x1)\n    x3 = shift(x2, UNITY)\n    x4 = paint(I, x3)\n    x5 = mapply(x2, x1)\n    O = paint(x4, x5)\n    return O"], [1.0, "def solve_680ceeae(I):\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = compose(initset, lbind)\n    x4 = fork(rapply, x3, palette)\n    x5 = compose(first, x4)\n    x6 = compose(backdrop, x5)\n    x7 = fork(recolor, x6, mostcolor)\n    x8 = mapply(x7, x2)\n    x9 = combine(x8, x7)\n    x10 = shape(I)\n    x11 = difference(x10, x9)\n    x12 = paint(I, x11)\n    x13 = rot90(x12)\n    x14 = rot180(x12)\n    x15 = rot270(x12)\n    x16 = initset(x13)\n    x17 = compose(toindices, x16)\n    x18 = fork(add, x17, last)\n    x19 = compose(flip, x18)\n    x20 = extract(x19, x14)\n    x21 = remove(x20, x19)\n    x22 = first(x21)\n    x23 = argmax(x22, last)\n    x24 = ulcorner(x20)\n    x25 = llcorner(x20)\n    x26 = urcorner(x20)\n    x27 = ulcorner(x20)\n    x28 = shoot(x22, x24)\n    x29 = shoot(x22, x25)\n    x30 = shoot(x27, x28)\n    x31 = shoot(x22, x30)\n    x32 = first(x23)\n    x33 = rbind(shoot, x31)\n    x34 = mapply(x33, x30)\n    x35 = other(x22, x28)\n    x36 = x35(x22)\n    x37 = mapply(x34, x32)\n    x38 = underpaint(x12, x37)\n    O = fill(x38, x35, x36)\n    return O"], [1.0, "def solve_89746dbd(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(color, x2)\n    x4 = difference(x1, x2)\n    x5 = apply(color, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = ofcolor(I, x7)\n    x10 = rbind(shoot, UNITY)\n    x11 = rbind(shoot, NEG_UNITY)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = fork(combine, x10, x11)\n    x15 = fork(combine, x12, x13)\n    x16 = fork(combine, x14, x15)\n    x17 = compose(x16, center)\n    x18 = mapply(x17, x2)\n    x19 = intersection(x8, x18)\n    x20 = intersection(x9, x18)\n    x21 = first(x2)\n    x22 = color(x21)\n    x23 = center(x21)\n    x24 = neighbors(x23)\n    x25 = toobject(x24, I)\n    x26 = mostcolor(x25)\n    x27 = other(x3, x22)\n    x28 = equality(x26, x6)\n    x29 = branch(x28, x22, x27)\n    x30 = branch(x28, x27, x22)\n    x31 = fill(I, x29, x19)\n    O = fill(x31, x30, x20)\n    return O"], [1.0, "def solve_dd4e351b(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = astuple(UP, x4)\n    x6 = connect(ZERO_BY_TWO, x5)\n    x7 = asindices(I)\n    x8 = ofcolor(I, ZERO)\n    x9 = difference(x7, x8)\n    x10 = astuple(x5, x6)\n    x11 = combine(x9, x10)\n    x12 = rbind(difference, x11)\n    x13 = compose(x12, toindices)\n    x14 = rbind(greater, ONE)\n    x15 = compose(x14, x13)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(recolor, ZERO)\n    x18 = compose(x17, x16)\n    x19 = chain(x32, x18, color)\n    x20 = mapply(x19, x4)\n    x21 = paint(I, x20)\n    O = replace(x21, ZERO, EIGHT)\n    return O"], [1.0, "def solve_cfedb607(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x2, x3)\n    x5 = fill(I, ONE, x4)\n    x6 = merge(x2)\n    x7 = chain(hmirror, vmirror, dmirror)\n    x8 = x7(x6)\n    x9 = fill(x5, ONE, x8)\n    O = replace(x9, EIGHT, ONE)\n    return O"], [1.0, "def solve_b3c96dde(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, EIGHT)\n    x3 = vmirror(x2)\n    x4 = vconcat(x3, x1)\n    x5 = hmirror(x4)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_cfa0cf5d(I):\n    x1 = width(I)\n    x2 = dedupe(I)\n    x3 = size(x2)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = divide(x5, x4)\n    x7 = astuple(x6, x5)\n    x8 = connect(ORIGIN, x7)\n    x9 = insert(ORIGIN, x8)\n    x10 = branch(x4, x9, x8)\n    x11 =PLEpply(x10, x11)\n    x12 = compose(merge, x11)\n    x13 = mapply(x12, x11)\n    x14 = fill(I, EIGHT, x13)\n    x15 = index(I, ORIGIN)\n    x16 = width(I)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = apply(double, x17)\n    x19 = apply(color, x18)\n    x20 = x15(x19)\n    x21 = lbind(recolor, EIGHT)\n    x22 = apply(x21, x20)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(x14, EIGHT, x24)\n    return O"], [1.0, "def solve_e12d22fb(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_1eec7ca3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [1.0, "def solve_538aaf2a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(shoot, DOWN)\n    x5 = compose(x4, llcorner)\n    x6 = mapply(x5, x3)\n    x7 = fill(I, FOUR, x6)\n    x8 = add(SIX, DOWN)\n    x9 = power(double, TWO)\n    x10 = connect(x8, x9)\n    x11 = apply(x5, x10)\n    x12 = lbind( fill, TWO)\n    x13 = mapply(x12, x11)\n    O = fill(x7, FOUR, x13)\n    return O"], [1.0, "def solve_b53766d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(compose, flip)\n    x5 = lbind(matcher, first)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(dmirror, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = palette(I)\n    x10 = compose(vmirror, x6)\n    x11 = fork(shift, x10, x7)\n    x12 = compose(hmirror, x6)\n    x13 = fork(shift, x12, x7)\n    x14 = fork(combine, x18, x11)\n    x15 = fork(combine, x14, x13)\n    x16 = fork(combine, x15, x9)\n    x17 = mapply(x16, x1)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_3b5331ec(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_0422e584(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = apply(x5, x2)\n    x7 = compose(normalize, toindices)\n    x8 = difference(x2, x6)\n    x9 = toindices(x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(x10, initset)\n    x12 = extract(x11, x7)\n    x13 = totuple(x12)\n    x14 = center(x12)\n    x15 =(x7)\n    x16 = rot90(x14)\n    x17 = normalize(x16)\n    x18 = rot180(x14)\n    x19 = normalize(x18)\n    x20 = occurrences(I, x13)\n    x21 =sfilter(x20, x17)\n    x22 = size(x21)\n    x23 = positive(x22)\n    x24 = branch(x23, x8, x9)\n    x25 = multiply(x24, x4)\n    x26 = branch(x23, x9, x25)\n    O = canvas(x25, x26)\n    return O"], [1.0, "def solve_afa3e338(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_80eda24c(I):\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = shoot(x4, x8)\n    x10 = rbind(shoot, LEFT)\n    x11 = decrement(x2)\n    x12 = rbind(shoot, x11)\n    x13 = chain(x10, x12, tojvec)\n    x14 = rbind(shoot, x13)\n    x15 = decrement(x2)\n    x16 = rbind(shoot, x15)\n    x17 = chain(x14, x16, toivec)\n    x18 = lbind(mapply, initset)\n    x19 = chain(x7, x18, ZERO)\n    x20 = apply(x19, x3)\n    x21 = mapply(x17, x20)\n    x22 = cover(I, x21)\n    O = fill(x22, ONE, x3)\n    return O"], [1.0, "def solve_3f8351f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(last, x1)\n    x3 = compose(hfrontier, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = rot90(x6)\n    x8 = rot180(x6)\n    x9 = rot270(x6)\n    x10 = apply(x3, x7)\n    x11 = apply(x3, x8)\n    x12 = pair(x10, x11)\n    x13 = mapply(box, x12)\n    O = fill(x6, EIGHT, x13)\n    return O"], [1.0, "def solve_0a02c2cb(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(increment, double)\n    x5 = argmin(x3, x4)\n    x6 = argmax(x3, x4)\n    x7 = remove(x5, x3)\n    x8 = other(x7, x6)\n    x9 = switch(I, x8, x7)\n    x10 = joint(x5, FOUR)\n    x11 = argmax(x10, size)\n    x12 = difference(x5, x11)\n    x13 = fill(x9, ZERO, x12)\n    x14 = normalize(x11)\n    x15 = lbind(shift, x14)\n    x16 = height(x31)\n    x17 = width(x31)\n    x18 = interval(ZERO, x16, ONE)\n    x19 = interval(ZERO, x17, ZERO)\n    x20 = product(x18, x19)\n    x21 = apply(invert, x20)\n    x22 = apply( loweringcommon, x21)\n    x23 = apply(toivec, x22)\n    x24 = shift(x23, x16)\n    x25 = fork(combine, vfrontier, hfrontier)\n    x26 = x25(x26)\n    x27 = mapply(x25, x24)\n    x28 = paint(x27, x27)\n    O = fill(x28, ZERO, x1)\n    return O"], [1.0, "def solve_bb09d63f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = compose(color, x3)\n    x5 = mapply(x4, x3)\n    x6 = objects(I, T, F, T)\n    x7 = compose(dmirror, x6)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = fill(I, x4, x9)\n    x11 = compose(hmirror, x7)\n    x12 = fill(x10, x4, x11)\n    x13 = objects(x12, T, F, T)\n    x14 = compose(vmirror, x7)\n    x15 = fill(x12, x14, x13)\n    x16 = fork(hmirror, x15, x7)\n    x17 = halve(x5)\n    x18 = invert(x17)\n    x19 = shift(x9, x18)\n    x20 = apply(x16, x19)\n    x21 = rbind(contained, x20)\n    x22 = compose(x21, last)\n    x23 = sfilter(x13, x22)\n    x24 = sfilter(xEIGHT, x22)\n    x25 = dmirror(x23)\n    x26 = sfilter(x25, x22)\n    x27 = merge(x26)\n    x28 = fill(x11, x4, x27)\n    x29 = paint(x28, x29)\n    O = replace(x29, FIVE, ZERO)\n    return O"], [1.0, "def solve_28abd90e(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, EIGHT)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, box, box)\n    x6 = x5(x4)\n    x7 = compose(normalize, inbox)\n    x8 = x7(x6)\n    x9 = box(x8)\n    x10 = center(x9)\n    x11 = x7(x10)\n    x12 = toobject(x11, I)\n    x13 = chain(outbox, last, first)\n    x14 = compose(x12, x13)\n    x15 = mapply(x14, x11)\n    x16 = fill(I, ONE, x15)\n    x17 = replace(x16, EIGHT, ZERO)\n    O = replace(x17, ONE, x15)\n    return O"], [1.0, "def solve_7046ef72(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = mostcolor(x4)\n    x6 = last(x4)\n    x7 = remove(x6, x4)\n    x8 = repeat(x5, x7)\n    x9 = combine(x3, x8)\n    x10 = mpapply(recolor, x9, x3)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_20663ed8(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = power(outbox, TWO)\n    x4 = power(outbox, THREE)\n    x5 = fill(I, THREE, x2)\n    x6 = fill(x5, FOUR, x3)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x4)\n    O = fill(x6, TWO, x8)\n    return O"], [1.0, "def solve_10fc4b3a(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(recolor, TWO)\n    x3 = chain(x2, color, color)\n    x4 = mapply(x3, x1)\n    x5 = fork(combine, vfrontier, hfrontier)\n    x6 = mapply(x5, x4)\n    x7 = paint(I, x6)\n    O = fill(x7, EIGHT, x3)\n    return O"], [1.0, "def solve_9d9bc580(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = colorcount(I, ZERO)\n    x5 = dmirror(I)\n    x6 = repeat(x5, x3)\n    x7 = dmirror(I)\n    x8 = shape(x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x4, x4)\n    x11 = apply(x9, x10)\n    x12 = ofcolor(x7, x2)\n    x13 = lbind(shift, x12)\n    x14 = mapply(x13, x11)\n    O = paint(x9, x14)\n    return O"], [1.0, "def solve_8979eb5e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = gravitate(x10, x15)\n    x17 = compose(first, first)\n    x18 =add(first, x16)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x2)\n    O = paint(x6, x21)\n    return O"], [1.0, "def solve_17525458(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_7fd71282(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_ed9ce601(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = objects(I, T, F, T)\n    x13 = merge(x12)\n    x14 = cover(I, x13)\n    x15 = mapply(x11, x22)\n    O = paint(x14, x15)\n    return O"], [1.0, "def solve_b4f1207e(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = mapply(delta, x6)\n    O = fill(x5, ZERO, x7)\n    return O"], [1.0, "def solve_debc91ba(I):\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(shift, x8)\n    x10 = chain(x7, x9, x5)\n    x11 = compose(x5, x10)\n    x12 = fork(combine, x11, x11)\n    x13 = compose(x12, x5)\n    x14 = lbind(occurrences, I)\n    x15 = rbind(rapply, x14)\n    x16 = chain(initset, x15, x13)\n    x17 = fork(rapply, x16, x5)\n    x18 = compose(x15, x17)\n    x19 = mapply(x18, x9)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_c65c5ea8(I):\n    x1 = shape(I)\n    x2 = multiply(x1, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = lbind(multiply, x1)\n    x7 = apply(x6, x5)\n    x8 = asobject(I)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x7)\n    O = paint(x3, x10)\n    return O"], [1.0, "def solve_efb3a6ce(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = argmin(x5, x2)\n    x7 = other(x5, x6)\n    x8 = color(x7)\n    x9 = palette(I)\n    x10 = insert(x8, x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x8)\n    x18 = inbox(x17)\n    x19 = subgrid(x18, x16)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = fgpartition(x21)\n    x23 = argmax(x22, last)\n    x24 = remove(x23, x22)\n    x25 = subgrid(x24, x16)\n    x26 = frontiers(x25)\n    x27 = sfilter(x26, vline)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, identity, dmirror)\n    x31 = x30(x16)\n    x32 = ofcolor(x31, x8)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = matcher(first, x8)\n    x36 = compose(flip, x35)\n    x37 = sfilter(x33, x36)\n    x38 = ZERO(x37)\n    x39 = shift(x34, x38)\n    x40 = paint(x16, x39)\n    O = x30(x40)\n    return O"], [1.0, "def solve_7d6f4984(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, branch)\n    x6 = branch(x4, identity, x5)\n    x7 = subtract(x6, DOWN)\n    x8 = add(x6, x7)\n    x9 = branch(x4, identity, x8)\n    x10 = branch(x4, identity, x9)\n    x11 = subtract(x10, UP)\n    x12 = add(x11, x11)\n    x13 = shape(x3)\n    x14 = canvas(ZERO, x13)\n    x15 = normalize(x3)\n    x16 = objects(x14, T, F, T)\n    x17 = color(x15)\n    x18 = palette(x15)\n    x19 = remove(x17, x18)\n    x20 = lbind(colorcount, x14)\n    x21 = argmin(x19, x20)\n    x22 = objects(x14, T, F, T)\n    x23 = colorfilter(x22, x21)\n    x24 = rbind(toobject, x14)\n    x25 = chain(first, x24, palette)\n    x26 = rbind(colorcount, x21)\n    x27 = rightmost(x16)\n    x28 = leftmost(x16)\n    x29 = subtract(x27, x28)\n    x30 = chain(x19, x27, x29)\n    x31 = paint(x14, x6)\n    x32 = normalize(x15)\n    x33 = lbind(shift, x31)\n    x34 = rbind(ofcolor, x21)\n    x35 = compose(x33, x34)\n    x36 = compose(x32, x35)\n    x37 = apply(x36, x32)\n    O = paint(x31, x37)\n    return O"], [1.0, "def solve_3e33a9cc(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(objects, F)\n    x4 = compose(x3, palette)\n    x5 = rbind(x4, T)\n    x6 = lbind(canvas, x1)\n    x7 = compose(x6, shape)\n    x8 = fork(paint, x7, normalize)\n    x9 = compose(x5, x8)\n    x10 = fork(colorfilter, x9, color)\n    x11 = rbind(shift, RIGHT)\n    x12 = rbind(argmax, rightmost)\n    x13 = compose(x12, x10)\n    x14 = fork(remove, x13, x10)\n    x15 = chain(x11, merge, x14)\n    x16 = rbind(argmax, rightmost)\n    x17 = compose(x16, x10)\n    x18 = fork(combine, x17, x15)\n    x19 = fork(shift, x18, ulcorner)\n    x20 = merge(x2)\n    x21 = fill(I, x1, x20)\n    x22 = mapply(x19, x2)\n    O = paint(x21, x22)\n    return O"], [1.0, "def solve_f2eb2a15(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    x3 = normalize(x2)\n    x4 = upscale(x3, TWO)\n    x5 = objects(I, T, T, T)\n    x6 = apply(toindices, x5)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, TWO, x8)\n    x10 = hmirror(x9)\n    x11 = ulcorner(x2)\n    x12 = lbind(shift, x11)\n    x13 = mapply(x12, x10)\n    x14 = fill(x9, TWO, x13)\n    x15 = vmirror(x2)\n    x16 = objects(x14, T, T, T)\n    x17 = apply(toindices, x16)\n    x18 = lbind(shift, x4)\n    x19 = mapply(x18, x17)\n    x20 = fill(x14, TWO, x19)\n    x21 = paint(x20, x17)\n    x22 = objects(x21, T, T, T)\n    x23 = first(x22)\n    x24 = shift(x8, x23)\n    x25 = paint(x21, x24)\n    x26 = normalize(x24)\n    x27 = lbind(shift, x26)\n    x28 = mapply(x27, x24)\n    O = paint(x25, x28)\n    return O"], [1.0, "def solve_16c20dea(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31, branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [1.0, "def solve_dc000446(I):\n    x1 = mostcolor(I)\n    x2 = colorcount(I, x1)\n    x3 = height(I)\n    x4 = width(I)\n    x5 = multiply(x3, x4)\n    x6 = subtract(x5, x2)\n    O = upscale(I, x6)\n    return O"], [1.0, "def solve_0a4b5ee8(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x8)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [1.0, "def solve_f2f788fe(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = multiply(x2, FIVE)\n    x4 = astuple(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    x10 = paint(x5, x9)\n    O = hmirror(x10)\n    return O"], [1.0, "def solve_59b93720(I):\n    x1 = shape(I)\n    x2 = fork(multiply, height, width)\n    x3 = objects(I, F, F, T)\n    x4 = argmax(x3, x2)\n    x5 = remove(x4, x3)\n    x6 = lbind(chain, positive)\n    x7 = lbind(x6, size)\n    x8 = rbind(compose, backdrop)\n    x9 = lbind(lbind, intersection)\n    x10 = chain(x7, x8, x9)\n    x11 = apply(x10, x5)\n    x12 = lbind(adjacent, x4)\n    x13 = remove(x12, x5)\n    x14 = extract(x13, x12)\n    x15 = color(x14)\n    x16 = lbind(recolor, x15)\n    x17 = rbind(ofcolor, x15)\n    x18 = chain(x16, x17, lrcorner)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = ofcolor(x21, x15)\n    x23 = urcorner(x22)\n    x24 = shoot(x23, UP_RIGHT)\n    x25 = shoot(x23, DOWN_LEFT)\n    x26 = combine(x24, x25)\n    x27 = intersection(x26, x22)\n    O = fill(I, THREE, x27)\n    return O"], [1.0, "def solve_bc00841b(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = colorcount(I, ZERO)\n    x5 = dmirror(I)\n    x6 = repeat(x5, x3)\n    x7 = dmirror(I)\n    x8 = shape(x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x4, x4)\n    x11 = subtract(x10, x3)\n    x12 = repeat(x9, x11)\n    x13 = combine(x6, x12)\n    x14 = merge(x13)\n    x15 = dmirror(x14)\n    x16 = hsplit(x15, x4)\n    O = merge(x16)\n    return O"], [1.0, "def solve_5a65c260(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_062555d4(I):\n    x1 = width(I)\n    x2 = asobject(I)\n    x3 = hperiod(x2)\n    x4 = height(x2)\n    x5 = astuple(x4, x3)\n    x6 = ulcorner(x2)\n    x7 = crop(I, x6, x5)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, x3)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = merge(x12)\n    x14 = rot270(x13)\n    x15 = astuple(x4, x9)\n    O = crop(x14, ORIGIN, x15)\n    return O"], [1.0, "def solve_b467385d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(I)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = ulcorner(x8)\n    x11 = ulcorner(x9)\n    x12 = subgrid(x11, I)\n    x13 = subtract(x10, DOWN)\n    x14 = SUBjvec(x13)\n    x15 = numcolors(x14)\n    x16 = equality(x15, ZERO)\n    x17 = branch(x16, x12, x11)\n    x18 = multiply(x17, x15)\n    x19 = shift(x17, x18)\n    x20 = difference(x19, x15)\n    x21 = vmirror(x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, x4)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x24, x24)\n    x26 = paint(x21, x25)\n    x27 = replace(x26, x4, x5)\n    O = replace(x27, x9, x6)\n    return O"], [1.0, "def solve_12bbcb50(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x19(x16, x17)\n    return O"], [1.0, "def solve_4a8f474c(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = branch(x24, vsplit, hsplit)\n    x26 = x25(I, TWO)\n    x27 = first(x26)\n    x28 = last(x26)\n    x29 = width(x27)\n    x30 = astuple(x29, x25)\n    x31 = branch(x24, divide, x30)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(tojvec, x33)\n    x35 = apply(x14, x34)\n    x36 = mpapply(recolor, x35, x31)\n    O = paint(x3, x36)\n    return O"], [1.0, "def solve_e36f8abc(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = fork(equality, toindices, box)\n    x4 = sfilter(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = compose(hfrontier, center)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x4)\n    x9 = paint(I, x8)\n    x10 = replace(x9, x5, x6)\n    x11 = replace(x10, x5, x6)\n    x12 = ofcolor(x11, x5)\n    x13 = other(x12, x12)\n    x14 = ofcolor(x11, x5)\n    x15 = difference(x12, x14)\n    x16 = rbind(gravitate, x13)\n    x17 = compose(x16, initset)\n    x18 = fork(add, identity, x17)\n    x19 = fork(connect, identity, x18)\n    x20 = height(x11)\n    x21 = subtract(x20, TWO)\n    x22 = insert(x20, x21)\n    x23 = colorcount(x11, x5)\n    x24 = shift(x22, x23)\n    O = fill(x9, x13, x24)\n    return O"], [1.0, "def solve_91aaea15(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_b0b7d0b4(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_45d4bd58(I):\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(most, x3)\n    x11 = rbind(shoot, UP_RIGHT)\n    x12 = chain(x5, x11, x9)\n    x13 = apply(most, x4)\n    x14 = rbind(remove, x13)\n    x15 = chain(x5, x14, toivec)\n    x16 = apply(x15, x11)\n    x17 = fork(combine, x7, x10)\n    x18 = fork(combine, x11, x12)\n    x19 = fork(combine, x17, x18)\n    x20 = multiply(x2, TEN)\n    x21 = rbind(multiply, x20)\n    x22 = chain(x2, x21, last)\n    x23 = fork(apply, x19, x22)\n    x24 = x23(x2)\n    x25 = halve(x24)\n    x26 = last(x5)\n    x27 = tojvec(x26)\n    x28 = rbind(multiply, x25)\n    x29 = compose(x28, last)\n    x30 = apply(x27, x3)\n    x31 = argmax(x30, x29)\n    x32 = x31(x2)\n    x33 = center(x3)\n    x34 = ofcolor(I, x31)\n    x35 = mapply(neighbors, x34)\n    x36 = difference(x35, x32)\n    O = fill(I, ONE, x36)\n    return O"], [1.0, "def solve_21a1156f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_17625723(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(c909, toindices)\n    x12 = fork(difference, x11, x10)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_ee532b42(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = mapply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = mapply(lrcorner, x1)\n    x6 = shift(x3, NEG_UNITY)\n    x7 = shift(x4, UP_RIGHT)\n    x8 = shift(x5, DOWN_LEFT)\n    x9 = combine(x6, x7)\n    x10 = fill(I, ONE, x9)\n    x11 = paint(x10, x3)\n    O = paint(x11, x8)\n    return O"], [1.0, "def solve_6db19360(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = height(I)\n    x5 = width(I)\n    x6 = toivec(x4)\n    x7 = tojvec(x5)\n    x8 = add(x7, ZERO_BY_TWO)\n    x9 = add(x6, TWO_BY_ZERO)\n    x10 = shift(x3, x8)\n    x11 = fill(I, x3, x10)\n    x12 = ofcolor(x11, x5)\n    x13 = recolor(x12, x111)\n    O = paint(x11, x13)\n    return O"], [1.0, "def solve_705d3a3d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = interval(ONE, NINE, ONE)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = rbind(colorcount, x7)\n    x9 = argmin(x6, x8)\n    x10 = increment(x9)\n    x11 = rbind(colorcount, x7)\n    x12 = matcher(x11, x10)\n    x13 = rightmost(x4)\n    x14 = leftmost(x4)\n    x15 = color(x4)\n    x16 = astuple(x13, x14)\n    x17 = double(x16)\n    x18 = interval(ONE, x17, ONE)\n    x19 = lbind(tojvecivec, x7)\n    x20 = invert(x13)\n    x21 = flip(x12)\n    x22 = branch(x21, x19, x20)\n    x23 = compose(x9, x22)\n    x24 = ofcolor(I, x7)\n    x25 = jvec(x10)\n    x26 = shift(x24, x25)\n    x27 = rbind(shoot, x26)\n    x28 = mapply(x27, x23)\n    x29 = fill(I, x7, x28)\n    O = underfill(x29, x7, x23)\n    return O"], [1.0, "def solve_6b926c3d(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_f86403d8(I):\n    x1 = partition(I)\n    x2 = size(x1)\n    x3 = FOUR(I)\n    x4 = interval(FOUR, x3, FOUR)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = asobject(x7)\n    x9 = shift(x8, UNITY)\n    O = paint(x7, x9)\n    return O"], [1.1, "def solve_c07413fc(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, TWO)\n    x3 = fill(I, ONE, x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = compose(size, delta)\n    x6 = argmax(x4, x5)\n    x7 = remove(x6, x4)\n    x8 = merge(x7)\n    x9 = fill(x3, TWO, x8)\n    x10 = merge(x4)\n    x11 = paint(x9, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = size(x13)\n    x15 = positive(x14)\n    x16 = branch(x15, hsplit, vsplit)\n    x17 = x16(I, TWO)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = palette(x18)\n    x21 =contained(x20, x86)\n    x22 = palette(x19)\n    x23 = compose(first, vmirror)\n    x24 = matcher(x23, x22)\n    x25 = sfilter(x21, x24)\n    x26 = compose(first, vmirror)\n    x27 = matcher(x26, x22)\n    x28 = sfilter(x25, x27)\n    x29 = rbind(dmirror, x12)\n    x30 = extract(x28, x29)\n    x31 = x30(x12)\n    x32 = first(x31)\n    x33 = last(x31)\n    x34 = ofcolor(x33, EIGHT)\n    x35 = matcher(first, TWO)\n    x36 = extract(x34, x35)\n    x37 = height(x36)\n    x38 =ITY(x37)\n    x39 = sfilter(x34, x35)\n    x40 = uppermost(x39)\n    x41 = lbind(subtract, x40)\n    x42 = compose"], [1.1, "def solve_7df7d4c3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)\n    x41"], [1.1, "def solve_213ccf5a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = rbind(add, UNITY)\n    x4 = chain(x2, x3, lrcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(add, UP_RIGHT)\n    x8 = chain(x6, x7, urcorner)\n    x9 = fork(recolor, color, x8)\n    x10 = rbind(shoot, NEG_UNITY)\n    x11 = rbind(add, NEG_UNITY)\n    x12 = chain(x10, x11, ulcorner)\n    x13 = fork(recolor, color, x12)\n    x14 = rbind(shoot, DOWN_LEFT)\n    x15 = rbind(add, DOWN_LEFT)\n    x16 = chain(x14,x15, llcorner)\n    x17 = fork(recolor, color, x16)\n    x18 = fork(remove, lrcorner, toindices)\n    x19 = fork(equality, toindices, x18)\n    x20 = sfilter(x1, x19)\n    x21 = fork(remove, urcorner, toindices)\n    x22 = fork(equality, toindices, x21)\n    x23 = sfilter(x1, x22)\n    x24 = fork(remove, ulcorner, toindices)\n    x25 = fork(equality, toindices, x24)\n    x26 = sfilter(x1, x25)\n    x27 = fork(remove, llcorner, toindices)\n    x28 = fork(multiply, x27, x25)\n    x29 = fork(add, lrcorner, x28)\n    x30 = fork(equality, toindices, x29)\n    x31 = sfilter(x1, x30)\n    x32 = fork(remove, urcorner, toindices)\n    x33 = fork( coerc, x32,"], [1.1, "def solve_26dc9600(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = hline(x1)\n    x3 = trim(I)\n    x4 = toindices(x3)\n    x5 = asindices(x3)\n    x6 = toindices(x5)\n    x7 = corners(x6)\n    x8 = combine(x4, x5)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = argmax(x10, size)\n    x12 = remove(x11, x10)\n    x13 = argmax(x12, size)\n    x14 = combine(x6, x13)\n    x15 = combine(x12, x14)\n    x16 = difference(x8, x15)\n    x17 = fill(x9, THREE, x16)\n    x18 = fill(x17, TWO, x15)\n    x19 = lbind(fork, either)\n    x20 = lbind(x19, identity)\n    x21 = lbind(toindices, x11)\n    x22 = compose(x20, x21)\n    x23 = lbind(prapply, x22)\n    x24 = rbind(compose, initset)\n    x25 = lbind(rbind, manhattan)\n    x26 = chain(x24, x25, initset)\n    x27 = fork(x19, x26, identity)\n    x28 = compose(x23, x27)\n    x29 = compose(initset, x28)\n    x30 = fork(rapply, x29, identity)\n    x31 = compose(first, x30)\n    x32 = compose(x20, x30)\n    x33 = fork(cderement, x31, x32)\n    x34 = fork(apply, x33, x24)\n    x35 = rbind(contained, x15)\n    x36 = compose(x35, x34)\n    x37 = sfilter(x16, x36)\n    x38 = difference(x16, x37)\n"], [1.1, "def solve_0fb0d4e7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_3a347a19(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_a21b3c75(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_2c9f9ced(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_57a97391(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = Fgpartition(I)\n    x3 = merge(x2)\n    x4 = palette(x3)\n    x5 = compose(maximum, shape)\n    x6 = argmin(x4, x5)\n    x7 = colorfilter(x1, x6)\n    x8 = rbind(manhattan, x3)\n    x9 = argmin(x7, x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x11)\n    x13 = rbind(manhattan, x12)\n    x14 = colorfilter(x1, x9)\n    x15 = rbind(sfilter, x17)\n    x16 = lbind(recolor, x9)\n    x17 = chain(x16, x15, outbox)\n    x18 = chain(x13, x17, backdrop)\n    x19 = lbind(sfilter, x14)\n    x20 = chain(x17, x19, backdrop)\n    x21 = x18(x4)\n    x22 = x20(x21)\n    x23 = x22(x3)\n    x24 = x23(x4)\n    x25 = x22(x2)\n    x26 = shape(x26)\n    x27 = increment(x26)\n    x28 = canvas(ZERO, x27)\n    x29 = asobject(x25)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x28, x30)\n    x32 = interval(ZERO, FIVE, ONE)\n    x33 = paint(x31, x32)\n    x34 = frequency(x33, THREE)\n    x35 = dmirror(x34)\n    x36 = canvas(ZERO, x20)\n    x37 = paint(x36, x34)\n    x38 = ofcolor(x37, x6)\n    x39 = lbind(shift, x38)\n    x40 = mapply(x39, x32)\n    O ="], [1.1, "def solve_8e5b8167(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_bbfe4da1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(bordering, inbox)\n    x5 = argmin(x3, x4)\n    x6 = argmax(x3, x4)\n    x7 = outbox(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = increment(x8)\n    x11 = interval(x9, x10, FOUR)\n    x12 = lbind(power, inbox)\n    x13 = apply(x12, x11)\n    x14 = lbind(rapply, x5)\n    x15 = lbind(extract, x13)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x12, x16)\n    x18 = fork(add, x17, x12)\n    x19 = fork(subtract, x18, ulcorner)\n    x20 = fork(colorfilter, x12, x19)\n    x21 = compose(size, x20)\n    x22 = argmax(x5, x21)\n    x23 = fgpartition(x22)\n    x24 = interval(ZERO, x22, ONE)\n    x25 = pair(x24, x24)\n    x26 = difference(x23, x25)\n    x27 = compose(size, x22)\n    x28 = valmax(x26, x27)\n    x29 = matcher(x27, x28)\n    x30 = sfilter(x26, x29)\n    x31 = objects(x22, F, T, T)\n    x32 = sizefilter(x31, ONE)\n    x33 = lbind(multiply, x28)\n    x34 = neighbors(x32)\n    x35 = mapply(x33, x34)\n    x36 = colorfilter(x12, FIVE)\n    x37 =2deeighbors(x25)\n    x38 = remove(x"], [1.1, "def solve_1c40764d(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(x3, x2)\n    x6 = valmax(x5, size)\n    x7 = color(x6)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(adjacent, x8)\n    x12 = mfilter(x10, x11)\n    x13 = toindices(x12)\n    x14 = rbind(manhattan, x3)\n    x15 = chain(even, x14, initset)\n    x16 = sfilter(x13, x15)\n    x17 = difference(x13, x16)\n    x18 = fill(I, x4, x17)\n    x19 = lbind(argmin, x16)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x19)\n    x22 = compose(x21, initset)\n    x23 = sfilter(x16, x22)\n    x24 = combine(x61, x23)\n    x25 = rbind(manhattan, x24)\n    x26 = compose(even, x25)\n    x27 = sfilter(x26, x22)\n    x28 = rapply(x27, x27)\n    x29 = compose(x25, x28)\n    x30 = extract(x29, x26)\n    x31 = first(x30)\n    x32 = last(x30)\n    x33 = x31(x01)\n    x34 = leftmost(x33)\n    x35 = invert(x34)\n    x36 = shift(x31, x35)\n    x37 = shift(x32, x36)\n    x38 = combine(x\n    x39 = shape(x31)\n    x40 = canvas(x4, x39)\n    x"], [1.1, "def solve_3bb73818(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    x3 = underfill(I, ONE, x2)\n    x4 = corners(x1)\n    x5 = lbind(rbind, difference)\n    x6 = mapply(x5, x4)\n    x7 = fill(x3, TWO, x6)\n    x8 = mapply(toindices, x1)\n    x9 = box(x1)\n    x10 = fill(x7, THREE, x9)\n    x11 =676(x1)\n    x12 = fill(x10, FOUR, x11)\n    x13 = fork(equality, toindices, box)\n    x14 = sfilter(x8, x13)\n    x15 = difference(x8, x14)\n    x16 =7777777766666666\n    difference(x15)\n    x17 =777777777777777777777777\n    x18 =777777777777777777777777\n    188877777777777771118007\n    188777777777777711187007\n    1117777777777777711187777\n    1118717777777777711187777\n    1117777777777777711187777\n    8117777777777777711187777\n    8117777777717777111877777\n    8117777777777777111877777\n    8187777777777777711187777\n    8187777777717777111877777\n    8187777777777777111877777\n    8177777777777777711187777\n    7777777777777777777777777\n    7777777777777777777777777\n    7777777777777777777777777\n    7777777777777777777777777\n    7777777777777777777777777\n    7777777777777777777777777\n    \"\"\"\n    "], [1.1, "def solve_45152451(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = leftmost(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = insert(ORIGIN, x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = tojvec(x7)\n    x9 = fork(connect, ulcorner, rightmost)\n    x10 = fork(connect, urcorner, rot90)\n    x11 = fork(combine, x9, x10)\n    x12 = subtract(x6, x1)\n    x13 = power(x11, x12)\n    x14 = astuple(x12, x13)\n    x15 = x11(I)\n    x16 = matcher(first, x15)\n    x17 = compose(flip, x16)\n    x18 = lbind(recolor, x17)\n    x19 = rbind(ofcolor, x9)\n    x20 = chain(x18, x19, x17)\n    x21 = lbind(lbind, shift)\n    x22 = compose(x21,x17)\n    x23 = fork(mapply, x20, x22)\n    x24 = fork(paint, identity, x23)\n    x25 = x24(I)\n    x26 = objects(x25, T, F, T)\n    x27 = fork(compose, x23, x22)\n    x28 = fork(rapply, x27, identity)\n    x29 = matcher(x28, x26)\n    x30 = sfilter(x26, x29)\n    x31 = merge(x30)\n    x32 = color(x31)\n    x33 = palette(x1)\n    x34 = other(x33, x32)\n    x35 = compose(color, x1)\n    x36 = frontiers(I)\n    x37 = sfilter(x36, x33)\n    x38 = difference(x37, x31)\n    x39 = ofcolor(x38, x32)\n    x40"], [1.1, "def solve_6f1fed97(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = colorcount(I, ZERO)\n    x3 = lrcorner(x1)\n    x4 = ulcorner(x2)\n    x5 = subtract(x3, x4)\n    x6 = multiply(x5, THREE)\n    x7 =8870000037755788700000\n    x8 =8870000037755788700000\n    0000000000880007700000000\n    0000000000880007700000000\n    0000000000887005880000000\n    0000000000887005880000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, THREE)\n    x2 = astuple(x1, x5)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = leastcolor(x3)\n    x5 = rot90(x4)\n    x6 = matcher(identity, x1)\n    x7 = rbind(ofcolor, x4)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(size, x8)\n    x10 = apply(x9, x5)\n    x11 = subtract(x10, x3)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x10, x12)\n    x14 = strip(x13)\n    x15 = merge(x14)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x15, I)\n    x18 = astuple(x16, x17)\n    x19 = hmirror(x18)\n    x20 =9(x19, x14)\n    x21 = box(x20)\n    x22 = fill(I, x4, x21)\n    x23 = ofcolor(x22, x4)\n    x24 = ulcorner(x23)\n    x25 = subtract(x24, x23)\n    x26 = upscale(x25, THREE)\n    x27 = dmirror(x26)\n"], [1.1, "def solve_081e2578(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_8d1a99f4(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_3409e2f8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subgrid(x2, I)\n    x8 = rbind(occurrences, x7)\n    x9 = argmin(x8, size)\n    x10 = asobject(x9)\n    x11 = matcher(first, x6)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = normalize(x13)\n    x15 = last(x13)\n    x16 = matcher(first, x6)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x14, x17)\n    x19 = normalize(x18)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = canvas(ZERO, x21)\n    x23 = asobject(x19)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x22, x24)\n    x26 = interval(ONE, FIVE, ONE)\n    x27 = paint(x25, x26)\n    x28 = astuple(ONE, THREE)\n    x29 = canvas(ZERO, x28)\n    x30 = asobject(x29)\n    x31 = occurrences(x27, x30)\n    x32 = invert(SIX)\n    x33 = shift(x31, x32)\n    x34 = occurrences(x27, x33)\n    x35 = combine(x32, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = canvas(ZERO, x36)\n    x38 = asobject(x37)\n    x39 = occurrences(x27, x38)\n    x40 = combine(x35, x39)\n    x41 = apply(toindices, x40)\n    x42"], [1.1, "def solve_37fa1603(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = Tmax(x2, size)\n    x4 = totuple(x3)\n    x5 = apply(normalize, x4)\n    x6 = mostcommon(x5)\n    x7 = color(x6)\n    x8 = shape(x6)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = compose(corners, toindices)\n    x13 = rbind(greater, ONE)\n    x14 = compose(x13, x12)\n    x15 = sfilter(x11, x14)\n    x16 = difference(x1, x15)\n    x17 = compose(size, x12)\n    x18 = argmax(x16, x17)\n    x19 = partition(x18)\n    x20 = sizefilter(x19, ONE)\n    x21 = lbind(colorcount, I)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    x24 = normalize(x18)\n    x25 = matcher(x23, x22)\n    x26 = sfilter(x24, x25)\n    x27 = upscale(x26, TWO)\n    x28 = color(x27)\n    x29 = lbind(shift, x27)\n    x30 = fork(combine, x29, leastcolor)\n    x31 = lbind(mapply, x30)\n    x32 = rbind( occurrences, x14)\n    x33 = compose(x31, x32)\n    x34 = fork(paint, identity, x33)\n    x35 = matcher(x34, x28)\n    x36 = sfilter(x26, x35)\n    x37 =73(x36)\n    x38 = fork(50846, x34, x37)\n    x39 = argmax(x36, x38)\n    x40 ="], [1.1, "def solve_07d4e2bc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_f80af166(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = contained(ZERO, x4)\n    x6 = portrait(x5)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = rbind(dc433765, x8)\n    x10 = chain(positive, size, x9)\n    x11 =785(x10)\n    x12 = x11(x8)\n    x13 = dmirror(x12)\n    x14 = ofcolor(x13, ZERO)\n    x15 = ofcolor(x18, ZERO)\n    x16 = intersection(x14, x15)\n    x17 = fill(x13, THREE, x16)\n    x18 = uppermost(x3)\n    x19 = chain(toivec, first, last)\n    x20 = height(x RIGHT)\n    x21 = decrement(x17)\n    x22 = astuple(x21, x19)\n    x23 = connect(x18, x22)\n    x24 = fill(x17, TWO, x23)\n    x25 = urcorner(x3)\n    x26 = branch(x6, x24, x25)\n    x27 = remove(x26, x2)\n    x28 = llcorner(x7)\n    x29 = lbind(x28, x7)\n    x30 = chain(first, x29, initset)\n    x31 =15(x22)\n    x32 = lrcorner(x3)\n    x33 = rbind(shoot, x32)\n    x34 = mapply(x33, x27)\n    x35 = fill(x24, TWO, x34)\n    x36 = ofcolor(x35, ZERO)\n    x37 = initset(x33)\n    x38 = rbind(manhattan, x37)\n    x39 = compose(x38, initset)\n    x40 ="], [1.1, "def solve_1658e600(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_e198e2f8(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, EIGHT)\n    x10 = uppermost(x9)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, EIGHT)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)\n    x40"], [1.1, "def solve_cfac1371(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_e63d7a2c(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_b64b08bc(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_a7793c7c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_17232735(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_ba7caf70(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, ZERO)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_446f14ea(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, shift)\n    x36 = lbind(shift, x25)\n    x37 = mapply(x36, x31)\n    x38 = height(x22)\n    x39 = hupscale(x37, x38)\n    x40 = asobject(x39"], [1.1, "def solve_53fe90ca(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = interval(THREE, SEVEN, ONE)\n    x5 = product(x4, x4)\n    x6 = fork(multiply, first, last)\n    x7 = order(x5, x6)\n    x8 = lbind(canvas,NEG_ONE)\n    x9 = chain(x8, color, first)\n    x10 = chain(corners, asindices, x9)\n    x11 = lbind(recolor, x1)\n    x12 = compose(asindices, x9)\n    x13 = fork(difference, x12, x10)\n    x14 = lbind(recolor, TWO)\n    x15 = compose(inbox, x10)\n    x16 = chain(x14, backdrop, x15)\n    x17 = compose(x11, x13)\n    x18 = lbind(lbind, combine)\n    x19 = compose(x18, x17)\n    x20 = lbind(rbind, recolor)\n    x21 = compose(x20, x10)\n    x22 = fork(compose, x19, x21)\n    x23 = lbind(lbind, mapply)\n    x24 = lbind(lbind, shift)\n    x25 = chain(x23, x24, x16)\n    x26 = lbind(lbind, occurrences)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x27, x22)\n    x29 = fork(compose, x25, x28)\n    x30 = rbind(mapply, x3)\n    x31 = compose(x30, x29)\n    x32 = fork(paint, last, x31)\n    x33 = compose(first, first)\n    x34 = fork(remove, x33, first)\n    x35 = fork(astuple, x34, x32)\n    x36 = size(x7)\n    x37 = power(x35, x36)\n    x38 = ast"], [1.1, "def solve_e4029467(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = uppermost(x2)\n    x5 = leftmost(x2)\n    x6 = height(x2)\n    x7 = width(x2)\n    x8 = interval(SEVEN, ONE, NEG_ONE)\n    x9 = add(x4, x6)\n    x10 = increment(x9)\n    x11 = lbind(subtract, x10)\n    x12 = add(x5, x7)\n    x13 = increment(x12)\n    x14 = lbind(subtract, x13)\n    x15 = lbind(interval, x4)\n    x16 = rbind(ORIGIN, ZERO)\n    x17 = compose(x15, x16)\n    x18 = lbind(interval, x7)\n    x19 = rbind(ORIGIN, ZERO)\n    x20 = compose(x18, x19)\n    x21 = lbind(inter val, x1)\n    x22 = rbind(intersection, x2)\n    x23 = compose(x21, x22)\n    x24 = chain(x17, x23, size)\n    x25 = fork(equality, identity, rot90)\n    x26 = fork(equality, identity, rot180)\n    x27 = fork(equality, identity, rot270)\n    x28 = chain(x25, x26, x27)\n    x29 = lbind(apply, uppermost)\n    x30 = chain(maximum, x29, x14)\n    x31 = lbind(apply, x28)\n    x32 = chain(x29, x30, x31)\n    x33 = lbind(apply, x23)\n    x34 = chain(x31, x32, x33)\n    x35 = rbind(apply, x3)\n    x36 = compose(x35, x34)\n    x37 = rbind(apply, x21)\n    x38 = compose(x37, x28)\n    x39 = lbind(compose,"], [1.1, "def solve_d8d0f57e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x8, x29)\n    x32 = branch(x30, x9, x28)\n    x33 = branch(x30, x390, x31)\n    x34 = multiply(xTEN, x13)\n    x35 = rbind(multiply, x34)\n    x36 = apply(x35, x33)\n    x37 = branch(x30, x26, x16)\n    x38 = branch(x30, x29, x30)\n    x39 = apply(x37, x38)\n    x40 = branch(x30, x20, x30)\n    x41 = apply(x39, x40)\n    "], [1.1, "def solve_fd4e35ad(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = subtract(first, ZERO)\n    x3 = replace(I, x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(numcolors, x4, frontiers)\n    x6 = sfilter(x3, x5)\n    x7 = fork(multiply, height, width)\n    x8 = lbind(ofcolor, I)\n    x9 = compose(x7, x8)\n    x10 = argmax(x6, x9)\n    x11 = fgpartition(x8)\n    x12 = merge(x11)\n    x13 = palette(x12)\n    x14 = remove(x6, x13)\n    x15 = other(x14, x12)\n    x16 =60b61512:\n    x17 = palette(I)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x8, x15)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    x22 = intersection(x19, x21)\n    x23 = difference(x21, x22)\n    x24 = objects(x8, T, F, T)\n    x25 = colorfilter(x24, x16)\n    x26 = rbind(adjacent, x1111)\n    x27 = rbind(adjacent, xl)\n    x28 = sfilter(x25, x27)\n    x29 = sfilter(x25, x28)\n    x30 = argmin(x29, last)\n    x31 = argmax(x29, last)\n    x32 = first(x30)\n    x33 = first(x32)\n    x34 = last(x30)\n    x35 = asindices(x34)\n    x36 = center(x35)\n    x37 = connect(x63, x36)\n    x38 = outbox(x31)\n    x39 = apply(first, x38)\n    x40 = center(x39)\n    x41 = subtract(x40,"], [1.1, "def solve_903331a1(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_cdb45fa9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_52877917(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = sfilter(x13, x10)\n    x15 = size(x14)\n    x16 = greater(x12, x15)\n    x17 = branch(x16, hmirror, identity)\n    x18 = x17(x6)\n    x19 = partition(x18)\n    x20 = matcher(color, x8)\n    x21 = extract(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = argmin(x22, uppermost)\n    x24 = other(x22, x23)\n    x25 = colorfilter(x24, x8)\n    x26 = first(x25)\n    x27 = remove(x26, x25)\n    x28 = toindices(x27)\n    x29 = lbind(lbind, shift)\n    x30 = uppermost(x27)\n    x31 = lbind(rbind, greater)\n    x32 = lbind(argindex, x20)\n    x33 = rbind(212, x30)\n    x34 = chain(x33, x32, x29)\n    x35 = fork(recolor, x24, x34)\n    x36 = mapply(x35, x27)\n    x37 = paint(x6, x36)\n    x38 = branch(x4, identity, dmirror)\n    x39 = x38(x38)\n    x40 = first(x39)\n    x41 = last(x39)\n    x"], [1.1, "def solve_cb9e3c14(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_1c4198a5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x1, x6)\n    x8 = apply(uppermost, x1)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x1)\n    x11 = compose(x10, uppermost)\n    x12 = lbind(matcher, first)\n    x13 = chain(x12, x11, x11)\n    x14 = compose(size, x13)\n    x15 =22greater(ONE, x14)\n    x16 = branch(x15, x13, x7)\n    x17 = Sfilter(x9, x16)\n    x18 = lbind(colorcount, I)\n    x19 = compose(x18, color)\n    x20 = matcher(x19, TWO)\n    x21 = fork(divide, x20, x13)\n    x22 = rbind(multiply, x15)\n    x23 = compose(x22, x21)\n    x24 = argmin(x17, x23)\n    x25 = ofcolor(I, x4)\n    x26 = sfilter(x25, x24)\n    x27 = objects(x27, T, F, F)\n    x28 = colorfilter(x27, x4)\n    x29 = rbind(contained, x26)\n    x30 = compose(x29, normalize)\n    x31 = argmin(x28, x30)\n    x32 =ulcorner(x28)\n    x33 = matcher(first, x39)\n    x34 = sfilter(x1, x33)\n    x35 = ulcorner(x28)\n    x36 = matcher(first, x35)\n    x37 = sfilter(x1, x36)\n    x38 = ofcolor(I, x4)\n    x39 = difference(x"], [1.1, "def solve_2141c006(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_faa7b930(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = rbind( upscale, TWO)\n    x9 = chain(x8, ulcorner, x7)\n    x10 = initset(x2)\n    x11 = lbind(add, x10)\n    x12 = insert(x9, x11)\n    x13 = lbind(rbind, subtract)\n    x14 = rbind(bordering, I)\n    x15 = fork(both, x13, x14)\n    x16 = fork(other, palette, x15)\n    x17 = difference(x1, x12)\n    x18 = argmax(x17, x16)\n    x19 = rbind(colorcount, x18)\n    x20 = rbind(toobject, I)\n    x21 = chain(x19, x20, dneighbors)\n    x22 = chain(x17, x21, toindices)\n    x23 = rbind(colorcount, x18)\n    x24 = rbind(toobject, I)\n    x25 = chain(x23, x24, dneighbors)\n    x26 = fork(both, x22, x25)\n    x27 = fork(both, x16, x26)\n    x28 = fork(both, x27, x25)\n    x29 = fork(both, x27, x15)\n    x30 = fork(both, x29, x28)\n    x31 = lbind(forobject, I)\n    x32 = compose(x31, x30)\n    x33 = fork(difference, x32, identity)\n    x34 = fork(recolor, x33, x32)\n    x35 = mapply(x34, x22)\n    x36 = paint(I, x35)\n    x"], [1.1, "def solve_3af3970e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_318bcf78(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_120dc46f(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, EIGHT)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42"], [1.1, "def solve_5f2a8ba8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, TWO)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror(x"], [1.1, "def solve_f44a91dd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_5b5c31da(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = uppermost(x1)\n    x2 = objects(I, T, T, T)\n    x3 = first(x2)\n    x4 = rbind(subgrid, I)\n    x5 = fork(equality, identity, rot90)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    x8 = center(x7)\n    x9 = subgrid(x3, I)\n    x10 = hmirror(x9)\n    x11 = objects(x10, F, T, T)\n    x12 = first(x11)\n    x13 = objects(x10, T, T, T)\n    x14 = rbind(subgrid, x10)\n    x15 = compose(x5, x14)\n    x16 = extract(x13, x15)\n    x17 = center(x16)\n    x18 = subgrid(x3, I)\n    x19 = hmirror(x18)\n    x20 = mostcolor(I)\n    x21 = cellwise(x19, x20, x4)\n    x22 = astuple(x21, x13)\n    x23 = astuple(x21, x23)\n    x24 = canvas(x18, x22)\n    x25 = initset(x8)\n    x26 = insert(x4, x25)\n    x27 = index(x10, x26)\n    x28 = subgrid(x29, x18)\n    x29 = remove(x28, x26)\n    x30 =669(x27)\n    x31 = interval(x30, x30, TWO)\n    x32 = pair(x31, x29)\n    x33 = lbind(apply, first)\n    x34 = lbind(sfilter, x30)\n    x35 = lbind(pair, x28)\n    x36 = chain(x33, x34, x35)\n    x37 = compose(x37, increment)\n    x38 = lbind(subtract, x age)\n    x39 = compose(x38, x37)\n    x40 = fork("], [1.1, "def solve_160826d4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = x4(x5)\n    x7 = compose(normalize, x6)\n    x8 = rbind(apply, x3)\n    x9 =616(x8, size)\n    x10 = rbind(sfilter, x7)\n    x11 = rbind(compose, x10)\n    x12 = lbind(rbind, mfilter)\n    x13 = chain(x11, x12, toindices)\n    x14 = chain(size, x3, x13)\n    x15 = valmax(x5, x14)\n    x16 = matcher(x14, x15)\n    x17 = sfilter(x5, x16)\n    x18 = lbind(colorcount, I)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(I)\n    x21 = shape(I)\n    x22 = canvas(x20, x21)\n    x23 = hconcat(I, x22)\n    x24 = objects(x23, T, F, T)\n    x25 = colorfilter(x24, x18)\n    x26 =87(ORIGIN)\n    x27 = subgrid(x26, I)\n    x28 = toindices(x27)\n    x29 = outbox(x28)\n    x30 = lbind(contained, ZERO)\n    x31 = compose(x30, initset)\n    x32 = rbind(add, x DOWN)\n    x33 = chain(x31, x32, dneighbors)\n    x34 = sfilter(x29, x33)\n    x35 = merge(x34)\n    x36 = dmirror(x35)\n    x37 = x35(x36)\n    x38 = height(x37)\n    x39 = add(x38, x31)\n    x40 ="], [1.1, "def solve_63de5e78(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = interval(TWO, FIVE, ONE)\n    x4 = rbind(shift, RIGHT)\n    x5 = rbind(shift, LEFT)\n    x6 = rbind(shift, UP)\n    x7 = rbind(shift, DOWN)\n    x8 = lbind(fork, intersection)\n    x9 = lbind(x8, identity)\n    x10 = lbind(rbind, shift)\n    x11 = compose(x9, x10)\n    x12 = compose(x11, tojvec)\n    x13 = chain(x11, tojvec, invert)\n    x14 = compose(x11, toivec)\n    x15 = chain(x11, toivec, invert)\n    x16 = lbind(compose, initset)\n    x17 = lbind(rbind, rapply)\n    x18 = lbind(chain, first)\n    x19 = lbind(compose, x5)\n    x20 = x16(x12)\n    x21 = rbind(x18, x20)\n    x22 = chain(x19, x21, x17)\n    x23 = lbind(compose, x4)\n    x24 = x16(x13)\n    x25 = rbind(x18, x24)\n    x26 = chain(x23, x25, x17)\n    x27 = lbind(compose, x6)\n    x28 = x16(x14)\n    x29 = rbind(x18, x28)\n    x30 = chain(x27, x29, x17)\n    x31 = lbind(compose, x7)\n    x32 = x16(x15)\n    x33 = rbind(x18, x32)\n    x34 = chain(x31, x33, x17)\n    x35 = rbind(ofcolor, x1)\n    x36 = compose(x22, x35)\n    x37 = compose(x26, x35)\n    x38 = compose(x30, x35)"], [1.1, "def solve_c45a972c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_cbdf11ac(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(subgrid, x7)\n    x9 =44446692665(x8)\n    x10 = branch(x5, x9, upscale)\n    x11 = x10(x7)\n    x12 = occurrences(x11, x2)\n    x13 = mapply(toindices, x12)\n    x14 = shift(x13, x2)\n    x15 = normalize(x14)\n    x16 = occurrences(x15, x2)\n    x17 = mapply(toindices, x16)\n    x18 = combine(x17, x2)\n    x19 = fill(x11, x10, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(ulcorner, x20)\n    x22 = shift(x21, invert)\n    x23 = paint(x19, x22)\n    x24 = objects(x23, T, F, T)\n    x25 = apply(urcorner, x24)\n    x26 = shift(x25, UP)\n    x27 = paint(x24, x26)\n    x28 =enciesmirror(x2)\n    x29 = invert(x28)\n    x30 = shift(x28, x29)\n    x31 = asindices(x30)\n    x32 = box(x31)\n    x33 = fill(x77, x10, x32)\n    x34 = shift(x31, x33)\n    x35 = fill(x30, x11, x34)\n    x36 = lbind(greater, x38)\n    x37 = compose(x36, size)\n    x38 = sfilter(x1, x37)\n    x39 = sfilter"], [1.1, "def solve_4e5c1615(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = interval(ONE, x225, ONE)\n    x27 = apply(x26, x29)\n    x28 = lbind(apply, last)\n    x29 = lbind(mapply, x28)\n    x30 = rbind(occurrences, x12)\n    x31 = chain(x30, x29, last)\n    x32 = rbind(apply, x12)\n    x33 = lbind(chain, x32)\n    x34 = lbind(rbind, add)\n    x35 = compose(x34, x31)\n    x36 = lbind(lbind, shift)\n    x37 = chain(x33, x36, last)\n    x38 = fork(apply, x35, x37)\n    x39"], [1.1, "def solve_d2ba2ea7(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = intersection(x21, x15)\n    x23 = centerofmass(x22)\n    x24 = subtract(x23, x26)\n    x25 = shift(x25, x24)\n    x26 = fill(x19, x11, x25)\n    x27 = vmirror(x26)\n    x28 = objects(x27, T, F, T)\n    x29 = rbind(normalize, x25)\n    x30 = compose(halve, x29)\n    x31 = valindices(x30)\n    x32 =rbind(toobject, x35)\n    x33 = chain(x30, x32, dneighbors)\n    x34 = matcher(x33, x11)\n    x35 = extract(x32, x34)\n    x36 = prapply(connect, x20, x35)\n    x37 = fork(either, vline, hline)\n    x38 = mfilter(x36, x37)\n    O = underfill(x19, x10, x38)\n"], [1.1, "def solve_7ad64e49(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = fork(both, x3, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = Fgreater(x14, x16)\n    x18 = merge(x12)\n    x19 = leftmost(x18)\n    x20 = decrement(x19)\n    x21 = Fgreater(x20, x17)\n    x22 = Sfilter(x12, x21)\n    x23 = rightmost(x22)\n    x24 = decrement(x23)\n    x25 = vmirror(x24)\n    x26 = both(x17, x25)\n    x27 = branch(x26, x22, ZERO)\n    x28 = apply(x27, x22)\n    x29 = increment(x28)\n    x30 = downscale(x10, x29)\n    x31 = apply(x27, x22)\n    x32 = vmirror(x31)\n    x33 = hconcat(x30, x32)\n    x34 = hmirror(x33)\n    x35 = vconcat(x34, x33)\n    x36 = asobject(x35)\n    x37 = apply(first, x36)\n    x38 = apply(last, x36)\n    x39 = product(x37, x38)\n    x40 = difference(x39, x2)\n    x41 = fill(I, ZERO, x40)\n    x42"], [1.1, "def solve_75483eed(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = shift(x32, x33)\n    x35 = shift(x31, x34)\n    x36 = fill(x19, x10)\n    x37 = fill(x36, x11, x35)\n    x38 = fill(x37, x10, x33)\n    x39 = crop(x38, DOWN, x24)\n    O = extract(x"], [1.1, "def solve_22223a33(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, SIX)\n    x3 = matcher(size, TWO)\n    x4 = fork(greater, x2, x3)\n    x5 = matcher(size, FOUR)\n    x6 = compose(flip, x5)\n    x7 = fork(both, x4, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = fork(matcher, first, last)\n    x16 = extract(x14, x15)\n    x17 = color(x16)\n    x18 = compose(hmirror, vmirror)\n    x19 = rbind(remove, x18)\n    x20 = chain(maximum, x19, x14)\n    x21 = compose(x20, last)\n    x22 = fork(equality, identity, x21)\n    x23 = sfilter(x1, x22)\n    x24 =oid(x23)\n    x25 = ulcorner(x24)\n    x26 = subgrid(x24, I)\n    x27 = fork(multiply, decrement, identity)\n    x28 = switch(x26, x27, x20)\n    x29 = switch(x28, x27, x24)\n    x30 = rot90(x29)\n    x31 = rot180(x29)\n    x32 = rot270(x29)\n    x33 = hconcat(x30, x313)\n    x34 = hconcat(x32, x33)\n    x35 = fgpartition(x34)\n    x36 = merge(x35)\n    x37 = merge(x36)\n    x38 =Karner(x37)\n    x39 = branch(x18, x32, x38)\n    x40"], [1.1, "def solve_f9f4831c(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = ofcolor(I, TWO)\n    x3 = first(x2)\n    x4 = ulcorner(x3)\n    x5 = shoot(x4, DOWN_LEFT)\n    x6 = fill(I, ONE, x5)\n    x7 = subtract(x4, DOWN)\n    x8 = crop(x6, x7, x4)\n    x9 = shoot(x8, UP_RIGHT)\n    x10 = fill(x6, ONE, x9)\n    x11 = subgrid(x3, x10)\n    x12 = asobject(x11)\n    x13 = matcher(first, ZERO)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x12, x14)\n    x16 = difference(x12, x15)\n    x17 = mostcolor(I)\n    x18 = merge(x16)\n    x19 = fill(x6, x17, x18)\n    x20 =paint(x19, x15)\n    x21 = ofcolor(x20, x17)\n    x22 = ulcorner(x21)\n    x23 = subgrid(x22, x20)\n    x24 = ofcolor(x23, x17)\n    x25 = lrcorner(x24)\n    x26 = subgrid(x25, x23)\n    x27 = ofcolor(x26, x17)\n    x28 = llcorner(x27)\n    x29 = hfrontier(x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(x30, x17)\n    x32 = urcorner(x31)\n    x33 = ulcorner(x32)\n    x34 = remove(x33, x31)\n    x35 = llcorner(x34)\n    x36 = invert(x35)\n    x37 = shift(x33, x36)\n    x38 = objects(x32, T, F, T)\n    x39 = colorfilter(x38, x12)\n    x40 = r"], [1.1, "def solve_bf1b1672(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, EIGHT)\n    x10 = uppermost(x9)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, EIGHT)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)\n    x40"], [1.1, "def solve_af6e6450(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = partition(I)\n    x3 = add(TWO, x2)\n    x4 = fork(multiply, height, width)\n    x5 = compose(invert, x4)\n    x6 = argmin(x5, x4)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, x5, x6)\n    x10 = branch(x8, TWO, ONE)\n    x11 = compose(neighbors, last)\n    x12 = remove(x11, x8)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = objects(I, T, F, T)\n    x16 =Extra(x15, x4)\n    x17 = center(x16)\n    x18 = initset(x17)\n    x19 = cover(I, x6)\n    x20 = llcorner(x16)\n    x21 = lbind(subtract, x20)\n    x22 = shoot(x21, UNITY)\n    x23 = lrcorner(x16)\n    x24 =76824(NEG_UNITY)\n    x25 = objects(x24, T, F, T)\n    x26 = colorfilter(x25, x1)\n    x27 = rbind(shoot, DOWN)\n    x28 = mapply(x27, x22)\n    x29 = fill(x11, x1, x28)\n    x30 = objects(x29, T, F, T)\n    x31 = colorfilter(x30, x1)\n    x32 = rbind(shoot, LEFT)\n    x33 = mapply(x32, x31)\n    x34 = fill(x29, x1, x33)\n    x35 = ofcolor(x34, x1)\n    x36 = rbind(shoot, other)\n    x37 = mapply(x36, x31)\n    x38 = fill(x34, x1, x37)\n    x39 = add(x surroundedRIGHT,"], [1.1, "def solve_67a2734d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_a3d238aa(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_c038daf9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_eff3480d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = recolor(x35, x34)\n    x37 = lb"], [1.1, "def solve_d7cb050c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = compose(normalize, x25)\n    x31 = fork(shift, x30, x29)\n    x32 = rbind(contained, x515)\n    x33 = compose(x32, vline)\n    x34 = rbind(sfilter, x33)\n    x35 = rbind(258, x34)\n    x36 = chain(normalize, x34, x35)\n    x37 = fork(shift, x36, x31)\n    x38"], [1.1, "def solve_dda51aa3(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = argmax(x3, size)\n    x5 = argmin(x2, width)\n    x6 = size(x5)\n    x7 = equality(x6, FOUR)\n    x8 = branch(x7, identity, outbox)\n    x9 = x8(x4)\n    x10 = branch(x7, identity, x9)\n    x11 = branch(x7, identity, x10)\n    x12 = width(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = height(x11)\n    x15 = interval(ZERO, x14, ONE)\n    x16 = combine(x13, x15)\n    x17 = rbind(toobject, x11)\n    x18 = compose(first, last)\n    x19 = chain(x17, x18, first)\n    x20 = rbind(colorcount, x11)\n    x21 = matcher(x20, x68)\n    x22 = extract(x16, x21)\n    x23 = last(x22)\n    x24 = extract(x16, x23)\n    x25 = last(x24)\n    x26 = matcher(first, x1100)\n    x27 = rbind(first, x11)\n    x28 = rbind(sfilter, x22)\n    x29 = rbind(sfilter, x26)\n    x30 = compose(x27, x29)\n    x31 = chain(x10, x27, x30)\n    x32 = lbind(fork, recolor)\n    x33 = lbind(x32, x11)\n    x34 = lbind(ofcolor, x23)\n    x35 = lbind(recolor, x233)\n    x36 = lbind(mapply, x36)\n    x37 = rbind(ofcolor, x23)\n    x38 = compose(x33, x37)\n    x39 = chain(x32"], [1.1, "def solve_12655912(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x19"], [1.1, "def solve_8cffc138(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valc8f1(x1)\n    x3 = matcher(first, ZERO)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = merge(x8)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, x8, x9)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, first)\n    x15 = sfilter(x12, x14)\n    x16 = color(x15)\n    x17 = palette(I)\n    x18 = remove(x7, x17)\n    x19 = other(x18, x16)\n    x20 =8899(x19, UNITY)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x18, x19)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(first, x25, toindices)\n    x27 = fork(subtract, x26, x24)\n    x28 = fork(shoot, x27, x28)\n    x29 = mapply(x28, x22)\n    x30 = fill(I, x19, x29)\n    x31 = compose(halve, width)\n    x32 = fork(greater, first, x31)\n    x33 = compose(x32, rot90)\n    x34 = fork(sfilter, x30, x33)\n    x35 = size(x12)\n    x36 = power(outbox, x35)\n    x37 = fork(rapply, x34, x36)\n    x38 = compose(x37, initset)\n    x39 = fork("], [1.1, "def solve_fff439e9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = interval(THREE, SEVEN, ONE)\n    x5 = product(x4, x4)\n    x6 = fork(multiply, first, last)\n    x7 = order(x5, x6)\n    x8 = lbind(canvas, NEG_ONE)\n    x9 = chain(x8, first, first)\n    x10 = chain(corners, asindices, x9)\n    x11 = lbind(recolor, x1)\n    x12 = compose(asindices, x9)\n    x13 = fork(difference, x12, x10)\n    x14 = lbind(recolor, TWO)\n    x15 = compose(inbox, x10)\n    x16 = chain(x14, backdrop, x15)\n    x17 = compose(x11, x13)\n    x18 = lbind(lbind, combine)\n    x19 = compose(x18, x17)\n    x20 = lbind(rbind, recolor)\n    x21 = compose(x20, x10)\n    x22 = fork(compose, x19, x21)\n    x23 = lbind(lbind, mapply)\n    x24 = lbind(lbind, shift)\n    x25 = chain(x23, x24, x16)\n    x26 = lbind(lbind, occurrences)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x27, x22)\n    x29 = fork(compose, x25, x28)\n    x30 = rbind(mapply, x3)\n    x31 = compose(x30, x29)\n    x32 = fork(paint, last, x31)\n    x33 = compose(first, first)\n    x34 = fork(remove, x33, first)\n    x35 = fork(astuple, x34, x32)\n    x36 = size(x7)\n    x37 = power(x35, x36)\n    x38 = ast"], [1.1, "def solve_a015c9a8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = intersection(x1, TWO)\n    x2 = increment(TWO)\n    x3 = increment(x2)\n    x4 = astuple(x3, x1)\n    x5 = lbind(interval, ZERO)\n    x6 = rbind(x5, x4)\n    x7 = compose(x6, first)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(size, x8, toindices)\n    x10 = lbind(apply, x9)\n    x11 = chain(x10, corners, outbox)\n    x12 = chain(x11, toindices, x8)\n    x13 = fork(difference, x12, toindices)\n    x14 = fork(equality, toindices, x13)\n    x15 = sfilter(x1, x14)\n    x16 = fork(multiply, first, last)\n    x17 = chain(x16, x15, x15)\n    x18 = apply(x17, x15)\n    x19 = fork(equality, x18, x17)\n    x20 = sfilter(x1, x19)\n    x21 = compose(leftmost, x20)\n    x22 = apply(x21, x20)\n    x23 = leastcolor(I)\n    x24 = ofcolor(I, x23)\n    x25 = argmax(x24, x23)\n    x26 = apply(toindices, x24)\n    x27 = box(x26)\n    x28 = difference(x27, x25)\n    x29 = fill(I, x23, x28)\n    x30 = normalize(x21)\n    x31 = matcher(first, x23)\n    x32 = sfilter(x30, x31)\n    x33 = center(x32)\n    x34 = initset(x33)\n    x35 = rbind(manhattan, x34)\n    x36 = lbind(shift, x30)\n    x37 = compose(x35, x36)\n    x38 = lbind(multiply, x30)\n    x"], [1.1, "def solve_592421c1(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, TWO)\n    x4 = sizefilter(x3, ONE)\n    x5 = merge(x4)\n    x6 = lbind(colorfilter, x4)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, TWO)\n    x9 = sfilter(x4, x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = ofcolor(I, x11)\n    x14 = rbind(shoot, UNITY)\n    x15 = rbind(shoot, NEG_UNITY)\n    x16 = rbind(shoot, DOWN_LEFT)\n    x17 = rbind(shoot, UP_RIGHT)\n    x18 = fork(combine, x14, x15)\n    x19 = fork(combine, x16, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = rbind(shoot, UNITY)\n    x22 = rbind(shoot, NEG_UNITY)\n    x23 = fork(combine, x21, x22)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = rbind(shoot, UP_RIGHT)\n    x26 = fork(combine, x24, x25)\n    x27 = fork(contained, x22, x28)\n    x28 = sfilter(x12, x27)\n    x29 = difference(x12, x28)\n    x30 = compose(normalize, toindices)\n    x31 = box(x30)\n    x32 = fork(361, x30, x31)\n    x33 = chain(normalize, x32, initset)\n    x34 = fork(color, x33, x30)\n    x35 = ofcolor(I, x10)\n    x36 =8626(x35)\n    x37 = difference(x31, x35)\n    x38"], [1.1, "def solve_c4869cd4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = inline(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_aed01087(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_d508b959(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 =Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    0000007700000000000\n    0000007700000000000\n    000007700000000000\n    0000088777778800000\n    0000088777778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    0000011111111000000\n    000001111111101100\n    000001111100001111\n    000001111100001111\n    000001111100001111\n    000001111100001110\n    000001111100001110\n    \"\"\"\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = rbind(toobject, I)\n    x6 = chain(leastcolor, x5, delta)\n    x7 = rbind(shift, UP)\n    x8 = compose(x7, backdrop)\n    x9 = fork(recolor, x6, x8)\n    x10 = mapply(x9, x4)\n    O = underpaint(I, x10)\n    return O"], [1.1, "def solve_2a075c2a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = shift(x23, x24)\n    x26 = combine(x15, x25)\n    x27 = paint(x27, x26)\n    x28 = objects(x as, T, F, T)\n    x29 = colorfilter(x28, x24)\n    x30 = pair(x29, x28)\n    x31 = mapply(dneighbors, x30)\n    x32 = mapply(neighbors, x30)\n    x33 = paint(x27, x32)\n    O = paint(x33, x3)\n    return O"], [1.1, "def solve_fdb0b7cf(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = ofcolor(I, ZERO)\n    x10 = repeat(x9, ONE)\n    x11 = combine(x7, x10)\n    x12 = identity(I)\n    x13 = asindices(x12)\n    x14 = ofcolor(x12, ZERO)\n    x15 = toobject(x14, x12)\n    x16 = mostcolor(x15)\n    x17 = mapply(first, x16)\n    x18 = fill(x12, x16, x17)\n    x19 = lbind(adjacent, x13)\n    x20 = objects(x18, T, F, T)\n    x21 = apply(x19, x20)\n    x22 =50(x21)\n    x23 = subgrid(x22, x18)\n    x24 = width(x23)\n    x25 = multiply(x24, x24)\n    x26 = tojvec(x25)\n    x27 = occurrences(x18, x26)\n    x28 = objects(x18, T, F, T)\n    x29 = lbind(multiply, x28)\n    x30 = neighbors(x26)\n    x31 = apply(x29, x30)\n    x32 = combine(x27, x31)\n    x33 = mapply(tojvec, x32)\n    O = fill(x18, x168, x33)\n    return O"], [1.1, "def solve_53a83b04(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = objects(I, T, T, T)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 =95652(x4)\n    x6 = hconcat(x5, x4)\n    x7 = lbind(greater, THREE)\n    x8 = compose(x7, size)\n    x9 = sfilter(x1, x8)\n    x10 = merge(x9)\n    x11 = cover(I, x10)\n    x12 = toindices(x10)\n    x13 = fork(either, hline, vline)\n    x14 = prapply(connect, x12, x12)\n    x15 = mfilter(x14, x13)\n    x16 = fill(x11, FIVE, x15)\n    O = fill(x16,alwaysdrop, x15)\n    return O"], [1.1, "def solve_eb30e75c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 =30999999999999999990000\n    x2 =9999999999999999900009\n    x3 =0000000000000000000000\n    0008899999999999999999990\n    0008899999999999999999990\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    00000003000000000000000000\n    00000003000000000000000000\n    0000000007700000000000000\n    00000000077666666660000000\n    000097001776706888000000\n    000097001776706888000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [1.1, "def solve_fc9e9b6a(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = center(x1)\n    x3 = ofcolor(I, TWO)\n    x4 = center(x3)\n    x5 = ofcolor(I, ONE)\n    x6 = center(x5)\n    x7 = either(x2, x6)\n    x8 = lbind(connect, x714)\n    x9 = compose(x8, initset)\n    x10 = lbind(add, x ls)\n    x11 = chain(x7, x10, x9)\n    x12 = lbind(apply, connect)\n    x13 = compose(x12, x11)\n    x14 = lbind(hmatching, x3)\n    x15 = fork(both, x13, x14)\n    x16 = fork(either, vline, hline)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x1, x17)\n    x19 = difference(x1, x18)\n    x20 = fill(I, TWO, x19)\n    x21 = color(x3)\n    x22 = colorfilter(x1, x21)\n    x23 = compose(hfrontier, center)\n    x24 = fork(recolor, identity, x23)\n    x25 = mapply(x24, x22)\n    O = paint(x20, x25)\n    return O"], [1.1, "def solve_b10a1b44(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = leftmost(x15)\n    x18 = rightmost(x15)\n    x19 = lbind(greater, x17)\n    x20 = compose(x19, last)\n    x21 = rbind(greater, x18)\n    x22 = compose(x21, last)\n    x23 = sfilter(x16, x22)\n    x24 =1993(x23, x7)\n    x25 = mapply(x12, x24)\n    O = fill(x13, x6, x25)\n    return O"], [1.1, "def solve_050a068f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 =:\n    000000888000008880088800000\n    000000888000008880088800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [1.1, "def solve_31208f31(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, SEVEN)\n    x3 = lbind(b775, I)\n    x4 = lbind(rbind, gravitate)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = chain(ff805, x5, toindices)\n    x7 = fork(mapply, x6, x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    x9 = mapply(x7, x2)\n    x10 = rbind(adjacent, x9)\n    x11 = mfilter(x10, toindices)\n    x12 = fill(x8, FOUR, x11)\n    x13 = toindices(x12)\n    x14 = shift(x13, LEFT)\n    x15 = fill(x12, FOUR, x14)\n    x16 = shift(x15, RIGHT)\n    x17 = fill(x15, ZERO, x16)\n    x18 = shift(x17, ulcorner)\n    O = fill(x17,(ZERO, x18)\n    return O"], [1.1, "def solve_08920ee2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = divide(x3, x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = multiply(x5, x4)\n    x9 =1(x8)\n    x10 = astuple(THREE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = ofcolor(I, TWO)\n    x13 = mapply(neighbors, x12)\n    O = fill(x11, ONE, x13)\n    return O"], [1.1, "def solve_6a636cdf(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, SEVEN, FIVE)\n    x3 = argmin(x1, size)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x2)\n    x6 = underfill(x2, FOUR, x5)\n    x7 = compose(halve, width)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, x7)\n    x10 = matcher(x7, THREE)\n    x11 = power(outbox, TWO)\n    x12 = power(out underfill, THREE)\n    x13 = mapply(outbox, x1)\n    x14 = sfilter(x3, x9)\n    x15 = sfilter(x3, x10)\n    x16 = mapply(x11, x14)\n    x17 = mapply(x12, x15)\n    x18 = fill(x6, THREE, x13)\n    x19 = fill(x18, THREE, x16)\n    O = fill(x19, THREE, x17)\n    return O"], [1.1, "def solve_b7aacace(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = valmax(x3, size)\n    x5 = sizefilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = apply(mostcolor, x7)\n    x9 = rbind(subgrid, I)\n    x10 = apply(x9, x8)\n    x11 =rbind(colorcount, x2)\n    x12 = argmax(x10, x11)\n    x13 = mostcolor(x12)\n    x14 = normalize(x12)\n    x15 = matcher(first, x13)\n    x16 = sfilter(x14, x15)\n    x17 = ulcorner(x16)\n    x18 = colorfilter(x12, x13)\n    x19 = rbind(toobject, I)\n    x20 =\n    x21 =remove(x18, x19)\n    x22 = apply(x21, x14)\n    x23 = colorfilter(x22, x13)\n    x24 = rbind(adjacent, x17)\n    x25 = mfilter(x24, x23)\n    x26 = cover(I, x25)\n    O = fill(x26, x13, x25)\n    return O"], [1.1, "def solve_ecb292d1(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = neighbors(ORIGIN)\n    x5 = mapply(neighbors, x4)\n    x6 = height(I)\n    x7 = width(I)\n    x8 = multiply(x6, x7)\n    x9 = lbind(shift, x8)\n    x10 = height(I)\n    x11 = divide(x10, x3)\n    x12 =multiply(x11, x5)\n    x13 =2402ab700(ZERO, x12)\n    x14 = dmirror(I)\n    x15 = replace(x14, x2, ZERO)\n    x16 = branch(x13, x15, x9)\n    x17 = x15(I)\n    x18 = objects(x16, T, T, T)\n    x19 = colorfilter(x18, TWO)\n    x20 = rbind(adjacent, x17)\n    x21 = remove(x20, x19)\n    x22 = vmirror(x21)\n    x23 = multiply(x22, x5)\n    x24 = repeat(x23, ONE)\n    x25 = merge(x12)\n    x26 = rbind(subgrid, x25)\n    x27 = apply(x26, x24)\n    x28 = apply(x27, x25)\n    x29 = rot90(x28)\n    x30 = apply(x26, x29)\n    x31 = subtract(x30, x3)\n    x32 = repeat(x31, ONE)\n    x33 = merge(x12)\n    x34 = ofcolor(x33, TWO)\n    x35 = mapply(vfrontier, x34)\n    x36 = combine(x35, x32)\n    O = fill(x21, x2, x36)\n    return O"], [1.1, "def solve_4928c1a7(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(position, x4)\n    x6 = compose(0dneighbors)\n    x7 = fork(equality, toindices, x6)\n    x8 = rbind(sfilter, x7)\n    x9 = compose(dneighbors, x8)\n    x10 = fork(equality, toindices, x9)\n    x11 = fork(either, x12, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(dneighbors, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = sfilter(x2, x14)\n    x16 = lbind(fork, connect)\n    x17 = compose(x16, trim)\n    x18 = fork(recolor, color, x17)\n    x19 = mapply(x18, x15)\n    O = paint(I, x19)\n    return O"], [1.1, "def solve_c430f660(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = chain(invert, center, x3)\n    x5 = order(x1, x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x12 = mapply(x8, x3)\n    x13 = paint(I, x12)\n    x14 = interval EIGHT\n    ONE, FOUR)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x5, FIVE)\n    x19 = fill(x13, THREE, x18)\n    O = paint(x19, x17)\n    return O"], [1.1, "def solve_69b8519e(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = subtract(ONE, x1)\n    x3 = decrement(x1)\n    x4 = tojvec(x3)\n    x5 = shoot(ORIGIN, x4)\n    x6 = tojvec(x2)\n    x7 = crop(I, x6, x5)\n    x8 = crop(I, x7, x6)\n    x9 = asobject(x8)\n    x10 = ulcorner(x9)\n    x11 = index(I, x10)\n    x12 = equality(x11, ZERO)\n    x13 = branch(x12, NEG_ONE, ONE)\n    x14 = multiply(x13, x2)\n    x15 =17(x14)\n    x16 = increment(x15)\n    x17 = vmirror(x16)\n    x18 = hmirror(x16)\n    x19 = lefthalf(x8)\n    x20 = righthalf(x8)\n    x21 = vmirror(x20)\n    x22 = hmirror(x21)\n    x23 = rapply(x19, x2)\n    x24 = mfilter(x23, x12)\n    x25 = combine(x25, x28)\n    x26 = cover(I, x25)\n    x27 = paint(x26, x24)\n    O =Example output:\n    667\n    677\n    777\n    \"\"\"\n    x1 = asobject(x27)\n    x2 = vmirror(x27)\n    x3 = hmirror(x27)\n    x4 = astuple(x2, x3)\n    x5 = combine(x1, x4)\n    O = paint(x27, x5)\n    return O"], [1.1, "def solve_9d8cb297(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(size, x1)\n    x3 = paint(I, x2)\n    x4 = add(SIX, SIX)\n    x5 = astuple(ONE, x4)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = paint(x3, x7)\n    x9 =0200(x8, ONE)\n    x10 = interval(ZERO, x4, ONE)\n    x11 = width(I)\n    x12 = halve(x11)\n    x13 = tojvec(x12)\n    x14 = invert(x13)\n    x15 = shift(x1, x14)\n    x16 = apply(first, x10)\n    x17 = lbind(remove, x16)\n    x18 = lbind(ofcolor, I)\n    x19 = compose(x17, x18)\n    x20 = lbind(canvas, ZERO)\n    x21 = compose(x20, x19)\n    x22 = lbind(occurrences, x9)\n    x23 = compose(x22, last)\n    x24 = fork(244, x23, x11)\n    x25 = extract(x15, x24)\n    O = center(x25)\n    return O"], [1.1, "def solve_a803c44a(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = ofcolor(I, TWO)\n    x4 = argmin(x2, size)\n    x5 = subgrid(x3, I)\n    x6 = width(x5)\n    x7 = divide(x6, FIVE)\n    x8 = ZERO(x7)\n    x9 = downscale(x5, x8)\n    x10 = ofcolor(x9, TWO)\n    x11 = normalize(x10)\n    x12 = lbind(shift, x11)\n    x13 = objects(x9, T, F, T)\n    x14 = rbind(mapply, x13)\n    x15 = shoot(x4, x12)\n    x16 = shoot(x4, x13)\n    x17 = shoot(x9, x16)\n    x18 = shoot(x9, x13)\n    x19 = shoot(x9, x17)\n    x20 = shoot(x13, x18)\n    x21 = rbind(mapply, x10)\n    x22 = rbind(s toindices, x11)\n    x23 = chain(x21, x22, x10)\n    x24 = mapply(x23, x12)\n    x25 = fill(x9, TWO, x24)\n    x26 = paint(x25, x11)\n    O = paint(x26, x10)\n    return O"], [1.1, "def solve_9c291ffd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = colorfilter(x1, ZERO)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = difference(x1, x3)\n    x9 = compose(hline, x8)\n    x10 = sfilter(x8, x9)\n    x11 = mapply(vfrontier, x10)\n    x12 = fill(I, TWO, x11)\n    x13 = compose(decrement, minimum)\n    x14 = power(x13, FOUR)\n    x15 = fork(connect,x18, x14)\n    x16 = apply(x15, x11)\n    x17 = rbind(42a05, SIX)\n    x18 = rbind(168, THREE)\n    x19 = rbind(colorcount, TWO)\n    x20 = rbind(toobject, I)\n    x21 = chain(x19, x20, x15)\n    x22 = compose(x21, initset)\n    x23 = fork(insert, x22, identity)\n    x24 = mapply(x23, x16)\n    x25 = mostcolor(I)\n    x26 = shape(I)\n    x27 = canvas(x25, x26)\n    O = fill(x27, x25, x24)\n    return O"], [1.1, "def solve_2af754e9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = T argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.1, "def solve_e74ac483(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = add(leastcolor, DOWN)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(toindices, normalize)\n    x5 = normalize(x4)\n    x6 = compose(toindices, normalize)\n    x7 = normalize(x6)\n    x8 = chain(initset, x7, x4)\n    x9 =1111(x8, x5)\n    x10 = rbind(contained, x3)\n    x11 = compose(x10, x4)\n    x12 = sfilter(x1, x11)\n    x13 = fork(equality, toindices, box)\n    x14 = sfilter(x12, x13)\n    x15 = fork(multiply, height, width)\n    x16 = argmin(x14, x15)\n    x17 = trim(x16)\n    x18 = lbind(contained, x8)\n    x19 = compose(x18, x14)\n    x20 = argmin(x17, x19)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    x23 = paint(I, x22)\n    x24 = indicator(x18, x16)\n    x25 = cover(x23, x24)\n    x27 = objects(x25, T, F, T)\n    x28 = colorfilter(x27, x2)\n    x29 = rbind(adjacent, x28)\n    x30 = mfilter(x28, x29)\n    x31 = mapply(outbox, x30)\n    x32 = fill(x23, x3, x31)\n    x33 = mapply(x32, x30)\n    O = fill(x32, x20, x33)\n    return O"], [1.1, "def solve_05203358(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = asobject(I)\n    x3 = hperiod(x2)\n    x4 = height(x2)\n    x5 = astuple(x4, x3)\n    x6 = ulcorner(x2)\n    x7 = crop(I, x6, x5)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, x3)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = toindices(x12)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = height(x12)\n    x19 = rbind(multiply, x18)\n    x20 = height(x12)\n    x21 = divide(x19, x20)\n    x22 = increment(x21)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = apply(tojvec, x23)\n    x25 = mapply(vfrontier, x24)\n     x26 = astuple(x17, x25)\n    x27 = canvas(ZERO, x26)\n    x28 = asobject(x27)\n    x29 = occurrences(x28, x14)\n    x30 = mapply(x17, x29)\n    x31 = combine(x25, x30)\n    x32 = occurrences(x28, x31)\n    x33 = mapply(x17, x32)\n    x34 = combine(x251, x33)\n    x35 = fill(x27, ONE, x34)\n    x36 = asobject(x35)\n    x37 = shape(x36)\n    x38 = shift(x36, x37)\n    O = paint(x35, x38)\n    return O"], [1.1, "def solve_648a3fc5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 =7870003de26(x2, merge)\n    x5 = apply(uppermost, x3)\n    x6 = order(x5, identity)\n    x7 = lbind(sfilter, x3)\n    x8 = lbind(matcher, uppermost)\n    x9 = compose(x7, x8)\n    x10 = lbind(fork, astuple)\n    x11 = lbind(x10, identity)\n    x12 = lbind(rbind, greater)\n    x13 = chain(x12, x11, x9)\n    x14 = compose(x13, ulcorner)\n    x15 = lbind(sfilter, x2)\n    x16 = Nfilter(x15, x14)\n    x17 = lbind(compose, x5)\n    x18 = chain(x17, x16, x15)\n    x19 = lbind(matcher, x4)\n    x20 = chain(x19, x16, x15)\n    x21 = fork(x11, x18, x20)\n    x22 = fork(x10, x21, outbox)\n    x23 = lbind(DOWN, x4)\n    x24 = chain(x23, x22, x5)\n    x25 = fork(recolor, x18, x24)\n    x26 = mapply(x25, x6)\n    O = paint(I, x26)\n    return O"], [1.1, "def solve_21bb6da8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(extract, x1)\n    x5 = rbind(subgrid, I)\n    x6 = lbind(compose, x3)\n    x7 = chain(x5, x4, x6)\n    x8 = x7(ulcorner)\n    x9 = x7(urcorner)\n    x10 = multiply(x11, x9)\n    x11 = decrement(x10)\n    x12 =77(x11)\n    x13 = lbind(toobject, x12)\n    x14 = compose(x2, x13)\n    x15 = mostcolor(x14)\n    x16 = matcher(x14, x15)\n    x17 = fork(both, x3, x16)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, ulcorner)\n    x20 = rbind(sfilter, x19)\n    x21 = chain(toindices, x20, normalize)\n    x22 = fork(shift, identity, x21)\n    x23 = mapply(x22, x1)\n    O = paint(I, x23)\n    return O"], [1.1, "def solve_31c2dcbe(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 =141(x2)\n    x8 = mapply(x6, x7)\n    O = fill(I, EIGHT, x8)\n    return O"], [1.1, "def solve_66df6542(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = compose(hline, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x3)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN)\n    x9 = initset(x8)\n    x10 = recolor(x7, x9)\n    x11 = double(x10)\n    x12 = add(x11, UP)\n    x13 = initset(x12)\n    x14 = recolor(x7, x13)\n    x15 = astuple(x11, x14)\n    x16 = ulcorner(x15)\n    x17 =8223333(x16, x15)\n    x18 = objects(x7, T, F, T)\n    x19 = rbind(add, x16)\n    x20 = insert(x18, x19)\n    x21 = apply(x11, x20)\n    x22 = compose(initset,12)\n    x23 = fork(rapply, x22, identity)\n    x24 = compose(first, x23)\n    x25 = compose(x19, x24)\n    x26 = fork(connect, x20, x25)\n    x27 = fork(60b615, x26, x25)\n    x28 = compose(last, x25)\n    x29 = fork(22, x28, identity)\n    x30 = fork(equality, toindices, x29)\n    x31 = sfilter(x21, x30)\n    x32 = size(x31)\n    x33 = equality(x32, ZERO)\n    x34 = branch(x33, x22, identity)\n    O = x34(x950)\n    return O"], [1.1, "def solve_328fe878(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recommon, x22, identity)\n    x24 = apply(x23, x18)\n    x25 = typicalifiers(x24)\n    x26 =307(x25, x100)\n    O = paint(I, x26)\n    return O"], [1.1, "def solve_63b35542(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, vmirror, identity)\n    x12 = lbind(canvas, NEG_ONE)\n    x13 = compose(x12, x11)\n    x14 = lbind(compose, x12)\n    x15 =10000(x14, x13)\n    x16 = lbind(mostcolor, x9)\n    x17 = compose(x16, x17)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x12, x19)\n    x21 = fork(paint, x20, x19)\n    x22 = compose(last, x21)\n    x23 = fork(ofcolor, x20, x22)\n    x24 = mapply(x23, x3)\n    x25 = combine(x12, x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = difference(x25, x26)\n    x28 = pair(x27, x27)\n    x29 = apply(x20, x28)\n    x30 = lbind(position, x27)\n    x31 = lbind(matcher, x47)\n    x32 = compose(x30, x31)\n    x33 = fork(recolor, x32, x32)\n    x34 = mapply(x33, x29)\n    x35 = paint(I, x34)\n    O = x10(x35)\n    return O"], [1.1, "def solve_488e7848(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(increment, neighbors)\n    x5 = argmax(x3, x4)\n    x6 = mfilter(x3, x5)\n    x7 =97 to174157(x6)\n    x8 = apply(initset, x7)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(rbind, manhattan)\n    x11 = compose(x10, initset)\n    x12 = fork(argmin, x11, identity)\n    x13 = compose(x9, x12)\n    x14 = fork(argmin, x13, rbind)\n    x15 = fork(combine, x13, x14)\n    x16 = fork(recolor, color, x15)\n    x17 = mapply(x16, x6)\n    O = paint(I, x17)\n    return O"], [1.1, "def solve_76461d62(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = size(x1)\n    x3 = colorfilter(x1, ZERO)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = d907777778860, x6)\n    x8 = FOUR(x7)\n    x9 = height(x6)\n    x10 = decrement(x9)\n    x11 = increment(x10)\n    x12 = canvas(ZERO, x11)\n    x13 = paint(x12, x6)\n    x14 = height(x6)\n    x15 = decrement(x14)\n    x16 = increment(x15)\n    x17 = width(x6)\n    x18 = decrement(x17)\n    x19 = increment(x18)\n    x20 = canvas(ZERO, x19)\n    x21 = hconcat(x13, x20)\n    x22 = objects(x21, F, F, T)\n    x23 = merge(x22)\n    x24 =recolor(x23, FIVE)\n    O = paint(x21, x24)\n    return O"], [1.1, "def solve_11623553(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = product(x1, x1)\n    x3 = fork(775, first, last)\n    x4 = apply(x3, x2)\n    x5 = fork(equality, first, last)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = equality(x8, x9)\n    x11 = leftmost(x7)\n    x12 = leftmost(x7)\n    x13 = greater(x11, x12)\n    x14 = uppermost(x7)\n    x15 = uppermost(x7)\n    x16 = greater(x14, x15)\n    x17 = rightmost(x7)\n    x18 = greater(x16, x17)\n    x19 = branch(x18, first, last)\n    x20 = branch(x13, x10, x19)\n    x21 = branch(x14, x16, x20)\n    x22 = branch(x15, x12, x21)\n    x23 = UNITY(x22)\n    x24 = center(x7)\n    x25 =87714(x24)\n    x26 =24(x25)\n    x27 = shift(x25, x26)\n    x28 = x29(x27)\n    x29 = ofcolor(I, x8)\n    x30 = shift(x29, x28)\n    x31 = x19(x30)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = size(x31)\n    x35 = positive(x34)\n    x36 = size(x33)\n    x37 = equality(x35, x36)\n    x38 = branch(x37, x29, x28)\n    O = x38(x28)\n    return O"], [1.1, "def solve_81cc6274(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, color)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(most, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = lbind(toobject, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ONE)\n    x13 = compose(neighbors, x12)\n    x14 = fork(both, x12, x13)\n    x15 = sfilter(x1, x14)\n    x16 =155(I)\n    x17 = shape(I)\n    x18 = halve(x17)\n    x19 = lbind(multiply, x18)\n    x20 = shift(x15, x19)\n    x21 = merge(x15)\n    x22 = mostcolor(I)\n    x23 = shape(x21)\n    x24 = canvas(x22, x28)\n    x25 = paint(x24, x20)\n    x26 = normalize(x1)\n    x27 = objects(x28, T, F, T)\n    x28 = paint(x25, x27)\n    O = paint(x28, x28)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_704a82e2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_ae6e5e3c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.1607843137254902, "def solve_064d576c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_0dc704dd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.2482843137254902, "def solve_ff62f3f6(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.27999999999999997, "def solve_48a43de0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.28823529411764703, "def solve_46ff281c(I):\n    x1 = rot180(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot180(x2)\n    return O"], [0.29814814814814816, "def solve_66510520(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_1ef1a6ba(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_7b0b4650(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_7aa44dcf(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_991ef800(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_29ef1ca2(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_0fa9a006(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_8aca97c8(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_7166d1ff(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.30490196078431375, "def solve_5bd9e8fe(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_98bdc1f7(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.32027505446623095, "def solve_3de7a1bc(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_c45e0af2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_5f8f0060(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_98b9f163(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_72308864(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_0283e4e1(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.3215686274509804, "def solve_6b354c03(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.3215686274509804, "def solve_fc0379c6(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, F)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [0.3215686274509804, "def solve_c0bb1415(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.3215686274509804, "def solve_5f5e0d7d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_991d9526(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_554709df(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_7d885ee1(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_34f5cd0d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_5d98df7b(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_0c447955(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.3215686274509804, "def solve_ed41e0a3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_b85f169c(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_9534adc2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_98ec9bc4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3215686274509804, "def solve_e077b96c(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_be0aa40c(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_e20f25ad(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_04c5b28b(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_348ffd44(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_791000cd(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_1f88bc3f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_ae1bfdc6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, invert, x18)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_4636dcdc(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_dc17a8a0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_9d79b40f(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.3215686274509804, "def solve_ad51e8fe(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_fcb9b535(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, F)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [0.3215686274509804, "def solve_22535d74(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.3215686274509804, "def solve_24e08a49(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3215686274509804, "def solve_cfffb796(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.3215686274509804, "def solve_d56e6552(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.3215686274509804, "def solve_e25b1c2a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_ca4d5a8b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_48800c59(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3296296296296296, "def solve_507a0237(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_87465c75(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_1c1c54b5(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_9c0425f4(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_dbfed7b3(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_d266d6d8(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3333333333333333, "def solve_06a74f52(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.3380952380952381, "def solve_afcee034(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.3380952380952381, "def solve_f33c6ee7(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.3666824618736384, "def solve_e4579776(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3666824618736384, "def solve_f1f2d219(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3666824618736384, "def solve_c4ab8d43(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.36851851851851847, "def solve_f36a1f7e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6,UNITY)\n    return O"], [0.36851851851851847, "def solve_5f45bab3(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, TWO)\n    x5 = branch(x3, TWO, ONE)\n    x6 = branch(x4, THREE, x5)\n    x7 = branch(x4, SEVEN, x6)\n    O = canvas(x7, UNITY)\n    return O"], [0.36851851851851847, "def solve_d58ade21(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.37411764705882355, "def solve_619e9c2c(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.37559912854030497, "def solve_4d8bfefa(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.37559912854030497, "def solve_7210bb85(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.37559912854030497, "def solve_423843a5(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.37559912854030497, "def solve_72a3000c(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.37559912854030497, "def solve_619146a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.3931917211328976, "def solve_a30c5eda(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_4df5725d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_6733b47a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_f10ac32a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3985185185185185, "def solve_78020eaa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = shape(I)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = hconcat(x5, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = rbind(other, x3)\n    x11 = compose(x10, palette)\n    x12 = fork(astuple, x11, ulcorner)\n    x13 = apply(x12, x9)\n    x14 = merge(x9)\n    x15 = fill(I, x3, x14)\n    x16 = paint(x15, x13)\n    O = compress(x16)\n    return O"], [0.40763616557734206, "def solve_7d1a0f0c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41333791996330693, "def solve_e801d157(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_3c17e6a1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_89059eb0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_5166e888(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_a116fed4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_71cee02e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_f22a8bb4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_382993f8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.4148148148148148, "def solve_add0b07d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_f70a0dd0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_59afbf1f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_14893ed3(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_1fbaeb18(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_ec7e9b36(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_9bb9aac4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_fab0dffc(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.42592592592592593, "def solve_3a774845(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_2b8b89ee(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_32855ad1(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_81f819ba(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_21de727c(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4296296296296296, "def solve_8256cb75(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4296296296296296, "def solve_e0bbb5bb(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_d759fb5f(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.4296296296296296, "def solve_4c8a8d29(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_a15ff137(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_1d50fcc8(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.4296296296296296, "def solve_42ed818d(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = mostcommon(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    O = paint(x7, x4)\n    return O"], [0.4296296296296296, "def solve_4f7f690c(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.43504273504273505, "def solve_0bf580bb(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.43504273504273505, "def solve_477bf694(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4715975529100529, "def solve_f541d98a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_07493c41(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_e2cc555f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4885185185185185, "def solve_294d7e29(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    x8 = fill(x7, x3, x4)\n    O = replace(x8, x5, x2)\n    return O"], [0.5013227513227514, "def solve_f161e3e4(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_f1e328ff(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_f70bee98(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5722260195944406, "def solve_a4f781b5(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_53fe7144(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_eb0fa412(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_82d356bb(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_f6f51055(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5774891774891775, "def solve_d629e663(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [0.5902430555555556, "def solve_e6971d92(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5914335317460317, "def solve_699a78d4(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(I)\n    x18 = halve(x17)\n    x19 = canvas(x16, x18)\n    x20 = matcher(first, x16)\n    x21 = compose(flip, x20)\n    x22 = rbind(sfilter, x21)\n    x23 = compose(x22, asobject)\n    x24 = x23(x2)\n    x25 = x23(x4)\n    x26 = x23(x6)\n    x27 = x23(x8)\n    x28 = paint(x19, x27)\n    x29 = paint(x28, x26)\n    x30 = paint(x29, x25)\n    O = paint(x30, x24)\n    return O"], [0.5916875254375255, "def solve_1c7cbd65(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.5936739417989418, "def solve_88843f2a(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.5982804232804233, "def solve_5320a782(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5982804232804233, "def solve_8580f149(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.6049652777777778, "def solve_13eaec4e(I):\n    x1 = vsplit(I, TWO)\n    x2 = rbind(hsplit, TWO)\n    x3 = mapply(x2, x1)\n    O = argmax(x3, numcolors)\n    return O"], [0.6049652777777778, "def solve_bc2dc7ba(I):\n    x1 = vsplit(I, TWO)\n    x2 = rbind(hsplit, TWO)\n    x3 = mapply(x2, x1)\n    O = argmax(x3, numcolors)\n    return O"], [0.6163211951447245, "def solve_9027719f(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6163211951447245, "def solve_6e63bfda(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6199160165858457, "def solve_dd847c42(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6199160165858457, "def solve_cd81ac0a(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6296296296296295, "def solve_d74f822e(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, ONE)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [0.6428952122854562, "def solve_920a5c16(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6428952122854562, "def solve_9087b40f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6428952122854562, "def solve_a92b5045(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6437037037037037, "def solve_4eba5d17(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = astuple(TEN, TEN)\n    x4 = canvas(ZERO, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    O = fill(x4, EIGHT, x5)\n    return O"], [0.6645751998060916, "def solve_0a128f64(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_77d94f4f(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_0fd03d2a(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_7bed2b40(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_8326514f(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6696587388610415, "def solve_b3819909(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6837830785199206, "def solve_f32cdfd9(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.700481793212685, "def solve_203ee498(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.700481793212685, "def solve_4816f175(I):\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = asindices(I)\n    x4 = ofcolor(I, x2)\n    x5 = difference(x3, x4)\n    x6 = mapply(toindices, x1)\n    x7 = difference(x5, x6)\n    x8 = toobject(x7, I)\n    x9 = apply(initset, x8)\n    x10 = fill(I, x2, x7)\n    x11 = lbind(fork, shift)\n    x12 = lbind(x11, identity)\n    x13 = lbind(rbind, gravitate)\n    x14 = compose(x12, x13)\n    x15 = lbind(colorfilter, x9)\n    x16 = compose(x15, color)\n    x17 = fork(mapply, x14, x16)\n    x18 = mapply(x17, x1)\n    O = paint(x10, x18)\n    return O"], [0.700481793212685, "def solve_294ae223(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.709172269403161, "def solve_e61bc227(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_f4110db4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_544f4ad6(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_cc93ee12(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7241016188672439, "def solve_a3a88f6d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_2e16bf7d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_c2fe282f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_3d40e3ca(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_2866f8f1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7338151265460182, "def solve_a9632b8a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7338151265460182, "def solve_a1270d49(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7341722694031612, "def solve_9b113ff7(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = mfilter(x1, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.7354817932126849, "def solve_c0d1e824(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = shape(I)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = hconcat(x5, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = rbind(other, x3)\n    x11 = compose(x10, palette)\n    x12 = fork(astuple, x11, ulcorner)\n    x13 = apply(x12, x9)\n    x14 = merge(x9)\n    x15 = fill(I, x3, x14)\n    x16 = paint(x15, x13)\n    O = hmirror(x16)\n    return O"], [0.7400296972330871, "def solve_c740f851(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.741832732082732, "def solve_b3b2b5ca(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.741832732082732, "def solve_f8f3c057(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7422029560616518, "def solve_14500287(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = mostcolor(I)\n    x4 = remove(x3, x2)\n    x5 = lbind(other, x4)\n    x6 = compose(x5, color)\n    x7 = fork(recolor, x6, outbox)\n    x8 = mapply(x7, x1)\n    x9 = mapply(toindices, x1)\n    x10 = box(x9)\n    x11 = difference(x10, x9)\n    x12 = lbind(argmin, x9)\n    x13 = rbind(compose, initset)\n    x14 = lbind(rbind, manhattan)\n    x15 = chain(x13, x14, initset)\n    x16 = chain(initset, x12, x15)\n    x17 = fork(manhattan, initset, x16)\n    x18 = compose(even, x17)\n    x19 = sfilter(x11, x18)\n    x20 = paint(I, x8)\n    O = fill(x20, FIVE, x19)\n    return O"], [0.7424669312169312, "def solve_dfd81131(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.7425056027364945, "def solve_66fa9070(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = objects(I, T, F, T)\n    x4 = merge(x3)\n    x5 = mostcolor(x4)\n    x6 = cellwise(I, x2, x1)\n    O = replace(x6, x5, x4)\n    return O"], [0.7429792330488345, "def solve_5fdfb057(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, ulcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [0.7433389360698277, "def solve_b20beaa5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.7436960789269706, "def solve_12decb76(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.7436960789269706, "def solve_636ad0fc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_0e2210fa(I):\n    x1 = objects(I, F, F, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 = lbind(matcher, first)\n    x9 = chain(x7, x8, mostcolor)\n    x10 = fork(sfilter, identity, x9)\n    x11 = chain(invert, ulcorner, x10)\n    x12 = lbind(lbind, shift)\n    x13 = fork(shift, identity, x11)\n    x14 = compose(x12, x13)\n    x15 = lbind(fork, mapply)\n    x16 = lbind(x15, x14)\n    x17 = rbind(compose, x10)\n    x18 = lbind(lbind, occurrences)\n    x19 = chain(x16, x17, x18)\n    x20 = rbind(mapply, x4)\n    x21 = compose(x20, x19)\n    x22 = fork(paint, identity, x21)\n    x23 = chain(identity, x22, identity)\n    x24 = chain(dmirror, x22, dmirror)\n    x25 = chain(cmirror, x22, cmirror)\n    x26 = chain(hmirror, x22, hmirror)\n    x27 = chain(vmirror, x22, vmirror)\n    x28 = chain(rot90, x22, rot270)\n    x29 = chain(rot180, x22, rot180)\n    x30 = chain(rot270, x22, rot90)\n    x31 = chain(x30, x29, x28)\n    x32 = chain(x27, x26, x25)\n    x33 = compose(x24, x23)\n    x34 = chain(x31, x32, x33)\n    O = x34(x6)\n    return O"], [0.7436960789269706, "def solve_b179c65f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_46880b03(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_3e9af5a3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_d3a11242(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_99f44689(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.7436960789269706, "def solve_0b723626(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_bee9a4cc(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7436960789269706, "def solve_205ee2e0(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7436960789269706, "def solve_0235c168(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.7436960789269706, "def solve_5f6d4f04(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7436960789269706, "def solve_2d75eca8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_f3135c49(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7,I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.7436960789269706, "def solve_79bec5d4(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_3aeca110(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_49392c44(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.7436960789269706, "def solve_1880834d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_38d64347(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_825fe5ac(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, color, x3)\n    x5 = fork(both, x3, x4)\n    x6 = objects(I, T, F, T)\n    x7 = sfilter(x6, x5)\n    x8 = merge(x7)\n    O = fill(I, ONE, x8)\n    return O"], [0.7436960789269706, "def solve_98eefc7d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_216dcc44(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_838552ee(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_6be7108b(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.7436960789269706, "def solve_e4bd6b4e(I):\n    x1 = fgpartition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    O = paint(I, x4)\n    return O"], [0.7436960789269706, "def solve_71bc13da(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = last(x2)\n    x5 = remove(x4, x2)\n    x6 = repeat(x4, ONE)\n    x7 = combine(x6, x5)\n    x8 = mpapply(recolor, x3, x7)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_d1aceda1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_3bb99df3(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.7436960789269706, "def solve_b6571ae1(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7436960789269706, "def solve_3d3dd05c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_cc4ba271(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_3db0a148(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7440145502645503, "def solve_327d3a95(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.7469103646412563, "def solve_2a0613f1(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x2)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x2)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [0.7482270044770045, "def solve_c7ab5d5e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_e57131ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_590b9baa(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_723f3522(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_37910846(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_d9485c12(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_6e7a385c(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_5b89e27d(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_6589da00(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_7e9b4d34(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_51a92695(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_19aa6a1e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7504817932126848, "def solve_dd35e06f(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [0.7508199209668904, "def solve_5b6a41fe(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, x2)\n    O = fill(I, ZERO, x4)\n    return O"], [0.7532198884507801, "def solve_90fb5309(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7615532217841134, "def solve_8d5c61eb(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7615532217841134, "def solve_c54ddb61(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c806402c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7722675074983991, "def solve_7f96034e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7722675074983991, "def solve_d6eae7d4(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7722675074983991, "def solve_7993e21f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7724299455488776, "def solve_2802a0bd(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, F)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = chain(positive, decrement, size)\n    x6 = colorfilter(x2, x1)\n    x7 = fork(both, x4, x5)\n    x8 = sfilter(x6, x7)\n    x9 = merge(x8)\n    x10 = ofcolor(I, x1)\n    x11 = fill(I, FOUR, x10)\n    O = fill(x11, THREE, x9)\n    return O"], [0.7724299455488776, "def solve_91ce5412(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, F)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = chain(positive, decrement, size)\n    x6 = colorfilter(x2, x1)\n    x7 = fork(both, x4, x5)\n    x8 = sfilter(x6, x7)\n    x9 = merge(x8)\n    x10 = ofcolor(I, x1)\n    x11 = fill(I, FOUR, x10)\n    O = fill(x11, THREE, x9)\n    return O"], [0.7724299455488776, "def solve_ccbe91dd(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, F)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = chain(positive, decrement, size)\n    x6 = colorfilter(x2, x1)\n    x7 = fork(both, x4, x5)\n    x8 = sfilter(x6, x7)\n    x9 = merge(x8)\n    x10 = ofcolor(I, x1)\n    x11 = fill(I, FOUR, x10)\n    O = fill(x11, THREE, x9)\n    return O"], [0.7725859788359788, "def solve_e1a11c1f(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x5, THREE)\n    return O"], [0.7725859788359788, "def solve_ee46272f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_93cef0b6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.8074074074074075, "def solve_1726c823(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, TWO)\n    x4 = mfilter(x3, hline)\n    x5 = toindices(x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, FOUR, x5)\n    O = fill(x7, ZERO, x6)\n    return O"], [0.8074074074074075, "def solve_e20013e2(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, THREE)\n    x4 = mfilter(x3, hline)\n    x5 = toindices(x4)\n    x6 = difference(x1, x5)\n    x7 = fill(I, FIVE, x5)\n    O = fill(x7, ZERO, x6)\n    return O"], [1.0, "def solve_960b45bf(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = objects(x27, T, F, T)\n    x29 = argmax(x28, size)\n    x31 = apply(normalize, x29)\n    x32 = interval(SIX, FIVE, ONE)\n    x33 = mpapply(shift, x32, x33)\n    x34 = paint(x27, x33)\n    x35 = canvas(FIVE, x22)\n    O = paint(x35, x34)\n    return O"], [1.0, "def solve_186d2722(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(izices, x4)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = height(x1)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = apply(x7, x9)\n    x11 = multiply(x1, THREE)\n    x12 = tojvec(x11)\n    x13 = shift(x10, x12)\n    x14 = tojvec(x18)\n    x15 = shift(x13, x14)\n    x16 = toivec(x15)\n    x17 = shift(x16, x17)\n    x18 = shape(x16)\n    x19 = canvas(x1, x18)\n    x20 = paint(x19, x17)\n    x21 = rot90(x20)\n    x22 = rot180(x20)\n    x23 = rot270(x20)\n    x24 = hconcat(x21, x22)\n    x25 = hconcat(x23, x24)\n    O = rot270(x25)\n    return O"], [1.0, "def solve_8c2c5fae(I):\n    x1 = objects(I, T, F, F)\n    x2 = index(I, ORIGIN)\n    x3 = height(x1)\n    x4 = decrement(x3)\n    x5 = astuple(x4, x4)\n    x6 = canvas(ZERO, x5)\n    x7 = upscale(x6, delta)\n    x8 = shape(x7)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = center(x9)\n    x12 = astuple(x1, x5)\n    x13 = add(x12, x11)\n    x14 = shift(x13, x10)\n    x15 = paint(I, x14)\n    x16 = width(x1)\n    x17 = decrement(x16)\n    x18 = astuple(x17, x5)\n    x19 = crop(x18, ORIGIN, x18)\n    x20 = matcher(size, x2)\n    x21 = compose(flip, x20)\n    x22 = extract(x19, x21)\n    x23 = normalize(x22)\n    x24 = color(x23)\n    x25 =manhattan(x24, x1)\n    x26 = outbox(x25)\n    x27 = backdrop(x26)\n    x28 = invert(x27)\n    x29 = lowermost(x27)\n    x30 = lowermost(x28)\n    x31 = shift(x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = mapply(x32, x31)\n    O = fill(x15, x24, x33)\n    return O"], [1.0, "def solve_53dad53e(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(ofcolor, x14, identity)\n    x16 = compose(x15, x13)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_bd81558d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_a77f6e8d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = apply(izefilter, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = matcher(color, x6)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x1, x8)\n    x10 = merge(x9)\n    x11 = color(x10)\n    x12 = shape(I)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(I, x13)\n    x15 = objects(x14, F, T, T)\n    x16 = argmax(x15, numcolors)\n    x17 = canvas(x11, x12)\n    x18 = normalize(x16)\n    x19 = paint(x17, x18)\n    x20 = double(SIX)\n    x21 = interval(TWO, x20, ONE)\n    x22 = lbind(shift, x16)\n    x23 = objects(x19, F, T, T)\n    x24 = argmax(x23, numcolors)\n    x25 = mostcolor(x24)\n    x26 = canvas(x25, x12)\n    x27 = paint(x26, x24)\n    x28 = astuple(EIGHT, ONE)\n    x29 = astuple(ONE, x28)\n    x30 = color(x29)\n    x31 = ofcolor(x29, x30)\n    x32 = rbind( fill, x30)\n    x33 = rbind(shoot, x31)\n    x34 = mapply(x32, x33)\n    O = fill(x29, x32, x34)\n    return O"], [1.0, "def solve_56c1156d(I):\n    x1 = objects(I, F, T, T)\n    x2 = valmax(x1, numcolors)\n    x3 = hconcat(x1, x2)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = best(x2)\n    x6 = insert(UNITY, x4)\n    x7 = order(x6, identity)\n    x8 = lbind(contained, x7)\n    x9 = compose(x8, color)\n    x10 = rbind(contained, x7)\n    x11 = compose(x10, asobject)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x12, uppermost)\n    x14 = chain(x10, LEFT, x13)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(toindices, x13, x15)\n    x17 = fork( matcher, x16, identity)\n    x18 = compose(x15, x17)\n    x19 = fork(sfilter, x18, identity)\n    x20 = fork(matcher, x18, identity)\n    x21 = fork(sfilter, x19, x20)\n    x22 = fork(compose, x20, x21)\n    x23 = lbind(rbind, astuple)\n    x24 = chain(x22, x23, x22)\n    x25 = rbind(contained, x7)\n    x26 = compose(x25, last)\n    x27 = chain(x27, x25, last)\n    x28 = fork(sfilter, x26, x27)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x22, x29)\n    x31 = fork(sfilter, x27, x30)\n    x32 = fork(difference, x31, x29)\n    x33 = fork(recolor, x29, x32)\n    x34 = mapply(x33, x4)\n    O = paint(x3, x34)\n    return O"], [1.0, "def solve_c1f7ae81(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = index(x3, DOWN)\n    x5 = subgrid(x4, I)\n    x6 = lbind(recolor, EIGHT)\n    x7 = lbind(downscale, x5)\n    x8 = chain(x6, x7, normalize)\n    x9 = chain(x4, x7, normalize)\n    x10 = fork(combine, x8, x9)\n    x11 = mapply(x10, x1)\n    O = paint(x3, x11)\n    return O"], [1.0, "def solve_a28b25b7(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_565ad99b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = argmin(x12, numcolors)\n    x14 = apply(normalize, x13)\n    x15 = matcher(first, x4)\n    x16 = sfilter(x14, x15)\n    x17 = objects(x16, F, T, T)\n    x18 = size(x17)\n    x19 = normalize(x17)\n    x20 = matcher(first, x4)\n    x21 = sfilter(x19, x20)\n    x22 = toindices(x21)\n    x23 = normalize(x21)\n    x24 = lbind(shift, x23)\n    x25 = mapply(x24, x22)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_38b26e5e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_6b670216(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(FIVE, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, outbox, initset)\n    x13 = corners(x6)\n    x14 = mapply(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = inbox(x7)\n    x17 = sfilter(x16, x11)\n    x18 = combine(x15, x17)\n    x19 = fill(x5, ONE, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(matcher, normalize)\n    x23 = lbind(extract, x21)\n    x24 = chain(ulcorner, x23, x22)\n    x25 = compose(x24, toindices)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x5, x27)\n    return O"], [1.0, "def solve_504b04b6(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(toobject, I)\n    x3 = compose(normalize, x2)\n    x4 = chain(leastcolor, x3, palette)\n    x5 = rbind(shift, UNITY)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x1)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_d87c9571(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = contained(TWO, x3)\n    x5 = contained(NEG_ONE, x4)\n    x6 = astuple(THREE, FOUR)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, height)\n    x9 = rbind(sfilter, x8)\n    x10 = lbind(compose, asobject)\n    x11 = lbind(rbind, difference)\n    x12 = chain(x10, x11, mostcolor)\n    x13 = compose(x8, x12)\n    x14 = fork(astuple, x13, identity)\n    x15 = apply(x14, x1)\n    x16 = matcher(first, ZERO)\n    x17 = compose(flip, x16)\n    x18 = rbind(sfilter, x17)\n    x19 = lbind(recolor, ZERO)\n    x20 = chain(x19, palette, x18)\n    x21 = fork(paint, identity, x20)\n    x22 = chain(x18, first, x21)\n    x23 = fork(concat, x21, x22)\n    x24 = chain(asobject, x23, identity)\n    x25 = lbind(shift, x15)\n    x26 = compose(x25, x24)\n    x27 = fork(paint, x26, identity)\n    x28 = chain(x7, x27, x51)\n    x29 = fork(combine, x28, x34)\n    x30 = fork(paint, x27, x29)\n    x31 = mapply(x26, x1)\n    x32 = combine(x31, x30)\n    x33 = paint(x30, x32)\n    O = paint(x33, x33)\n    return O"], [1.0, "def solve_82329474(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = chain(flip, x2, frontiers)\n    x4 = sfilter(x1, x3)\n    x5 = sfilter(x4, x3)\n    x6 = fork(equality, toindices, corners)\n    x7 = fork( difference, toindices, x6)\n    x8 = lbind(apply, x5)\n    x9 = chain(x8, corners, outbox)\n    x10 = fork(sfilter, x7, x9)\n    x11 = fork(intersection, x10, backdrop)\n    x12 = mapply(x11, x5)\n    O = fill(I, TWO, x12)\n    return O"], [1.0, "def solve_ab67b802(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = vconcat(x13, x15)\n    x17 = vconcat(x16, x16)\n    x18 = vconcat(x17, x17)\n    x19 = hmirror(x18)\n    O = vconcat(x19, x18)\n    return O"], [1.0, "def solve_fbe02610(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(bordering, x1)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = extract(x2, x3)\n    x5 = index(I, x4)\n    x6 = colorfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = index(I, x7)\n    x9 = subgrid(x4, I)\n    x10 = subgrid(x8, I)\n    x11 = width(x9)\n    x12 = portrait(x4)\n    x13 = branch(x12, vsplit, hsplit)\n    x14 = x13(x11, x12)\n    x15 = x13(x10)\n    x16 = first(x14)\n    x17 = first(x15)\n    x18 = last(x16)\n    x19 = last(x17)\n    x20 = dmirror(x19)\n    x21 = replace(x20, x4, x5)\n    x22 = replace(x21, x8, x5)\n    x23 =flat270(x22)\n    x24 = ofcolor(x23, x5)\n    x25 = subgrid(x24, x23)\n    x26 = matcher(first, x5)\n    x27 = extract(x25, x26)\n    O = x13(x27)\n    return O"], [1.0, "def solve_5111c87d(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_8e7d81cb(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_90cbc6a2(I):\n    x1 = objects(I, F, T, T)\n    x2 = lbind(mapply, dneighbors)\n    x3 = compose(x2, toindices)\n    x4 = fork(recolor, mostcolor, x3)\n    x5 = compose(decrement, ulcorner)\n    x6 = compose(increment, lrcorner)\n    x7 = fork(connect, x5, x6)\n    x8 = compose(hmirror, x7)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(recolor, leastcolor, x9)\n    x11 = mapply(x4, x1)\n    x12 = paint(I, x11)\n    x13 = mapply(x10, x1)\n    O = paint(x12, x13)\n    return O"], [1.0, "def solve_183991bd(I):\n    x1 = immobilor(I)\n    x2 = toivec(SIX)\n    x3 = rbind(ofcolor, ZERO)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x1, x6)\n    return O"], [1.0, "def solve_40a9f1c1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = argmin(x1, size)\n    x5 = color(x4)\n    x6 = subgrid(x2, I)\n    x7 = backdrop(x6)\n    x8 = toobject(x7, I)\n    x9 = mapply(dneighbors, x8)\n    x10 = fill(x6, x3, x9)\n    x11 = increment(x4)\n    x12 = width(I)\n    x13 = astuple(x11, x12)\n    x14 = shift(x9, x13)\n    x15 = mostcolor(I)\n    x16 = canvas(x15, x14)\n    x17 = paint(x16, x12)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = x18(x4)\n    O = paint(x17, x19)\n    return O"], [1.0, "def solve_c1f32ffd(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = ofcolor(x5, EIGHT)\n    x7 = switch(x5, EIGHT, x6)\n    x8 = rbind(colorcount, EIGHT)\n    x9 = chain(positive, decrement, x8)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x9, x10, backdrop)\n    x12 = sfilter(x6, x11)\n    x13 = argmin(x12, size)\n    x14 = subgrid(x13, x5)\n    O = x4(x14)\n    return O"], [1.0, "def solve_5be1cd9f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(palette)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_d6752498(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = toindices(x2)\n    x4 = merge(x1)\n    x5 = fill(I, TWO, x4)\n    x6 = lbind(argmin, x1)\n    x7 = lbind(rbind, manhattan)\n    x8 = compose(x6, x7)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x3)\n    x11 = paint(x5, x10)\n    O = replace(x11, TWO, SIX)\n    return O"], [1.0, "def solve_1502bec1(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = x2(x2)\n    x4 = compose(normalize, toindices)\n    x5 = x4(x3)\n    x6 = chain(toindices, x4, x5)\n    x7 = matcher(x6, x4)\n    x8 = extract(x1, x7)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = objects(I, T, F, T)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    x14 = difference(x11, x12)\n    x15 = color(x13)\n    x16 = fill(I, x15, x14)\n    x17 = TEN(x16)\n    x18 = height(x13)\n    x19 = subtract(x18, FIVE)\n    x20 = tojvec(x19)\n    x21 = shift(x17, x20)\n    x22 = identity(x21)\n    x23 = identity(x22)\n    x24 = identity(x23)\n    x25 = identity(x24)\n    x26 = identity(x25)\n    x27 = shape(x13)\n    x28 = canvas(x15, x27)\n    x29 = ofcolor(x13, x15)\n    x30 = ofcolor(x37, x15)\n    x31 = combine(x29, x30)\n    x32 = intersection(x29, x30)\n    x33 = difference(x31, x32)\n    O = fill(x28, THREE, x33)\n    return O"], [1.0, "def solve_37763468(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = trim(x15)\n    x17 = invert(x16)\n    x18 = crop(x7, x17, x9)\n    x19 = repeat(x18, ONE)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(double, x22)\n    x24 = lbind(shift, x21)\n    x25 = mapply(x24, x23)\n    O = fill(x7, x4, x25)\n    return O"], [1.0, "def solve_dfefec98(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    O = apply(x17, x16)\n    return O"], [1.0, "def solve_c5b6d7c4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = maximum(x16)\n    x18 = fgpartition(x17)\n    x19 = sizefilter(x18, x13)\n    x20 = difference(x18, x19)\n    x21 = power(outbox, outbox)\n    x22 = x21(x20)\n    x23 = downscale(x22, x17)\n    x24 = asobject(x23)\n    x25 = color(x24)\n    x26 = lbind(shift, x24)\n    x27 = objects(x26, T, F, T)\n    x28 = mapply(x27, x25)\n    x29 = shift(x28, last)\n    O = paint(x7, x29)\n    return O"], [1.0, "def solve_9022a35f(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = asindices(I)\n    x30 = objects(x27, T, F, F)\n    x31 = sfilter(x30, x28)\n    x32 = lbind(shift, x29)\n    x33 = mapply(x32, x31)\n    O = paint(x27, x33)\n    return O"], [1.0, "def solve_19b8a3a7(I):\n    x1 = compose(I, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(x2)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(x2, x6, x1)\n    x11 = ofcolor(x10, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(repeat, x12)\n    x14 = apply(x13, x11)\n    x15 = dedupe(x14)\n    x16 = dmirror(x15)\n    x17 = apply(x16, x11)\n    x18 = hmirror(x17)\n    x19 = hmirror(x18)\n    x20 = dedupe(x19)\n    x21 = dmirror(x20)\n    x22 = hmirror(x21)\n    x23 = vmirror(x22)\n    x24 = cellwise(x14, x23, x1)\n    x25 = branch(x24, x6, x25)\n    O = canvas(x25, UNITY)\n    return O"], [1.0, "def solve_9b98f70d(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = leastcolor(x7)\n    O = rot180(x7)\n    return O"], [1.0, "def solve_6acf70d6(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x19)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_a9e28725(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NEG_TWO, ONE)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = rbind(multiply, apply)\n    x6 = apply(x5, x4)\n    x7 = rbind(shift, x6)\n    x8 = mapply(x7, x2)\n    x9 = fill(I, FOUR, x8)\n    x10 = objects(x9, T, F, T)\n    x11 = apply(toindices, x10)\n    x12 = lbind(index, x11)\n    x13 = compose(x12, lrcorner)\n    x14 = astuple(NEG_TWO, NEG_TWO)\n    x15 = rbind(shift, x14)\n    x16 = mapply(x15, x3)\n    x17 = index(x9, x16)\n    x18 = equality(x17, TWO)\n    x19 = rbind(Allowobject, x9)\n    x20 = chain(first, x19, palette)\n    x21 = compose(x20, llcorner)\n    x22 = fork(recolor, x21, toindices)\n    x23 = chain(rot90, x22, canvas)\n    x24 = fork(equality, toindices, x23)\n    x25 = fork(equality, shape, x24)\n    x26 = fork(multiply, size, x25)\n    x27 = fork(equality, x26, x24)\n    x28 = mapply(x27, x11)\n    x29 = rot180(x28)\n    x30 = sfilter(x3, x29)\n    x31 = paint(x9, x30)\n    O = rot180(x31)\n    return O"], [1.0, "def solve_ce55df53(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 =maximum(x9)\n    x11 = matcher(last, x10)\n    x12 = extract(x9, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_401eb889(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, last)\n    x4 = compose(merge, x3)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_2b036f2b(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = gravitate(x3, x4)\n    x5 = argmin(x1, x2)\n    x6 =crement(x5)\n    x7 = add(x5, x6)\n    x8 = crement(x2)\n    x9 = add(x4, x8)\n    x10 = tojvec(x9)\n    x11 = connect(x7, x10)\n    x12 = fill(I, ONE, x11)\n    x13 = height(x3)\n    x14 = width(x3)\n    x15 = toivec(x13)\n    x16 = add(x15, x14)\n    x17 = tojvec(x16)\n    x18 = connect(x10, x17)\n    x19 = fill(x12, TWO, x18)\n    x20 = ofcolor(x19, TWO)\n    x21 = asindices(x19)\n    x22 = outbox(x21)\n    x23 = toobject(x22, x19)\n    x24 = colorfilter(x23, ONE)\n    x25 = rbind(adjacent, x4)\n    x26 = sfilter(x24, x25)\n    x27 = fork(mfilter, identity, x26)\n    x28 = mapply(x27, x27)\n    O = fill(x19, TWO, x28)\n    return O"], [1.0, "def solve_77abde91(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, divide, height)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_fcdbb32b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = remove(x6, x5)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x3)\n    x11 = apply(first, x10)\n    x12 = toindices(x3)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(color, last)\n    x22 = fork(connect, x20, x21)\n    x23 = fork(recolor, x20, x22)\n    x24 = mapply(x23, x19)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_e714636f(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = mapply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = mapply(lrcorner, x1)\n    x6 = mapply(271, x2)\n    x7 = fill(I, EIGHT, x3)\n    x8 = fill(x7, TWO, x4)\n    O = fill(x8, THREE, x5)\n    return O"], [1.0, "def solve_a1e24764(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_4c83830a(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(403,300)\n    x3 = compose(color, ulcorner)\n    x4 = astuple(variide, NEG_UNITY)\n    x5 = astuple(UP_RIGHT, x4)\n    x6 = astuple(LEFT, x45)\n    x7 = compose(x5, x6)\n    x8 = rbind(shoot, UNITY)\n    x9 = compose(x8, x7)\n    x10 = fork(recolor, x3, x9)\n    x11 = mapply(x10, x1)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_ade70c14(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NEG_TWO, ONE)\n    x4 = x3(x2)\n    x5 = toivec(x4)\n    x6 = shift(x1, x5)\n    x7 = rbind(upscale, TWO)\n    x8 = chain(invert, halve, shape)\n    x9 = x7(x4)\n    x10 = lbind(subtract, x9)\n    x11 = chain(x8, halve, x10)\n    x12 = fork(shift, identity, x11)\n    x13 = mapply(x12, x6)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_5ed1575e(I):\n    x1 = objects(I, T, F, T)\n    x2 = center(x1)\n    x3 = color(x2)\n    x4 = hconcat(I, x2)\n    x5 = objects(x4, T, F, T)\n    x6 = apply(ulcorner, x5)\n    x7 = size(x6)\n    x8 = double(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = apply(tojvec, x9)\n    x11 = mpapply(shift, x10, x3)\n    x12 = fill(I, x3, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = width(x13)\n    x16 = add(x15, x14)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = apply(tojvec, x17)\n    x19 = mpapply(shift, x18, x11)\n    x20 = fill(x12, x3, x19)\n    x21 = canvas(ZERO, x15)\n    x22 = asobject(x21)\n    x23 = occurrences(x20, x22)\n    x24 = lbind(shift, x23)\n    x25 = mapply(x24, x23)\n    O = fill(x20, x3, x25)\n    return O"], [1.0, "def solve_bdb36cf9(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = fork(both, x3, x7)\n    x5 = extract(x1, x4)\n    x6 = remove(x5, x1)\n    x7 = merge(x6)\n    x8 = other(x6, x7)\n    x9 = color(x7)\n    x10 = astuple(x8, x9)\n    x11 = ofcolor(I, x10)\n    x12 = outbox(x11)\n    x13 = backdrop(x12)\n    x14 = recolor(x8, x13)\n    x15 = dmirror(x14)\n    x16 = lbind(shift, x15)\n    x17 = recolor(x8, x16)\n    x18 = combine(x17, x14)\n    x19 = ulcorner(x18)\n    x20 = subgrid(x19, I)\n    x21 = apply(ulcorner, x20)\n    x22 = mapply(x21, x3)\n    x23 = dmirror(x22)\n    x24 = papply(ofcolor, x23, x8)\n    x25 = ofcolor(x34, x9)\n    x26 = difference(x25, x24)\n    x27 = dmirror(x24)\n    x28 = papply(ofcolor, x27, x8)\n    x29 = mapply(x28, x26)\n    x30 = ofcolor(x29, x9)\n    O = mapply(x30, x28)\n    return O"], [1.0, "def solve_e09e7337(I):\n    x1 = frontiers(I)\n    x2 = astuple(TWO, ONE)\n    x3 = palette(I)\n    x4 = lbind(contained, TWO)\n    x5 = compose(x4, shape)\n    x6 = sfilter(x3, x5)\n    x7 = palette(I)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = palette(I)\n    x11 = remove(x9, x10)\n    x12 = lbind(colorcount, I)\n    x13 = argmin(x11, x12)\n    x14 = ofcolor(I, x13)\n    x15 = ofcolor(I, x9)\n    x16 = combine(x14, x15)\n    x17 = mapply(neighbors, x16)\n    x18 = difference(x17, x16)\n    x19 = toobject(x18, I)\n    x20 = leastcolor(x19)\n    x21 = ofcolor(I, x20)\n    x22 = first(x21)\n    x23 = asindices(I)\n    x24 = ofcolor(I, x20)\n    x25 = difference(x23, x24)\n    x26 = x22(x25)\n    x27 = subgrid(x26, I)\n    O = fill(x27, ONE, x27)\n    return O"], [1.0, "def solve_cb3c57ce(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(lowermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = lbind(compose, x4)\n    x7 = compose(initset, x6)\n    x8 = chain(first, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(multiply, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_cdfc0e01(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_bc899d11(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x26)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [1.0, "def solve_52770e93(I):\n    x1 = astuple(identity, cmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscalefirst(x17)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_861544b7(I):\n    x1 = asindices(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(vsplit, TWO)\n    x6 = lbind(hsplit, TWO)\n    x7 = compose(x5, x6)\n    x8 = argmax(x1, x7)\n    x9 = leastcolor(x8)\n    x10 = mostcolor(I)\n    x11 = ofcolor(I, x9)\n    x12 =(lowermost, x11)\n    x13 = compose(rightmost, x11)\n    x14 = matcher(x13, x12)\n    x15 = sfilter(x11, x14)\n    x16 = difference(x11, x15)\n    x17 = fill(I, TWO, x15)\n    x18 = inbox(x15)\n    x19 = fill(x17, FOUR, x18)\n    x20 = ofcolor(x19, x9)\n    x21 = ofcolor(x19, x10)\n    x22 = center(x21)\n    x23 = argmin(x20, x22)\n    x24 = center(x21)\n    x25 = ofcolor(x24, x9)\n    x26 = vfrontier(x25)\n    x27 = intersection(x26, x25)\n    x28 = fill(x19, x23, x27)\n    x29 = fill(x28, x69, x27)\n    O = fill(x29, x69, x21)\n    return O"], [1.0, "def solve_44c3850a(I):\n    x1 = vmirror(I)\n    x2 = equality(df, NEG_ONE)\n    x3 = hmirror(I)\n    x4 = equality(x3, x2)\n    x5 = either(x2, x4)\n    x6 = branch(x5, mostcolor, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [1.0, "def solve_c4508c9f(I):\n    x1 = objects(I, T, F, F)\n    x2 = hconcat( I, x1)\n    x3 =vconcat(x2, x2)\n    x4 = vconcat(x3, x2)\n    O = vconcat(x4, x2)\n    return O"], [1.0, "def solve_066c1e29(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = frontiers(I)\n    x6 = colorfilter(x5, x4)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = ofcolor(I, x4)\n    x11 = ofcolor(I, TWO)\n    x12 = ofc(I, ONE)\n    x13 = rbind(gravitate, x10)\n    x14 = compose(x13, initset)\n    x15 = fork(add, identity, x14)\n    x16 = fork(connect, identity, x15)\n    x17 = shape(I)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(gravitate, x10)\n    x21 = chain(x19, sign, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x16, x11)\n    x26 = mapply(x24, x12)\n    x27 = fill(I, TWO, x25)\n    O = fill(x27, ONE, x26)\n    return O"], [1.0, "def solve_53963acd(I):\n    x1 = astuple(identity, cmirror)\n    x2 = astuple(hashmirror, connect)\n    x3 = combine(x1, x2)\n    x4 = rbind(rapply, I)\n    x5 = compose(initset, first)\n    x6 = chain(first, x4, x5)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = chain(lowermost, x7, x6)\n    x9 = chain(x8, minimum, x6)\n    x10 = lbind(matcher, x8)\n    x11 = compose(x10, x9)\n    x12 = lbind(matcher, x7)\n    x13 = compose(x12, x11)\n    x14 = lbind(matcher, ZERO)\n    x15 = compose(x14, x13)\n    x16 = fork(both, x11, x15)\n    x17 = fork(both, x13, x16)\n    x18 = compose(x17, ulcorner)\n    x19 = extract(x3, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = center(x21)\n    x24 = color(x21)\n    x25 = shift(x22, x23)\n    x26 = paint(x22, x25)\n    O = x21(x26)\n    return O"], [1.0, "def solve_989264ff(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, size)\n    x12 = sfilter(x1, x11)\n    x13 = argmin(x12, size)\n    x14 = color(x13)\n    x15 = colorfilter(x1, x14)\n    x16 = argmin(x15, size)\n    x17 = outbox(x16)\n    x18 = backdrop(x17)\n    x19 = dmirror(x18)\n    x20 = matcher(identity, x8)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(positive, size, x21)\n    x23 = sfilter(x19, x22)\n    x24 = color(x23)\n    x25 = colorfilter(x1, x24)\n    x26 = first(x25)\n    x27 = subgrid(x26, I)\n    x28 = asobject(x27)\n    x29 = x28(x27)\n    x30 = matcher(first, x8)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x28, x31)\n    x33 = paint(x27, x32)\n    O = x30(x33)\n    return O"], [1.0, "def solve_ad8822a1(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = lbind(sfilter, x5)\n    x7 = lbind(matcher, identity)\n    x8 = chain(size, x6, x7)\n    x9 = valmax(x5, x8)\n    x10 = matcher(x8, x9)\n    x11 = sfilter(x4, x10)\n    x12 = lbind(colorcount, I)\n    x13 = argmin(x11, x12)\n    x14 = ofcolor(I, x1)\n    x15 = ofcolor(I, x13)\n    x16 = combine(x14, x15)\n    x17 = fill(I, x13, x16)\n    x18 = difference(x17, x15)\n    O = fill(x17, FOUR, x18)\n    return O"], [1.0, "def solve_58097a2f(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_4e780699(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [1.0, "def solve_f207cb6e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = outbox(x2)\n    x4 = lowermost(x3)\n    x5 = rightmost(x3)\n    x6 = uppermost(x3)\n    x7 = leftmost(x3)\n    x8 = chain(toivec, minimum, shape)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, x4)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_5ebbe995(I):\n    x1 = objects(I, T, F, T)\n    x2 =Tiers(I)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    O = fill(x7, ZERO, x4)\n    return O"], [1.0, "def solve_9b9c2f81(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(add, first, last)\n    x12 = chain(x11, x10, x9)\n    x13 = matcher(x12, ONE)\n    x14 = fork(both, x7, x10)\n    x15 = fork(both, x13, x14)\n    x16 = sfilter(x1, x15)\n    x17 = difference(x1, x16)\n    x18 = colorfilter(x17, TWO)\n    x19 = mapply(box, x18)\n    x20 = fill(I, ONE, x19)\n    x21 = mapply(delta, x16)\n    O = fill(x20, ZERO, x21)\n    return O"], [1.0, "def solve_9baae097(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = objects(I, T, F, T)\n    x10 = colorfilter(x9, x4)\n    x11 = apply(ulcorner, x10)\n    x12 = normalize(x11)\n    x13 = lbind(shift, x12)\n    x14 = mapply(x13, x11)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_fb999cc2(I):\n    x1 = leastcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = ofcolor(I, x1)\n    x7 = ofcolor(I, x5)\n    x8 = combine(x6, x7)\n    x9 = mapply(neighbors, x8)\n    x10 = difference(x9, x8)\n    x11 = toobject(x10, I)\n    x12 = leastcolor(x11)\n    x13 = ofcolor(I, x1)\n    x14 = first(x13)\n    x15 = initset(x14)\n    x16 = objects(I, T, F, T)\n    x17 = colorfilter(x16, x12)\n    x18 = lbind(adjacent, x8)\n    x19 = mfilter(x17, x18)\n    x20 = toindices(x19)\n    x21 = rbind(manhattan, gpind)\n    x22 = chain(even, x21, initset)\n    x23 = sfilter(x20, x22)\n    x24 = fill(I, x5, x20)\n    O = fill(x24, x1, x23)\n    return O"], [1.0, "def solve_67e73fe2(I):\n    x1 = vmirror(I)\n    x2 = objects(I, T, F, T)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NEG_TWO, NEG_TWO)\n    x5 = canvas(ZERO, x4)\n    x6 = paint(x5, x3)\n    x7 = interval(ONE, FIVE, ONE)\n    x8 = rbind(multiply, THREE)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x1)\n    x11 = mapply(x10, x9)\n    O = paint(x6, x11)\n    return O"], [1.0, "def solve_9ca4683a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = mostcolor(I)\n    x4 = canvas(x3, x2)\n    x5 = hconcat(x4, x4)\n    x6 = objects(x5, F, F, T)\n    x7 = argmax(x6, size)\n    x8 = remove(x7, x6)\n    x9 = toindices(x7)\n    x10 = lbind(shift, x9)\n    x11 = mapply(x10, x8)\n    x12 = fill(I, ONE, x11)\n    x13 = hmirror(x12)\n    x14 = shift(x13, x8)\n    x15 = box(x14)\n    O = fill(x12, THREE, x15)\n    return O"], [1.0, "def solve_52db564c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind( accessible, x5)\n    x18 = compose(x17, dneighbors)\n    x19 = sfilter(x16, x18)\n    x20 = rbind(gravitate, x5)\n    x21 = compose(x20, initset)\n    x22 = fork(add, identity, x21)\n    x23 = fork(connect, identity, x22)\n    x24 = apply(x23, x19)\n    x25 = rbind(ofcolor, x9)\n    x26 = compose(x25, x24)\n    x27 = fork(recolor, x26, x25)\n    x28 = mapply(x27, x24)\n    x29 = cover(I, x28)\n    x30 = intersection(x4, x48)\n    O = fill(x29, agreeVEN, x30)\n    return O"], [1.0, "def solve_e0735cca(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(izefilter, x1)\n    x3 = fork(equality, toindices, box)\n    x4 = sfilter(x2, x3)\n    x5 = size(x4)\n    x6 = double(x5)\n    x7 = interval(ZERO, x6, TWO)\n    x8 = apply(tojvec, x7)\n    x9 = astuple(ONE, NINE)\n    x10 = canvas(ZERO, x9)\n    x11 = fill(x10, ONE, x8)\n    x12 = hsplit(x11, THREE)\n    O = merge(x12)\n    return O"], [1.0, "def solve_fd41d9a9(I):\n    x1 = lbind(gravitate, I)\n    x2 = compose(crement, x1)\n    x3 = fork(shift, identity, x2)\n    x4 = mapply(x3, I)\n    x5 = fill(I, ZERO, x4)\n    x6 = objects(x5, T, F, T)\n    x7 = size(x6)\n    x8 = order(x6, leftmost)\n    x9 = apply(color, x8)\n    x10 = cover(x5, x9)\n    O = fill(x10, ZERO, x3)\n    return O"], [1.0, "def solve_5b95c699(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = shape(I)\n    O = fill(I, ZERO, x4)\n    return O"], [1.0, "def solve_63c7cf93(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_bbe7fbcf(I):\n    x1 = contained(I, x4)\n    x2 = fork(equality, identity, dmirror)\n    x3 = compose(flip, x2)\n    O = extract(x1, x3)\n    return O"], [1.0, "def solve_c1958ab4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, hmirror)\n    x8 = x7(I)\n    x9 = ofcolor(I, TWO)\n    x10 = ofcolor(I, THREE)\n    x11 = compose(positive, size)\n    x12 = lbind(intersection, x9)\n    x13 = chain(x11, x12, toindices)\n    x14 = compose(positive, size)\n    x15 = lbind(intersection, x10)\n    x16 = chain(x14, x15,size)\n    x17 = fork(shift, x13, x16)\n    x18 = multiply(x6, x5)\n    x19 = power(x17, x18)\n    x20 = shift(x9, x15)\n    x21 = chain(x20, toindices, x15)\n    x22 = fork(shift, x16, x21)\n    x23 = lbind(mapply, x29)\n    x24 = rbind(argmax, x5)\n    x25 = chain(x24, x23, x22)\n    x26 = compose(x32, x25)\n    x27 = fork(shift, x26, x22)\n    x28 = lbind(lbind, greater)\n    x29 = chain(x28, x27, x22)\n    x30 = fork(shift, x29, x25)\n    x31 = compose(x29, x30)\n    x32 = fork(connect, x29, x31)\n    x33 = mapply(x32, x3)\n    O = fill(x8, TWO, x33)\n    return O"], [1.0, "def solve_1c1d2abe(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x11)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x01, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [1.0, "def solve_2be8def7(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_4ae88e8e(I):\n    x1 = astuple(identity, ONE)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_2ced793c(I):\n    x1 = astuple(identity, cmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_bd88da09(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x32)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [1.0, "def solve_b3dd06f6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(combine, vfrontier, hfrontier)\n    x4 = mapply(x3, x2)\n    x5 = underfill(I, TWO, x4)\n    x6 = insert(x4, x5)\n    x7 = corners(x6)\n    O = underfill(x5, x1, x7)\n    return O"], [1.0, "def solve_ff2cb6df(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = rbind(adjacent, x9)\n    x11 = mfilter(x9, x10)\n    x12 = toindices(x11)\n    x13 = rbind(manhattan, x15)\n    x14 = chain(even, x13, initset)\n    x15 = sfilter(x12, x14)\n    x16 = difference(x12, x15)\n    x17 = fill(x6, x4, x16)\n    x18 = lbind(contained, TWO)\n    x19 = compose(x18, outbox)\n    x20 = sfilter(x17, x19)\n    x21 = fill(x17, x4, x20)\n    x22 = lbind(adjacent, x15)\n    x23 = fork(both, x22, initset)\n    x24 = sfilter(x18, x23)\n    x25 = fill(x21, x4, x24)\n    x26 =Mergrid(x25, x6)\n    x27 = chain(connect, first, last)\n    x28 = x27(x26)\n    x29 = fill(x25, x4, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, asindices)\n    x32 = fork(connect, x31, ulcorner)\n    x33 = fork(6042, x32, llcorner)\n    x34 = mapply(x33, x29)\n    O = fill(x29, x4, x34)\n    return O"], [1.0, "def solve_212affac(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(toobject, I)\n    x4 = compose(first, delta)\n    x5 = rbind(colorcount, x1)\n    x6 = matcher(x5, TWO)\n    x7 = chain(x6, x3, dneighbors)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(first, x8, toindices)\n    x10 = fork(subtract, x4, x9)\n    x11 = fork(shoot, x4, x10)\n    x12 = mapply(x11, x2)\n    x13 = fill(I, x1, x12)\n    x14 = mapply(delta, x2)\n    O = fill(x13, ZERO, x14)\n    return O"], [1.0, "def solve_bf5da421(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, numcolors)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = normalize(x3)\n    x6 = recolor(x4, x5)\n    x7 = paint(I, x6)\n    x8 = interval(ONE, repetitionONE, ONE)\n    x9 = upscale(x7, FOUR)\n    x10 = asobject(x9)\n    x11 = occurrences(x7, x10)\n    x12 = lbind(shift, x10)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_fb7b5057(I):\n    x1 = compose(maximum, shape)\n    x2 = lbind(apply, x1)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(maximum, x2, x3)\n    x5 = fork(add, first, x4)\n    x6 = height(I)\n    x7 = increment(x6)\n    x8 = frontiers(I)\n    x9 = sfilter(x8, x5)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, x4, x5)\n    x13 = ofcolor(I, x12)\n    x14 = shift(x13, canvas)\n    x15 = mapply(x4, x9)\n    x16 = paint(I, x15)\n    O = fill(x16, EIGHT, x14)\n    return O"], [1.0, "def solve_2c31dab8(I):\n    x1 = rot90(I)\n    x2 = x2(x1)\n    x3 = rot90(I)\n    x4 = maximum(x3)\n    x5 = dmirror(I)\n    x6 = lefthalf(x5)\n    x7 = righthalf(x5)\n    x8 = equality(x4, x7)\n    x9 = branch(x8, identity, vsplit)\n    x10 = x9(I)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(center, x11)\n    x13 = partition(x12)\n    x14 = order(x13, leftmost)\n    x15 = apply(color, x14)\n    x16 = repeat(x15, ONE)\n    O = x9(x16)\n    return O"], [1.0, "def solve_38deca57(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = combine(x4, x9)\n    return O"], [1.0, "def solve_3326f899(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_44003cc1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_88e0ad97(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = vmirror(x2)\n    x4 = astuple(x1, x3)\n    x5 = rbind(shoot, UNITY)\n    x6 = other(x2, x5)\n    x7 = subgrid(x6, I)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x4)\n    O = paint(x7, x9)\n    return O"], [1.0, "def solve_239534da(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = leastcolor(I)\n    x10 = ofcolor(I, x9)\n    x11 = remove(x4, x10)\n    x12 = toobject(x11, I)\n    x13 = mostcolor(x12)\n    x14 = cellwise(I, x4, x6)\n    x15 = backdrop(x14)\n    x14 = backdrop(x15)\n    x13 = recolor(x9, x15)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(I, x12)\n    x17 = color(x3)\n    x18 = color(x16)\n    x19 = fill(x16, x17, x18)\n    O = fill(x19, x10, x15)\n    return O"], [1.0, "def solve_2a6e93c9(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_000f4745(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = mostcolor(x4)\n    x6 = other(x4, x5)\n    x7 = palette(I)\n    x8 = lrcorner(x3)\n    x9 = add(x8, UNITY)\n    x10 = llcorner(x3)\n    x11 = add(x10, DOWN_LEFT)\n    x12 = urcorner(x3)\n    x13 = add(x12, UP_RIGHT)\n    x14 = ulcorner(x3)\n    x15 = add(x14, NEG_UNITY)\n    x16 = shoot(x9, UNITY)\n    x17 = shoot(x11, DOWN_LEFT)\n    x18 = shoot(x13, UP_RIGHT)\n    x19 = shoot(x15, NEG_UNITY)\n    x20 = combine(x16, x17)\n    x21 = combine(x18, x19)\n    x22 = combine(x20, x21)\n    x23 = color(x6)\n    O = fill(I, x23, x22)\n    return O"], [1.0, "def solve_f07d83c9(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, TWO)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_990223f4(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, color)\n    x3 = compose(x2, toindices)\n    x4 = lbind(mapply, x3)\n    x5 = rbind(interval, ONE)\n    x6 = lbind(x5, size)\n    x7 = compose(x6, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, astuple)\n    x10 = compose(x9, x7)\n    x11 = fork(compose, x7, x10)\n    x12 = lbind(apply, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(ofcolor, x13, identity)\n    x15 = mapply(x14, x1)\n    x16 = fill(I, THREE, x15)\n    x17 = compose(x6, x1)\n    x18 = fork(recolor, x17, identity)\n    x19 = mapply(x18, x15)\n    O = paint(x16, x19)\n    return O"], [1.0, "def solve_f8469e4f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(canvas, NEG_ONE)\n    x6 = compose(x5, x4)\n    x7 = lbind(recolor, x3)\n    x8 = chain(x7, x6, x1)\n    x9 = fork(paint, x8, apply)\n    x10 = lbind(occurrences, I)\n    x11 = compose(x10, x4)\n    x12 = fork(peraint, x9, x11)\n    x13 = compose(x7, x12)\n    x14 = lbind(mapply, x5)\n    x15 = compose(x14, x4)\n    x16 = fork(difference, x13, x15)\n    x17 = compose(size, x16)\n    x18 = matcher(x17, ZERO)\n    x19 = mfilter(x1, x18)\n    O = fill(I, x3, x19)\n    return O"], [1.0, "def solve_2cb913fd(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_f41b0bf3(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_dbf1d82b(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_9efcec52(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = toobject(x6, I)\n    x8 = sfilter(x7, x4)\n    x9 = fill(I, SIX, x8)\n    x10 = color(x5)\n    x11 = ofcolor(x10, x10)\n    x12 = astuple(x5, x11)\n    x13 = initset(x12)\n    x14 = insert(x11, x13)\n    x15 = toobject(x14, x10)\n    x16 = difference(x1, x15)\n    x17 = toobject(x16, I)\n    x18 = shape(x17)\n    x19 = decrement(x18)\n    x20 = canvas(ZERO, x19)\n    x21 = rbind(astuple, x20)\n    x22 = apply(x21, x16)\n    x23 = rbind(shoot, x17)\n    x24 = mapply(x23, x22)\n    O = fill(x10, FOUR, x24)\n    return O"], [1.0, "def solve_778a366a(I):\n    x1 = lbind(apply, maximum)\n    x2 = lbind(apply, partition)\n    x3 = rbind(chain, x1)\n    x4 = rbind(x3, x2)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x1, x4, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = chain(size, dedupe, x7)\n    x9 = matcher(x8, ONE)\n    x10 = lbind(141, ONE)\n    x11 = chain(initset, x10, x4)\n    x12 = fork(rapply, x11, identity)\n    x13 = compose(first, x12)\n    x14 = mapply(x13, x1)\n    x15 = mostcolor(I)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    O = paint(x17, x14)\n    return O"], [1.0, "def solve_aefa460f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = leastcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x8, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = compose(x29, x31)\n    x33 = fork(shift, identity, x32)\n    x34 = x33(x27)\n    x35 = x33(x28)\n    x36 = x33(x34)\n    x37 = combine(x35, x36)\n    x38 = paint(x16, x37)\n    O = x4(x38)\n    return O"], [1.0, "def solve_4a793563(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = toindices(x5)\n    x8 = outbox(x4)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x9, x11, x10)\n    x13 = compose(x12, initset)\n    x14 = apply(x13, x7)\n    x15 = cover(I, x5)\n    O = fill(x15, x6, x14)\n    return O"], [1.0, "def solve_6ac0b662(I):\n    x1 = astuple(identity, cmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(even, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_e3fe391c(I):\n    x1 = astuple( pretend, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = crop(I, ORIGIN, x7)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(x8, x9)\n    x11 = portrait(x10)\n    x12 = branch(x11, identity, dmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, x9)\n    x15 = branch(x14, identity, vmirror)\n    x16 = x15(x13)\n    x17 = shape(x16)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(gravitate, x10)\n    x21 = rbind(ofcolor, x9)\n    x22 = chain(x19, x21, last)\n    x23 = fork(shift, identity, x22)\n    x24 = mapply(x23, x18)\n    O = paint(x16, x24)\n    return O"], [1.0, "def solve_f46cd0d1(I):\n    x1 = objects(I, T, F, F)\n    x2 = contained(x1, x1)\n    x3 = fork(add, height, width)\n    x4 = compose(decrement, x3)\n    x5 = fork(equality, x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = compose(flip, x6)\n    x8 = mfilter(x7, sfilter)\n    x9 = fill(I, TWO, x8)\n    x10 = objects(x9, T, F, F)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = sfilter(x10, x12)\n    x14 = mapply(toindices, x13)\n    x15 = box(x14)\n    x16 = difference(x15, x14)\n    O = fill(x9, THREE, x16)\n    return O"], [1.0, "def solve_02f7c114(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_9edc0695(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x2, size)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mapply(x8, x2)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_2213f7de(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x3, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, FOUR, x9)\n    x11 = merge(x8)\n    x12 = fill(x10, EIGHT, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, TWO, x13)\n    x15 = merge(x8)\n    O = fill(x14, SIX, x15)\n    return O"], [1.0, "def solve_74f91180(I):\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = sizefilter(x1, ONE)\n    x4 = difference(x1, x3)\n    x5 = apply(color, x4)\n    x6 = astuple(x1, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = plot(x7, x3)\n    x9 = rbind(contained, x8)\n    x10 = compose(x9, first)\n    x11 = sfilter(x5, x10)\n    x12 = merge(x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = asindices(x13)\n    x17 = sfilter(x16, x12)\n    x18 = fill(x13, EIGHT, x17)\n    x19 = fill(x18, TWO, x18)\n    x20 = replace(x19, ZERO, EIGHT)\n    O = replace(x20, ONE, x15)\n    return O"], [1.0, "def solve_a16abf43(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_0e51325c(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = rbind(sizefilter, ONE)\n    x5 = apply(x4, x3)\n    x6 = difference(x5, x3)\n    x7 = merge(x6)\n    O = fill(I, FOUR, x7)\n    return O"], [1.0, "def solve_1aec7a63(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_57d126bc(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x2)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    x11 = difference(x10, x9)\n    O = first(x11)\n    return O"], [1.0, "def solve_8cb5f64b(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(size, dedupe)\n    x3 = argmax(x1, x2)\n    x4 = x3(x1)\n    x5 = x3(x4)\n    x6 = box(x5)\n    x7 = fill(I, ONE, x6)\n    x8 = subgrid(x3, x7)\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = mapply(x9, x8)\n    O = fill(x7, TWO, x10)\n    return O"], [1.0, "def solve_79d98ea5(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = matcher(x13, x15)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = pair(x15, x18)\n    x20 = sfilter(x19, x16)\n    x21 = apply(outbox, x20)\n    x22 = mapply(x21, x4)\n    O = fill(x7, x6, x22)\n    return O"], [1.0, "def solve_b1361294(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = mostcolor(I)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x3)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_632a5095(I):\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, ZERO, x16)\n    return O"], [1.0, "def solve_a7a2686a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(increment, x1)\n    x3 = apply(decrement, x1)\n    x4 = papply(equality, x2, FOUR)\n    x5 = papply(shift, x3, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, center)\n    x8 = fork(shift, x5, x7)\n    x9 = mapply(x8, x2)\n    x10 = last(x2)\n    x11 = toindices(x10)\n    x12 = x11(ZERO)\n    x13 = fill(I, ZERO, x12)\n    x14 = replace(x13, x10, ZERO)\n    O = fill(x14, THREE, x11)\n    return O"], [1.1, "def solve_2bcf68b2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_34bddc6c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_4a419610(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_abe06f8c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = doublecompose(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = increment(x5)\n    x7 = width(I)\n    x8 = halve(x7)\n    x9 = increment(x8)\n    x10 = connect(x6, x9)\n    x11 = combine(x3, x10)\n    x12 = compose(size, dedupe)\n    x13 = apply(x12, x11)\n    x14 = maximum(x13)\n    x15 =9fOUR(x14)\n    x16 = matcher(x12, x15)\n    x17 =969606(x16, size)\n    x18 = last(x17)\n    x19 = remove(x18, x1)\n    x20 = argmax(x19, x6)\n    x21 = partition(I)\n    x22 = lock(*x21, x20)\n    x23 = fork(multiply, height, width)\n    x24 = argmin(x61, x23)\n    x25 = argmax(x61, x23)\n    x26 = difference(x24, x25)\n    x27 = apply(x26, x16)\n    x28 = argmin(x27, x23)\n    x29 = other(x27, x28)\n    x30 = x20(x29)\n    x31 = ofcolor(I, x22)\n    x32 = ofcolor(I, x25)\n    x33 = branch(x21, x30, x32)\n    x34 = asindices(I)\n    x35 = difference(x34, x33)\n    x36 = intersection(x34, x35)\n    x37 = size(x36)\n    x38 = positive(x37)\n    x39 = branch(x18, dmirror, identity)\n    x40 = x39(I)\n    x41 = ofcolor(x40, x22)\n    x42 = ofcolor(x40, x25"], [1.1, "def solve_0b27dd7c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_85955885(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, last)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_68db14b6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x24)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_9a076ee3(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_dd15c486(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_6da49fb4(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_ac751425(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11,x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bef7d8d7(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = lbind(rbind, colorcount)\n    x3 = compose(x2, palette)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(flip, x4)\n    x6 = extract(x1, x5)\n    x7 = fork(remove, last, last)\n    x8 = compose(flip, x7)\n    x9 = extract(x1, x8)\n    x10 = lbind(colorcount, I)\n    x11 = compose(x10, totuple)\n    x12 = argmin(x9, x11)\n    x13 = last(x12)\n    x14 = remove(x13, x12)\n    x15 =manhattan(x14, x13)\n    x16 = last(x15)\n    x17 = first(x16)\n    x18 = combine(x12, x17)\n    x19 = color(x18)\n    x20 = electron(x13)\n    x21 = lrcorner(x18)\n    x22 = astuple(x20, x6)\n    x23 = shoot(x21, x22)\n    x24 =TIME(x23, UP_RIGHT)\n    x25 =manhattan(x24, xI)\n    x26 = ulcorner(x24)\n    x27 = astuple(x25, x26)\n    x28 = crop(I, x24, x27)\n    x29 = asindices(x28)\n    x30 = urcorner(x29)\n    x31 = ulcorner(x29)\n    x32 = astuple(x30, x31)\n    x33 = add(x32, x29)\n    x34 = tojvec(x33)\n    x35 = initset(x34)\n    x36 = objects(x28, T, F, F)\n    x37 = sfilter(x36, x39)\n    x38 = combine(x32, x37)\n    x39 = paint(I, x38)\n    x40 = fill(x39, x4"], [1.1, "def solve_fe453444(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_762b4d2f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x112 = fork(indices, x11, last)\n    x13 = product(x10, x4)\n    x14 = x12(x13)\n    x15 = remove(x8, x13)\n    x16 = other(x15, x14)\n    x17 = x11(x16)\n    x18 = first(x17)\n    x19 = dmirror(x18)\n    x20 = last(x17)\n    x21 = matcher(x18, x20)\n    x22 = sfilter(x19, x21)\n    x23 = objects(x22, T, F, T)\n    x24 = colorfilter(x23, x16)\n    x25 =148(x24, vmirror)\n    x26 = subgrid(x25, x22)\n    x27 = mostcolor(x26)\n    x28 = sizefilter(x23, x27)\n    x29 = product(x28, x28)\n    x30 = initset(x17)\n    x31 = insert(x18, x30)\n    x32 = backdrop(x31)\n    x33 = toobject(x32, x11)\n    x34 = matcher(first, x27)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x33, x35)\n    x37 = sfilter(x36, x35)\n    x38 = shape(x37)\n    x39 = multiply(x38, x38)\n    x40 = canvas(x27, x39)\n    "], [1.1, "def solve_2831d32b(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_92d0f1d5(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(ONE, THREE)\n    x4 = astuple(FaffaillerNP, x3)\n    x5 = toindices(x4)\n    x6 = lbind(shift, x5)\n    x7 = rbind(difference, x2)\n    x8 = chain(size, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x4, x9)\n    x11 = objects(I, T, F, T)\n    x12 = sfilter(x11, x10)\n    x13 = argmax(x12, x4)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = lbind(shift, x15)\n    x17 = rbind(difference, x2)\n    x18 = chain(size, x16, x17)\n    x19 = argmax(x12, x18)\n    x20 = objects(I, T, F, T)\n    x21 = colorfilter(x20, x14)\n    x22 = difference(x21, x2)\n    x23 = compose(fork, subtract)\n    x24 = rbind(greater, TWO)\n    x25 = compose(x24, size)\n    x26 = sfilter(x21, x25)\n    x27 = fork(vmatching, x23, x26)\n    x28 = fork(hmatching, x12, rot180)\n    x29 = fork(either, x27, x28)\n    x30 = sfilter(x22, x29)\n    x31 = rbind(gravitate, x13)\n    x32 = compose(x31, initset)\n    x33 = fork(add, identity, x32)\n    x34 = fork(connect, identity, x33)\n    x35 = apply(x34, x30)\n    x36 = urcorner(x27)\n    x37 = lbind(shift, x36)\n    x38"], [1.1, "def solve_d813ad83(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, size, Squents)\n    x6 = canvas(x5, UNITY)\n    x7 = equality(x6, FOUR)\n    x8 = branch(x7, RIGHT, DOWN)\n    x9 = x8(x1)\n    x10 = x8(x2)\n    x11 = greater(x9, x10)\n    x12 = both(x4, x11)\n    x13 = branch(x12, height, width)\n    x14 = x13(x2)\n    x15 = x13(x6)\n    x16 = subtract(x14, x15)\n    x17 = multiply(x16, TWO)\n    x18 = inbox(x7)\n    x19 = x17(x18)\n    x20 = remove(x19, x2)\n    x21 = invert(x20)\n    x22 = shift(x19, x21)\n    x23 = fork(combine, hfrontier, vfrontier)\n    x24 = x23(x22)\n    x25 = inbox(x7)\n    x26 = center(x24)\n    x27 = invert(x26)\n    x28 = shift(x25, x27)\n    x29 = lbind( combine, x28)\n    x30 = lbind(mapply, x29)\n    x31 = rbind(difference, x1)\n    x32 = lbind(c59eb, difference)\n    x33 = rbind(compose, x3)\n    x34 = lbind(rbind, intersection)\n    x35 = chain(x33, x34, x12)\n    x36 = chain(x35, x30, x32)\n    x37 = fork(sfilter, identity, x35)\n    x38 = fork(difference, identity, x37)\n    x39 = chain(x37, x30, x38)\n    x40 = fork(shift,"], [1.1, "def solve_15fa4450(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x10)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x12)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x3333)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_4c06a107(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_7d0a3318(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_d507ee14(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_b7df6f44(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FIVE, x2)\n    x4 = index(x3, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(x3, x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = recolor(x4, x8)\n    x10 = astuple(x113, x12)\n    x11 = astuple(x9, x10)\n    x12 = initset(x11)\n    x13 = insert(x100, x12)\n    x14 = product(x5, x13)\n    x15 = size(x14)\n    x16 = astuple(x423, x15)\n    x17 = shift(x12, x16)\n    x18 = delta(x17)\n    x19 = fill(x3, EIGHT, x18)\n    x20 = shift(x17, x16)\n    x21 = box(x20)\n    x22 = fill(x19, TWO, x21)\n    x23 = lbind( mapply, dneighbors)\n    x24 = rbind(compose, initset)\n    x25 = lbind(extract, x24)\n    x26 = chain(x23, x25, first)\n    x27 = chain(x22, x26, last)\n    x28 = fork(compose, x27, x26)\n    x29 = lbind( mapply, x25)\n    x30 = rbind(sfilter, x28)\n    x31 = compose(x30, x29)\n    x32 = lbind(e26, x540)\n    x33 = apply(x31, x11)\n    x34 = cover(x19, x33)\n    x35 = apply(x32, x34)\n    x36 = recolor(x4, x35)\n    x37 = combine(x33, x36)\n    x38 =429(x37)\n    "], [1.1, "def solve_2011ff73(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, x32)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_322e6807(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 =    616(I, canvas, x4)\n    x6 = normalize(x3)\n    x7 = lbind(shift, x6)\n    x8 = height(x6)\n    x9 = divide(x8, x5)\n    x10 = increment(x9)\n    x11 = width(x6)\n    x12 = divide(x11, x5)\n    x13 = increment(x12)\n    x14 = subtract(x10, x13)\n    x15 = divide(x14, x5)\n    x16 =88max(x7, x15)\n    x17 = lbind(shift, x6)\n    x18 = normalize(x6)\n    x19 = height(x6)\n    x20 = divide(x19, x5)\n    x21 = increment(x20)\n    x22 = lbind(shift, x6)\n    x23 = normalize(x6)\n    x24 = height(x6)\n    x25 = divide(x24, x5)\n    x26 = increment(x25)\n    x27 = canvas(x4, x26)\n    x28 = paint(x27, x23)\n    x29 = normalize(x6)\n    x30 = height(x6)\n    x31 = divide(x30, x5)\n    x32 = increment(x31)\n    x33 = lbind(astuple, x32)\n    x34 = lbind(shift, x6)\n    x35 = rbind(multiply, x30)\n    x36 = compose(x34, x35)\n    x37 = fork(insert, x36, identity)\n    x38 = compose(x37, x39)\n    x39 = x33(x38)\n    x40 = rbind(multiply, x30)\n    x41 = compose(x40, x39)\n    x42 = fork(37,"], [1.1, "def solve_58fe97cf(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = shift(x23, x22)\n    x26 = x24(x22)\n    x27 =80718(x26)\n    x28 = astuple(x25, x27)\n    x29 = canvas(ZERO, x28)\n    x30 = paint(x29, x27)\n    x31 = rot90(x30)\n    x32 =\n    x31, x27)\n    x33 = rot270(x30)\n    x34 = astuple(x31, x33)\n    x35 = shift(x31, x34)\n    x36 = toivec(x25)\n    x37 = shift(x35, x36)\n    x38 = toindices(x index)\n    x39 = normalize(x38)\n    x40 = shift(x39, x36)\n    x41 = toindices(x rbind)\n    x42 = normalize("], [1.1, "def solve_948be397(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x1, x6)\n    x8 = x7(I)\n    x9 = palette(x8)\n    x10 = palette(x7)\n    x11 = matcher(identity, x4)\n    x12 = matcher(identity, x10)\n    x13 = extract(x9, x12)\n    x14 = extract(x10, x12)\n    x15 = ulcorner(x9)\n    x16 = ulcorner(x14)\n    x17 = subgrid(x16, I)\n    x18 = objects(x17, T, F, T)\n    x19 = lowermost(x9)\n    x20 = lowermost(x14)\n    x21 = subtract(x19, x20)\n    x22 = uppermost(x9)\n    x23 = uppermost(x14)\n    x24 = subtract(x22, x23)\n    x25 = urcorner(x9)\n    x26 = ulcorner(x14)\n    x27 = subtract(x25, x26)\n    x28 = shoot(x27, UNITY)\n    x29 = lrcorner(x9)\n    x30 = llcorner(x14)\n    x31 = subtract(x29, x30)\n    x32 = rightmost(x9)\n    x33 = rightmost(x14)\n    x34 = subtract(x32, x33)\n    x35 = leftmost(x9)\n    x36 = leftmost(x14)\n    x37 = subtract(x35, x36)\n    x38 = astuple(x34, x37)\n    x39 = maximum(x38)\n    x40 = lowermost(x9)\n    x41 = uppermost(x9)\n    x42 = rightmost(x9)\n    x43 = rightmost"], [1.1, "def solve_9a1849dd(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0ce8a74d(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_851b82bf(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_46d49037(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = box(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = argmin(x9, size)\n    x11 = cover(I, x10)\n    x12 = normalize(x10)\n    x13 = toindices(x12)\n    x14 = increment(x13)\n    x15 = shift(x12, x14)\n    x16 = paint(x11, x15)\n    x17 = lrcorner(x10)\n    x18 = remove(x17, x10)\n    x19 = center(x12)\n    x20 = invert(x19)\n    x21 = shift(x19, x20)\n    x22 = paint(x16, x21)\n    x23 =64(x11)\n    x24 = interval(ZERO, x23, ONE)\n    x25 = invert(x24)\n    x26 = shift(x11, x25)\n    x27 = paint(x22, x26)\n    x28 = astuple(x25, x19)\n    x29 = astuple(x27, x20)\n    x30 = invert(x29)\n    x31 = invert(x30)\n    x32 = shift(x11, x31)\n    x33 = paint(x27, x32)\n    x34 = rot90(x33)\n    x35 = rot180(x33)\n    x36 = rot270(x33)\n    x37 = rbind(toobject, x28)\n    x38 = chain(x37, x34, x35)\n    x39 = rbind(shift, x30)\n    x40 = chain(x39, x38, x37)\n    x41 = fork(mapply, x"], [1.1, "def solve_82108e6c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_5252735b(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = inbox(x4)\n    x6 = backdrop(x5)\n    x7 = toobject(x6, I)\n    x8 = matcher(color, x4)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x1, x9)\n    x11 =247(x10)\n    x12 = branch(x11, x5, partition)\n    x13 = apply(color, x12)\n    x14 = normalize(x13)\n    x15 = objects(I, T, F, F)\n    x16 = colorfilter(x15, x4)\n    x17 = compose(toindices, normalize)\n    x18 = matcher(x17, x16)\n    x19 = mfilter(x16, x18)\n    x20 = fill(I, x4, x19)\n    x21 = lbind(toobject, x9)\n    x22 = compose(x21, palette)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x12, x23)\n    x25 = chain(vline, x24, x8)\n    x26 = sfilter(x12, x25)\n    x27 = fork(equality, identity, rot90)\n    x28 = fork(divide, height, width)\n    x29 = chain(positive, x27, x28)\n    x30 = fork(equality, identity, rot270)\n    x31 = fork(divide, width, x30)\n    x32 = chain(x39, x29, x31)\n    x33 = fork(equality, identity, rot90)\n    x34 = fork(divide, height, x33)\n    x35 = fork(equality, identity, rot90)\n    x36 = fork(both, x29, x35)\n    x37 = lbind(index, I)\n    x38 = compose(x37, x28)\n    x"], [1.1, "def solve_bd1c6feb(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(15, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(first, x15)\n    x17 = rbind(ofcolor, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, ZERO)\n    x20 = extract(x14, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, ONE)\n    x25 = height(x23)\n    x26 = ofcolor(x23, TWO)\n    x27 = extract(x24, x26)\n    x28 = last(x27)\n    x29 = height(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = pair(x30, x30)\n    x32 =577(x31, x22)\n    x33 =pair(x32, x35)\n    x34 =522(x33, x28)\n    x35 = pair(x34, x31)\n    x36 = lbind(fork, combine)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 ="], [1.1, "def solve_306af37c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x1)\n    x11 = matcher(x9, x10)\n    x12 = palette(I)\n    x13 = sfilter(x12, x11)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, first)\n    x19 = fork(remove, x18, first)\n    x20 = rbind(compose, initset)\n    x21 = lbind(rbind, manhattan)\n    x22 = compose(initset, x18)\n    x23 = chain(x20, x21, x22)\n    x24 = fork(argmin, x19, x23)\n    x25 = compose(last, x18)\n    x26 = compose(first, x24)\n    x27 = fork(astuple, x26, x25)\n    x28 = fork(insert, x27, x19)\n    x29 = compose(last, last)\n    x30 = rbind(argmin, x29)\n    x31 = rbind(sfilter, x16)\n    x32 = compose(first, last)\n    x33 = chain(x30, x31, x32)\n    x34 = compose(flip, x16)\n    x35 = rbind(sfilter, x34)\n    x36 = compose(first, last)\n    x37 = fork(remove, x33, x36)\n    x38 = compose(x35, x37)\n    "], [1.1, "def solve_9ba7f8b0(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_db408172(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(maximum, shape, height)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(x6, x8)\n    x10 = astuple(ONE, x7)\n    x11 = initset(x10)\n    x12 = insert(x7, x11)\n    x13 = chain(x12, initset, first)\n    x14 = product(x4, x4)\n    x15 = compose(x13, first)\n    x16 = apply(x15, x14)\n    x17 = power(x16, TWO)\n    x18 = x17(x16)\n    x19 = fill(I, x6, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = colorfilter(x20, TWO)\n    x22 = rbind(adjacent, x21)\n    x23 = extract(x22, x17)\n    x24 = sfilter(x21, x23)\n    x25 = neighbors(x24)\n    x26 = center(x24)\n    x27 = initset(x26)\n    x28 = insert(x7, x27)\n    x29 = insert(x11, x28)\n    x30 = insert(x15, x29)\n    x31 = recolor(x6, x31)\n    x32 = lbind(shift, x22)\n    x33 = mapply(x32, x30)\n    x34 = paint(x19, x33)\n    x35 = branch(x6, x33, x34)\n    x36 = astuple(x35, x13)\n    x37 = crop(x35, x36, x34)\n    x38 = shoot(x47, x39)\n    x39 = sfilter(x38, x37)\n    x40 = invert"], [1.1, "def solve_ea1d788a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_a07accec(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_bd2c71aa(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(compose, first)\n    x9 = compose(x8, mostcolor)\n    x10 = fork(sfilter, identity, x9)\n    x11 = rbind(pair, I)\n    x12 = compose(x11, x10)\n    x13 = chain(initset, first, x12)\n    x14 = fork(rapply, x13, identity)\n    x15 = compose(first, x14)\n    x16 = apply(x15, x7)\n    x17 = dmirror(x16)\n    x18 = branch(x16, x17, x15)\n    x19 = x18(x1)\n    x20 = partition(x19)\n    x21 = fork(multiply, height, width)\n    x22 = argmin(x20, x21)\n    x23 = argmax(x20, x21)\n    x24 = remove(x23, x20)\n    x25 = other(x24, x22)\n    x26 = ofcolor(x19, x25)\n    x27 = last(x26)\n    x28 = subgrid(x27, x19)\n    x29 = trim(x28)\n    x30 = shift(x29, UNITY)\n    x31 = mapply(x30, x27)\n    x32 = double(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 =\n    x35 = prapply(astuple, x33, x34)\n    x36 = lbind(canvas, NEG_ONE)\n    x37 = apply(x36, x35)\n    x38 = asobject(x37)\n    x39 = shift(x38, UNITY)\n    "], [1.1, "def solve_af552527(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_df12c2c6(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_7dfa3d68(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_fc871b9d(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, initset)\n    x12 = argmin(x5, x11)\n    x13 = other(x5, x12)\n    x14 = color(x13)\n    x15 = colorfilter(x1, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 =86(x16, x17)\n    x19 = leftmost(x18)\n    x20 = lowermost(x18)\n    x21 = rightmost(x18)\n    x22 = astuple(x19, x20)\n    x23 = astuple(x21, x22)\n    x24 = x20(x23)\n    x25 = sizefilter(x18, x24)\n    x26 = difference(x18, x25)\n    x27 = merge(x26)\n    x28 = color(x27)\n    x29 = lbind(shift, x27)\n    x30 = mapply(x29, x28)\n    x31 = uppermost(x30)\n    x32 = llcorner(x30)\n    x33 = vmirror(x32)\n    x34 = urcorner(x30)\n    x35 = lrcorner(x30)\n    x36 = shoot(x31, UNITY)\n    x37 =Tokens(x36, x33)\n    x38 = shoot(x34, x35)\n    x39 = combine(x37, x38)\n    x40 = rbind(shoot, x32)\n    x41 = mapply(x40, x33"], [1.1, "def solve_63e44b48(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(x2)\n    x5 = mostcolor(x4)\n    x6 = branch(x3, x5, x2)\n    x7 = replace(I, x5, x6)\n    x8 = objects(x7, T, F, F)\n    x9 = order(x8, leftmost)\n    x10 = valmax(x8, rbind)\n    x11 = rightmost(x9)\n    x12 = matcher( leftmost, x11)\n    x13 = sfilter(x9, x12)\n    x14 = uppermost(x13)\n    x15 = matcher(first, x5)\n    x16 = sfilter(x13, x15)\n    x17 = leftmost(x16)\n    x18 = matcher(first, x57)\n    x19 = sfilter(x13, x18)\n    x20 = lowermost(x19)\n    x21 = matcher(first, x58)\n    x22 = sfilter(x13, x21)\n    x23 = leftmost(x22)\n    x24 = matcher(first, x50)\n    x25 = sfilter(x13, x24)\n    x26 = uppermost(x25)\n    x27 = matcher(first, x50)\n    x28 = sfilter(x13, x27)\n    x29 = lbind(apply, leftmost)\n    x30 = lbind(colorfilter, x17)\n    x31 = chain(x29, x30, last)\n    x32 = compose(positive, first)\n    x33 = chain(positive, decrement, x31)\n    x34 = branch(x33, x24, x25)\n    x35 = branch(x34, first, last)\n    x36 = x35(x22)\n    x37 = x35(x25)\n    x38 = equality(x36, x37)\n    x39 = branch(x38, x22, x135)\n    x"], [1.1, "def solve_c122fb73(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = mpapply(shift, x27, x26)\n    x29 = valmax(x28, width)\n    x30 = matcher(x26, x29)\n    x31 = sfilter(x28, x30)\n    x32 = lbind(shift, x27)\n    x33 = mapply(x32, x31)\n    x34 = interval(ZERO, x29, ONE)\n    x35 = dmirror(x24)\n    x36 = lbind(shift, x35)\n    x37 = mapply(x36, x34)\n    x38 = astuple(x37, x31)\n    "], [1.1, "def solve_1d7444eb(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = initset(x10)\n    x12 = hmirror(I)\n    x13 = insert(x6, x12)\n    x14 = toobject(x13, I)\n    x15 = color(x14)\n    x16 = subgrid(x15, I)\n    x17 = chain( hemices, last, first)\n    x18 = fork(multiply, x17, identity)\n    x19 = height(x16)\n    x20 = insert(x6, x19)\n    x21 = width(x16)\n    x22 = insert(x6, x21)\n    x23 = lrcorner(x16)\n    x24 = hmirror(x22)\n    x25 = insert(x23, x24)\n    x26 = height(x25)\n    x27 = subtract(x26, x19)\n    x28 = vmirror(x24)\n    x29 = hmirror(x28)\n    x30 = insert(x7, x29)\n    x31 = width(x16)\n    x32 = subtract(x31, x31)\n    x33 = tojvec(x32)\n    x34 = vmirror(x33)\n    x35 = shift(x34, x32)\n    x36 = combine(x28, x35)\n    x37 = vmirror(x36)\n    x38 = shift(x37, x36)\n    x39 = combine(x28, x38)\n    x40 = vmirror(x39)\n    x41 = papply(pair, x16,"], [1.1, "def solve_fd44aa80(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(F)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork( difference, x23, x26)\n    x28 = fork(astuple, x23, x27)\n    x29 = lbind(a87, x179)\n    x30 = chain(x29, normalize, x28)\n    x31 = fork(shift, x27, x30)\n    x32 = compose(x17, x31)\n    x33 = fork(difference, x32, toindices)\n    x34 = rbind(mapply, x33)\n    x35 = lbind(lbind, shift)\n    x36 = compose(x34, x35)\n    x37 = fork(shift, x33, x"], [1.1, "def solve_884c4ad2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, size)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(rbind, subtract)\n    x14 = ulcorner(x3)\n    x15 = lbind(x13, x14)\n    x16 = subgrid(x15, I)\n    x17 = lbind(apply, maximum)\n    x18 = lbind(sfilter, x1)\n    x19 = compose(x17, x18)\n    x20 = x19(x16)\n    x21 = asindices(x20)\n    x22 = lbind(manhattan, x21)\n    x23 = compose(even, x22)\n    x24 = sfilter(x1, x23)\n    x25 = increment(x14)\n    x26 = increment(x25)\n    x27 = add(x26, x24)\n    x28 = interval(ONE, x27, ONE)\n    x29 = pair(x28, x28)\n    x30 = apply(x29, x27)\n    x31 = asobject(x30)\n    x32 = matcher(first, x4)\n    x33 = compose(flip, x32)\n    x34 = sfilter(x31, x33)\n    x35 = apply(initset, x34)\n    x36 = astuple(x21, x22)\n    x37 = lbind(rbind, contained)\n    x38 = compose(x37, first)\n    x39 = rbind(sfilter, x38)\n    x40 = chain(x36, x39,"], [1.1, "def solve_8ca5460a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ORIGIN, x22, ONE)\n    x24 = lbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x"], [1.1, "def solve_b9aa04d2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x1)\n    x11 = matcher(x9, x10)\n    x12 = palette(I)\n    x13 = sfilter(x12, x11)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, first)\n    x19 = fork(remove, x18, first)\n    x20 = rbind(compose, initset)\n    x21 = lbind(rbind, manhattan)\n    x22 = compose(initset, x18)\n    x23 = chain(x20, x21, x22)\n    x24 = fork(argmin, x19, x23)\n    x25 = compose(last, x18)\n    x26 = compose(first, x24)\n    x27 = fork(astuple, x26, x25)\n    x28 = fork(insert, x27, x19)\n    x29 = compose(last, last)\n    x30 = rbind(argmin, x29)\n    x31 = rbind(sfilter, x16)\n    x32 = compose(first, last)\n    x33 = chain(x30, x31, x32)\n    x34 = compose(flip, x16)\n    x35 = rbind(sfilter, x34)\n    x36 = compose(first, last)\n    x37 = fork(remove, x33, x36)\n    x38 = compose(x35, x37)\n    "], [1.1, "def solve_adbdf2c4(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_8d197e31(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_dfab3e24(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, dmirror)\n    x9 = astuple(cmirror, hmirror)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, vmirror)\n    x12 = astuple(cmirror, hmirror)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = width(x22)\n    x24 = decrement(x23)\n    x25 = tojvec(x24)\n    x26 = index(x22, x25)\n    x27 = asobject(x22)\n    x28 = matcher(first, x27)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x28, x29)\n    x31 = hmirror(x30)\n    x32 = fgpartition(x31)\n    x33 = merge(x32)\n    x34 = vmirror(x33)\n    x35 = fgpartition(x34)\n    x36 = merge(x35)\n    x37 = hmirror(x36)\n    x38 = occurrences(x22, x37)\n    x39 = lbind(compose, x38)\n    x40 = lbind(l"], [1.1, "def solve_8f88c735(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_1018ac2b(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_ff4dccbf(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_19f1bcd1(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = other(x4, ZERO)\n    x6 = color(x5)\n    x7 = toindices(x5)\n    x8 = outbox(x3)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x9, x11, x10)\n    x13 = compose(x12, size)\n    x14 = matcher(x13, ZERO)\n    x15 = color(x10)\n    x16 = outbox(x3)\n    x17 = rbind(toobject, x16)\n    x18 = compose(x17, corners)\n    x19 =\n    x20 = ofcolor(I, x7)\n    x21 = sfilter(x20, x18)\n    x22 = rbind(manhattan, initset)\n    x23 = compose(x22, ulcorner)\n    x24 = fork(add, x23, NEG_UNITY)\n    x25 = rbind(add, DOWN)\n    x26 = compose(x25, ulcorner)\n    x27 = fork(subtract, x26, x24)\n    x28 = fork(insert, x27, x19)\n    x29 = compose(last, last)\n    x30 = rbind(remove, x29)\n    x31 = compose(x30, last)\n    x32 = fork(insert, x31, x29)\n    x33 = fork(insert, x32, x30)\n    x34 = rbind(CD meanwhile, x27)\n    x35 = compose(x34, x28)\n    x36 = fork(pair, x35, x33)\n    x37 = sfilter(x27, x36)\n    x38 = difference(x27, x37)\n    O = fill(I, x6"], [1.1, "def solve_21eedddb(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bf563565(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = branch(x34, x37,"], [1.1, "def solve_d22634ca(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_008f220d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_903ef6b4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = identity(I)\n    x2 = ofcolor(I, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, THREE)\n    x8 = mostcolor(I)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = difference(x14, x13)\n    x16 = subgrid(x15, I)\n    x17 = interval(ONE, FIVE, ONE)\n    x18 = lbind(power, inbox)\n    x19 = lbind(power, outbox)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x20)\n    x22 = chain(first, x18, x21)\n    x23 = rbind(ofcolor, THREE)\n    x24 = compose(normalize, x23)\n    x25 = fork(050, x24, x22)\n    x26 = asindices(x16)\n    x27 = ofcolor(x16, THREE)\n    x28 = subgrid(x27, x16)\n    x29 = rbind( shift, x28)\n    x30 = compose(x29, last)\n    x31 = rbind(argmax, x30)\n    x32 = compose(first, last)\n    x33 = fork(remove, x32, x30)\n    x34 = compose(first, x33)\n    x35 = fork(astuple, x34, x34)\n    x36 = compose(last, x35)\n    x37 = compose(first, last)\n    x38 = fork(remove, x37, x35)\n    x39 = fork(astuple, x36, x38)\n    x40 = size(x1)\n    x41 = power(x39, x"], [1.1, "def solve_6f690a86(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = fork(equality, toindices, backdrop)\n    x5 = sfilter(x3, x4)\n    x6 = order(x5, uppermost)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x10 = color(x8)\n    x11 = equality(x9, x10)\n    x12 = branch(x11, LEFT, RIGHT)\n    x13 = shape(x7)\n    x14 = maximum(x13)\n    x15 = multiply(x14, x4)\n    x16 = interval(ONE, x15, ONE)\n    x17 = power(outbox, TWO)\n    x18 = lbind(power, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(fork, recolor)\n    x21 = lbind(x20, objects)\n    x22 = lbind(rbind, colorcount)\n    x23 = rbind(canvas, x15)\n    x24 = lbind(compose, x22)\n    x25 = lbind(fork, x24)\n    x26 = lbind(compose, x11)\n    x27 = lbind(lbind, greater)\n    x28 = compose(x26, increment)\n    x29 = compose(x25, x28)\n    x30 = lbind(lbind, outbox)\n    x31 = chain(x30, x27, x29)\n    x32 = fork(x21, x23, x63)\n    x33 = fork(matcher, x32, x31)\n    x34 = lbind(compose, initset)\n    x35 = lbind(rbind, rapply)\n    x36 = compose(x34, x35)\n    x37 = fork(compose, initset, x36)\n    x38 = chain(x33, x37, x37)\n    x39"], [1.1, "def solve_92419379(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0ec410c5(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, numcolors)\n    x33 = rbind(x32, x10)\n    x34 = equality(x33, ONE)\n    x35 = branch(x34, identity, x29)\n    x36 = matcher(first, x6)\n    x37 = compose(flip, x36)\n    x38 = sfilter(x1"], [1.1, "def solve_bb2047ef(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_1c3a5d15(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(365, x17)\n    x19 = astuple(x18, ulcorner)\n    x20 = initset(x19)\n    x21 = insert(UNITY, x20)\n    x22 = insert(x18, x21)\n    x23 = recolor(x4, x22)\n    x24 = dmirror(x23)\n    x25 = ulcorner(x24)\n    x26 = urcorner(x24)\n    x27 = shoot(x26, UNITY)\n    x28 = shoot(x25, UP_RIGHT)\n    x29 = combine(x27, x28)\n    x30 = shift(x29, UNITY)\n    x31 = combine(x31, x29)\n    x32 = recolor(x4, x31)\n    x33 = lbind(shift, x30)\n    x34 = occurrences(x16, x24)\n    x35 = mapply(x33, x34)\n    x36 = difference(x32, x35)\n    x37 = shift(x36, UP_RIGHT)\n    x38 = mapply(x33, x37)\n    x39 =795(x38, x35)\n    x40 = fill(x16, x4, x39)\n    O = paint(x40,"], [1.1, "def solve_98316546(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_27690efc(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_981a722d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = apply(d687, I)\n    x2 = fork(equality, identity, rot90)\n    x3 = apply(x2, x1)\n    x4 = dedupe(x3)\n    x5 = size(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, identity, rot90)\n    x8 = x7(I)\n    x9 = trim(x8)\n    x10 = branch(x6, identity, rot270)\n    x11 = x10(x8)\n    x12 = width(x11)\n    x13 = halve(x12)\n    x14 = tojvec(x13)\n    x15 = height(x11)\n    x16 = decrement(x15)\n    x17 = lbind(astuple, x16)\n    x18 = chain(x17, halve, width)\n    x19 = fork(multiply, height, x18)\n    x20 = toivec(x10)\n    x21 = decrement(x16)\n    x22 = astuple(x24, x21)\n    x23 =101([x22)\n    x24 = letmost(x11)\n    x25 = inbox(x11)\n    x26 = center(x11)\n    x27 = llcorner(x5)\n    x28 = add(x27, x24)\n    x29 = tojvec(x25)\n    x30 = lrcorner(x5)\n    x31 = decrement(x30)\n    x32 = add(x31, x24)\n    x33 = tojvec(x25)\n    x34 =lrcorner(x5)\n    x35 = decrement(x34)\n    x36 = add(x35, x24)\n    x37 = toivec(x30)\n    x38 = lbind( invert, x37)\n    x39 = tojvec(x31)\n    x40 = add(x39, x24)\n    x41 =39(x40)\n    x42 = astuple(x36, x41)\n    x43 = ast"], [1.1, "def solve_4309246f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shoot(x26, UP_RIGHT)\n    x28 = add(x25, DOWN_LEFT)\n    x29 = shoot(x28, DOWN_LEFT)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x30, x27)\n    x32 = rbind(shoot, LEFT)\n    x33 = mapply(x32, x29)\n    x34 = width(x23)\n    x35 = invert(x34)\n    x36 = tojvec(x35)\n    x37 = fill(x23, x8, x36)\n    x38 = combine(x31, x33)\n    "], [1.1, "def solve_710439b0(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_7b06e5c4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = doublemirror(I)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, ZERO, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35"], [1.1, "def solve_d893eebf(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = repeat(NEG_ONE, ONE)\n    x5 = combine(x3, x4)\n    x6 = multiply(TEN, TEN)\n    x7 = apply(center, x2)\n    x8 = astuple(x6, x6)\n    x9 = repeat(x8, ONE)\n    x10 = combine(x7, x9)\n    x11 = identity(I)\n    x12 = asindices(I)\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = halve(x14)\n    x16 = add(TWO, x15)\n    x17 = interval(ONE, x16, ONE)\n    x18 = compose(outbox, outbox)\n    x19 = lbind(power, x18)\n    x20 = apply(x19, x17)\n    x21 = lbind(rapply, x20)\n    x22 = chain(merge, x21, initset)\n    x23 = fork(combine, initset, x22)\n    x24 = lbind(rbind, manhattan)\n    x25 = rbind(chain, initset)\n    x26 = rbind(x25, x24)\n    x27 = lbind(rbind, apply)\n    x28 = lbind(apply, initset)\n    x29 = rbind(remove, x10)\n    x30 = chain(x26, x27, x28)\n    x31 = chain(x30, x29, last)\n    x32 = lbind(sfilter, x12)\n    x33 = rbind(compose, initset)\n    x34 = lbind(compose, minimum)\n    x35 = lbind(fork, greater)\n    x36 = compose(x34, x31)\n    x37 = compose(initset, last)\n    x38 = chain(x33, x24, x37)\n    x39 = fork(x35, x"], [1.1, "def solve_f9fd7e04(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = rbind(greater, ONE)\n    x9 = chain(size, dedupe, last)\n    x10 = compose(x8, x9)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, first)\n    x13 = chain(first, x11, x12)\n    x14 = compose(x10, x13)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = mostcolor(I)\n    x20 = trim(I)\n    x21 = palette(x20)\n    x22 = other(x21, x19)\n    x23 = asindices(I)\n    x24 = box(x23)\n    x25 = toobject(x24, I)\n    x26 = palette(x25)\n    x27 = other(x26, x19)\n    x28 = ofcolor(x18, x27)\n    x29 = ofcolor(x18, x22)\n    x30 = prapply(connect, x28, x29)\n    x31 = mfilter(x30, vline)\n    x32 = underfill(x18, x27, x31)\n    x33 = matcher(numcolors, TWO)\n    x34 = objects(x32, F, F, T)\n    x35 = sfilter(x34, x33)\n    x36 = difference(x34, x35)\n    x37 = colorfilter(x36, x27)\n    x38 = mapply(toindices, x37)\n    x39 = apply(urcorner, x35)\n    x40 ="], [1.1, "def solve_999b49f4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x36)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = rbind(divide, x38)\n    x41 = compose(x39, x40)\n"], [1.1, "def solve_da5322e2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_6ca7e033(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = color(x23)\n    x25 = palette(x22)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x6)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = ofcolor(x22, x24)\n    x31 = ofcolor(x22, x6)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = lowermost(x30)\n    x35 = dneighbors(ORIGIN)\n    x36 = remove(DOWN, x35)\n    x37 = rbind(mapply, x36)\n    x38 = lbind(chain, x37)\n    "], [1.1, "def solve_fc115653(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_2f378548(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_8a3f62de(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_fbdadc5e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_9cbb4a28(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(toobject, x14)\n    x16 = lbind(shift, x7)\n    x17 = compose(x15, x16)\n    x18 = lbind(multiply, x11)\n    x19 = compose(x18, width)\n    x20 = fork(recolor, x17, x19)\n    x21 = mapply(x20, x8)\n    x22 = paint(x6, x21)\n    x23 = rbind(toobject, I)\n    x24 = apply(normalize, x12)\n    x25 = color(x12)\n    x26 = palette(x24)\n    x27 = remove(x25, x26)\n    x28 = lbind(colorcount, x24)\n    x29 = argmin(x27, x28)\n    x30 = ofcolor(x24, x29)\n    x31 = ofcolor(x24, x00000000)\n    x32 = ofcolor(x24, x15, x11)\n    x33 = first(x32)\n    x34 = asindices(x24)\n    x35 = toobject(x34, x24)\n    x36 = increment(x35)\n    x37 = shift(x35, x36)\n    x38 = toobject(x37, x24)\n    x39 = double(x38)\n    x40 = shift(x39, x36)\n    O = fill(x22, x29,"], [1.1, "def solve_5c36a369(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = rbind(astuple, ONE)\n    x5 = apply(x4, x3)\n    x6 = order(x5, leftmost)\n    x7 = apply(last, x6)\n    x8 = rbind(canvas, UP)\n    x9 = apply(x8, x7)\n    x10 = lbind(other, x7)\n    x11 = compose(x10, palette)\n    x12 = astuple(ONE, x2)\n    x13 = canvas(ZERO, x12)\n    x14 = lbind(efcolor, x13)\n    x15 = fork(combine, x14, x11)\n    x16 = apply(x15, x11)\n    x17 = rbind(shift, RIGHT)\n    x18 = rbind(argmax, rightmost)\n    x19 = compose(x18, x10)\n    x20 = fork(remove, x19, x10)\n    x21 = apply(x20, x16)\n    x22 = rbind(argmax, rightmost)\n    x23 = compose(x22, x10)\n    x24 = fork(contained, x23, x21)\n    x25 = fork(argmin, x23, x24)\n    x26 = compose(toindices, x28)\n    x27 = compose(x25, x28)\n    x28 = fork(6, x26, x27)\n    x29 = difference(x16, x8)\n    x30 = compose(x28, x29)\n    x31 = apply(x30, x29)\n    x32 = rbind(contained, x31)\n    x33 = compose(x32, x22)\n    x34 = sfilter(x41, x33)\n    x35 = difference(x41, x34)\n    x36 = divide(x33, x35)\n    x37 = apply(x36, x29)\n    x38 = fork(equality, identity, dmirror)"], [1.1, "def solve_d01a0f9e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, toindices)\n    x5 = matcher(x4, ONE)\n    x6 = x3(I)\n    x7 = merge(x6)\n    x8 = palette(x7)\n    x9 = argmin(x8, x5)\n    x10 = color(x7)\n    x11 = ofcolor(x7, x9)\n    x12 = toindices(x7)\n    x13 = combine(x12, x11)\n    x14 = rbind(manhattan, x13)\n    x15 = argmin(x13, x14)\n    x16 = lowermost(x15)\n    x17 = matcher(first, x9)\n    x18 = uppermost(x15)\n    x19 = matcher(first, x18)\n    x20 = rightmost(x15)\n    x21 = matcher(last, x18)\n    x22 = leftmost(x15)\n    x23 = matcher(last, x21)\n    x24 = uppermost(x15)\n    x25 = matcher(last, x24)\n    x26 = leftmost(x15)\n    x27 = matcher(first, x9999)\n    x28 = uppermost(x15)\n    x29 = equality(x26, x27)\n    x30 = leftmost(x15)\n    x31 = matcher(first, x90)\n    x32 = uppermost(x15)\n    x33 = matcher(first, x270)\n    x34 = leftmost(x15)\n    x35 = matcher(first, x270)\n    x36 = rightmost(x15)\n    x37 = matcher(last, x270)\n    x38 = leftmost(x15)\n    x39 = matcher(last, x37)\n    x40 = rightmost(x15)\n    x41 = matcher(last, x40)\n    x42 = leftmost(x15)"], [1.1, "def solve_2f7dd207(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 ="], [1.1, "def solve_1853c316(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_17927efe(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, height, width)\n    x8 = x7(x2)\n    x9 = fgpartition(I)\n    x10 = shape(I)\n    x11 = center(x9)\n    x12 = multiply(x10, x11)\n    x13 = shift(x9, x12)\n    x14 = color(x13)\n    x15 = ofcolor(I, x14)\n    x16 = subgrid(x15, I)\n    x17 = interval(ONE, x16, ONE)\n    x18 = apply(first, x17)\n    x19 = rbind(toobject, I)\n    x20 = apply(x19, x18)\n    x21 = rbind(colorcount, x14)\n    x22 = argmax(x20, x21)\n    x23 = remove(x22, x20)\n    x24 = MEapply(manhattan, x23)\n    x25 = shape(x22)\n    x26 = canvas(x18, x25)\n    x27 = lbind(greater, x26)\n    x28 = compose(x27, first)\n    x29 =225(x22, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, last)\n    x32 = argmin(x26, x31)\n    x33 =885(x32)\n    x34 = sfilter(x33, x33)\n    x35 = paint(x24, x34)\n    x36 = ofcolor(x35, x24)\n    x37 = shift(x36, UP)\n    x38 = fill(x35, x14, x37)\n    x39 = shift(x36, DOWN)\n    x40 = fill(x38, x15, x39)\n    x41 = shift(x36, x43)"], [1.1, "def solve_f71b02ba(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x36)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = rbind(divide, x38)\n    x41 = compose(x39, x40)\n"], [1.1, "def solve_c88e7973(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = TWO(I)\n    x2 = ONE(x1)\n    x3 = SEVEN(x2)\n    x4 = EIGHT(x3)\n    x5 = branch(x4, lowermost, uppermost)\n    x6 = x5(x2)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, uppermost, lowermost)\n    x9 = x8(x2)\n    x10 = branch(x7, leftmost, rightmost)\n    x11 = x10(x2)\n    x12 = branch(x7, leftmost, uppermost)\n    x13 = x12(x2)\n    x14 = initset(x13)\n    x15 = mostcolor(I)\n    x16 = insert(x14, x15)\n    x17 = insert(x15, x16)\n    x18 = even(x17)\n    x19 = branch(x18, hmirror, vmirror)\n    x20 = x19(x2)\n    x21 = partition(x20)\n    x22 = bottomhalf(x21)\n    x23 = remove(x22, x21)\n    x24 = argmax(x23, size)\n    x25 = other(x23, x24)\n    x26 = vmirror(x24)\n    x27 = papply(pair, x24, x26)\n    x28 = lbind(apply, maximum)\n    x29 = apply(x28, x27)\n    x30 = sfilter(x29, x215)\n    x31 = apply(x32, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = interval(ZERO, x32, ONE)\n    x37 = pair(x36, x34)\n    x38 = mpapply(recolor, x37, x37)\n    x39 = paint(x20, x38)\n    x40 = x5(x39)\n    "], [1.1, "def solve_198c6e12(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x35 = branch(x33, TWO, ONE)\n    x36 = branch(x34, THREE, x35)\n    x37 = branch(x35, SIX, x36)\n    O = canvas"], [1.1, "def solve_66d3eb7b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = vmirror(I)\n    x2 = astuple(NEG_TWO, NEG_TWO)\n    x3 = connect(ORIGIN, x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 =152(x4, TWO)\n    x6 = toivec(TWO)\n    x7 = connect(x6, invert)\n    x8 = insert(x7, x5)\n    x9 = TWO_BY_THREE, x8)\n    x10 = combine(x3, x9)\n    x11 = astuple(NEG_TWO, ONE)\n    x12 = astuple(THREE, x11)\n    x13 = combine(x12, x10)\n    x14 = prapply(connect, x13, xExample output:\n    3333, ulcorner)\n    x14 = mapply(x34, x4)\n    x15 = apply(initset, x14)\n    x16 = size(x15)\n    x17 = equality(x16, TWO)\n    x18 = branch(x17, ONE, x14)\n    x19 = fill(x18, FOUR, x13)\n    x20 = compose(last, last)\n    x21 = order(x15, x20)\n    x22 =icy20(x21)\n    x23 =98(last, x22)\n    x24 = add(x23, FOUR)\n    x25 = seed(x24)\n    x26 = width(I)\n    x27 = increment(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = lbind(multiply, x28)\n    x30 = apply(x29, x26)\n    x31 = lbind(shift, x25)\n    x32 = mapply(x31, x30)\n    x33 = fill(x19, FOUR, x32)\n    x34 = replace(x33, FIVE, ZERO)\n    x35 = size(x34)\n    x36 = equality(x35, TWO)\n    x37 = urcorner(x"], [1.1, "def solve_70172e36(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_a667c3b4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, backdrop)\n    x3 = compose(x2, toindices)\n    x4 = chain(size, x3, x3)\n    x5 = fork(greater, x4, frontiers)\n    x6 = compose(x5, color)\n    x7 = fork(both, x6, x5)\n    x8 = extract(x1, x7)\n    x9 = color(x8)\n    x10 = font(I)\n    x11 = matcher(identity, x9)\n    x12 = argmin(x10, x11)\n    x13 = argmax(x10, x11)\n    x14 = width(x13)\n    x15 = power(outbox, x14)\n    x16 = tojvec(x15)\n    x17 = shift(x16, x9)\n    x18 = double(x17)\n    x19 = double(x18)\n    x20 = x17(x19)\n    x21 = x6(x20)\n    x22 = fill(I, x9, x21)\n    x23 = shape(x13)\n    x24 = maximum(x23)\n    x25 =297(x20, x24)\n    x26 = interval(ONE, x25, ONE)\n    x27 = fill(x22, x10, x26)\n    x28 = lbind(shift, x12)\n    x29 = lbind(rbind, rbind)\n    x30 = rbind(compose, initset)\n    x31 = lbind(rbind, greater)\n    x32 = chain(x29, x30, x31)\n    x33 = compose(x32, x28)\n    x34 = lbind(multiply, x24)\n    x35 = chain(x34, x33, x28)\n    x36 = lbind(rbind, subtract)\n    x37 = chain(x26, x24, x37)\n    x38 = fork(apply, x35, x36)\n    x39 = fork(remove, x38, last)"], [1.1, "def solve_21924684(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f4128c17(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = argmax(x31, size)\n    x33 = remove(x32, x31)\n    x34 = lbind(colorcount, x27)\n    x35 = argmin(x33, x34)\n    x36 = other(x33, x35)\n    x37 = equality(x35, x36)\n    x38 = branch(x37, x35, x2)\n    x39 ="], [1.1, "def solve_17529df2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, first)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(maximum, shape, x18)\n    x20 = compose(34, x18)\n    x21 = fork(multiply, x19, x20)\n    x22 = chain(ONE, x3, x21)\n    x23 = mostcolor(I)\n    x24 = initset(x23)\n    x25 =extract(x24, x22)\n    x26 = last(x25)\n    x27 = compose(first, last)\n    x28 = extract(x25, x27)\n    x29 = ONE(x28)\n    x30 = shape(x29)\n    x31 = canvas(x25, x30)\n    x32 = hconcat(x29, x31)\n    x33 = objects(x32, F, F, T)\n    x34 = compose(backdrop, last)\n    x35 = remove(x34, x33)\n    x36 = order(x35, identity)\n    x37 = apply(x36, x32)\n    x38 = ofcolor(x37, x23)\n    x39 = ofcolor(x37"], [1.1, "def solve_140b1929(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =dedupe(x2)\n    x4 = last(x3)\n    x5 = remove(x4, x1)\n    x6 = compose(double, halve)\n    x7 = rbind(chain, x6)\n    x8 = lbind(rbind, subtract)\n    x9 = lbind(occurrences, I)\n    x10 = lbind(lbind, shift)\n    x11 = compose(x7, ulcorner)\n    x12 = multiply(x11, TEN)\n    x13 = crement(x12)\n    x14 = chain(x10, x7, x13)\n    x15 = toindices(x4)\n    x16 = x14(x15)\n    x17 = center(x16)\n    x18 = compose(x5, x14)\n    x19 = fork(recolor, x18, xlrcorner)\n    x20 = matcher(x18, x4)\n    x21 = mfilter(x16, x20)\n    x22 = paint(I, x21)\n    x23 = fork(equality, identity, vmirror)\n    x24 = portrait(x23)\n    x25 = branch(x24, vsplit, hsplit)\n    x26 = x25(I, TWO)\n    x27 = shape(x26)\n    x28 = maximum(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = x25(x29)\n    x31 = rbind(multiply, x30)\n    x32 = rbind(add, x28)\n    x33 = compose(x31, x32)\n    x34 = rbind(interval, x30)\n    x35 = fork(x34, x33, x34)\n    x36 = compose(x35, x pair)\n    x37 = apply(x36, x30)\n    x38 = last(x37)\n    x39 = paint(x22, x38)\n    O = x33(x39, x38)\n"], [1.1, "def solve_333409ba(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(iz picked, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_c3ae9ec6(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(uppermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = compose(x4, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x3, x8)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(NEG_ONE, x13)\n    x15 = invert(x13)\n    x16 = astuple(NEG_ONE, x15)\n    x17 = double(x13)\n    x18 = astuple(NEG_TWO, x17)\n    x19 = double(x13)\n    x20 = invert(x19)\n    x21 = astuple(NEG_TWO, x20)\n    x22 = multiply(THREE, TEN)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x14)\n    x25 = apply(x24, x23)\n    x26 = lbind(multiply, x16)\n    x27 = apply(x26, x23)\n    x28 = lbind(multiply, x18)\n    x29 = apply(x28, x23)\n    x30 = lbind(multiply, x21)\n    x31 = apply(x30, x23)\n    x32 = lbind(shift, x12)\n    x33 = mapply(x32, x25)\n    x34 = lbind(shift, x12)\n    x35 = mapply(x34, x27)\n    x36 = lbind(shift, x12)\n    x37 = mapply(x36, x29)\n    x38 = lbind(shift, x"], [1.1, "def solve_47096c7c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, width, height)\n    x8 = x7(I)\n    x9 = greater(x1, x8)\n    x10 = decrement(x9)\n    x11 = branch(x6, first, last)\n    x12 = branch(x6, sign, increment)\n    x13 = branch(x6, sign, increment)\n    x14 = branch(x6, subgrid, x11)\n    x15 = branch(x6, subgrid, x12)\n    x16 = branch(x6, compress, vsplit)\n    x17 = branch(x6,760111, hsplit)\n    x18 = x16(I)\n    x19 = crop(x18, ORIGIN, x79)\n    x20 = branch(x6, x19, x14)\n    x21 = branch(x6, x15, x20)\n    x22 = branch(x6, initset, x11)\n    x23 = fork(rapply, x22, identity)\n    x24 = compose(first, x23)\n    x25 = compose(backdrop, x24)\n    x26 = lbind(fork, recolor)\n    x27 = lbind(x26, numcolors)\n    x28 = compose(x27, x25)\n    x29 = chain(x26, x27, x28)\n    x30 = fork(mapply, x25, x29)\n    x31 = mostcolor(I)\n    x32 = ofcolor(x35, x31)\n    x33 = difference(x32, x18)\n    x34 = astuple(increment, rot90)\n    x35 = astuple(shoot, shoot)\n    x36 = combine(x33, x35)\n    x37 = lbind(contained, ZERO)\n    x38 = compose"], [1.1, "def solve_3cee4d07(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_d037aceb(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = subtract(x14, x13)\n    x16 = yupscale(x15, x9)\n    x17 = objects(x16, F, F, T)\n    x18 = argmax(x17, numcolors)\n    x19 = remove(x18, x17)\n    x20 = normalize(x18)\n    x21 = color(x20)\n    x22 =ulcorner(x18)\n    x23 = ulcorner(x18)\n    x24 = color(x23)\n    x25 = subgrid(x18, x4)\n    x26 = subgrid(x18, x5)\n    x27 = hconcat(x25, x26)\n    x28 = hconcat(x24, x287)\n    x29 = vconcat(x27, x28)\n    x30 = vconcat(x29, x25)\n    x31 = ofcolor(x30, x21)\n    x32 = mapply(dneighbors, x31)\n    x33 = mapply(toindices, x32)\n    x34 = normalize(x20)\n    x35 = ulcorner(x34)\n    x36 = remove(x35, x30)\n    x37 = lbind(shift, x22)\n    x38 = mapply(x37, x36)\n    x39 = color(x30)\n    x40 = ofcolor(x30"], [1.1, "def solve_1384c831(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = decrement(x8)\n    x10 = lbind(astuple, x9)\n    x11 = rbind(shoot, UP)\n    x12 = compose(x11, x10)\n    x13 = last(x12)\n    x14 =9fOUR(x13)\n    x15 = height(x9)\n    x16 = width(x9)\n    x17 = interval(ZERO, x16, x14)\n    x18 = lbind(astuple, x14)\n    x19 = rbind(shoot, NEG_UNITY)\n    x20 = compose(x18, x19)\n    x21 = rbind(astuple, DOWN)\n    x22 = decrement(x21)\n    x23 = lbind(astuple, x22)\n    x24 = rbind(shoot, DOWN)\n    x25 = Nevadacolor(x9, x18)\n    x26 = palette(I)\n    x27 = other(x26, x4)\n    x28 =14(x13)\n    x29 = astuple(x28, x25)\n    x30 = shift(x29, UNITY)\n    x31 = other(x30, x4)\n    x32 = shape(x10)\n    x33 = canvas(x31, x32)\n    x34 = ofcolor(x33, x4)\n    x35 = normalize(x34)\n    x36 = shift(x35,UNITY)\n    x37 = ofcolor(x33, x8)\n    x38 = lbind(argmin, x37)\n    x39 = x38(x010)\n    x40 = initset(x39)\n    x41 = recolor(x4, x40)\n    x"], [1.1, "def solve_032ca53d(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_8a719878(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b43a1ed0(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_71941f0a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(bordering, toindices)\n    x5 = difference(x2, x3)\n    x6 = mfilter(x5, x4)\n    x7 = outbox(x6)\n    x8 = difference(x3, x7)\n    x9 = mapply(toindices, x8)\n    x10 = lowermost(x9)\n    x11 = rbind(subtract, x10)\n    x12 = chain(size, x11, toindices)\n    x13 = argmax(x5, x12)\n    x14 = mapply(x11, x8)\n    x15 = difference(x13, x14)\n    x16 = toobject(x15, I)\n    x17 = matcher(first, x1)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = rbind(multiply, THREE)\n    x21 = power(x20, TWO)\n    x22 = compose(rot90, folder)\n    x23 =power(x22, TEN)\n    x24 = power(x21, FOUR)\n    x25 = x19(x24)\n    x26 = x20(x25)\n    x27 = paint(I, x27)\n    x28 = downscale(x27, THREE)\n    x29 = interval(x20, THREE, ONE)\n    x30 = pair(x29, x29)\n    x31 = insert(x27, x30)\n    x32 = difference(x37, x31)\n    x33 = toobject(x32, I)\n    x34 = matcher(first, x1)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x33, x35)\n    x37 = astuple(x26, x6)\n    x38 = lbind(multiply, x37)\n    x39 = neighbors(ORIGIN)\n    "], [1.1, "def solve_cfafb4ca(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_59060395(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_804d0a4d(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_336385e2(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_1c1894e1(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, toindices, x3)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, ONE)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(x8, color)\n    x10 = fork(sfilter, toindices, x9)\n    x11 = compose(x5, x10)\n    x12 =44 extract(x7, x11)\n    x13 =141\n    445\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = uppermost(x12)\n    x5 = matcher(corners, x4)\n    x6 = uppermost(x12)\n    x7 = matcher(cornity, x6)\n    x8 = upscale(x5, x4)\n    x9 = double(x6)\n    x10 = interval(x9, x9, TWO)\n    x11 = width(I)\n    x12 = matcher(x4, x11)\n    x13 = uppermost(x12)\n    x14 = lbind(astuple, x14)\n    x15 = apply(x14, x10)\n    x16 = uppermost(x12)\n    x17 = matcher(x4, x16)\n    x18 = SEVEN(x17)\n    x19 = initset(x8)\n    x20 = insert(x16, x19)\n    x21 = insert(x13, x20)\n    x22 = backdrop(x21)\n    x23 = argmax(x1, x22)\n    x24 = apply(x4, x23)\n    x25 = increment(x13)\n    x26 = rbind(greater, x25)\n    x27 = compose(x26, frontiers)\n    x28 ="], [1.1, "def solve_f22d47a9(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_fa386c2f(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(shift, x17)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(compose, x5)\n    x29 = lbind(lbind, contained)\n    x30 = compose(x28, last)\n    x31 = lbind(compose, x30)\n    x32 = x21(x31)\n    x33 = lbind(lbind, sfilter)\n    x34 = compose(x33, x30)\n    x35 = chain(c8, x34, x28)\n    x36 = fork(apply, x35, x32)\n    x37 = chain(O = paint(I, x36)\n    x38 = fork(other, palette, x37)\n    x39 = compose(x32, x38)\n    x40 = fork"], [1.1, "def solve_8e994b25(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_e5a6f82b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = lbind(apply, x3)\n    x5 = chain(even, maximum, x4)\n    x6 =553(x5)\n    x7 = rbind(sfilter, x6)\n    x8 = lbind(compose, x5)\n    x9 = chain(x8, x7, x6)\n    x10 = x9(x2)\n    x11 = lbind(sfilter, x1)\n    x12 = compose(size, x11)\n    x13 = argmax(x10, x12)\n    x14 = matcher(x11, ONE)\n    x15 = sfilter(x13, x14)\n    x16 = size(x15)\n    x17 = increment(x16)\n    x18 = sfilter(x15, x17)\n    x19 = width(x18)\n    x20 = divide(x19, x17)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = hsplit(x18, x22)\n    x24 = width(x23)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = divide(x27, x22)\n    x28 = vupscale(x23, x27)\n    x29 = vupscale(x28, x c)\n    x30 = hconcat(x29, x29)\n    x31 = hconcat(x30, x30)\n    x32 = vconcat(x31, x32)\n    x33 = vconcat(x32, x32)\n    x34 = ofcolor(x33, ZERO)\n    x35 = asindices(x33)\n    x36 = box(x35)\n    x37 = difference(x37, x34)\n    x38 = toobject(x37, x33)\n    x39 = lbind(adjacent, x38)\n    x40 = rbind"], [1.1, "def solve_3bc64957(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_a25c6db9(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = connect(ORIGIN, DOWN)\n    x2 = fork(equality, identity, x1)\n    x3 = toindices(x2)\n    x4 = NEG_ONE(x3)\n    x5 = toindices(x2)\n    x6 = NEG_ONE(x5)\n    x7 = uppermost(x2)\n    x8 = leftmost(x2)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = interval(x9, x10, x4)\n    x12 = lbind(greater, x7)\n    x13 = compose(x12, x11)\n    x14 = lbind(greater, x8)\n    x15 = compose(x14, x13)\n    x16 = apply(x7, x11)\n    x17 = apply(x8, x12)\n    x18 = combine(x16, x17)\n    x19 = lbind(greater, x7)\n    x20 = compose(x19, last)\n    x21 = fork(equality, identity, x20)\n    x22 = compose(x22, first)\n    x23 = lbind(compose, x5)\n    x24 = fork(sfilter, identity, x23)\n    x25 = compose(x21, x24)\n    x26 = lbind(apply, last)\n    x27 = compose(x26, x22)\n    x28 = fork(inter14, x27, x25)\n    x29 = compose(x27, x22)\n    x30 = fork(intersection, x28, x29)\n    x31 = lbind(chain, x17)\n    x32 = rbind(x31, x30)\n    x33 = lbind(lbind, shift)\n    x34 = compose(x33, x10)\n    x35 = chain(x32, x32, x34)\n    x36 = lbind(chain, x10)\n    x37 = rbind(x36, x31)\n    x38 = lbind(rbind, shift)\n    x39 = compose(x37, x10)"], [1.1, "def solve_8d5b2651(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_52e115bd(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = multiply(x10, UNITY)\n    x12 = decrement(x11)\n    x13 = tojvec(x12)\n    x14 = rbind(add, x13)\n    x15 =17(x12)\n    x16 = rbind(multiply, x15)\n    x17 = apply(x16, x13)\n    x18 = rbind(toobject, I)\n    x19 = lbind(ofcolor, I)\n    x20 = compose(x18, x19)\n    x21 = apply(x20, x17)\n    x22 = vmirror(I)\n    x23 = hmirror(I)\n    x24 = astuple(x22, x23)\n    x25 = hmirror(I)\n    x26 = vmirror(I)\n    x27 = ulcorner(x25)\n    x28 = increment(x27)\n    x29 = rbind(subtract, x28)\n    x30 = chain(x29, double, last)\n    x31 = compose(x14, first)\n    x32 = fork(connect, first, x30)\n    x33 = apply(x32, x21)\n    x34 = mpapply(recolor, x33, x22)\n    O = paint(I, x34)\n    return O"], [1.1, "def solve_70b9cbab(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 =5475775(x4)\n    x6 = palette(x5)\n    x7 = remove(x4, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = ofcolor(I, x4)\n    x11 = ofcolor(I, x9)\n    x12 = combine(x10, x11)\n    x13 = mapply(neighbors, x12)\n    x14 = difference(x1, x13)\n    x15 = toobject(x14, I)\n    x16 = leastcolor(x15)\n    x17 = ofcolor(I, x4)\n    x18 = first(x17)\n    x19 = initset(x18)\n    x20 = objects(I, T, F, F)\n    x21 = colorfilter(x20, x16)\n    x22 = lbind(adjacent, x8)\n    x23 = mfilter(x21, x22)\n    x24 = fill(I, x19, x23)\n    x25 = sfilter(x21, x18)\n    x26 = difference(x24, x25)\n    O = fill(x24, x8, x26)\n    return O"], [1.1, "def solve_8d1e67bf(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = astuple(dmirror, cmirror)\n    x5 = astuple(hmirror, identity)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = chain(first, x7, initset)\n    x9 = rbind(ofcolor, x3)\n    x10 = chain(lowermost, x9, x8)\n    x11 = fork(astuple, x8, x10)\n    x12 = lbind(contained, x6)\n    x13 = compose(x12, x11)\n    x14 = fork(add, height, width)\n    x15 = compose(decrement, x14)\n    x16 = fork(astuple, x15, x13)\n    x17 = fork(astuple, x15, x16)\n    x18 = fork(contained, x9, x17)\n    x19 = fork(add, height, width)\n    x20 = compose(decrement, x19)\n    x21 = fork(astuple, x19, x20)\n    x22 = fork(equality, x18, x21)\n    x23 = rbind(toobject, I)\n    x24 = compose(flip, x23)\n    x25 = fork(both, x22, x24)\n    x26 = sfilter(x6, x25)\n    x27 =426(x26, UP)\n    x28 = ulcorner(x27)\n    x29 = sfilter(x6, x28)\n    x30 = fork(shift, identity, hmirror)\n    x31 =Mix(x29, x30)\n    x32 = combine(x27, x31)\n    x33 = fork(combine, vfrontier, hfrontier)\n    x34 = mapply(x33, x32)\n    O = paint(I, x34)\n    return O"], [1.1, "def solve_2409f53a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = chain(x2, x3, normalize)\n    x5 = chain(size, x4, toindices)\n    x6 = argmin(x5, x4)\n    x7 = rbind(shoot, UNITY)\n    x8 =77(x6)\n    x9 = urcorner(x6)\n    x10 = shoot(x9, NEG_UNITY)\n    x11 = combine(x7, x10)\n    x12 = x11(x1)\n    x13 = x4(x12)\n    x14 = solve(x11, x8)\n    x15 = cover(I, x14)\n    x16 =owardcompose(x12, x13)\n    x17 = chain(x16, ulcorner, last)\n    x18 = fork(recolor, first, x17)\n    x19 = normalize(x12)\n    x20 = paint(x15, x19)\n    x21 = increment(x13)\n    x22 =(x17)\n    x23 = interval(x21, x22, ONE)\n    x24 = pair(x23, x22)\n    x25 = mapply(x18, x24)\n    O = paint(x20, x25)\n    return O"], [1.1, "def solve_37ad22e8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = astuple(x64, x7)\n    x10 = canvas(x8, x9)\n    x11 = asobject(x6)\n    x12 = occurrences(x10, x11)\n    x13 = normalize(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x10, x14)\n    x16 = astuple(TWO, ONE)\n    x17 = dneighbors(UNITY)\n    x18 = insert(x16, x17)\n    x19 = recolor(x8, x18)\n    x20 = paint(x15, x19)\n    x21 = asobject(x3)\n    x22 = matcher(first, x8)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = argmax(x24, size)\n    x26 =02378414(x width)\n    x27 = rbind(contained, x26)\n    x28 = toindices(x27)\n    x29 = sfilter(x28, x23)\n    x30 = comple estate(x29)\n    x31 = matcher(first, x8)\n    x32 = extract(x30, x31)\n    x33 = lbind(shift, x27)\n    x34 = mapply(x33, x32)\n    O = paint(x19, x34)\n    return O"], [1.1, "def solve_32b568a2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = difference(x1, x5)\n    x7 = mostcolor(I)\n    x8 = fill(I, x7, x6)\n    x9 = normalize(x1)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = numcolors(x11)\n    x13 = color(x12)\n    x14 = shift(x11, DOWN)\n    x15 =696(x12, x14)\n    x16 = fill(x8, x13, x15)\n    x17 = urcorner(x5)\n    x18 = ulcorner(x5)\n    x19 = subgrid(x14, x16)\n    x20 = hmirror(x19)\n    x21 = replace(x19, x14, x0)\n    x22 = width(x21)\n    x23 = replace(x21, x13, x0)\n    x24 = height(x23)\n    x25 = halve(x24)\n    x26 = add(TWO, x25)\n    x27 = height(x11)\n    x28 = halve(x27)\n    x29 = increment(x28)\n    x30 = width(x11)\n    x31 = halve(x30)\n    x32 = increment(x31)\n    x33 = height(x11)\n    x34 = halve(x33)\n    x35 = toindices(x14)\n    x36 = toindices(x35)\n    x37 = combine(x35, x36)\n    O = fill(x38, x13, x37)\n    return O"], [1.1, "def solve_8f47e0a4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(x3, size)\n    x5 = fork(both, x4, x5)\n    x6 = sfilter(x1, x5)\n    x7 = compose(color, x4)\n    x8 = fork(recolor, x7, width)\n    x9 = mapply(x8, x6)\n    x10 = paint(I, x9)\n    x11 =644(x10)\n    x12 =275(x11)\n    x13 = replace(x12, FIVE, ZERO)\n    O = downscale(x13, THREE)\n    return O"], [1.1, "def solve_a59bcdae(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = mostcolor(x4)\n    x6 = last(x4)\n    x7 = ulcorner(x6)\n    x8 = add(x7, DOWN_LEFT)\n    x9 = lrcorner(x6)\n    x10 = add(x9, UP_RIGHT)\n    x11 = llcorner(x6)\n    x12 = add(x11, NEG_UNITY)\n    x13 = urcorner(x6)\n    x14 = add(x13, UP_RIGHT)\n    x15 = ulcorner(x6)\n    x16 = add(x15, DOWN_LEFT)\n    x17 = shoot(x5, x8)\n    x18 = shoot(x5, x10)\n    x19 = shoot(x5, x14)\n    x20 = shoot(x5, x16)\n    x21 = combine(x17, x18)\n    x22 = combine(x17, x20)\n    x23 = center(x3)\n    x24 =\n    x23 = x2(x3)\n    x25 = height(x3)\n    x26 = increment(x25)\n    x27 = compose(first, last)\n    x28 = chain(flip, mostcolor, x27)\n    x29 = multiply(x26, x22)\n    x30 = lbind(multiply, x29)\n    x31 = apply(x30, x25)\n    x32 = lbind(shift, x3)\n    x33 = mapply(x32, x31)\n    O = paint(I, x33)\n    return O"], [1.1, "def solve_dcbb2b80(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(canvas, ZERO)\n    x6 = compose(x5, x4)\n    x7 =97(outbox)\n    x8 = chain(x7, asobject, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x1, x10)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    x14 = width(x13)\n    x15 = subtract(x14, TWO)\n    x16 = chain(toivec, invert, x15)\n    x17 = shift(x13, x16)\n    x18 = merge(x12)\n    x19 = lbind(shift, x18)\n    x20 = compose(x19, x17)\n    x21 = fork(combine, x18, x20)\n    x22 = apply(x21, x34)\n    x23 = mapply(x19, x22)\n    x24 = paint(I, x23)\n    O = paint(x24, x23)\n    return O"], [1.1, "def solve_cbed1cf7(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = leastcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = mostcolor(I)\n    x7 = shape(I)\n    x8 = canvas(x6, x7)\n    x9 = hconcat(I, x8)\n    x10 = objects(x9, F, F, T)\n    x11 = compose(last, centerofmass)\n    x12 = power(x11, FOUR)\n    x13 = order(x10, x12)\n    x14 = rbind(600\n     SIX,37)\n    x15 = rbind(600, TWO)\n    x16 = apply(x14, x13)\n    x17 = apply(x15, x13)\n    x18 = merge(x16)\n    x19 = fill(x9, FOUR, x18)\n    x20 = fill(x19, FOUR, x15)\n    O = fill(x20, TWO, x17)\n    return O"], [1.1, "def solve_280214ca(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = argmax(x1, x3)\n    x5 = fork(subtract, toindices, corners)\n    x6 = lbind(rbind,528119)\n    x7 = compose(x6, frontier)\n    x8 = fork(intersection, x7, backdrop)\n    x9 = compose(size, x8)\n    x10 = argmax(x1, x9)\n    x11 = lbind(contained, x10)\n    x12 = compose(outbox, x11)\n    x13 = chain(backdrop, x12, initset)\n    x14 = fork(difference, x13, identity)\n    x15 = lbind(greater, ONE)\n    x16 = compose(x15, x14)\n    x17 = lbind(apply, x16)\n    x18 = lbind(chain, minimum)\n    x19 = chain(x18, x17, x14)\n    x20 = fork(difference, x19, x14)\n    x21 = compose(x20, x14)\n    x22 = fork(intersection, x21, identity(x22)\n    x23 = matcher(x15, ZERO)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(invert, ulcorner, x24)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x1)\n    x28 = merge(x1)\n    x29 = cover(I, x28)\n    x30 = mapply(x26, x1)\n    O = paint(x29, x30)\n    return O"], [1.1, "def solve_edefec1e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 =552(I, FIVE)\n    O = fill(I, FOUR, x2)\n    return O"], [1.1, "def solve_300a631f(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =\n    x2 = objects(I, T, F, T)\n    x3 = mapply(delta, x2)\n    x4 = mostcolor(I)\n    x5 = fill(I, x4, x3)\n    x6 = replace(x5,\n    O = replace(x6, ONE, x3)\n    return O"], [1.1, "def solve_aa4cca9c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = inbox(x3)\n    x6 = backdrop(x5)\n    x7 = toobject(x6, I)\n    x8 = matcher(first, x4)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = x13(I)\n    x15 = color(x10)\n    x16 = ofcolor(x14, x15)\n    x17 = subgrid(x16, x14)\n    x18 = objects(x14, T, F, T)\n    x19 = colorfilter(x18, x6)\n    x20 = rbind(adjacent, x4)\n    x21 =02ind(x20, x4)\n    x22 =8filter(x21, asindices)\n    x23 = rbind(greater, ONE)\n    x24 = compose(x23, size)\n    x25 = sfilter(x22, x24)\n    x26 = mapply(vfrontier, x15)\n    x27 = mapply(hfrontier, x15)\n    x28 = combine(x26, x27)\n    x29 = intersection(x25, x28)\n    x30 = fill(x14, TWO, x29)\n    O = x13(x30)\n    return O"], [1.1, "def solve_688d891b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorcount, I)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, EIGHT)\n    x8 = extract(x2, x7)\n    x9 = outbox(x8)\n    x10 = backdrop(x9)\n    x11 = cover(I, x10)\n    x12 = lbind(apply, normalize)\n    x13 = lbind(apply, color)\n    x14 = chain(size, x12, x13)\n    x15 = matcher(x14, ZERO)\n    x16 = matcher(x14, x11)\n    x17 = sfilter(x11, x15)\n    x18 = sfilter(x12, x16)\n    x19 = merge(x17)\n    x20 = fill(x11,(FIVE, x19)\n    O = fill(x20, compose)\n    return O"], [1.1, "def solve_a09f0a90(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, width)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = of_x28, x29)\n    x31 = ofcolor(x23, x28)\n    x32 = intersection(x30, x31)\n    x33 = first(x32)\n    x34 = difference(x29, x33)\n    x35 = recolor(x24, x34)\n    x36 = shift(x35, UNITY)\n    x37 = paint(x23, x36)\n    O = x28(x37)\n    return O"], [1.1, "def solve_8c54926c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 =524e(x1, ONE)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = insert(x4, x2)\n    x6 = insert(x4, x5)\n    x7 = compose(last, center)\n    x8 = order(x6, x7)\n    x9 = size(x8)\n    x10 = interval(ZERO, x8, ONE)\n    x11 = pair(x10, x8)\n    x12 = mpapply(recolor, x11, x9)\n    O = paint(I, x12)\n    return O"], [1.1, "def solve_040d3fc5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = toindices(x3)\n    x5 = sizefilter(x1, ONE)\n    x6 = apply(ol Eating, x4)\n    x7 = lbind(shift, x3)\n    x8 = mapply(x7, x6)\n    O = paint(I, x8)\n    return O"], [1.1, "def solve_f203a560(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = index(I, ORIGIN)\n    x3 = colorfilter(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = remove(x7, x4)\n    x9 = lbind(vmatching, x7)\n    x10 = lbind(hmatching, x7)\n    x11 = sfilter(x8, x9)\n    x12 = sfilter(x8, x10)\n    x13 = argmin(x11, uppermost)\n    x14 = argmax(x11, uppermost)\n    x15 = argmin(x12, leftmost)\n    x16 = argmax(x12, leftmost)\n    x17 = fill(I, SIX, x7)\n    x18 = fill(x17, TWO, x13)\n    x19 = fill(x18, ONE, x14)\n    x20 = fill(x19, Purple\n    O = fill(x20, FOUR, x15)\n    return O"], [1.1, "def solve_dafa5a00(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = palette(I)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(x4, last)\n    x6 = ofcolor(I, FIVE)\n    x7 = sfilter(x6, x5)\n    x8 =184(90c80Set(x7, first)\n    x9 = lbind(greater, ONE)\n    x10 = compose(x9, first)\n    x11 = rbind(sfilter, x10)\n    x12 = chain(invert, x11, last)\n    x13 = fork(shift, identity, x12)\n    x14 = decrement(x6)\n    x15 = lbind(multiply, x14)\n    x16 = compose(x15, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(intersection, x16, x17)\n    x19 = rbind(shoot, UNITY)\n    x20 = compose(x19, last)\n    x21 = fork(recolor, first, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_67e792e5(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = vmirror(I)\n    x2 = objects(I, T, F, F)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = remove(x5, x3)\n    x7 = last(x6)\n    x8 = index(I, x7)\n    x9 = lrcorner(x4)\n    x10 = add(x9, TWO_BY_TWO)\n    x11 = llcorner(x4)\n    x12 = add(x11, TWO_BY_TWO)\n    x13 = urcorner(x4)\n    x14 = add(x13, TWO_BY_TWO)\n    x15 = astuple(x10, x12)\n    x16 = astuple(x14, x12)\n    x17 = combine(x15, x16)\n    x18 = rbind(shoot, UNITY)\n    x19 = mapply(x18, x17)\n    370_2296 product(x19, x15)\n    x18 = apply(x18, x70)\n    x19 = fill(I, x4, x18)\n    x20 = increment(x19)\n    x21 = shift(x3, x20)\n    x22 = astuple(NEG_TWO, FOUR)\n    x23 = shift(x21, x22)\n    x24 = fill(x19, x4, x23)\n    x25 = increment(x19)\n    x26 =000x(x25)\n    x27 = shift(x21, x26)\n    O = fill(x24, x4, x27)\n    return O"], [1.1, "def solve_074df9dd(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(f25ff, x12)\n    x14 =296(x13, rapply)\n    x15 =14(x9)\n    x16 = astuple(x15, x13)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x18, x18)\n    x20 = compose(ulcorner, x12)\n    x21 = fork(shift, identity, x20)\n    x22 = mapply(x21, x34)\n    O = paint(x19, x22)\n    return O"], [1.1, "def solve_532d0caa(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =249(x1)\n    x3 = mostcolor(I)\n    x4 =49izefilter(x2, x3)\n    x5 = fork(connect, ulcorner, lrcorner)\n    x6 = fork(equality, toindices, x5)\n    x7 = sfilter(x4, x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, hmirror)\n    x11 = x10(I)\n    x12 = toindices(x11)\n    x13 = intersection(x12, x11)\n    x14 = fill(x11, x3, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = argmax(x15, size)\n    x17 = remove(x16, x15)\n    x18 = vmirror(x17)\n    x19 = lbind(shift, x18)\n    x20 = height(x16)\n    x21 = rbind(multiply, x20)\n    x22 = apply(x21, x19)\n    x23 = rmirror(x22)\n    x24 = mapply(x19, x23)\n    x25 = fork(recolor, first, last)\n    x26 = recolor(xIVE, x24)\n    x27 = paint(x16, x26)\n    x28 = mapply(x27, x26)\n    O = paint(x28, x28)\n    return O"], [1.1, "def solve_d31d3775(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 =matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = recolor(x10, x11)\n    x13 = recolor(x11, x12)\n    x14 = combine(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = contained(ZERO, x15)\n    x17 = ofcolor(I, x10)\n    x18 = outbox(x17)\n    x19 = difference(x18, x17)\n    x20 = shape(I)\n    x21 = maximum(x20)\n    x22 = lbind(multiply, x21)\n    x23 = neighbors(x21)\n    x24 = apply(x22, x23)\n    x25 = mapply(x4, x24)\n    x26 =10(x25)\n    x27 = paint(I, x26)\n    O = toindices(x27)\n    return O"], [1.1, "def solve_9c4509f8(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =450(x1)\n    x3 = ofcolor(I, TWO)\n    x4 = subgrid(x3, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(positive, x5, x6)\n    x8 = rbind(branch, identity)\n    x9 = compose(x8, x7)\n    x10 = multiply(x4, x4)\n    x11 = compose(x4, x9)\n    x12 = compose(x11, x10)\n    x13 = lbind(rbind, subtract)\n    x14 = chain(x12, x13, TWO_BY_TWO)\n    x15 = fork(shift, identity, x14)\n    x16 = mapply(x15, x1)\n    O = paint(x4, x16)\n    return O"], [1.1, "def solve_9301120b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = rbind(colorcount, ZERO)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = subgrid(x6, x1)\n    x8 = astuple(x width, ONE)\n    x9 = lbind(ofcolor, x6)\n    x10 = compose(x9, palette)\n    x11 = matcher(x10, ZERO)\n    x12 = extract(x1, x11)\n    x13 = ofcolor(x7, x12)\n    x14 = shift(x13, ulcorner)\n    x15 = urcorner(x14)\n    x16 = shoot(x15, UNITY)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x15, UP_RIGHT)\n    x19 = shoot(x15, DOWN_LEFT)\n    x20 = combine(x16, x17)\n    x21 = combine(x18, x19)\n    x22 = fill(x7, x12, x21)\n    O = fill(x22, ONE, x18)\n    return O"], [1.1, "def solve_160c537e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, NEG_ toindices)\n    x4 = fork(32, x3, x4)\n    x5 = lbind(greater, x4)\n    x6 = compose(x5, x4)\n    x7 = fork(either, vline, hline)\n    x8 = fork(both, x6, x7)\n    x9 = extract(x1, x8)\n    x10 = x9(I)\n    x11 = last(x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = x12(x10)\n    x15 = x13(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = fill(x16, TWO, x12)\n    O = x13(x17)\n    return O"], [1.1, "def solve_9ed01d93(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, ulcorner)\n    x9 = lbind(lbind, colorcount)\n    x10 = lbind(ofcolor, I)\n    x11 = fork(ofcolor, x9, x10)\n    x12 = lbind(lbind, adjacent)\n    x13 = compose(x12, x11)\n    x14 = fork(subtract, x13, x12)\n    x15 = fork( astuple, x14, x34)\n    x16 = lbind(rbind, shift)\n    x17 =087(x12)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x18, x14)\n    x20 = fork(mapply, x17, x19)\n    x21 = mapply(x20, x6)\n    x22 = fork(paint, identity, x21)\n    x23 = replace(I, x4, x5)\n    O = x22(x23)\n    return O"], [1.1, "def solve_e9bbcdf2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =426(I)\n    x2 = fork(either, identity, dmirror)\n    x3 = x2(x1)\n    x4 = asindices(x3)\n    x5 = rbind(toobject, x3)\n    x6 = chain(first, x5, initset)\n    x7 = lbind(shift, x4)\n    x8 = compose(x7, x6)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x5)\n    x11 = paint(x3, x10)\n    O = x2(x4)\n    return O"], [1.1, "def solve_d760ca80(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = solve(x2, x1)\n    x4 = mostcolor(I)\n    x5 =88max(x3, x4)\n    x6 = difference(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 =18617(x7)\n    x10 = shift(x9, NEG_UNITY)\n    x11 = fill(I, x8, x10)\n    x12 = lbind(shift, x10)\n    x13 = mapply(x12, x11)\n    O = fill(x11, x8, x13)\n    return O"], [1.1, "def solve_ab74cde1(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 =174(x1)\n    x3 = ONE(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = subgrid(x3, I)\n    x7 = lbind(position, x3)\n    x8 = compose(x7, initset)\n    x9 = lbind(ppcorner, x5)\n    x10 = fork(x8, x9, x8)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x5)\n    O = paint(x6, x12)\n    return O"], [1.1, "def solve_716ae9e1(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 =46(subtract, x4)\n    x6 = replace(I, x4, NEG_ONE)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(x5)\n    x9 =\n    \"\"\"\n    x1 = x7(x8)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [1.1, "def solve_c18f55ca(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = subtract(x14, x13)\n    x16 = ulcorner(x3)\n    x17 = x16(x11)\n    x18 = shift(x15, x17)\n    x19 = hmirror(x7)\n    x20 = vmirror(x13)\n    x21 = x18(x19)\n    x22 = x17(x21)\n    x23 = argmin(x2, x22)\n    x24 =\n    x15 = ofcolor(x7, x6)\n    x16 =ighcorner(x3)\n    x17 = mapply(x16, x16)\n    x18 = other(x2, x17)\n    x19 = gravitate(x18, xmatcher)\n    O = shift(x17, x19)\n    return O"], [1.1, "def solve_eb06ae0e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = compose(maximum, shape)\n    x2 = lbind(apply, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x2, x3)\n    x5 = frontiers(I)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = arg minimum(x11)\n    x13 = canvas(x7, x10)\n    x14 = toindices(x13)\n    x15 = normalize(x12)\n    x16 = lbind(shift, x14)\n    x17 = compose(x16, last)\n    x18 = matcher(first, x97)\n    x19 = static(x18, x12)\n    x20 =916(recolor, x17)\n    x21 = mapply(x20, x19)\n    O = paint(x13, x21)\n    return O"]], "2037f2c7": [[0.3136498373226062, "def solve_ea8f35df(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, EIGHT, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.39574675601741854, "def solve_b8f315a1(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = astuple(NINE, NINE)\n    x4 = canvas(ZERO, x3)\n    x5 = shoot(ORIGIN, UNITY)\n    O = fill(x4, EIGHT, x5)\n    return O"], [0.44973539413730296, "def solve_5f1d8271(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.46013119398779384, "def solve_903d6a18(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, width)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.4676166989210467, "def solve_f6540088(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(0000, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.4676166989210467, "def solve_690409d2(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.4709500322543801, "def solve_f48e5db5(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.4733155843162237, "def solve_6451d29e(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_5d5263cc(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.48655768505711955, "def solve_d95c8bd3(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.4898750873388554, "def solve_3833616e(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [0.4923960902221772, "def solve_fcd51364(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.4923960902221772, "def solve_5384a6c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.5083086331274738, "def solve_dde7ee83(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5180496905134585, "def solve_165d93e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5180496905134585, "def solve_f9e5ff97(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5180496905134585, "def solve_0bfa4fdc(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5251570172671126, "def solve_e16f5b6e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5341705127937012, "def solve_75703bd0(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_d568df7b(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_27e04c9a(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O"], [0.5341705127937012, "def solve_9df9d234(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_ce4efd34(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_060da0dc(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O"], [0.5371766746404427, "def solve_799521dd(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5389342090692021, "def solve_647b94b5(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_e4c6339a(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_384c9714(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5413618061430071, "def solve_663e63d4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = fork(equality, x6, size)\n    x8 = fork(both, x4, x7)\n    x9 = sfilter(x1, x8)\n    x10 = difference(x1, x9)\n    x11 = merge(x9)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x10)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    x16 = fill(x14, SIX, x15)\n    x17 = replace(x16, TWO, ZERO)\n    O = downscale(x17, THREE)\n    return O"], [0.5437278100321579, "def solve_b398cfd9(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.5437278100321579, "def solve_597f6cf4(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.5437278100321579, "def solve_894fb529(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.5566466106544469, "def solve_a5fbb92f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = width(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.562653757943613, "def solve_ba515b14(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_43ea85bb(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_80951a0b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_8e99660a(I):\n    x1 = vmirror(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmin(x2, size)\n    O = subgrid(x3, x1)\n    return O"], [0.562653757943613, "def solve_b2181832(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_ea49edb8(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.5654205127937012, "def solve_b5657a52(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.5654205127937012, "def solve_9de95de3(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, F)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.5654205127937012, "def solve_fd8ec9af(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.5675038461270346, "def solve_2843dbfb(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5677135478584755, "def solve_3fcc2ff1(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [0.5696230758236387, "def solve_2477a0f8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_513e4763(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_4320fa88(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_1679e301(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_aa71979b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_195a6093(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_07316f89(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_1d11cc40(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5738569689228531, "def solve_f3340f64(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = x7(I)\n    x10 = x8(I)\n    x11 = palette(x9)\n    x12 = palette(x10)\n    x13 = intersection(x11, x12)\n    x14 = first(x13)\n    x15 = shape(x9)\n    x16 = canvas(x14, x15)\n    x17 = ofcolor(x9, x14)\n    x18 = ofcolor(x10, x14)\n    x19 = intersection(x17, x18)\n    O = fill(x16, EIGHT, x19)\n    return O"], [0.5748260164859528, "def solve_d522063e(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5748260164859528, "def solve_ba1043af(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5748260164859528, "def solve_515a4e9b(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5752701270817212, "def solve_5b6c34b7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.5862614030933166, "def solve_db8d9bb9(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5862614030933166, "def solve_9702fa9d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5863747631863573, "def solve_c91f6dde(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = chain(positive, replace, mostcolor)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(x3)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.5870737823636375, "def solve_17d3b823(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5951113969229912, "def solve_75bfadef(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5951113969229912, "def solve_2cfd2395(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5951113969229912, "def solve_4c4bf74d(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.5962408498640382, "def solve_39cac0c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_461c6a66(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_3d483e5f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962853437491119, "def solve_bbe14bd7(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.5980018302732818, "def solve_00c0c873(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_81efd4a0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_99bb6028(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_8b6b6abf(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_0f594b50(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_8532c251(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.6060752437814315, "def solve_8d22def0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(ZERO, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6076921592043171, "def solve_e08e4427(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6076921592043171, "def solve_6f46a465(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6116317848049022, "def solve_a1906a9c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = tophalf(I)\n    x5 = lefthalf(x4)\n    x6 = tophalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = lefthalf(x8)\n    x10 = bottomhalf(I)\n    x11 = righthalf(x10)\n    x12 = palette(x11)\n    x13 = palette(x7)\n    x14 = intersection(x12, x13)\n    x15 = palette(x11)\n    x16 = other(x15, x1)\n    x17 = palette(x11)\n    x18 = other(x17, x1)\n    x19 = shape(x11)\n    x20 = canvas(x18, x19)\n    x21 = ofcolor(x4, x16)\n    x22 = ofcolor(x8, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6145641931873815, "def solve_afbe7f24(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, vmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.6201635964679443, "def solve_03e5a1bc(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, I)\n    O = replace(x7, x6, x1)\n    return O"], [0.6352501765545244, "def solve_5229f00f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6352501765545244, "def solve_d898d2c6(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6352501765545244, "def solve_ba7fa6e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6400120813164292, "def solve_e66b88d0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.6481503277529445, "def solve_3e8a1b48(I):\n    x1 = compose(dmirror, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = chain(double, halve, width)\n    x7 = x6(x5)\n    x8 = compose(vfrontier, tojvec)\n    x9 = lbind(mapply, x8)\n    x10 = rbind(interval, x7)\n    x11 = width(x3)\n    x12 = rbind(x10, x11)\n    x13 = chain(x9, x12, leftmost)\n    x14 = fork(recolor, color, x13)\n    x15 = mapply(x14, x4)\n    x16 = paint(x3, x15)\n    O = x1(x16)\n    return O"], [0.670414589933074, "def solve_1013a384(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.6906801139687889, "def solve_dde8027a(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6906801139687889, "def solve_fe860f9e(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6933326210677562, "def solve_b3a194d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, EIGHT, x4)\n    return O"], [0.6933326210677562, "def solve_77a24345(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, EIGHT, x4)\n    return O"], [0.6935209038375776, "def solve_113a9abb(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7070625910635453, "def solve_a1e346b2(I):\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, TWO, ZERO)\n    x3 = dmirror(x2)\n    x4 = papply(pair, x2, x3)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x6, x7)\n    x9 = apply(x5, x8)\n    O = subgrid(x1, x9)\n    return O"], [0.7330246028575503, "def solve_c681625c(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7330246028575503, "def solve_d3216169(I):\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7330246028575503, "def solve_f273f269(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7330246028575503, "def solve_3376b60b(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7356195315428602, "def solve_af57b07a(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [0.7514237970163009, "def solve_e94635bf(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [0.7553253405644605, "def solve_86c1be32(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.7567692985514706, "def solve_a706c4e9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7578055442018652, "def solve_924b2732(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.7635614912120104, "def solve_192fda63(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7635614912120104, "def solve_a40d2d8c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = mostcolor(I)\n    O = replace(x4, x3, x5)\n    return O"], [0.7635614912120104, "def solve_c891ad12(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7635614912120104, "def solve_c73e161b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7702994509699451, "def solve_9d5aecbf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_b6488ef1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_7d0aade2(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_964a6248(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_4d64ca51(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7946931652854432, "def solve_b40eca65(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(I)\n    x5 = ofcolor(x3, x4)\n    x6 = shift(x5, NEG_UNITY)\n    x7 = fill(x3, x4, x6)\n    x8 = shift(x5, UNITY)\n    x9 = fill(x7, x4, x8)\n    x10 = shift(x5, DOWN)\n    x11 = fill(x9, x4, x10)\n    x12 = shift(x5, UP)\n    x13 = fill(x11, x4, x12)\n    x14 = shift(x5, RIGHT)\n    x15 = fill(x13, x4, x14)\n    x16 = shift(x5, LEFT)\n    x17 = fill(x15, x4, x16)\n    O = fill(x17, x4, x6)\n    return O"], [0.7946931652854432, "def solve_4a82ea65(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.8058042763965544, "def solve_15a4e161(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.8141732132799135, "def solve_f344d022(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8141732132799135, "def solve_a93ff3c2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8141732132799135, "def solve_7502b0b0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8244669796769487, "def solve_532aa945(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, TWO)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, width, height)\n    x9 = x8(x3)\n    x10 = gravitate(x4, x3)\n    x11 = sign(x10)\n    x12 = multiply(x11, x9)\n    x13 = crement(x12)\n    x14 = recolor(EIGHT, x4)\n    x15 = shift(x14, x13)\n    x16 = paint(I, x15)\n    O = move(x16, x3, x5)\n    return O"], [0.8244669796769487, "def solve_5d092a28(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, TWO)\n    x5 = gravitate(x3, x4)\n    x6 = first(x5)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, width, height)\n    x9 = x8(x3)\n    x10 = gravitate(x4, x3)\n    x11 = sign(x10)\n    x12 = multiply(x11, x9)\n    x13 = crement(x12)\n    x14 = recolor(EIGHT, x4)\n    x15 = shift(x14, x13)\n    x16 = paint(I, x15)\n    O = move(x16, x3, x5)\n    return O"], [0.8245794848741997, "def solve_816e52d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.8264892431277836, "def solve_ce597b5a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.8267733910796773, "def solve_f6efffee(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.8267733910796773, "def solve_d5e24a1c(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.8277590843976249, "def solve_45f29695(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, EIGHT, x2)\n    x4 = switch(x3, ONE, FOUR)\n    x5 = switch(x4, EIGHT, ONE)\n    x6 = switch(x5, TWO, SIX)\n    O = switch(x6, ONE, FIVE)\n    return O"], [0.8280264986187765, "def solve_344de657(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = box(x5)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x3, x11)\n    O = fill(x6, x1, x12)\n    return O"], [0.8298729066392503, "def solve_728f7408(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, TWO)\n    x5 = branch(x3, TWO_BY_ZERO, ORIGIN)\n    x6 = branch(x4, TWO_BY_TWO, ZERO_BY_TWO)\n    x7 = connect(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.8333207685307377, "def solve_deb47772(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.8333444764491823, "def solve_4c0e2dca(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8335820541743321, "def solve_31fca2e7(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.8335820541743321, "def solve_10333a0b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.8372035288420694, "def solve_61397016(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.8372035288420694, "def solve_3f91a72f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.8372035288420694, "def solve_03437e60(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.8376932799217021, "def solve_8c1286ad(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8376932799217021, "def solve_e82104a5(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8376932799217021, "def solve_7ba47767(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.838870195508736, "def solve_3311b849(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = colorfilter(x5, x4)\n    x7 = difference(x5, x6)\n    x8 = rbind(bordering, I)\n    x9 = compose(flip, x8)\n    x10 = mfilter(x7, x9)\n    O = fill(I, TWO, x10)\n    return O"], [0.8388934266532925, "def solve_f7b586ab(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x2)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, EIGHT, x5)\n    x13 = fill(x12, TWO, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FIVE, x29)\n    return O"], [0.8441526103104054, "def solve_5b1a2f0e(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    O = fill(I, THREE, x2)\n    return O"], [0.8446243227863208, "def solve_d1e41286(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.8446931652854431, "def solve_ea22d6d0(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, ZERO, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.8446931652854431, "def solve_88e726e3(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.8477590843976248, "def solve_fa5991f1(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8504311697771865, "def solve_71ae7f7e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.8519775951141462, "def solve_cabeeaa5(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.8519775951141462, "def solve_41bbe102(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.8544257510642916, "def solve_dff9ccde(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, TEN, x2)\n    x4 = argmin(x1, size)\n    x5 = argmax(x1, size)\n    x6 = fill(x3, ONE, x5)\n    O = fill(x6, TWO, x4)\n    return O"], [0.8560985463085155, "def solve_0d34588b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x1)\n    O = fill(x9, TWO, x14)\n    return O"], [0.8583146399531806, "def solve_d77414c5(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.8616512583526341, "def solve_837207fc(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.8619789768786953, "def solve_781a8ee3(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_4e7863ac(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_bb559e6f(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_12e2ffb9(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_1c906a74(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_306d24dd(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8621335034579425, "def solve_3dd2c3ef(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8621335034579425, "def solve_2b414355(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8621335034579425, "def solve_4b085bd8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8624266748550173, "def solve_bc1c1d07(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8625466344449646, "def solve_c2cd075b(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, THREE, x3)\n    return O"], [0.8626797193182597, "def solve_9db34725(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8626797193182597, "def solve_72c46e67(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8626797193182597, "def solve_644dab36(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8628248440348131, "def solve_b9d13e19(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = replace(I, x1, T)\n    x4 = argmax(x2, size)\n    x5 = argmin(x2, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x3)\n    x10 = hline(x5)\n    x11 = hmirror(x9)\n    x12 = vmirror(x9)\n    x13 = branch(x10, x11, x12)\n    x14 = branch(x10, x7, ZERO)\n    x15 = branch(x10, ZERO, x8)\n    x16 = asobject(x13)\n    x17 = matcher(first, x11)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = ulcorner(x4)\n    x21 = shape(x4)\n    x22 = astuple(x14, x15)\n    x23 = multiply(x21, x22)\n    x24 = add(x20, x23)\n    x25 = shift(x19, x24)\n    O = paint(x3, x25)\n    return O"], [0.8631105583205274, "def solve_7d07cab0(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_2601072c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8633569857434576, "def solve_89eb2418(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [0.8635849561251593, "def solve_315d7cd7(I):\n    x1 = objects(I, T, T, T)\n    x2 = apply(color, x1)\n    x3 = merge(x1)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O"], [0.8638179923732853, "def solve_f1992bd5(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.8638225057175161, "def solve_ef1a9b7f(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = lrcorner(x4)\n    x9 = llcorner(x4)\n    x10 = urcorner(x4)\n    x11 = ulcorner(x4)\n    x12 = shoot(x8, UNITY)\n    x13 = shoot(x9, DOWN_LEFT)\n    x14 = shoot(x10, UP_RIGHT)\n    x15 = shoot(x11, NEG_UNITY)\n    x16 = combine(x12, x13)\n    x17 = combine(x14, x15)\n    x18 = combine(x16, x17)\n    O = fill(I, x7, x18)\n    return O"], [0.8638448240547932, "def solve_11bcb038(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, palette)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.8638512990612682, "def solve_d1869a10(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.8638512990612682, "def solve_bcb82dbd(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, THREE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.8638701955087361, "def solve_8e11e278(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.8638701955087361, "def solve_a427e7e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.8638701955087361, "def solve_d60d46cd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_4b4c7087(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.8638701955087361, "def solve_d9a030f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = rbind(hmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O"], [0.8638701955087361, "def solve_76576df6(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8638701955087361, "def solve_1a701175(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.8638701955087361, "def solve_b86c7441(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.8638701955087361, "def solve_4930f8f9(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, ONE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.8638701955087361, "def solve_2f333cd3(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_85a53c23(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, EIGHT, x12)\n    return O"], [0.8638701955087361, "def solve_e79758f7(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = argmin(x2, size)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mapply(x8, x2)\n    O = paint(I, x9)\n    return O"], [0.8638701955087361, "def solve_e586afef(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, EIGHT, x12)\n    return O"], [0.8638701955087361, "def solve_cbba41ea(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.8638701955087361, "def solve_0233967b(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.8638701955087361, "def solve_c0e767f1(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sizefilter(x2, ONE)\n    x4 = sizefilter(x2, FOUR)\n    x5 = merge(x3)\n    x6 = fill(I, THREE, x5)\n    x7 = merge(x4)\n    x8 = fill(x6, EIGHT, x7)\n    O = replace(x8, NINE, ZERO)\n    return O"], [0.8638763240862932, "def solve_0f0abfe7(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8638763240862932, "def solve_526725bf(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [0.8638763240862932, "def solve_30841b2e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(recolor, color, backdrop)\n    x3 = mapply(x2, x1)\n    O = paint(I, x3)\n    return O"], [0.8638763240862932, "def solve_5f7ccb35(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8638763240862932, "def solve_068aa8a1(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8638823704010644, "def solve_35f7a4db(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [0.863900032004738, "def solve_fb1c8864(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.863900032004738, "def solve_452d5d2f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.863900032004738, "def solve_fb98ed4a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.863900032004738, "def solve_9d161e1a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.863900032004738, "def solve_a2dbb8e3(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = other(x1, x2)\n    x4 = ineighbors(ORIGIN)\n    x5 = height(x2)\n    x6 = increment(x5)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = lbind(intersection, x2)\n    x9 = chain(positive, size, x8)\n    x10 = lbind(shift, x2)\n    x11 = rbind(multiply, UNITY)\n    x12 = chain(x9, x10, x11)\n    x13 = sfilter(x7, x12)\n    x14 = maximum(x13)\n    x15 = increment(x14)\n    x16 = toindices(x3)\n    x17 = lbind(intersection, x16)\n    x18 = lbind(shift, x2)\n    x19 = rbind(multiply, x15)\n    x20 = chain(toindices, x18, x19)\n    x21 = chain(size, x17, x20)\n    x22 = argmax(x4, x21)\n    x23 = shape(I)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = interval(ONE, x25, ONE)\n    x27 = lbind(shift, x2)\n    x28 = multiply(x15, x22)\n    x29 = lbind(multiply, x28)\n    x30 = pair(x26, x26)\n    x31 = apply(x29, x30)\n    x32 = mapply(x27, x31)\n    x33 = color(x3)\n    x34 = recolor(x33, x32)\n    O = paint(I, x34)\n    return O"], [0.863900032004738, "def solve_e6471352(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.8639438916538609, "def solve_de206e57(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_d07c7226(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_73a9f40d(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_b77b0425(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8640364842464535, "def solve_84564196(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_f2f0ce5c(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_46121a3f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_5616ad10(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640827805427497, "def solve_2eb2cf27(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.8640934643034335, "def solve_eb69c83d(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = astuple(x2, ONE)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = shoot(x5, RIGHT)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, FOUR, x7)\n    return O"], [0.8641331026039412, "def solve_fabf0078(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = lbind(prapply, connect)\n    x8 = fork(x7, x6, x6)\n    x9 = compose(merge, x8)\n    x10 = fork(recolor, identity, x9)\n    x11 = mapply(x10, x5)\n    O = paint(I, x11)\n    return O"], [0.8642201225067311, "def solve_e69f7e9b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8642201225067311, "def solve_da0ec6cc(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8642201225067311, "def solve_106d68b5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8643350082204696, "def solve_4ddd1474(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643350082204696, "def solve_b1ae695c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643350082204696, "def solve_4d6cb8ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643386284959661, "def solve_d046432c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_9bee0c0e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_2733ebd7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_e48a6faa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_3b03945f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8649127939257487, "def solve_01e17b9e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = compose(decrement, width)\n    x8 = chain(positive, decrement, x7)\n    x9 = mfilter(x1, x8)\n    O = underpaint(x6, x9)\n    return O"], [0.8654574970960377, "def solve_1a6d7fbe(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.8656237858337551, "def solve_1f962589(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.8656237858337551, "def solve_42038134(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    x4 = fill(I, ONE, x3)\n    x5 = mapply(delta, x2)\n    O = fill(x4, THREE, x5)\n    return O"], [0.8656237858337551, "def solve_ef070977(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.8659079055699296, "def solve_fa9c31ad(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O"], [0.866911713810044, "def solve_8c7583da(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I,8880, x3)\n    return O"], [0.867970724609265, "def solve_720eb206(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, NEG_ONE, x5)\n    return O"], [0.86831351994972, "def solve_936bd2ec(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.8791842304218287, "def solve_b2d97a09(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.895840777338116, "def solve_9fa20a8e(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.895840777338116, "def solve_9bda1efe(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.895840777338116, "def solve_1ded3d4f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_000b4156(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_111c3e21(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.895840777338116, "def solve_e0d5e6b1(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [0.895840777338116, "def solve_e9de2504(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, TWO, x4)\n    x6 = replace(x5, ZERO, THREE)\n    O = replace(x6, EIGHT, ONE)\n    return O"], [1.0, "def solve_adff6a9d(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_6760e27f(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = valmirror(I)\n    x4 = compose(first, last)\n    x5 = argmin(x2, x4)\n    O = subgrid(x5, x1)\n    return O"], [1.0, "def solve_5c0b33c8(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [1.0, "def solve_4eb75789(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_283aa6ee(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = fgpartition(I)\n    x6 = colorfilter(x5, x4)\n    x7 = compose(size, delta)\n    x8 = argmax(x6, x7)\n    x9 = mapply(dneighbors, x8)\n    x10 = fill(I, ONE, x9)\n    x11 = replace(x10, x4, ZERO)\n    x12 = ofcolor(x11, x5)\n    x13 = subgrid(x12, x11)\n    x14 = replace(x13, x4, ZERO)\n    x15 = replace(x14, x8, ZERO)\n    x16 = compress(x15)\n    x17 = upscale(x16, THREE)\n    O = fill(x11, THREE, x17)\n    return O"], [1.0, "def solve_053e7d03(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_e1218480(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = backdrop(x2)\n    x5 = insert(x3, x4)\n    x6 = width(x5)\n    x7 = halve(x6)\n    x8 = lefthalf(x5)\n    x9 = righthalf(x5)\n    x10 = vmirror(x9)\n    x11 = vmirror(x8)\n    x12 = ofcolor(x11, x3)\n    x13 = merge(x12)\n    x14 = recolor(x3, x13)\n    x15 = height(x5)\n    x16 = height(x9)\n    x17 = subtract(x15, x16)\n    x18 = add(x17, TWO)\n    x19 = canvas(x3, x18)\n    x20 = asobject(x19)\n    x21 = shift(x20, UNITY)\n    x22 = paint(x19, x21)\n    x23 = rot90(x22)\n    x24 = fgpartition(x23)\n    x25 = merge(x24)\n    x26 = rot90(x25)\n    x27 = fgpartition(x26)\n    x28 = merge(x27)\n    x29 = rot270(x28)\n    x30 = fgpartition(x29)\n    x31 = merge(x30)\n    O = paint(x22, x31)\n    return O"], [1.0, "def solve_39d146d4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = first(x2)\n    x4 = normalize(x3)\n    x5 = last(x2)\n    x6 = normalize(x5)\n    x7 = ulcorner(x6)\n    x8 = invert(x7)\n    x9 = shift(x4, x8)\n    x10 = shift(x9, NEG_UNITY)\n    x11 = paint(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, ulcorner)\n    x16 = shift(x15, DOWN)\n    x17 = paint(x11, x16)\n    x18 = objects(x17, T, T, T)\n    x19 = first(x18)\n    x20 = shape(x19)\n    x21 = multiply(x20, x20)\n    x22 = canvas(ZERO, x21)\n    x23 = normalize(x19)\n    x24 = lbind(shift, x23)\n    x25 = height(x23)\n    x26 = divide(x25, x20)\n    x27 = increment(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = paint(x22, x28)\n    x30 = normalize(x23)\n    x31 = lbind(shift, x30)\n    x32 = interval(ZERO, x27, ONE)\n    x33 = pair(x29, x32)\n    x34 = sapply(center, x33)\n    x35 = mapply(x24, x34)\n    x36 = paint(x10, x35)\n    x37 = shift(x26, x32)\n    x38 = lbind(shift, x33)\n    x39 = mapply(x38, x37)\n    O = paint(x36, x39)\n    return O"], [1.0, "def solve_96b4a3dc(I):\n    x1 = width(I)\n    x2 = fgpartition(I)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = asindices(x6)\n    x8 = lowermost(x3)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x9, x11, x10)\n    x13 = compose(x12, initset)\n    x14 = apply(x13, x7)\n    x15 = cover(I, x5)\n    O = fill(x15, EIGHT, x14)\n    return O"], [1.0, "def solve_e1ff9e27(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = apply(tojvec, x3)\n    x5 = lbind(shift, x4)\n    x6 = mapply(x5, x2)\n    O = fill(I, FOUR, x6)\n    return O"], [1.0, "def solve_5ca6036c(I):\n    x1 = fgpartition(I)\n    x2 = Tcher(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_73e6236c(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(TEN, TEN)\n    x4 = x10(x2)\n    x5 = x11(x4)\n    x6 = x7(x5)\n    x7 = ulcorner(x2)\n    x8 = increment(x7)\n    x9 = rbind(subtract, x8)\n    x10 = apply(x9, x5)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x6)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_a4584422(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [1.0, "def solve_231b6dbe(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_0ee36cb7(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply( lrcorner, x2)\n    x4 = center(x3)\n    x5 = rbind(shoot, x4)\n    x6 = fork(combine, vfrontier, x5)\n    x7 = apply(x6, x3)\n    x8 = intersection(x7, x2)\n    O = underfill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_da7a10a8(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(flip, x2)\n    x4 = extract(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = index(x7, DOWN)\n    x9 = subgrid(x4, I)\n    x10 = lefthalf(x9)\n    x11 = palette(x10)\n    x12 = other(x11, ZERO)\n    x13 = equality(x8, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(x4)\n    x16 = normalize(x15)\n    x17 = shift(x16, UNITY)\n    O = paint(x7, x17)\n    return O"], [1.0, "def solve_d81ce084(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(x12)\n    x14 = x11(x5)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [1.0, "def solve_9f94b1a2(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = power(power, THREE)\n    x5 = x4(x3)\n    x6 = width(x3)\n    x7 = halve(x6)\n    x8 = tojvec(x7)\n    x9 = height(x3)\n    x10 = decrement(x9)\n    x11 = astuple(x10, x7)\n    x12 = connect(x8, x11)\n    x13 = branch(x12, vsplit, hsplit)\n    x14 = x13(x3, I)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = palette(x15)\n    x18 = colorfilter(x17, x8)\n    x19 = difference(x18, x18)\n    x20 = asobject(x19)\n    x21 = occurrences(x16, x20)\n    x22 = size(x21)\n    x23 = positive(x22)\n    x24 = branch(x23, hmirror, vmirror)\n    x25 = x24(x16)\n    x26 = x24(x25)\n    x27 = ofcolor(x25, x8)\n    x28 = ofcolor(x26, x10)\n    x29 = intersection(x27, x28)\n    x30 = fill(x25, TWO, x29)\n    O = replace(x30, x8, FOUR)\n    return O"], [1.0, "def solve_e9c39ee8(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = ORIGIN(x2)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = toindices(x5)\n    x7 = inbox(x6)\n    x8 = shoot(x5, NEG_UNITY)\n    x9 = lbind(contained, ZERO)\n    x10 = cover(I, x9)\n    x11 = lbind(e76, TEN)\n    x12 = compose(x11, palette)\n    x13 = fork(add, height, width)\n    x14 = fork(equality, identity, x12)\n    x15 = compose(x14, width)\n    x16 = extract(x8, x15)\n    x17 = multiply(x16, TWO)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = lbind(multiply, x17)\n    x20 = apply(x19, x18)\n    x21 = lbind(shift, x6)\n    x22 = mapply(x21, x20)\n    O = fill(x10, FOUR, x22)\n    return O"], [1.0, "def solve_6ecb9eb7(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_153e27c1(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [1.0, "def solve_b821fd44(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(NINE, NINE)\n    x3 = rbind(multiply, x2)\n    x4 = rbind(divide, x2)\n    x5 = apply(x3, x1)\n    x6 = apply(x4, x1)\n    x7 = papply(equality, x5, x6)\n    x8 = extract(x7, last)\n    O = first(x8)\n    return O"], [1.0, "def solve_f5eb8731(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(first, TWO)\n    x4 = first(x2)\n    x5 = last(x2)\n    x6 = x3(x4)\n    x7 = x3(x5)\n    x8 = fork(subtract, first, last)\n    x9 = fork(multiply, first, last)\n    x10 = fork(equality, toindices, x8)\n    x11 = fork(multiply, toindices, x7)\n    x12 = fork(both, x10, x11)\n    x13 = mfilter(x6, x12)\n    O = fill(I, EIGHT, x13)\n    return O"], [1.0, "def solve_5625ba5d(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = astuple(ONE, x3)\n    O = canvas(x2, x4)\n    return O"], [1.0, "def solve_53d7fb0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = other(x3, ZERO)\n    x5 = ofcolor(I, x4)\n    x6 = mapply(dneighbors, x5)\n    x7 = toobject(x6, I)\n    x8 = mostcolor(x7)\n    x9 = ofcolor(I, x8)\n    x10 = mapply(ineighbors, x9)\n    x11 = toobject(x10, I)\n    x12 = leastcolor(x11)\n    x13 = ofcolor(I, x12)\n    x14 = ulcorner(x6)\n    x15 = lrcorner(x6)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = combine(x16, x17)\n    x19 = underfill(I, x4, x18)\n    O = underfill(x19, THREE, x3)\n    return O"], [1.0, "def solve_4448e96a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = apply(color, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = compose(x6, delta)\n    x8 = fork(recolor, x5, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_e1be28c0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = x177(x10)\n    x12 = x177(x11)\n    x13 = toindices(x12)\n    x14 = increment(x13)\n    x15 = increment(x14)\n    x16 = subtract(x15, x12)\n    x17 = increment(x16)\n    x18 = shift(x13, x17)\n    x19 = leftmost(x18)\n    x20 = matcher(last, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x2, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = width(I)\n    x26 = divide(x24, x25)\n    x27 = increment(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = mapply(x23, x28)\n    x30 = insert(x29, x28)\n    x31 = dmirror(x30)\n    x32 = width(I)\n    x33 = increment(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x31, x34)\n    x36 = mapply(x32, x35)\n    x37 = fill(I, x9, x36)\n    x38 = merge(x2)\n    O = x36(x38)\n    return O"], [1.0, "def solve_88b3e909(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_21aee101(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_462b6633(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = cover(I, x2)\n    x4 = normalize(x2)\n    x5 = remove(x2, x1)\n    x6 = insert(x4, x5)\n    x7 = merge(x6)\n    x8 = mostcolor(I)\n    x9 = shape(x2)\n    x10 = canvas(x8, x9)\n    x11 = fill(x10, NEG_ONE, x7)\n    x12 = normalize(x2)\n    x13 = lbind(shift, x12)\n    x14 = mapply(x13, x10)\n    O = paint(x11, x14)\n    return O"], [1.0, "def solve_ba6eee66(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_abdb9644(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_6c8f0870(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = compose(x11, merge)\n    x17 = sfilter(x15, x16)\n    O = fill(x11, EIGHT, x17)\n    return O"], [1.0, "def solve_8a53fb58(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = height(x2)\n    x7 = lbind(multiply, x6)\n    x8 = chain(x7, height, x5)\n    x9 = mapply(x8, x4)\n    O = paint(x3, x9)\n    return O"], [1.0, "def solve_b3d9fc71(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = llcorner(x6)\n    x9 = urcorner(x6)\n    x10 = ulcorner(x6)\n    x11 = shoot(x7, NEG_UNITY)\n    x12 = shoot(x8, UNITY)\n    x13 = combine(x11, x12)\n    x14 = llcorner(x6)\n    x15 = lrcorner(x6)\n    x16 = shoot(x14,DOWN_LEFT)\n    x17 = shoot(x15, UP_RIGHT)\n    x18 = combine(x16, x17)\n    x19 = underfill(I, x6, x18)\n    O = x3(x19)\n    return O"], [1.0, "def solve_1dc7f651(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = other(x3, x4)\n    x6 = color(x5)\n    x7 = rbind(shoot, DOWN)\n    x8 = mapply(x7, x2)\n    x9 = underfill(I, x6, x8)\n    x10 = objects(x9, T, T, T)\n    x11 = colorfilter(x10, x6)\n    x12 = rbind(bordering, I)\n    x13 = mfilter(x11, x12)\n    O = subgrid(x13, x9)\n    return O"], [1.0, "def solve_aff63cec(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = order(x1, leftmost)\n    x4 = astuple(x2, x3)\n    x5 = color(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, dneighbors)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x4)\n    x11 = add(x4, THREE)\n    x12 = astuple(x10, x11)\n    x13 = add(x4, TWO)\n    x14 = initset(x13)\n    x15 = insert(x11, x14)\n    x16 = insert(x12, x15)\n    x17 = width(x9)\n    x18 = astuple(x17, x17)\n    x19 = add(x18, TWO)\n    x20 = initset(x19)\n    x21 = insert(x16, x20)\n    x22 = insert(x12, x21)\n    x23 = merge(x22)\n    x24 = astuple(x11, x12)\n    x25 = shift(x23, x24)\n    x26 = ulcorner(x27)\n    x27 = lbind(shift, x27)\n    x28 = shape(x25)\n    x29 = rbind(multiply, x28)\n    x30 = apply(x29, x25)\n    x31 = shift(x27, x30)\n    x32 = llcorner(x27)\n    x33 = lbind(shift, x32)\n    x34 = mapply(x33, x31)\n    x35 = shift(x19, x34)\n    x36 = paint(I, x27)\n    O = fill(x36, x5, x31)\n    return O"], [1.0, "def solve_8c0f0983(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, F)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [1.0, "def solve_ebb7b0e0(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_2ed31cb3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_1d0f87d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = rbind(canvas, UNITY)\n    x4 = apply(x3, x2)\n    x5 = merge(x4)\n    O = hmirror(x5)\n    return O"], [1.0, "def solve_332695ad(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = fork(vmatching, first, last)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x7 = mfilter(x6, x7)\n    O = fill(I, EIGHT, x7)\n    return O"], [1.0, "def solve_090c59ab(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = multiply(x2, FIVE)\n    x4 = astuple(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    x10 = paint(x5, x9)\n    O = hmirror(x10)\n    return O"], [1.0, "def solve_4f989a65(I):\n    x1 = fgpartition(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(other, TWO)\n    x4 = compose(x3, palette)\n    x5 = totuple(x1)\n    x6 = apply(x4, x5)\n    x7 = lbind(sfilter, x2)\n    x8 = lbind(matcher, identity)\n    x9 = chain(x7, x8, mostcolor)\n    x10 = x9(I)\n    x11 = objects(I, T, F, T)\n    x12 = apply(x10, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmax(x12, x13)\n    x15 = matcher(x4, x14)\n    x16 = extract(x1, x15)\n    x17 = subgrid(x16, I)\n    x18 = fgpartition(x17)\n    x19 = merge(x18)\n    x20 = cover(x17, x19)\n    x21 = insert(x16, x18)\n    x22 = width(x21)\n    x23 = normalize(x21)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x20, x24)\n    x26 = toindices(x24)\n    x27 = lbind(shift, x26)\n    x28 = fgpartition(x17)\n    x29 = merge(x28)\n    x30 = difference(x29, x26)\n    x31 = toobject(x30, x17)\n    x32 = frequency(x31, ONE)\n    x33 = mapply(x27, x32)\n    O = fill(x25, TWO, x33)\n    return O"], [1.0, "def solve_91f08601(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = astuple(NEG_TWO, NEG_TWO)\n    x4 = contained(TWO, x3)\n    x5 = lbind(rbind, manhattan)\n    x6 = chain(x5, initset, initset)\n    x7 = fork(argmin, x6, size)\n    x8 = fork(astuple, x7, ulcorner)\n    x9 = astuple(x1, NEG_TWO)\n    x9 = shift(x1, x9)\n    x10 = interval(TWO, x7, NEG_ONE)\n    x11 = mpapply(recolor, x10, x7)\n    x12 = paint(I, x11)\n    x13 = rot90(x12)\n    x14 = rbind(ofcolor, EIGHT)\n    x15 = apply(x14, x3)\n    x16 = leastcolor(x12)\n    x17 = matcher(x18, x16)\n    x18 = rbind(sfilter, x17)\n    x19 = lbind(mapply, backdrop)\n    x20 = apply(x19, x15)\n    x21 = mapply(x21, x16)\n    O = fill(x12, x8, x20)\n    return O"], [1.0, "def solve_b5bce103(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = leastcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    x8 = fill(x7, x3, x4)\n    O = fill(x8, TWO, x5)\n    return O"], [1.0, "def solve_0e7705c2(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_48a16ade(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(x8)\n    x11 = x8(x9)\n    x12 = shape(x10)\n    x13 = increment(x12)\n    x14 = multiply(x13, x10)\n    x15 = decrement(x14)\n    x16 = index(x11, x15)\n    x17 = mostcolor(x11)\n    x18 = shape(x11)\n    x19 = canvas(x17, x18)\n    x20 = hconcat(x11, x19)\n    x21 = objects(x20, F, T, T)\n    x22 = argmax(x21, numcolors)\n    x23 = shape(x22)\n    x24 = canvas(x17, x23)\n    x25 = normalize(x22)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x24)\n    O = paint(x24, x27)\n    return O"], [1.0, "def solve_c5aa7acf(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_071600ff(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_fbe1a8b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [1.0, "def solve_d3ff209a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x2)\n    x9 = lbind(shift, x8)\n    x10 = height(x2)\n    x11 = width(x2)\n    x12 = x9(astuple, x11)\n    x13 = center(x2)\n    x14 = lbind(shift, x13)\n    x15 = height(x2)\n    x16 = subtract(x15, x10)\n    x17 = astuple(x16, x12)\n    x18 = canvas(x5, x17)\n    x19 = hconcat(x18, x7)\n    x20 = vconcat(x19, x14)\n    x21 = asobject(x20)\n    x22 = ulcorner(x2)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x21)\n    O = paint(x7, x24)\n    return O"], [1.0, "def solve_2eca6a05(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 =toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = mapply(shift, x32)\n    x34 = fill(I, THREE, x33)\n    x35 = mapply(x38, x32)\n    x36 = fill(x34, ONE, x35)\n    x37 = replace(x36, x24, ONE)\n    x38 = difference(x37, x31)\n    O = fill(x37, TWO, x38)\n    return O"], [1.0, "def solve_60aa3cd3(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_9c9c7063(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(identity, toindices)\n    x3 = order(x1, x2)\n    x4 = first(x3)\n    x5 = dedupe(x4)\n    x6 = size(x5)\n    x7 = equality(x6, ONE)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, F)\n    x11 = order(x10, leftmost)\n    x12 = apply(color, x11)\n    x13 = repeat(x12, ONE)\n    O = x8(x13)\n    return O"], [1.0, "def solve_3c14fa95(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_ac78064f(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = matcher(x4, x11)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x14, x15)\n    x17 = rightmost(x5)\n    x18 = shift(x10, x17)\n    x19 = lowermost(x5)\n    x20 = rightmost(x10)\n    x21 = subtract(x19, x20)\n    x22 = astuple(x16, x21)\n    x23 = maximum(x22)\n    x24 = lowermost(x5)\n    x25 = rightmost(x5)\n    x26 = divide(x24, x25)\n    x27 = uppermost(x5)\n    x28 = rightmost(x5)\n    x29 = divide(x27, x28)\n    x30 = ulcorner(x7)\n    x31 = matcher(x44, x30)\n    x32 = sfilter(x26, x31)\n    x33 = ulcorner(x27)\n    x34 = matcher(x44, x33)\n    x35 = sfilter(x27, x34)\n    x36 = subgrid(x5, x20)\n    x37 = merge(x35)\n    x38 = cover(x37, x36)\n    x39 = paint(x38, x33)\n    O = switch(x39, EIGHT, ONE)\n    return O"], [1.0, "def solve_2eca2d37(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_6a221eff(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = lbind(power, DOWN)\n    x5 = compose(x4, uppermost)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x7)\n    x9 = chain(invert, x4, x5)\n    x10 = fork(shift, identity, x9)\n    x11 = compose(x11, ulcorner)\n    x12 = chain(x10, x11, x11)\n    x13 = mapply(x12, x8)\n    O = paint(x3, x13)\n    return O"], [1.0, "def solve_de15ee11(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(FOUR, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE)\n    x9 = asobject(x8)\n    x10 = lbind(shift, x9)\n    x11 = compose(x10, tojvec)\n    x12 = lbind(shift, x9)\n    x13 = compose(x12, tojvec)\n    x14 = fork(combine, x211, x13)\n    x15 = fork(shift, identity, x14)\n    x16 = mapply(x15, x5)\n    O = paint(x8, x16)\n    return O"], [1.0, "def solve_32a7f0c1(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = chain(positive, size, f76)\n    x7 = fork(both, x6, identity)\n    x8 = sfilter(x1, x7)\n    O = fill(x5, EIGHT, x8)\n    return O"], [1.0, "def solve_1de6051f(I):\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = rot90(I)\n    x4 = fgpartition(x3)\n    x5 = mapply(toindices, x4)\n    x6 = normalize(x5)\n    x7 = ulcorner(x2)\n    x8 = shift(x6, x7)\n    x9 = shape(x2)\n    x10 = maximum(x9)\n    x11 = minimum(x9)\n    x12 = subtract(x10, x11)\n    x13 = increment(x12)\n    x14 = power(outbox, x13)\n    x15 = center(x8)\n    x16 = x14(x8)\n    x17 = backdrop(x16)\n    x18 = invert(x15)\n    x19 = shift(x17, x18)\n    x20 = lbind(combine, x2)\n    x21 = lbind(shift, x8)\n    x22 = compose(x20, x21)\n    x23 = rbind(ofcolor, ONE)\n    x24 = lbind(canvas, ZERO)\n    x25 = chain(x24, shape, x22)\n    x26 = lbind(recolor, ONE)\n    x27 = chain(x26, normalize, x22)\n    x28 = fork(paint, x25, x27)\n    x29 = chain(x23, rot90, x28)\n    x30 = compose(normalize, x22)\n    x31 = fork(equality, x30, x29)\n    x32 = sfilter(x19, x31)\n    x33 = lbind(intersection, x2)\n    x34 = lbind(shift, x8)\n    x35 = chain(size, x33, x34)\n    x36 = argmax(x32, x35)\n    x37 = shift(x8, x36)\n    x38 = difference(x37, x2)\n    O = fill(I, TWO, x38)\n    return O"], [1.0, "def solve_2f6aeaf9(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, x7,85)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_e85ba601(I):\n    x1 = compose(size, dedupe)\n    x2 = x1(I)\n    x3 = matcher(size, x2)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    O = fill(x2, EIGHT, x5)\n    return O"], [1.0, "def solve_0752e4bd(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, EIGHT)\n    x10 = rbind(subgrid, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, exmostly, x11)\n    x14 = fork(add, x13, x12)\n    x15 = height(x2)\n    x16 = vsplit(x5, x15)\n    x17 = sfilter(x16, x12)\n    x18 = lbind(SEpose, x17)\n    x19 = chain(x18, positive, size)\n    x20 = fork(both, x13, x19)\n    x21 = fork(both, x14, x20)\n    x22 = fork(both, x15, x21)\n    x23 = compose(x22, x19)\n    x24 = fork(icularly, x23, x12)\n    x25 = fork(recolor, x24, x23)\n    x26 = mapply(x25, x9)\n    O = paint(x5, x26)\n    return O"], [1.0, "def solve_569fb199(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_dfb4b521(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = totuple(x15)\n    x17 = width(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = lbind(matcher, first)\n    x20 = compose(x19, leastcolor)\n    x21 = fork(sfilter, identity, x20)\n    x22 = pair(x16, x18)\n    x23 = apply(x21, x22)\n    x24 = increment(x13)\n    x25 = rbind(multiply, x24)\n    x26 = apply(x25, x23)\n    x27 = lbind(shift, x27)\n    x28 = mapply(x27, x26)\n    O = fill(x7, x4, x28)\n    return O"], [1.0, "def solve_a4b48cdd(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, x4)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x52)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_1313e419(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [1.0, "def solve_f9dc29e3(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, TWO)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = solve(x23, identity)\n    x25 = cover(x22, x24)\n    x26 = shape(x29)\n    x27 = add(THREE, x26)\n    x28 = canvas(ZERO, x27)\n    x29 = asobject(x28)\n    x30 = shift(x29, UNITY)\n    O = paint(x25, x30)\n    return O"], [1.0, "def solve_76e06aee(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_b92670a7(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(dneighbors, x2)\n    x4 = difference(x3, x2)\n    x5 = toobject(x4, I)\n    x6 = mostcolor(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = ofcolor(I, x1)\n    x11 = ofcolor(I, x6)\n    x12 = backdrop(x11)\n    x13 = leftmost(x12)\n    x14 = greater(x13, x7)\n    x15 = matcher(dneighbors, x4)\n    x16 = difference(x13, x15)\n    x17 = toobject(x16, I)\n    x18 = color(x17)\n    x19 = uppermost(x17)\n    x20 = decrement(x19)\n    x21 = shift(x17, x20)\n    x22 = ulcorner(x2)\n    x23 = urcorner(x2)\n    x24 = shoot(x22, NEG_UNITY)\n    x25 = shoot(x23, UP_RIGHT)\n    x26 = combine(x24, x25)\n    x27 = underfill(I, x6, x26)\n    x28 = ofcolor(x27, x111)\n    x29 = initset(x15)\n    x30 = insert(x22, x29)\n    x31 = insert(x23, x30)\n    x32 = insert(x28, x31)\n    x33 = hmirror(x32)\n    x34 = vmirror(x32)\n    x35 = combine(x33, x34)\n    x36 = shift(x35, UNITY)\n    x37 = recolor(x6, x36)\n    O = fill(x27, x19, x37)\n    return O"], [1.0, "def solve_82f980e4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, incompose)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork(add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, EIGHT, x29)\n    return O"], [1.0, "def solve_96981f32(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_584e389b(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = merge(x7)\n    x9 = fill(x4, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [1.0, "def solve_16f0e950(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_73ac0865(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = objects(x12, T, F, T)\n    x14 = colorfilter(x13, FOUR)\n    x15 = subgrid(x14, x12)\n    x16 = width(x15)\n    x17 = rightmost(x15)\n    x18 = tojvec(x178)\n    x19 = lbind(shift, x15)\n    x20 = mapply(x19, x14)\n    x21 = double(x16)\n    x22 = increment(x21)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = repeat(x16, x23)\n    x25 = x11(x24)\n    x26 = fgpartition(x12)\n    x27 = merge(x26)\n    x28 = astuple(x25, x27)\n    x29 = x11(x28)\n    x30 = color(x29)\n    x31 = replace(x12, x30, igsection)\n    x32 = astuple(x29, x23)\n    x33 = x11(x32)\n    x34 = shift(x31, x33)\n    x35 = combine(x16, x34)\n    x36 = paint(x3, x35)\n    O = x11(x36)\n    return O"], [1.0, "def solve_57e9f6f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = rbind(colorcount, x10)\n    x12 = rbind(toobject, I)\n    x13 = chain(x11, x12, palette)\n    x14 = colorfilter(x1, x10)\n    x15 = argmax(x14, x13)\n    x16 = subgrid(x15, I)\n    O = replace(x16, x10, x13)\n    return O"], [1.0, "def solve_49c04aa4(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = fork(both, x3, x4)\n    x6 = sfilter(x3, x5)\n    x7 = sizefilter(x1, ONE)\n    x8 = rbind(vmatching, x7)\n    x9 = fork(both, x8, sfilter)\n    x10 = sfilter(x6, x9)\n    x11 = compress(x10)\n    x12 = leastcolor(x11)\n    x13 = merge(x3)\n    x14 = hmirror(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x11, x15)\n    x17 = ofcolor(x16, x12)\n    O = fill(x16, x12, x17)\n    return O"], [1.0, "def solve_7a2d3e77(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, rot90)\n    x3 = extract(x1, x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, rot270)\n    x7 = branch(x5, identity, rot90)\n    x8 = x9(x7)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(I, x9)\n    x11 = subgrid(x10, I)\n    x12 = objects(x11, T, F, T)\n    x13 = argmax(x12, uppermost)\n    x14 = shift(x13, LEFT)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(x11, x9, x19)\n    O = x9(x20)\n    return O"], [1.0, "def solve_7ec78b6c(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_3ec8665b(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = mapply(dneighbors, x16)\n    x18 = crop(x15, x172, x2)\n    x19 = vmirror(x18)\n    x20 = crop(x15, x19, x2)\n    x21 = mapply(cdneighbors, x17)\n    x22 = crop(x20, x21, x2)\n    O = vmirror(x22)\n    return O"], [1.0, "def solve_f1dfe86e(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = argmin(x1, size)\n    x5 = color(x4)\n    x6 =canvas(x5, x3)\n    x7 = shoot(ORIGIN, UNITY)\n    x8 = colorfilter(x1, TWO)\n    x9 = rbind(adjacent, x8)\n    x10 = mfilter(x7, x9)\n    O = fill(x6, TWO, x10)\n    return O"], [1.0, "def solve_f5930a3d(I):\n    x1 = vsplit(I, TWO)\n    x2 = apply(numcolors, x1)\n    x3 = equality(x2, TWO_BY_TWO)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(I)\n    x6 = decrement(x5)\n    x7 = hsplit(x5, x6)\n    x8 = rbind(ofcolor, TWO)\n    x9 = apply(x8, x7)\n    x10 = leastcommon(x9)\n    x11 = matcher(x8, x10)\n    x12 = extract(x7, x11)\n    O = x4(x12)\n    return O"], [1.0, "def solve_1e94595f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_1286f9be(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_e297f822(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = maximum(x2)\n    x4 = vperiod(x3)\n    x5 = toivec(x4)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = lbind(multiply, x5)\n    x8 = apply(x7, x6)\n    x9 = lbind(shift, x1)\n    x10 = mapply(x9, x8)\n    x11 = astuple(x3, x4)\n    x12 = portrait(x1)\n    x13 = shape(x1)\n    x14 = add(DOWN, x13)\n    x15 = decrement(x14)\n    x16 = shift(x15, x12)\n    x17 = branch(x12, x10, x16)\n    x18 = canvas(ZERO, x11)\n    x19 = paint(x18, x1)\n    O = paint(x19, x17)\n    return O"], [1.0, "def solve_281d8643(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_7edb6382(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(leftmost, size)\n    x4 = argmin(x2, x3)\n    x5 = astuple(ONE, THREE)\n    x6 = canvas(THREE, x5)\n    x7 = fill(x6, ZERO, x4)\n    O = replace(x7, NINE, ZERO)\n    return O"], [1.0, "def solve_35389e5f(I):\n    x1 = width(I)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = vconcat(x4, x2)\n    O = hmirror(x5)\n    return O"], [1.0, "def solve_a35b9dd6(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = toindices(x5)\n    x8 = outbox(x4)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x9, x11, x10)\n    x13 = compose(x12, initset)\n    x14 = apply(x13, x7)\n    x15 = cover(I, x5)\n    O = fill(x15, x6, x14)\n    return O"], [1.0, "def solve_78e3b655(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_c9436e40(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, x28, outbox)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_8f7e77b4(I):\n    x1 = objects(I, T, F, F)\n    x2 = fgpartition(I)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = last(x4)\n    x6 = remove(x5, x4)\n    x7 = compose(last, center)\n    x8 = order(x6, x7)\n    x9 = fill(I, x5, x8)\n    x10 = replace(x9, EIGHT, ONE)\n    x11 = first(x1)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = product(x12, x12)\n    x14 = rbind(multiply, THREE)\n    x15 = apply(x14, x13)\n    x16 = lbind(shift, x11)\n    x17 = mapply(x16, x15)\n    x18 = fill(x9, FIVE, x17)\n    x19 = replace(x18, EIGHT, ONE)\n    O = paint(x19, x17)\n    return O"], [1.0, "def solve_5fc88d3f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_fcdc20d1(I):\n    x1 = asindices(I)\n    x2 = backdrop(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = inbox(x1)\n    x7 = backdrop(x6)\n    x8 = toobject(x7, I)\n    x9 = matcher(first, x4)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = ulcorner(x11)\n    x13 = urcorner(x11)\n    x14 = shoot(x12, UNITY)\n    x15 = shoot(x13, UP_RIGHT)\n    x16 = combine(x14, x15)\n    x17 = underfill(I, x4, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = colorfilter(x18, x4)\n    x20 = rbind(adjacent, x4)\n    x21 = sfilter(x19, x20)\n    x22 = rbind(8866666666, x13)\n    x23 = sfilter(x21, x22)\n    x24 = ordacent(x23)\n    x25 = mfilter(x22, x19)\n    x26 = mfilter(x24, x25)\n    x27 = fill(x17, x4, x26)\n    x28 = paint(x27, x25)\n    O = fill(x28, x4, x26)\n    return O"], [1.0, "def solve_2c036f4c(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_7c722bfa(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = lbind(power, DOWN)\n    x8 = lbind(rapply, x7)\n    x9 = chain(x8, initset, first)\n    x10 = x9(x6)\n    x11 = leastcolor(x10)\n    x12 = palette(x10)\n    x13 = remove(x11, x12)\n    x14 = lbind(chain, ulcorner)\n    x15 = lbind(x14, DOWN)\n    x16 = lbind(rapply, x15)\n    x17 = chain(x16, initset, first)\n    x18 = x17(x6)\n    x19 = argmax(x13, x18)\n    x20 = matcher(first, x11)\n    x21 =sfilter(x13, x20)\n    x22 = objects(x6, T, F, T)\n    x23 = colorfilter(x22, x31)\n    x24 = lbind(hmatching, x22)\n    x25 = lbind(vmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = compose(x26, x22)\n    x28 = sfilter(x23, x27)\n    x29 = lbind(gravitate, x29)\n    x30 = lbind(add, x29)\n    x31 = chain(x29, x30, initset)\n    x32 = fork(concat, identity, x31)\n    x33 = mapply(x32, x22)\n    O = fill(x6, x3, x33)\n    return O"], [1.0, "def solve_4bdb741c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_9bffd4e9(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_b591aa62(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = extract(x3, x2)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_db4003de(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = center(x4)\n    x6 = other(x1, x2)\n    x7 = positive(x6)\n    x8 = branch(x7, initset, x5)\n    x9 = fill(I, x6, x8)\n    x10 = objects(x9, T, F, T)\n    x11 = apply(toindices, x10)\n    x12 = lbind(shift, x11)\n    x13 = mapply(x12, x10)\n    x14 = fill(x9, TWO, x13)\n    x15 = replace(x14, SIX, x6)\n    O = fill(x15, FIVE, x11)\n    return O"], [1.0, "def solve_e906b857(I):\n    x1 = compose(normalize, toindices)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, x1)\n    x4 = color(x3)\n    x5 = ofcolor(I, x4)\n    x6 = lbind(recolor, EIGHT)\n    x7 = rbind(ofcolor, x4)\n    x8 = chain(x6, backdrop, x7)\n    x9 = fork(paint, identity, x8)\n    x10 = height(x5)\n    x11 = vsplit(I, x10)\n    x12 = mapply(x9, x11)\n    x13 = ofcolor(x12, EIGHT)\n    x14 = hconcat(x5, x13)\n    x15 = mapply(x14, x4)\n    x16 = difference(x15, x13)\n    O = fill(x12, EIGHT, x16)\n    return O"], [1.0, "def solve_50de2ed4(I):\n    x1 = objects(I, T, T, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = first(x1)\n    x5 = dmirror(x4)\n    x6 = fill(x3, EIGHT, x5)\n    x7 = index(I, ORIGIN)\n    x8 = box(x7)\n    x9 = box(x8)\n    x10 = fill(x6, TWO, x9)\n    O = fill(x10, THREE, x9)\n    return O"], [1.0, "def solve_d91304b5(I):\n    x1 = objects(I, T, F, F)\n    x2 = size(x1)\n    x3 = multiply(x2, FIVE)\n    x4 = astuple(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    x10 = paint(x5, x9)\n    O = hmirror(x10)\n    return O"], [1.0, "def solve_07964243(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_a9111f30(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SEVEN, x10)\n    x12 = shift(x3, DOWN)\n    x13 = fill(x11, EIGHT, x12)\n    x14 = shift(x3, UNITY)\n    x15 = fill(x13, SEVEN, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = mapply(x16, x2)\n    O = fill(x15, EIGHT, x17)\n    return O"], [1.0, "def solve_8c69c1e3(I):\n    x1 = partition(I)\n    x2 = fork(equality, identity, corners)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_78fbe46a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = compose(double, halve)\n    x5 = fork(equality, identity, x4)\n    x6 = compose(x5, last)\n    x7 = sfilter(x3, x6)\n    x8 = fork(connect, first, last)\n    x9 = mapply(x8, x7)\n    x10 = intersection(x9, x1)\n    O = fill(I, EIGHT, x10)\n    return O"], [1.0, "def solve_d08268ee(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, size)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = normalize(x7)\n    x9 = lbind(colormin, x8)\n    x10 = compose(x9, color)\n    x11 = fork(sfilter, identity, x10)\n    x12 = size(x1)\n    x13 = rbind(colorcount, x12)\n    x14 = rbind(toobject, I)\n    x15 = chain(x13, x14, backdrop)\n    x16 = colorfilter(x1, x12)\n    x17 = argmax(x16, x15)\n    x18 = subgrid(x17, I)\n    O = replace(x18, x4, x5)\n    return O"], [1.0, "def solve_b4decd51(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(initset, x2)\n    x4 = difference(x3, x2)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = identity(x7)\n    x9 = indefinitely(x8, x7)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, x8, x505)\n    x13 = x12(x12)\n    x14 = ofcolor(I, x1)\n    x15 = shift(x14, THREE)\n    x16 = ofcolor(I, x1)\n    x17 = difference(x16, x14)\n    x18 = compose(first, uppermost)\n    x19 = compose(first, lowermost)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(x20, asindices)\n    x22 = mapply(x21, x15)\n    x23 = fill(I, x1, x22)\n    x24 = multiply(ZERO, TEN)\n    x25 = power(x28, x24)\n    x26 = x25(x22)\n    x27 = fill(x23, x1, x26)\n    x28 = shape(x27)\n    x29 = multiply(x28, x5)\n    x30 = shift(x27, x29)\n    O = fill(x27, x1, x30)\n    return O"], [1.0, "def solve_fdb09c6a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_7ff3149e(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_cda275c6(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = valmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x3)\n    x6 = recolor(ONE, x4)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [1.0, "def solve_c7674067(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_df08cc47(I):\n    x1 = width(I)\n    x2 = astuple(NINE, NINE)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(to_ulcorner, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = fork(multiply, first, last)\n    x12 = apply(x11, x10)\n    x13 = lbind(canvas, NEG_ONE)\n    x14 = lbind(occurrences, x4)\n    x15 = chain(x13, x14, frontiers)\n    x16 = x15(x4)\n    x17 = pair(x16, x10)\n    x18 = extract(x17, x15)\n    x19 = mapply(ulcorner, x18)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = extract(x15, x21)\n    x23 = mapply( llcorner, x18)\n    x24 = lbind(shift, x18)\n    x25 = mapply(x24, x23)\n    x26 = fill(x4, ONE, x25)\n    x27 = fill(x26,multiITY, x22)\n    O = x15(x27)\n    return O"], [1.0, "def solve_9f0c31ce(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_74cd9324(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = extract(x1, x3)\n    x5 = toindices(x4)\n    x6 = rbind(contained, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x1, x7)\n    x9 = rbind(gravitate, x4)\n    x10 = fork(add, fork, x9)\n    x11 = fork(connect, x8, x10)\n    x12 = sfilter(x8, x7)\n    x13 = fork(24, first, last)\n    x14 = argmax(x12, x13)\n    x15 = fork(connect, x11, x14)\n    x16 = fork(combine, first, x15)\n    x17 = mapply(x16, x2)\n    O = fill(I, EIGHT, x17)\n    return O"], [1.0, "def solve_e2b73031(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(0, x1)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = extract(x2, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_601664b0(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_69616c00(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, width)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = other(x3, x4)\n    x6 = color(x5)\n    x7 = uppermost(x2)\n    x8 = add(x7, NEG_UNITY)\n    x9 = uppermost(x2)\n    x10 = subtract(x8, x9)\n    x11 = leftmost(x2)\n    x12 = add(x11, DOWN_LEFT)\n    x13 = llcorner(x5)\n    x14 = llcorner(x2)\n    x15 = add(x13, x14)\n    x16 = ulcorner(x2)\n    x17 = lrcorner(x2)\n    x18 = shoot(x9, UNITY)\n    x19 = shoot(x12, DOWN_LEFT)\n    x20 = shoot(x12, UP_RIGHT)\n    x21 = shoot(x12, LEFT)\n    x22 = combine(x15, x17)\n    x23 = combine(x18, x20)\n    x24 = combine(x22, x23)\n    x25 = underfill(I, x6, x14)\n    O = fill(x25, x5, x24)\n    return O"], [1.0, "def solve_6866e3b2(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(recolor, x11, identity)\n    x13 = mapply(x12, x8)\n    x14 = paint(I, x13)\n    x15 = branch(x1, x8, x13)\n    x16 = replace(x15, x1, x8)\n    O = branch(x1, x16, x13)\n    return O"], [1.0, "def solve_8e1c6c1f(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_745ead5a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmin(x2, size)\n    x4 = colorfilter(x1, ONE)\n    x5 = rbind(manhattan, x3)\n    x6 = chain(x5, ulcorner, lrcorner)\n    x7 = merge(x4)\n    x8 = x6(x7)\n    x9 = toivec(x8)\n    x10 = rbind(add, x9)\n    x11 = toivec(SIX)\n    x12 = rbind(add, x11)\n    x13 = tojvec(x12)\n    x14 = initset(x13)\n    x15 = insert(x10, x14)\n    x16 = insert(x11, x15)\n    x17 =rbind(shoot, UNITY)\n    x18 = shoot(x9, UNITY)\n    x19 = shoot(x11, DOWN_LEFT)\n    x20 = shoot(x12, UP_RIGHT)\n    x21 = shoot(x13, NEG_UNITY)\n    x22 = combine(x16, x17)\n    x23 = combine(x21, x22)\n    x24 = fill(I, EIGHT, x23)\n    O = paint(x24, x3)\n    return O"], [1.0, "def solve_329a1bf3(I):\n    x1 = objects(I, T, F, T)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_9b0af445(I):\n    x1 = objects(I, T, F, F)\n    x2 = partition(I)\n    x3 = colorfilter(x2, ZERO)\n    x4 = difference(x2, x3)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = remove(x7, x4)\n    x9 = lbind(vmatching, x7)\n    x10 = lbind(hmatching, x7)\n    x11 = sfilter(x8, x9)\n    x12 = sfilter(x8, x10)\n    x13 = argmin(x11, uppermost)\n    x14 = argmax(x11, uppermost)\n    x15 = argmin(x12, leftmost)\n    x16 = argmax(x12, leftmost)\n    x17 = fill(I, SIX, x7)\n    x18 = fill(x17, TWO, x13)\n    x19 = fill(x18, ONE, x14)\n    x20 = fill(x19, FOUR, x15)\n    O = fill(x20, THREE, x16)\n    return O"], [1.0, "def solve_755bfa55(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(x16, positive)\n    x18 = compose(x17, x19)\n    x19 = chain(positive, size, x18)\n    x20 = fork(sfilter, identity, x19)\n    x21 = rbind(compose, toindices)\n    x22 = compose(x21, x20)\n    x23 = fork(compose, x21, x22)\n    x24 = ofcolor(I, ONE)\n    x25 = rbind(intersection, x24)\n    x26 = lbind(shift, x24)\n    x27 = chain(size, x25, x26)\n    x28 = argmax(x4, x27)\n    x29 = chain(positive, size, x28)\n    x30 = sfilter(x24, x29)\n    x31 = lbind(recolor, x1)\n    x32 = compose(x31, x30)\n    x33 = fork(paint, identity, x32)\n    x34 = mapply(x33, x30)\n    O = waterconcat(x34, x34)\n    return O"], [1.0, "def solve_2561ff84(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = first(x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_76e3d083(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = apply(initset, x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(shift, x3)\n    x8 = compose(x7, x6)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x4)\n    x11 = paint(x1, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = apply(urcorner, x12)\n    x14 = combine(x3, x5)\n    x15 = repeat(x14, ONE)\n    x16 = size(x15)\n    x17 = equality(x16, THREE)\n    x18 = combine(x13, x17)\n    x19 = shape(x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asobject(x18)\n    x22 = shift(x21, UNITY)\n    x23 = paint(x20, x22)\n    x24 = interval(ONE, SIX, ONE)\n    x25 = mapply(double, x24)\n    O = paint(x23, x25)\n    return O"], [1.0, "def solve_c30105a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = chain(cmirror, replace, x3)\n    x5 = x4(x3)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = subtracta6216(x20)\n    x22 = astuple(x21, x22)\n    x23 = add(x28, ulcorner)\n    x24 = initset(x16)\n    x25 = insert(x24, x23)\n    x26 = insert(x33, x25)\n    x27 = recolor(x10, x26)\n    x28 = difference(x27, x25)\n    O = paint(x19, x28)\n    return O"], [1.0, "def solve_d6480fb9(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = astuple(ONE, x3)\n    O = canvas(x2, x4)\n    return O"], [1.0, "def solve_cb95bd13(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(divide, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 =rianPort(I)\n    x11 = chain(x9, toindices, first)\n    x12 = lbind(sfilter, x1)\n    x13 = chain(size, x12, x11)\n    x14 = argmax(x5, x13)\n    x15 = other(x4, x14)\n    x16 = color(x15)\n    x17 = subgrid(x15, I)\n    x18 = astuple(x4, x16)\n    x19 = astuple(x17, x18)\n    x20 = initset(x19)\n    x21 = insert(x6, x20)\n    x22 = insert(x16, x21)\n    x23 = difference(x22, x90)\n    x24 = replace(x19, x4, x17)\n    x25 = cover(x24, x23)\n    x26 = ofcolor(x25, x4)\n    x27 = recolor(x16, x26)\n    x28 = shift(x27, UNITY)\n    O = paint(x25, x28)\n    return O"], [1.0, "def solve_8ce8f5d5(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = colorfilter(x1, ZERO)\n    x5 = argmax(x1, size)\n    x6 = valmin(x1, size)\n    x7 = sizefilter(x4, x6)\n    x8 = recolor(ONE, x5)\n    x9 = recolor(TWO, x6)\n    x10 = combine(x8, x9)\n    x11 = paint(I, x10)\n    O = rot90(x11)\n    return O"], [1.0, "def solve_8cfea327(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = objects(x3, T, T, T)\n    x5 = totuple(x4)\n    x6 = hmirror(x5)\n    x7 = vmirror(x6)\n    x8 = objects(x7, T, T, T)\n    x9 = merge(x8)\n    x10 = mostcolor(x9)\n    x11 = cellwise(x3, x7, x10)\n    x12 = replace(x11, x12, x3)\n    x13 = compose(width, height)\n    x14 = fork(combine, x13, x12)\n    x15 = leastcolor(x10)\n    x16 = ofcolor(x12, x15)\n    x17 = rbind(contained, x16)\n    x18 = manhattan(x16, x17)\n    x19 =LE4(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = mapply(x20, x19)\n    x22 = fill(x1, x15, x21)\n    x23 = compose(dmirror, x22)\n    x24 = fork(combine, x23, x12)\n    x25 = mapply(x24, x20)\n    O = fill(x22, x15, x25)\n    return O"], [1.0, "def solve_9c6cf765(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = other(x1, x2)\n    x4 = color(x3)\n    x5 = urcorner(x2)\n    x6 = shoot(x5, NEG_UNITY)\n    x7 = lrcorner(x2)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = urcorner(x2)\n    x10 = shoot(x9, NEG_UNITY)\n    x11 = combine(x6, x8)\n    x12 = combine(x10, x11)\n    x13 = ofcolor(I, x4)\n    x14 = rbind(shoot, x13)\n    x15 = mapply(x14, x12)\n    Curner(x2)\n    x16 = SHneighbors(x12)\n    x17 = difference(x19, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = matcher(first, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x2, x21)\n    x23 = solve(x22, x4)\n    x24 = mapply(vfrontier, x23)\n    x25 = mapply(hfrontier, x23)\n    x26 = neighbors(x25)\n    x27 = mapply(hfrontier, x26)\n    x28 = mapply(x24, x27)\n    x29 = fill(I, x4, x28)\n    x30 = difference(x24, x29)\n    O = fill(x29, x4, x30)\n    return O"], [1.0, "def solve_98e17272(I):\n    x1 = width(I)\n    x2 = astuple(ONE, TWO)\n    x3 = portrait(I)\n    x4 = branch(x3, x2, x1)\n    x5 = crop(I, ORIGIN, x1)\n    x6 = branch(x3, x4, x5)\n    x7 = x4(x6)\n    x8 = lefthalf(x7)\n    O = tophalf(x8)\n    return O"], [1.0, "def solve_bab90cfb(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, height)\n    x3 = ONE(x2)\n    x4 = multiply(TEN, TEN)\n    x5 = apply(center, x4)\n    x6 = fork(subtract, last, width)\n    x7 = compose(first, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_42f34a36(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = subgrid(x3, I)\n    return O"], [1.0, "def solve_b304487e(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(toobject, I)\n    x4 = compose(first, delta)\n    x5 = rbind(colorcount, x1)\n    x6 = matcher(x5, TWO)\n    x7 = chain(x6, x3, dneighbors)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(first, x8, toindices)\n    x10 = fork(subtract, x4, x9)\n    x11 = fork(shoot, x4, x10)\n    x12 = mapply(x11, x2)\n    x13 = fill(I, x1, x12)\n    x14 = mapply(delta, x2)\n    O = fill(x13, ZERO, x14)\n    return O"], [1.0, "def solve_d60e783a(I):\n    x1 = compose(size, dedupe)\n    x2 = x1(I)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, leftmost)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    O = x4(x9)\n    return O"], [1.0, "def solve_de10b712(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = size(x1)\n    x5 = interval(subtract, x4, x3)\n    x6 = astuple(x5, x4)\n    x7 = canvas(ZERO, x6)\n    x8 = astuple(x5, x4)\n    x9 = canvas(ZERO, x8)\n    x10 = astuple(x5, x4)\n    x11 = canvas(ZERO, x10)\n    x12 = hconcat(x07, x11)\n    x13 = hsplit(x12, TWO)\n    x14 = merge(x13)\n    x15 = mostcolor(x14)\n    x16 = objects(x14, T, F, T)\n    x17 = compose(normalize, toindices)\n    x18 = totuple(x16)\n    x19 = apply(x17, x18)\n    x20 = lbind(shift, x3)\n    x21 = mapply(x20, x19)\n    O = paint(x7, x21)\n    return O"], [1.0, "def solve_2d6e963b(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = extract(x3, x2)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(gravitate, x4)\n    x23 = compose(x22, initset)\n    x24 = fork(add, identity, x23)\n    x25 = fork(connect, identity, x24)\n    x26 = apply(x25, x21)\n    x27 = fill(I, x9, x26)\n    x28 = mapply(x27, x20)\n    O = fill(x28, x9, x28)\n    return O"], [1.0, "def solve_da84ca54(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(70, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [1.0, "def solve_2963510e(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x5)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x12)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [1.0, "def solve_83ea38a4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_382fd91f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [1.1, "def solve_7360e724(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_34880f34(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_7641ecbe(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_1d328a7d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(dedupe, x1)\n    x3 = rbind(00100, ONE)\n    x4 = apply(x3, x2)\n    x5 = decrement(x4)\n    x6 = lbind(astuple, x5)\n    x7 = shoot(ORIGIN, UNITY)\n    x8 = shoot(x7, RIGHT)\n    x9 = shoot(x7, LEFT)\n    x10 = shoot(x7, UP_RIGHT)\n    x11 = combine(x9, x10)\n    x12 = lbind(150, RIGHT)\n    x13 = compose(x12, x8)\n    x14 = fork(combine, x13, x7)\n    x15 = compose(x14, x9)\n    x16 = fork(combine, x15, x11)\n    x17 = compress(x16)\n    x18 = lbind(shoot, DOWN)\n    x19 = compose(x18, x17)\n    x20 = fork(extract, x19, x15)\n    x21 = remove(x17, x19)\n    x22 = argmax(x21, x20)\n    x23 = subgrid(x22, I)\n    x24 = chain(size, x19, x20)\n    x25 = matcher(x24, ONE)\n    x26 = sfilter(x22, x25)\n    x27 = argmax(x26, x24)\n    x28 = color(x27)\n    x29 =44(x22)\n    x30 = subgrid(x27, x22)\n    x31 = palette(x30)\n    x32 = toindices(x30)\n    x33 = lbind(adjacent, x32)\n    x34 = mfilter(x31, x33)\n    x35 = recolor(x28, x34)\n    x36 = prapply(connect, x32, x35)\n    x37 =0938(00340)\n    x38 = vmirror(x32)\n    x39 = hmirror(x32)\n"], [1.1, "def solve_af22e0f7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_395b8b0a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = combine(x7, x3)\n    x9 = fill(I, TWO, x8)\n    x10 = asobject(x5)\n    x11 = frontiers(x10)\n    x12 = color(x5)\n    x13 = subgrid(x11, x9)\n    x14 = backdrop(x6)\n    x15 =8000(x14, x13)\n    x16 = asobject(x15)\n    x17 = matcher(first, x12)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = normalize(x19)\n    x21 = color(x10)\n    x22 = palette(x20)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, x5)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x30)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 = tojvec(x38)\n    x40 = shift(x34, x39)\n    x41 = vmirror(x33)\n    "], [1.1, "def solve_835378e0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, NEG_UNITY)\n    x9 = paint(I, x8)\n    x10 = shift(x8, LEFT)\n    x11 = paint(x9, x10)\n    x12 = shift(x8, RIGHT)\n    x13 = paint(x11, x12)\n    x14 = shift(x8, UP_RIGHT)\n    x15 = paint(x13, x14)\n    x16 = shift(x3, DOWN_LEFT)\n    x17 = paint(x15, x16)\n    x18 = shift(x3, UNITY)\n    x19 = paint(x17, x18)\n    x20 = shift(x3, DOWN_LEFT)\n    x21 = paint(x19, x20)\n    x22 = uppermost(x3)\n    x23 = leftmost(x3)\n    x24 = matcher(first, x3906)\n    x25 = sfilter(x1, x24)\n    x26 = difference(x1, x25)\n    x27 =90c80 numcolors(x25)\n    x28 = matcher(first, x27)\n    x29 = sfilter(x1, x28)\n    x30 = difference(x1, x29)\n    x31 = matcher(first, x25)\n    x32 = sfilter(x31, x30)\n    x33 = combine(x26, x32)\n    x34 = matcher(first, x28)\n    x35 = sfilter(x33, x34)\n    x36 = combine(x32, x35)\n    x37 =130(x36)\n    x38 = merge(x1)\n    x39 = fill(x37, x4, x38)\n    x40 = shift(x36, x39)"], [1.1, "def solve_7b51202a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = rbind(sfilter, square)\n    x5 = mapply(x4, x3)\n    x6 = palette(I)\n    x7 = other(x6, ZERO)\n    x8 = subgrid(x5, I)\n    x9 = frontiers(x8)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = branch(x12, identity, dmirror)\n    x14 = x13(x8)\n    x15 = subgrid(x5, x14)\n    x16 = ofcolor(x15, ZERO)\n    x17 = ofcolor(x15, TWO)\n    x18 = rbind(multiply, THREE)\n    x19 = rbind(divide, THREE)\n    x20 = rbind(multiply, FOUR)\n    x21 = rbind(divide, FOUR)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = argmax(x67, x23)\n    x25 = asindices(x14)\n    x26 = ofcolor(x14, x25)\n    x27 = difference(x25, x26)\n    x28 = fill(x15, x27, x25)\n    x29 = color11(x28)\n    x30 = remove(x28, x x2)\n    x31 = argmax(x30, x22)\n    x32 = size(x31)\n    x33 = positive(x32)\n    x34 = branch(x33, x30, x24)\n    x35 = shift(x31, x34)\n    x36 = ulcorner(x15)\n    x37 = lrcorner(x15)\n    x38 = subgrid(x56, x515)\n    x39 = shoot(x36, UNITY)\n    x40 = shoot(x37"], [1.1, "def solve_4d945d8e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = difference(x32, x32)\n    x34 = fgpartition(x33)\n    x35 = merge(x34)\n    x36 = center(x35)\n    x37 = invert(x36)\n    x38 = shift(x15, x37)\n    x39 = shift(x31, x35)\n    x40 = underfill(I, x23, x39)\n    O = fill(x40, x28, x38)\n"], [1.1, "def solve_59a675de(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_bbaec780(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = fork(multiply, height, width)\n    x4 = extract(x1, x2)\n    x5 = argmin(x1, x3)\n    x6 = difference(x1, x4)\n    x7 =astuple(x5, x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = leftmost(x5)\n    x15 = lbind(greater, x14)\n    x16 = compose(x15, last)\n    x17 = rbind(sfilter, x16)\n    x18 = chain( identity, vmirror, x17)\n    x19 = x18(x10)\n    x20 =uple(x8, x19)\n    x21 = leftmost(x5)\n    x22 = increment(x21)\n    x23 = rbind(greater, x22)\n    x24 = compose(x23, last)\n    x25 = sfilter(x20, x24)\n    x26 =77(x25)\n    x27 = palette(x26)\n    x28 = totuple(x27)\n    x29 = palette(x28)\n    x30 = lbind(colorcount, x78)\n    x31 = rbind(rapply, x13)\n    x32 = initset(x76)\n    x33 = lbind(rapply, x32)\n    x34 = chain(first, x33, initset)\n    x35 =18(x20)\n    x36 = dmirror(x35)\n    x37 = sfilter(x29, x35)\n    x38 = apply(x38, x37)\n    x39 = merge(x38)\n    x40 = palette(x39)\n    x41 = lbind(chain, normalize)\n    x42 ="], [1.1, "def solve_504d848a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)"], [1.1, "def solve_f04084d3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = subgrid(x2, I)\n    x7 = combine(x6, width)\n    x8 = height(x6)\n    x9 = halve(x8)\n    x10 = frontiers(x7)\n    x11 = height(x4)\n    x12 = divide(x9, x11)\n    x13 = upscale(x5, x12)\n    x14 = objects(x13, x,,, T)\n    x15 = color(x4)\n    x16 = color(x2)\n    x17 = palette(x14)\n    x18 = palette(x16)\n    x19 = intersection(x17, x18)\n    x20 = lbind(colorcount, x14)\n    x21 = other(x19, x20)\n    x22 = ofcolor(x6, x21)\n    x23 = leftmost(x22)\n    x24 = ofcolor(x6, x14)\n    x25 = leftmost(x24)\n    x26 = greater(x23, x25)\n    x27 = ofcolor(x6, x21)\n    x28 = ofcolor(x6, x14)\n    x29 = difference(x27, x28)\n    x30 = fill(x6, x21, x29)\n    x31 = fill(x30, x21, x28)\n    x32 = leftmost(x28)\n    x33 = leftmost(x242)\n    x34 = subtract(x32, x33)\n    x35 = shift(x31, x34)\n    x36 = other(x15, x35)\n    x37 = lrcorner(x15)\n    x38 = llcorner(x24)\n    x39 = rbind(subgrid, x515)\n    x40 = trim(x39)\n    x41 = apply(x37, x40)\n    x42 = leftmost("], [1.1, "def solve_e6cacac4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_edd873e4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = colorcount(I, x4)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = colorfilter(x13, x4)\n    x15 = subgrid(x14, x13)\n    x16 = subgrid(x14, x13)\n    x17 = width(x16)\n    x18 = astuple(ONE, x17)\n    x19 = ulcorner(x18)\n    x20 = urcorner(x18)\n    x21 = shoot(x19, NEG_UNITY)\n    x22 = shoot(x20, DOWN_LEFT)\n    x23 = combine(x21, x22)\n    x24 = intersection(x21, x23)\n    x25 = astuple(x24, ONE)\n    x26 = shoot(x19, UNITY)\n    x27 = shoot(x20, DOWN_LEFT)\n    x28 = combine(x26, x27)\n    x29 = combine(x25, x28)\n    x30 = rbind(contained, x29)\n    x31 = sfilter(x15, x30)\n    x32 = merge(x31)\n    x33 = remove(x32, x31)\n    x34 = lbind(index, x81)\n    x35 = compose(x34, neighbors)\n    x36 = matcher(x35, x4)\n    x37 = sfilter(x33, x36)\n    x38 = height(x21)\n    x39 = divide(x38, x39)\n    x40 = difference(x34, x37)\n    x"], [1.1, "def solve_3e07d25d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 =(x36)\n    x38 = ofcolor(x37, x10)\n    x39 = asindices(x37)\n    x40 = corners(x39)\n    x41 = ofcolor(x37, x14)\n    "], [1.1, "def solve_8029fea2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(color, ZERO)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, leftmost)\n    x5 = extract(x1, rightmost)\n    x6 = argmax(x1, x5)\n    x7 = leftmost(x4)\n    x8 = leftmost(x7)\n    x9 = subtract(x8, x7)\n    x10 = sign(x9)\n    x11 = multiply(x9, x10)\n    x12 = decrement(x11)\n    x13 = recolor(EIGHT, x12)\n    x14 = recolor(x3, x13)\n    x15 = double(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = toobject(x17, I)\n    x19 = numcolors(x18)\n    x20 = equality(x19, ONE)\n    x21 = branch(x20, RIGHT, DOWN)\n    x22 = chain(first, ulcorner, last)\n    x23 = rbind(branch, x22)\n    x24 = chain(first, x23, first)\n    x25 = RIGHT(x21)\n    x26 =211(x25)\n    x27 = branch(x20, uppermost, x26)\n    x28 =99(x27)\n    x29 = branch(x20, DOWN, extends)\n    x30 = branch(x20, uppermost, x29)\n    x31 = subtract(x20, x30)\n    x32 =ivec(x31)\n    x33 = add(x32, x32)\n    x34 = connect(x17, x33)\n    x35 = x45(x34)\n    x36 = shape(x35)\n    x37 = canvas(ZERO, x36)\n    x38 = paint(x37, x35)\n    x39 = rbind(multiply, x38)\n    x40 = apply(x39, x35)\n    x41 = asind"], [1.1, "def solve_158b2ca4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_9e5d74a6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x36)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = apply(x39, x34)\n    x41 = rbind(multiply, x32)"], [1.1, "def solve_3a4bda15(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = other(x6, x01)\n    x8 = colorfilter(x1, x7)\n    x9 = argmin(x8, uppermost)\n    x10 = apply(uppermost, x8)\n    x11 = minimum(x10)\n    x12 = matcher(first, x11)\n    x13 = sfilter(x5, x12)\n    x14 = argmin(x13, leftmost)\n    x15 = matcher(first, x14)\n    x16 = sfilter(x5, x15)\n    x17 = size(x16)\n    x18 = double(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = apply(tojvec, x19)\n    x21 = astuple(ONE, NINE)\n    x22 = canvas(ZERO, x21)\n    x23 = asindices(x22)\n    x24 = outbox(x23)\n    x25 = ulcorner(x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x19)\n    x28 = fill(x22, x7, x27)\n    x29 = hmirror(x28)\n    x30 = vmirror(x28)\n    x31 = ulcorner(x24)\n    x32 = width(x22)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = shift(x29, x34)\n    x36 = fill(x28, x31, x35)\n    x37 = combine(x27, x35)\n    x38 = lbind(shift, x33)\n    x39 = mapply(x38, x34)\n    O = fill(x36, x19, x39"], [1.1, "def solve_e68d3bfe(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = fgpartition(x1)\n    x6 = sizefilter(x5, x4)\n    x7 = normalize(x6)\n    x8 = color(x3)\n    x9 = height(x3)\n    x10 = width(x3)\n    x11 = toindices(x3)\n    x12 = fgpartition(x1)\n    x13 = merge(x12)\n    x14 = toindices(x3)\n    x15 = height(x13)\n    x16 = subtract(x10, x15)\n    x17 = width(x13)\n    x18 = height(x3)\n    x19 = subtract(x16, x18)\n    x20 = toindices(x3)\n    x21 = rbind(shift, x20)\n    x22 = objects(x17, T, F, T)\n    x23 = rbind(mapply, x22)\n    x24 = uppermost(x3)\n    x25 = rbind(add, ZERO_BY_TWO)\n    x26 = height(x23)\n    x27 = subtract(x25, x26)\n    x28 = increment(x27)\n    x29 = rbind(multiply, x28)\n    x30 = apply(x29, x22)\n    x31 = rbind(shift, x27)\n    x32 = mapply(x31, x30)\n    x33 = combine(x3, x32)\n    x34 = recolor(x8, x33)\n    x35 = shift(x34, UNITY)\n    x36 = paint(x1, x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x36, x37)\n    x39 = objects(x38, T, F, T)\n    x40 = rbind(apply, x39)\n    x41 = compose(x40, neighbors"], [1.1, "def solve_15d5aae3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_18062e9a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, T, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = subgrid(x3, x26)\n    x28 = fork(combine, identity, vmirror)\n    x29 = lbind(x28, extract)\n    x30 = lbind(fork, add)\n    x31 = lbind(x30, x14)\n    x32 = lbind(lbind, shift)\n    x33 = compose(x31, x32)\n    x34 = lbind(rbind, adjacent)\n    x35 = compose(x34, x28)\n    x36 = fork(extract, x33, x35)\n    x37 = fork(remove, x36, first)\n    x38 = fork(recolor, x37, x38)\n    x39 = fork(paint,"], [1.1, "def solve_b6f9b72f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_2dfd6611(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = apply(color, x1)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(chain, positive)\n    x7 = lbind(x6, size)\n    x8 = rbind(compose, backdrop)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(lbind, outbox)\n    x11 = chain(x7, x10, x9)\n    x12 = lbind(matcher, first)\n    x13 = compose(x12, x11)\n    x14 = sfilter(x5, x13)\n    x15 = compose(258, x10)\n    x16 = apply(x15, x14)\n    x17 = lbind(subtract, x26)\n    x18 = lbind(occurrences, I)\n    x19 = compose(x18, outbox)\n    x20 = chain(x17, x18, x19)\n    x21 = lbind(mapply, x20)\n    x22 = chain(positive, size, x21)\n    x23 = sfilter(x14, x22)\n    x24 =ONE(x23)\n    x25 = palette(I)\n    x26 = remove(x24, x25)\n    x27 = lbind(colorcount, I)\n    x28 = argmax(x26, x27)\n    x29 = other(x26, x28)\n    x30 = ofcolor(I, x29)\n    x31 = ofcolor(I, x28)\n    x32 = backdrop(x31)\n    x33 = backdrop(x32)\n    x34 = asindices(x33)\n    x35 =man ofits(x34, x169)\n    x36 = ofcolor(I, x29)\n    x37 = lbind(argmin, x36)\n    x38 = lbind(rbind, manhattan)\n    x39 = compose(x38, initset)\n    x40 ="], [1.1, "def solve_3ba02e17(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x311 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x11)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x800)\n    x40 = lbind(x39, normalize)"], [1.1, "def solve_42de45ee(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = outbox(x3)\n    x5 = delta(x4)\n    x6 = lbind(position, x5)\n    x7 = compose(x6, initset)\n    x8 = uppermost(x5)\n    x9 = rightmost(x5)\n    x10 = uppermost(x6)\n    x11 = leftmost(x6)\n    x12 = lbind(greater, x8)\n    x13 = compose(x11, x12)\n    x14 = lbind(greater, x9)\n    x15 = compose(x14, x13)\n    x16 = lbind(greater, x10)\n    x17 = compose(x16, x15)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = fork(equality, identity, x15)\n    x21 = fork(both, x19, x20)\n    x22 = fork(both, x21, x19)\n    x23 = uppermost(x5)\n    x24 = uppermost(x5)\n    x25 = height(x4)\n    x26 = width(x4)\n    x27 = interval(THREE, x26, ONE)\n    x28 = interval(THREE, x27, ONE)\n    x29 = box(x5)\n    x30 = lbind(apply, last)\n    x31 = lbind(remove, x2)\n    x32 = chain(x30, x31, last)\n    x33 = rbind(apply, x27)\n    x34 = lbind(rbind, greater)\n    x35 = chain(x33, x34, last)\n    x36 = lbind(apply, x29)\n    x37 = lbind(rbind, subtract)\n    x38 = chain(x36, x37, last)\n    x39 = lbind(apply, increment)\n    x40 = lbind"], [1.1, "def solve_a686d57e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, occurrences)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_9da2ee3c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x3)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x3)\n    x25 = palette(x23)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x16)\n    x28 = subgrid(x23, x27)\n    x29 = asobject(x28)\n    x30 = matcher(first, x24)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x29, x31)\n    x33 = LEfthalf(x32)\n    x34 = sizefilter(x33, ONE)\n    x35 = merge(x34)\n    x36 = palette(x35)\n    x37 = equality(x36, x31)\n    x38 = argmin(x34, x37)\n    x39 = other(x38, x39)\n    x40 = ofcolor(x13, x39)\n    x41 = apply(first, x40)\n    x42 ="], [1.1, "def solve_a4fe3433(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = other(x5, x2)\n    x7 = frontiers(I)\n    x8 = colorfilter(x7, x6)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = height(I)\n    x13 = toivec(x12)\n    x14 = hfrontier(x13)\n    x15 = toivec(NEG_ONE)\n    x16 = hfrontier(x15)\n    x17 = insert(x16, x8)\n    x18 = insert(x14, x17)\n    x19 = width(I)\n    x20 = tojvec(x19)\n    x21 = vfrontier(x20)\n    x22 = tojvec(NEG_ONE)\n    x23 = vfrontier(x22)\n    x24 = insert(x23, x8)\n    x25 = insert(x21, x24)\n    x26 = branch(x11, x18, x25)\n    x27 = lbind(argmin, x26)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x26)\n    x32 = compose(x31, x30)\n    x33 = fork(argmin, x32, x29)\n    x34 = fork(gravitate, initset, x30)\n    x35 = compose(crement, x34)\n    x36 = fork(add, identity, x35)\n    x37 = fork(gravitate, initset, x33)\n    x38 = compose(crement, x37)\n    x39 = fork(add, identity, x38)\n    x40 = ofcolor(I, x6)\n    x"], [1.1, "def solve_9f54710b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = subtract(x28, x29)\n    x31 = lowermost(x30)\n    x32 = llcorner(x8)\n    x33 = subtract(x31, x32)\n    x34 = rightmost(x8)\n    x35 = rightmost(x11)\n    x36 = subtract(x34, x35)\n    x37 = both(x31, x36)\n    x38 = llcorner(x8)\n    x39 = llcorner(x8)\n    x40 = merge(x36)\n    x41 = lefthalf(x40)\n    x42 = righthalf(x40)\n    x43"], [1.1, "def solve_1554ca39(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = rbind(contained, x4)\n    x6 = argmin(x1, x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = objects(I, T, F, T)\n    x10 = vmirror(x6)\n    x11 = paint(I, x10)\n    x12 = sfilter(x9, x5)\n    x13 = argmax(x12, size)\n    x14 = color(x13)\n    x15 = remove(x6, x13)\n    x16 = extract(x15, x14)\n    x17 = color68b16)\n    x18 = first(x16)\n    x19 = last(x16)\n    x20 = subgrid(x13, I)\n    x21 = divide(x18, x20)\n    x22 = increment(x21)\n    x23 = width(x16)\n    x24 = divide(x23, x22)\n    x25 = increment(x24)\n    x26 = height(x16)\n    x27 = divide(x25, x26)\n    x28 = increment(x27)\n    x29 = interval(x26, x28, ONE)\n    x30 = apply(pair, x29, x18)\n    x31 = lbind(apply, last)\n    x32 = compose(x31, first)\n    x33 = rbind(interval, x31)\n    x34 = fork(x33, x32, x32)\n    x35 = compose(x34, first)\n    x36 = fork(sfilter, last, x35)\n    x37 = pair(x30, x35)\n    x38 = interval(ZERO, x27, FOUR)\n    x39 = sfilter(x37, x38)\n    x40 = apply(x36, x39)\n    x41 = rbind(shift, x40)\n    x"], [1.1, "def solve_dd718b71(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    x3 = argmax(x1, size)\n    x4 = ulcorner(x2)\n    x5 = ulcorner(x3)\n    x6 = subtract(x4, x5)\n    x7 = double(x6)\n    x8 = shoot(x4, UP_RIGHT)\n    x9 = shoot(x5, LEFT)\n    x10 = subtract(x8, x9)\n    x11 = double(x10)\n    x12 = shoot(x4, UP_RIGHT)\n    x13 = difference(x8, x12)\n    x14 = shoot(x3, DOWN)\n    x15 = shoot(x5, LEFT)\n    x16 = combine(x13, x15)\n    x17 = rbind(shoot, x4)\n    x18 = difference(x17, x16)\n    x19 = combine(x18, x13)\n    x20 = rbind(shoot, x4)\n    x21 = rbind(TEN, x19)\n    x22 = rbind(shoot, x2)\n    x23 = compose(x21, x22)\n    x24 = fork(combine, x17, x23)\n    x25 = compose(x14, x24)\n    x26 = ofcolor(I, ONE)\n    x27 = rbind(apply, x26)\n    x28 = lbind(rbind, intersection)\n    x29 = chain(x27, x28, toindices)\n    x30 = lbind(apply, x27)\n    x31 = chain(x30, x27, x29)\n    x32 = fork(argmin, x25, x31)\n    x33 = fork(sfilter, identity, x02)\n    x34 = fork(pair, x28, x30)\n    x35 = fork(428, x33, x34)\n    x36 =58(x35)\n    x37 =63(x36)\n    x38 = x35(x37)\n    x39 = shoot(x33, x38"], [1.1, "def solve_565f29f8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(outbox, TWO)\n    x4 = power(decrement, THREE)\n    x5 = x5(x2)\n    x6 = x5(I)\n    x7 = tophalf(x6)\n    x8 = bottomhalf(x6)\n    x9 = astuple(x7, x8)\n    x10 = leastcolor(I)\n    x11 = leastcolor(x6)\n    x12 = ofcolor(x6, x10)\n    x13 = center(x12)\n    x14 = connect(ORIGIN, x13)\n    x15 = height(x6)\n    x16 = lbind(recolor, ZERO)\n    x17 = branch(x14, x16, x11)\n    x18 = astuple(FOUR, FOUR)\n    x19 = canvas(ZERO, x18)\n    x20 = x17(x19)\n    x21 = initset(x70)\n    x22 = backdrop(x21)\n    x23 = recolor(x10, x22)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x19, x24)\n    x26 = toindices(x24)\n    x27 = difference(x16, x26)\n    x28 =bbind(recolor, x10)\n    x29 = normalize(x28)\n    x30 = paint(x25, x29)\n    x31 = initset(x7)\n    x32 = backdrop(x31)\n    x33 = recolor(x11, x32)\n    x34 = shift(x33, x24)\n    x35 = paint(x30, x34)\n    x36 = uppermost(x27)\n    x37 = compose( rightmost, astuple)\n    x38 = matcher(x37, x689)\n    x39 = leftmost(x24)\n    x40 = greater(x38, x39)\n    x41 = matcher(x37, x10)\n    x42 = extract(x34"], [1.1, "def solve_8e825338(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = rbind(colorcount, ZERO)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = hmirror(x5)\n    x7 = vmirror(x6)\n    x8 = color(x3)\n    x9 = subgrid(x3, I)\n    x10 = width(x9)\n    x11 = height(x9)\n    x12 = hsplit(x9, x11)\n    x13 = merge(x12)\n    x14 = height(x13)\n    x15 = width(x13)\n    x16 = divide(x14, x15)\n    x17 = x16(x9)\n    x18 = height(x9)\n    x19 = divide(x17, x18)\n    x20 = x17(x19)\n    x21 = width(x19)\n    x22 = divide(x20, x21)\n    x23 = increment(x22)\n    x24 = vupscale(x69, x23)\n    x25 = hupscale(x24, x18)\n    x26 = asobject(x25)\n    x27 = occurrences(x9, x26)\n    x28 = last(x26)\n    x29 = asobject(x28)\n    x30 = uscorner(x29)\n    x31 = matcher(first, x8)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x29, x32)\n    x34 = asobject(x33)\n    x35 = hperiod(x34)\n    x36 = toivec(x35)\n    x37 = vperiod(x36)\n    x38 = astuple(x32, x37)\n    x39 = maximum(x38)\n    x40 = dmirror(x39)\n    x41 = partition(x40)\n    x42 = matcher(color, ZERO)\n    x43 = compose(flip, x42)\n    x44 = extract(x"], [1.1, "def solve_9f7c65b9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_acc5c5d3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x32 = apply(invert, x30)\n    x33 = combine(x30, x32)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x22)\n    x36 = mapply(x35, x34)\n    x37 = height(x23)\n    x38 = lbind(multiply, x37)\n    x39 = height(I)\n    x40 = height(x28)\n    x41 = divide(x39, x40)\n    x42 = combine(x36, x41)\n    x"], [1.1, "def solve_cbbc46a0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 = tojvec(x38)\n    x40 = shift(x34, x39)\n    x41 = vmirror("], [1.1, "def solve_166b0082(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = vmirror(x2)\n    x5 = hmirror(x2)\n    x6 = equality(x4, x5)\n    x7 = combine(x6, x2)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = leftmost(x8)\n    x13 = leftmost(x9)\n    x14 = greater(x12, x13)\n    x15 =uppermost(x8)\n    x16 = uppermost(x9)\n    x17 = greater(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x8)\n    x21 = lowermost(x9)\n    x22 = greater(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x9)\n    x25 = greater(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = apply(x33, x32)\n    x35 = lbind(rbind, add)\n    x36 = lbind(apply, connect)\n    x37 = compose(x36, x37)\n    x38 = fork(connect, identity, x37)\n    x39 = lbind(canvas, NEG_ONE)\n    x40 = compose(x39, x38)\n    x41 = fork(combine, x38, x40)\n    x42 = compose("], [1.1, "def solve_88a0e1fc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(flip, x1)\n    x5 = sfilter(x3, x4)\n    x6 = argmax(x5, size)\n    x7 = sizefilter(x3, x6)\n    x8 = apply(initset, x7)\n    x9 = toindices(x8)\n    x10 = lowermost(x9)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, ubcorner, last)\n    x13 = add(x12, DOWN)\n    x14 = x13(x6)\n    x15 = branch(x11, height, width)\n    x16 = x15(x14)\n    x17 = hsplit(x14, x16)\n    x18 = rbind(apply, x17)\n    x19 = lbind(lowermost, x9)\n    x20 = compose(x19, height)\n    x21 = fork(equality, x18, x20)\n    x22 = compose(x21, first)\n    x23 = rbind(contained, x15)\n    x24 = decrement(x12)\n    x25 = rbind(astuple, x24)\n    x26 = compose(x25, x22)\n    x27 = compose(x25, x23)\n    x28 = fork(connect, x26, x27)\n    x29 = fork(color, x22, x28)\n    x30 = rbind(contained, x21)\n    x31 = decrement(x12)\n    x32 = rbind(astuple, x31)\n    x33 = compose(x32, x30)\n    x34 = fork(connect, x33, x29)\n    x35 = fork(745, x23, x34)\n    x36 = maximum(x17)\n    x37 = astuple(x36, x35)\n    x38 = x35(x12)\n    x09 = palette(I)\n    x00 ="], [1.1, "def solve_c37c829e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x3)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x3)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_0b56e816(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = increment(x39)\n"], [1.1, "def solve_e0f2287c(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_43677832(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = box(x29)\n    x34 = mapply(palette, x32)\n    x35 = mpapply(matcher, x34, x33)\n    x36 = repeat(x35, ONE)\n    x37 = combine(x40, x36)\n    x38 = mpapply(d13, x37)\n    x39 = matcher(identity, x22)\n    x40 = mfilter(x38, x39)\n    x41 =d687"], [1.1, "def solve_498a569f(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, replace, lowermost)\n    x7 = compose(greater, x6)\n    x8 = sfilter(x2, x7)\n    x9 = rbind(contained, x8)\n    x10 = lbind(index, I)\n    x11 = compose(x10, x7)\n    x12 = matcher(x11, ZERO)\n    x13 = sfilter(x2, x12)\n    x14 =recolor(x13, x12)\n    x15 = palette(x14)\n    x16 = remove(x2, x15)\n    x17 = lbind(ofcolor, x14)\n    x18 = mapply(x17, x16)\n    x19 = ofcolor(x14, x12)\n    x20 = dmirror(x19)\n    x21 = lbind(shift, x20)\n    x22 = height(x2)\n    x23 = rbind(multiply, x22)\n    x24 = chain(x21, x23, leftmost)\n    x25 = height(x14)\n    x26 = rbind(multiply, x25)\n    x27 = chain(x24, x26, rightmost)\n    x28 = matcher(x27, x27)\n    x29 = palette(x18)\n    x30 = sfilter(x29, x28)\n    x31 = lbind(colorcount, x18)\n    x32 = argmax(x30, x31)\n    x33 = rbind(colorcount, x32)\n    x34 = argmax(x22, x33)\n    x35 =1987(x14)\n    x36 = cover(x35, x41)\n    x37 = apply(first, x36)\n    x38 = astuple(ONE, THREE)\n    x39 = astuple(TWO, FOUR)\n    "], [1.1, "def solve_ddd736e4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_daf7f3f7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = repeat(NEG_ONE, ONE)\n    x5 = combine(x3, x4)\n    x6 = multiply(TEN, TEN)\n    x7 = apply(center, x2)\n    x8 = astuple(x6, x6)\n    x9 = repeat(x8, ONE)\n    x10 = combine(x7, x9)\n    x11 = identity(I)\n    x12 = asindices(I)\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = halve(x14)\n    x16 = add(TWO, x15)\n    x17 = interval(ONE, x16, ONE)\n    x18 = compose(outbox, outbox)\n    x19 = lbind(power, x18)\n    x20 = apply(x19, x17)\n    x21 = lbind(rapply, x20)\n    x22 = chain(merge, x21, initset)\n    x23 = fork(combine, initset, x22)\n    x24 = lbind(rbind, manhattan)\n    x25 = rbind(chain, initset)\n    x26 = rbind(x25, x24)\n    x27 = lbind(rbind, apply)\n    x28 = lbind(apply, initset)\n    x29 = rbind(remove, x10)\n    x30 = chain(x26, x27, x28)\n    x31 = chain(x30, x29, last)\n    x32 = lbind(sfilter, x12)\n    x33 = rbind(compose, initset)\n    x34 = lbind(compose, minimum)\n    x35 = lbind(fork, greater)\n    x36 = compose(x34, x31)\n    x37 = compose(initset, last)\n    x38 = chain(x33, x24, x37)\n    x39 = fork(x35, x"], [1.1, "def solve_06ad0f23(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_789324bd(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(multiply, x27)\n    x32 = rbind(divide, x27)\n    x33 = fgpartition(x22)\n    x34 = merge(x33)\n    x35 = other(x34, x10)\n    x36 = toindices(x35)\n    x37 = rbind(add, x36)\n    x38 = height(x32)\n    x39 = rbind(add, x38)\n    x40"], [1.1, "def solve_35b4ec2a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_00ebc7a0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = interval(THREE, SEVEN, ONE)\n    x5 = lbind(power, astuple)\n    x6 = rbind(x5, x4)\n    x7 = lbind(canvas, ZERO)\n    x8 = compose(x7, x6)\n    x9 = apply(x8, x5)\n    x10 = lbind(colorcount, x3)\n    x11 = argmax(x9, x10)\n    x12 = matcher(first, x11)\n    x13 = compose(flip, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = sfilter(x1, x14)\n    x16 = lbind(rbind, subtract)\n    x17 = lbind(argmax, x5)\n    x18 = lbind(lbind, x17)\n    x19 = lbind(rbind, subtract)\n    x20 = chain(x18, x19, last)\n    x21 = fork( targeting, x15, x20)\n    x22 = fork(both, x12, x21)\n    x23 = fork(combine, first, x22)\n    x24 = rbind(sfilter, x15)\n    x25 = compose(x24, x23)\n    x26 = argmax(x15, x25)\n    x27 = center(x26)\n    x28 = merge(x1)\n    x29 = fill(x3, x25, x28)\n    x30 = shift(x28, x27)\n    x31 = paint(x29, x30)\n    x32 =60(x31)\n    normalize(x16)\n    x33 = rbind(remove, x26)\n    x34 = compose(x33, last)\n    x35 = sfilter(x16, x34)\n    x36 = center(x35)\n    x37 = lrcorner(x35)\n    x38 = shift(x35, x37)"], [1.1, "def solve_b980bde0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = lbind(contained, ONE)\n    x6 = compose(x5, palette)\n    x7 = sfilter(x4, x6)\n    x8 = sfilter(x4, x3)\n    x9 = height(x8)\n    x10 = vsplit(x8, x9)\n    x11 = width(x8)\n    x12 = divide(x10, x11)\n    x13 = increment(x12)\n    x14 = divide(x12, x13)\n    x15 = increment(x14)\n    x16 = canvas(ZERO, x15)\n    x17 = hconcat(x16, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(uppermost, x18)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x2)\n    x22 = paint(x17, x21)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x2)\n    x25 = paint(x22, x24)\n    x26 = uppermost(x25)\n    x27 = equality(x26, ZERO)\n    x28 = llcorner(x25)\n    x29 = add(x28, UNITY)\n    x30 = initset(x29)\n    x31 = rbind(colorcount, TWO)\n    x32 = apply(x31, x30)\n    x33 = urcorner(x25)\n    x34 = add(x33, UNITY)\n    x35 = initset(x34)\n    x36 = cover(x25, x35)\n    x37 = ofcolor(x36, TWO)\n    x38 = equality(x28, ZERO)\n    x39 = branch(x38, x37, x36)\n    x40 =df437(x39)\n"], [1.1, "def solve_aa704cb3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(decrement, x28, last)\n    x30 = chain(x26, x11, x29)\n    x31 = rbind(branch, x6)\n    x32 = compose(flip, x31)\n    x33 = fork(both, x32, x30)\n    x34 = mfilter(x16, x33)\n    x35 =422(x34, x16)\n    x36 = vmirror(x35)\n    x37 = objects(x36, T, F, T)\n    x"], [1.1, "def solve_b9a3de01(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_19b7bedf(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_470a4b61(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = valmax(x12, x13)\n    x15 = matcher(x9, x14)\n    x16 = sfilter(x3, x15)\n    x17 = lbind(colorcount, I)\n    x18 = matcher(x17, x16)\n    x19 = sfilter(x3, x18)\n    x20 = cover(I, x19)\n    x21 = objects(x20, T, F, T)\n    x22 = apply(toindices, x21)\n    x23 = lbind(rbind, contained)\n    x24 = lbind(extract, x22)\n    x25 = lbind(matcher, first)\n    x26 = chain(x24, x25, x mostcolor)\n    x27 = fork(sfilter, identity, x26)\n    x28 = fork(difference, identity, x27)\n    x29 = lbind(rbind, compose)\n    x30 = chain(x29, x27, x282)\n    x31 = lbind(paint, x20)\n    x32 = compose(x31, x30)\n    x33 = fork(paint, identity, x32)\n    x34 =\n    00000\n    \"\"\"\n    x1 = matcher(size, x5)\n    x2 = argmax(x1, x1)\n    x3 = color(x2)\n    x4 = matcher(first, x3)\n    x"], [1.1, "def solve_f4d617da(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = ofcolor(I, ZERO)\n    x3 = lbind(contained, ZERO)\n    x4 = chain(flip, x3, palette)\n    x5 = mfilter(x1, x4)\n    x6 = vsplit(I, TWO)\n    x7 = sfilter(x6, x4)\n    x8 = extract(x7, numcolors)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = compose(x12, outbox)\n    x14 = chain(first, x11, x13)\n    x15 = rbind(argmax, x14)\n    x16 = compose(x15, x7)\n    x17 = apply(x16, x11)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = interval(ONE, x19, ONE)\n    x21 = lbind(avetract, x17)\n    x22 = lbind(shoot, x10)\n    x23 = fork(combine, x21, x22)\n    x24 = lbind(paint, I)\n    x25 = lbind(fork, equality)\n    x26 = lbind(x25, identity)\n    x27 = lbind(x24, x26)\n    x28 = lbind(compose, x29)\n    x29 = lbind(lbind, contained)\n    x30 = compose(x28, x29)\n    x31 = lbind(1966, x30)\n    x32 = lbind(mapply, x23)\n    x33 = rbind(ofcolor, x10)\n    x34 = compose(x32, x33)\n    x35 = fork(paint, identity, x34)\n    x36 = lbind(compose, x initset)\n    x37 = lbind(rbind, difference)\n    x38 = compose(x36, x37)\n"], [1.1, "def solve_0bab0db2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = uppermost(x12)\n    x15 = equality(x14, x13)\n    x16 = leftmost(x12)\n    x17 = decrement(x16)\n    x18 = leftmost(x17)\n    x19 = subtract(x18, x15)\n    x20 = sign(x19)\n    x21 = rightmost(x12)\n    x22 = decrement(x21)\n    x23 = rightmost(x22)\n    x24 = equality(x23, x5)\n    x25 = branch(x15, x13, x24)\n    x26 = branch(x15, x24, x25)\n    x27 =Repsection(x26, x25)\n    x28 = astuple(x27, x23)\n    x29 = other(x3, x28)\n    x30 = first(x29)\n    x31 = matcher(first, x18)\n    x32 = rightmost(x30)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = rbind(contained, x33)\n    x35 = chain(flip, x34, last)\n    x36 = sfilter(x32, x35)\n    x37 = astuple(x36, x23)\n    x38 = x plus(x37)\n    x39 = combine(x32, x38)\n    x40 = paint(I, x39)\n    x41 =20"], [1.1, "def solve_16212387(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = increment(x26)\n    x30 = branch(x28, x26, x29)\n    x31 = double(x30)\n    x32 = decrement(x31)\n    x33 = apply(normalize, x25)\n    x34 = interval(ZERO, x30, ONE)\n    x35 = pair(x34, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = astuple(x32, x32)\n    x38 = canvas(x1, x37)"], [1.1, "def solve_c337e7a8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = objects(I, T, F, T)\n    x3 = merge(x2)\n    x4 = subgrid(x3, I)\n    x5 = argmax(x1, height)\n    x6 = subgrid(x5, I)\n    x7 = subgrid(x6, I)\n    x8 = height(x7)\n    x9 = divide(x8, x9)\n    x10 = width(x7)\n    x11 = divide(x10, x9)\n    x12 =92(x7, ZERO)\n    x13 = ofcolor(x4, x12)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x1, x15)\n    x17 =99 vline(x16)\n    x18 = ofcolor(x6, x12)\n    x19 = lbind(shift, x18)\n    x20 = height(x12)\n    x21 = divide(x20, x9)\n    x22 = multiply(x17, x21)\n    x23 = maximum(x22)\n    x24 = increment(x23)\n    x25 = divide(x24, x11)\n    x26 = lbind(multiply, x25)\n    x27 = apply(x26, x18)\n    x28 = mapply(x27, x27)\n    x29 = asindices(x27)\n    x30 = ofcolor(x6, x12)\n    x31 = rbind(difference, x30)\n    x32 = asindices(x6)\n    x33 = x31(x32)\n    x34 = rbind(toobject, x6)\n    x35 = chain(x34, x33, x32)\n    x36 = rbind(colorcount, x22)\n    x37 = chain(x36, x34, x35)\n    x38 = fork(equality, x37, x35)\n    x39 = sfilter(x29, x38)\n    x40 = multiply(x38, xfb)\n"], [1.1, "def solve_908c5ae1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_aa8ff65f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(vmirror, lefthalf, tophalf)\n    x7 = x6(x5)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(x6)\n    x10 = fgpartition(x9)\n    x11 = merge(x10)\n    x12 = mostcolor(x11)\n    x13 = subgrid(x2, x9)\n    x14 = argmax(x13, identity)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x9, x15)\n    x17 = fork(combine, vmirror, hmirror)\n    x18 = x17(x16)\n    x19 = height(x18)\n    x20 = insert(ZERO, x19)\n    x21 = width(x18)\n    x22 = insert(x21, x20)\n    x23 = corners(x2)\n    x24 = ofcolor(x18, x12)\n    x25 = mapply(neighbors, x24)\n    x26 = recolor(x12, x25)\n    x27 = inbox(x2)\n    x28 = recolor(x22, x27)\n    x29 = product(x26, x28)\n    x30 = shift(x16, UNITY)\n    x31 = mapply(neighbors, x30)\n    x32 = recolor(x28, x31)\n    x33 = combine(x26, x32)\n    x34 = combine(x40, x33)\n    x35 = recolor(x24, x34)\n    x36 = combine(x29, x35)\n    x37 = paint(x16, x36)\n    x38 = shift(x17, UNITY)\n    x39 = combine(x38, x37)\n    x40 ="], [1.1, "def solve_18d27cb5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_a7baf8ee(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_703c4562(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 =combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38"], [1.1, "def solve_c92cb0d3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x12)\n    x36 = rbind(pair, x2)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_c69b5d83(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(rbind, astuple)\n    x27 = lbind( apply(x26, x24)\n    x28 = lbind(apply, x27)\n    x29 = lbind(lbind, shift)\n    x30 = compose(x28, x29)\n    x31 = lbind(ofcolor, I)\n    x32 = compose(x31, x30)\n    x33 = fork(mapply, x32, xrecolor)\n    x34 = rbind(remove, x4)\n    x35 = compose(x34, last)\n    x36 = rbind(ofcolor, x4)\n    x37 = compose(x36, first)\n    x38 = fork(mapply, x37, x35)\n    x39 = fork(paint, identity, x38)\n    x40 =22"], [1.1, "def solve_9b6dd0ca(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_27883333(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_1aec3d86(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = height(x16)\n    x18 = width(x16)\n    x19 = toivec(x18)\n    x20 = shift(x16, x19)\n    x21 = height(x20)\n    x22 = divide(x17, x21)\n    x23 = shift(x5, x22)\n    x24 = fill(x16, FEGpartition, x23)\n    x25 = merge(x24)\n    x26 = cover(x25, x25)\n    x27 =(x26)\n    x28 = fork(multiply, first, last)\n    x29 = neighbors(x28)\n    x30 = remove(ZERO, x29)\n    x31 = lbind(mapply, dneighbors)\n    x32 = matcher(x31, x30)\n    x33 = fork(both, x32, x29)\n    x34 = extract(x31, x33)\n    x35 = first(x34)\n    x36 = last(x34)\n    x37 = flip(x35)\n    x38 = branch(x37, x35, x37)\n    x39 = shift(x19, x38)\n    x40 = other(x30, x39)\n    x41 = ofcolor(x26, x40)"], [1.1, "def solve_a981d1fe(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x15 = extract(x1, x12)\n    x16 = height(x4)\n    x17 = height(x10)\n    x18 = add(x16, x17)\n    x19 = width(x4)\n    x20 = width(x7)\n    x21 = add(x19, x20)\n    x22 = astuple(x18, x21)\n    x23 = decrement(x22)\n    x24 = width(x7)\n    x25 = subtract(x18, x24)\n    x26 = increment(x25)\n    x27 = width(x7)\n    x28 = subtract(x25, x27)\n    x29 = interval(x28, x26, ONE)\n    x30 = product(x29, x29)\n    x31 = rbind(multiply, THREE)\n    x32 = rbind(divide, THREE)\n    x33 = compose(x31, x32)\n    x34 = fork(equality, identity, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x30, x35)\n    x37 = apply(decrement, x36)\n    x38 = lbind(astuple, x39)\n    x39 = compose(x38, first)\n    x40 = power(x39, FOUR)\n    x41 = x47(x40)\n    x42 = first(x41)"], [1.1, "def solve_34138ddb(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b275d149(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_1a64eba5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_a77c14d5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_a74416ef(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_227727a0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, T, F)\n    x3 = fork(equality, toindices, box)\n    x4 = extract(x2, x3)\n    x5 = color(x4)\n    x6 = merge(x2)\n    x7 = subgrid(x6, I)\n    x8 = index(x7, DOWN)\n    x9 = subgrid(x4, I)\n    x10 = lefthalf(x9)\n    x11 = tophalf(x10)\n    x12 = righthalf(x11)\n    x13 = bottomhalf(x10)\n    x14 = lefthalf(x13)\n    x15 = tophalf(x14)\n    x16 = righthalf(x15)\n    x17 = palette(x11)\n    x18 = palette(x12)\n    x19 = intersection(x17, x18)\n    x20 = difference(x19, x18)\n    x21 = palette(x12)\n    x22 = other(x21, x18)\n    x23 = color(x4)\n    x24 = color(x12)\n    x25 =either(x23, x24)\n    x26 = branch(x25, x22, x25)\n    x27 = fill(x7, x23, x26)\n    x28 = ofcolor(x77, x22)\n    x29 = ofcolor(x12, x25)\n    x30 = rbind(manhattan, x28)\n    x31 = compose(x30, initset)\n    x32 = argmin(x29, x31)\n    x33 = rbind(manhattan, x32)\n    x34 = compose(x33, initset)\n    x35 = argmin(x29, x34)\n    x36 = ofcolor(x47, x22)\n    x37 = difference(x36, x58)\n    x38 =1987(x37)\n    x39 = mapply(dneighbors, x38)\n    x40 = difference(x39, x35)\n    x41 = crement"], [1.1, "def solve_9488348c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_04c6850d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdropov, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = asindices(I)\n    x16 = corners(x15)\n    x17 = toobject(x16, I)\n    x18 = mostcolor(x17)\n    x19 = palette(I)\n    x20 = colorfilter(x19, x18)\n    x21 = initset(ZERO)\n    x22 = dneighbors(ORIGIN)\n    x23 = insert(DOWN, x22)\n    x24 = insert(uerf, x23)\n    x25 = insert(x18, x24)\n    x26 = insert(x19, x25)\n    x27 = rbind(toobject, I)\n    x28 = compose(x27, decrement)\n    x29 = rbind(colorcount, x18)\n    x30 = matcher(x28, EIGHT)\n    x31 = argmin(x26, x30)\n    x32 = delta(x31)\n    x33 = toobject(x32, I)\n    x34 = matcher(first, x18)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x33, x35)\n    x37 = normalize(x36)\n    x38 = lbind(shift, x37)\n    x39 = occurrences(I, x38)\n    x40 = shoot("], [1.1, "def solve_2386413a(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = compose(x24, first)\n    x26 = rbind(adjacent, x18)\n    x27 = compose(x26, last)\n    x28 = fork(either, x25, x27)\n    x29 = sfilter(x23, x28)\n    x30 = sfilter(x29, x28)\n    x31 = REPL Cast(x30, x17)\n    x32 = ofcolor(x31, x22)\n    x33 = UP)\n    x34 = ulcorner(x2)\n    x35 = shift(x32, x34)\n    x36 = UP(x35)\n    x37 = repeat(x36, ONE)\n    x38 = merge(x37)\n    x39 = other(x30, x38)\n    x40 = subgrid(x39, x31)\n    O = replace(x40"], [1.1, "def solve_3b88d530(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_e83bbb13(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(toobject, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(both, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_cdfc53dc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = leastcolor(I)\n    x3 = mostcolor(I)\n    x4 = ofcolor(I, x2)\n    x5 = frontiers(I)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 =m8(I)\n    x9 =480(x8)\n    x10 = shape(I)\n    x11 = canvas(x3, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = argmax(x12, numcolors)\n    x14 = subgrid(x13, I)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = lbind(power, rot90)\n    x17 = lbind(power, rot999)\n    x18 = rbind(rapply, x17)\n    x19 = compose(initset, x16)\n    x20 = chain(first, x18, x19)\n    x21 = rbind(rapply, x20)\n    x22 = compose(initset, x11)\n    x23 = chain(first, x21, x22)\n    x24 = merge(x12)\n    x25 = palette(x24)\n    x26 = lbind(chain, initset)\n    x27 = lbind(x26, insert)\n    x28 = lbind(rbind, intersection)\n    x29 = compose(x27, x28)\n    x30 = lbind(x25, x recolor)\n    x31 = compose(x30, x29)\n    x32 = fork(compose, x29, x31)\n    x33 = compose(x32, x32)\n    x34 = lbind(contained, x15)\n    x35 = compose(x34, valast)\n    x36 = lbind(sfilter, x12)\n    x37 = compose(x36, x35)\n    x38 = fork(mapply, x37, x22)\n    x39 = lbind(apply, initset)\n    x40 = compose(x39, x22)\n    "], [1.1, "def solve_ba145652(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_33981de3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_35116fbf(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_fe731c5d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain( x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, x11)\n    x13 = chain(x10, x12, x7)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O ="], [1.1, "def solve_80477c69(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(compose, flip)\n    x5 = lbind(matcher, first)\n    x6 = chain(x4, x5, mostcolor)\n    x7 = fork(sfilter, identity, x6)\n    x8 = chain(invert, ulcorner, x7)\n    x9 = lbind(lbind, shift)\n    x10 = fork(shift, identity, x8)\n    x11 = compose(x9, x10)\n    x12 = lbind(fork, mapply)\n    x13 = lbind(x12, x11)\n    x14 = rbind(compose, x5)\n    x15 = lbind(rbind, x14)\n    x16 = chain(x13, x15, x11)\n    x17 = rbind(argmax, x2)\n    x18 = compose(x17, x16)\n    x19 = fork(paint, identity, x18)\n    x20 = size(x3)\n    x21 = decrement(x20)\n    x22 = apply(normalize, x3)\n    x23 = size(x4)\n    x24 = decrement(x23)\n    x25 = apply(normalize, x4)\n    x26 = size(x27)\n    x27 = decrement(x26)\n    x28 = apply(toivec, x27)\n    x29 = height(x22)\n    x30 = insert(x29, x28)\n    x31 = hmirror(x30)\n    x32 = toindices(x31)\n    x33 = rbind(manhattan, x32)\n    x34 = matcher(first, ZERO)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x32, x35)\n    x37 = size(x26)\n    x38 = increment(x37)\n    x39 = width(x22)\n    x40 = decrement(x39)\n"], [1.1, "def solve_4d0f0d1c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_e76dc468(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(hmirror, vmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, x12)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(compose, x21)\n    x23 = lbind(lbind, contained)\n    x24 = compose(x22, x23)\n    x25 = lbind(rbind, rapply)\n    x26 = chain(x25, x26, x24)\n    x27 = lbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x24, x26, x29)\n    x31 = compose(x2007, x30)\n    x32 = fork(mapply, x31, x26)\n    x33 = compose(x28, x26)\n    x34 = fork(difference, x29, x33)\n    x35 = fork(recolor, x30, x34)\n    x36 = compose(x32, x35)\n    x37 = fork(paint, x36, x llcorner)\n    x38 = x"], [1.1, "def solve_08263e22(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = matcher(first, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(d687, x8)\n    x12 = fill(x10, poly333, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ZERO, x13)\n    x15 = paint(x14, x11)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, x4)\n    x18 = rbind(toobject, x15)\n    x19 = chain(first, neighbors, last)\n    x20 = lbind(contained, ZERO)\n    x21 = compose(x20, palette)\n    x22 = lbind(contained, x14)\n    x23 = compose(x22, palette)\n    x24 = rbind(add, LEFT)\n    x25 = chain(invert, ulcorner, x25)\n    x26 = fork(add, ulcorner, x21)\n    x27 = fork(subtract, ulcorner, x26)\n    x28 = fork(shift, identity, x27)\n    x29 = fork(connect, ulcorner, urcorner)\n    x30 = fork(add, x29, urcorner)\n    x31 = fork(equality, identity, x30)\n    x32 = rbind(connect, DOWN)\n    x33 = fork(004, x31, x32)\n    x34 = rbind(sfilter, x31)\n    x35 = chain(merge, x34, x33)\n    x36 = lbind(apply, backdrop)\n    x37 = compose(x36"], [1.1, "def solve_43c940b2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = sfilter(x1, square)\n    x4 = argmax(x3, size)\n    x5 = remove(x4, x3)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = chain(insert, merge, frontiers)\n    x9 = height(x7)\n    x10 = vsplit(x7, x9)\n    x11 = mapply(x8, x10)\n    x12 = argmin(x5, x11)\n    x13 = subgrid(x12, I)\n    x14 = width(x13)\n    x15 = vsplit(x13, x14)\n    x16 = mapply(x8, x15)\n    x17 = uppermost(x16)\n    x18 = lowermost(x16)\n    x19 = sfilter(x16, x18)\n    x20 = lbind(greater, x17)\n    x21 = chain(x20, tojvec,\n    x22 = compose(x19, x21)\n    x23 = fork(greater, x20, x22)\n    x24 = sfilter(x19, x23)\n    x25 = chain(x17, x24, lowermost)\n    x26 = fork(greater, x27, x25)\n    x27 = fork(either, x26, x25)\n    x28 = rbind(contained, x22)\n    x29 = rbind(subtract, x16)\n    x30 = compose(x28, x29)\n    x31 = fork(equality, x33, x30)\n    x32 = sfilter(x24, x31)\n    x33 = chain(lowermost, xce22, x12)\n    x34 = fork(greater, x33, x30)\n    x35 = sfilter(x32, x34)\n    x36 = merge(x35)\n    x37 = fill(x12, TWO, x36)\n    x38 = mapply(x305"], [1.1, "def solve_f4f3a234(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(x2, replace, x5)\n    x7 = subgrid(x2, I)\n    x8 = lbind(contained, x7)\n    x9 = chain(x8, minimum, shape)\n    x10 = fork(paint, x6, x9)\n    x11 = height(x7)\n    x12 = vsplit(x7, x11)\n    x13 = mapply(x10, x12)\n    x14 = ofcolor(x13, ZERO)\n    x15 = lrcorner(x2)\n    x16 = objects(x9, T, T, T)\n    x17 = rbind(add, x15)\n    x18 = compose(halve, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x15)\n    x21 = palette(x20)\n    x22 = merge(x21)\n    x23 = cover(x20, x22)\n    x24 = replace(x23, ZERO, x22)\n    x25 = ofcolor(x24, x18)\n    x26 = recolor(x25, x24)\n    x27 = vmirror(x26)\n    x28 = paint(x24, x27)\n    x29 = height(x28)\n    x30 = cellwise(x29, x25, x28)\n    x31 = replace(x30, ZERO, x28)\n    x32 = ofcolor(x31, x18)\n    x33 = colorfilter(x32, ZERO)\n    x34 = apply(x33, x31)\n    x35 = size(x34)\n    x36 = dedupe(x34)\n    x37 = x35(x36)\n    x38 = x19(x37)\n    x39 = x toindices(x38)\n"], [1.1, "def solve_7f53d5a4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = Lowermost(x8)\n    x22 = astuple(x20, x21)\n    x23 = uppermost(x8)\n    x24 = leftmost(x11)\n    x25 = rightmost(x8)\n    x26 = astuple(x23, x24)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply("], [1.1, "def solve_19f1aec0(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(ORIGIN)\n    x8 = x6(x2)\n    x9 = objects(x5, T, F, F)\n    x10 = colorfilter(x9, ZERO)\n    x11 = rbind(toobject, x5)\n    x12 = chain(first, x11, dneighbors)\n    x13 = matcher(x12, x2)\n    x14 = sfilter(x10, x13)\n    x15 = rbind(colorcount, ZERO)\n    x16 = argmax(x14, x15)\n    x17 = fork(equality, identity, x16)\n    x18 = objects(x5, T, F, F)\n    x19 = sfilter(x18, x17)\n    x20 = difference(x19, x15)\n    x21 = subgrid(x20, I)\n    x22 = lbind(contained, ZERO)\n    x23 = compose(flip, x22)\n    x24 = chain(flip, x23, fgpartition)\n    x25 = fork(both, x23, x24)\n    x26 = extract(x19, x25)\n    x27 = subgrid(x26, I)\n    x28 = fgpartition(x27)\n    x29 = merge(x28)\n    x30 = normalize(x29)\n    x31 = color(x30)\n    x32 = remove(x2, x30)\n    x33 = rbind(contained, x32)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = fork(64 color, first, last)\n    x37 = fork(multiply, last, x36)\n    x38 = fork(gravitate, x37, x37)"], [1.1, "def solve_d05612ad(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = color(x12)\n    x14 = color(x13)\n    x15 = palette(x12)\n    x16 = remove(x14, x15)\n    x17 =86(indices, UNITY)\n    x18 = remove(x17, x16)\n    x19 =ations(x18, ulcorner)\n    x20 = rbind(sfilter, vline)\n    x21 = extract(x19, x20)\n    x22 = other(x23, x21)\n    x23 = x11(x22)\n    x24 = apply(x24, x23)\n    x25 = difference(x19, x24)\n    x26 = lbind(34, compose)\n    x27 = extract(x25, x26)\n    x28 = other(x27, x27)\n    x29 = lbind(compose, flip)\n    x30 = lbind(matcher, first)\n    x31 = chain(x29, x30, x27)\n    x32 = apply(x31, x28)\n    x33 = lbind(ofcolor, x12)\n    x34 = compose(x33, palette)\n    x35 = fork(contained, x34, identity)\n    x36 = compose(flip, x35)\n    x37 = sfilter(x32, x36)\n    x38 = rbind(argmax, x37)\n    x39 = apply(x38, x31)\n    x40 = ofcolor(x12, x8)\n    x41 = apply("], [1.1, "def solve_07410cd9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = astuple(x27, x24)\n    x29 = double(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = astuple(x30, x22)\n    x32 = initset(ZERO)\n    x33 = insert(first, x32)\n    x34 = insert(x32, x33)\n    x35 = contained(x19, x34)\n    x36 = astuple(x21, x22)\n    x37 = astuple(x25, x30)\n    x38 = combine(x36, x37)\n    x39 = paint(x22, x38)\n    O"], [1.1, "def solve_6641413d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = backdrop(x2)\n    x6 = toobject(x5, I)\n    x7 =110(x6)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = color(x2)\n    x10 = rbind(shoot, DOWN)\n    x11 = mapply(x10, x8)\n    x12 = fill(x4, x3, x11)\n    x13 = height(x12)\n    x14 = width(x12)\n    x15 = ofcolor(x12, x9)\n    x16 = ZERO(x15)\n    x17 = astuple(x16, x13)\n    x18 = crop(x12, ORIGIN, x17)\n    x19 = crop(x12, x14, x18)\n    x20 = decrement(x13)\n    x21 = subtract(x20, THREE)\n    x22 = crop(x21, ORIGIN, x22)\n    x23 = palette(x12)\n    x24 =neighbors(x23)\n    x25 =(flip(x12)\n    x26 = rbind(ofcolor, x9)\n    x27 =51(x24)\n    x28 = chain(x25, x26, x27)\n    x29 =first(x21)\n    x30 = ofcolor(x15, x9)\n    x31 =(neighbors, x30)\n    x32 = other(x31, x29)\n    x33 =51(x25)\n    x34 = shift(x32, x33)\n    x35 = ofcolor(x19, x9)\n    x36 = recolor(x12, x34)\n    x37 = shift(x36, x33)\n    x38 = intersection(x34, x37)\n    x39 = first(x38)\n    x40 = shape(x13)\n    x41 = canvas(x9, x40)\n    x42 = normal"], [1.1, "def solve_1853d4a3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_5f7fda75(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_a326caee(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_12ba0f68(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = outbox(x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 =\n    THREE(x5)\n    x7 = palette(x6)\n    x8 = remove(ZERO, x7)\n    x9 = lbind(colorcount, x6)\n    x10 = argmax(x8, x9)\n    x11 = lbind(toobject, x6)\n    x12 = compose(x11, x10)\n    x13 = toindices(x6)\n    x14 = combine(x13, x12)\n    x15 = subgrid(x14, x4)\n    x16 = lbind(toobject, x5)\n    x17 = compose(x16, x12)\n    x18 = fork(valette, x17, identity)\n    x19 = chain(x19, ulcorner, x8)\n    x20 = fork(equality, x18, x19)\n    x21 = rbind(greater, ONE)\n    x22 = rbind(contained, x7)\n    x23 = compose(x21, x22)\n    x24 = fork(both, x20, x23)\n    x25 = sfilter(x15, x24)\n    x26 = objects(x15, T, F, T)\n    x27 = colorfilter(x26, x10)\n    x28 = difference(x27, x25)\n    x29 = rbind(subgrid, x14)\n    x30 = chain(x29, merge, x28)\n    x31 = rbind(colorcount, x10)\n    x32 = fork(x31, x30, x29)\n    x33 = chain(x32, dmirror, x30)\n    x34 = astuple(x10, x17)\n    x35 = astuple(x27, x30)\n    x36 = combine(x34, x35)\n    x37 = = rbind(rapply, x13)\n"], [1.1, "def solve_3a4f6d58(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 =_bind(contained, x11)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x6, x13)\n    x15 = objects(I, T, F, T)\n    x16 = colorfilter(x15, x4)\n    x17 = rbind(toobject, I)\n    x18 = chain(leastcolor, x17, delta)\n    x19 = rbind(colorcount, x4)\n    x20 = matcher(x19, TWO)\n    x21 = chain(x20, vline, dmirror)\n    x22 = rbind(sfilter, x21)\n    x23 = chain(first, x22, toindices)\n    x24 = box(x24)\n    x25 =,(x24, x20)\n    x26 = ofcolor(I, x4)\n    x27 = argmin(x25, x26)\n    x28 = repeat(x27, ONE)\n    x29 = dmirror(x28)\n    x30 = toindices(x28)\n    x31 = apply(x24, x30)\n    x32 = rbind(manhattan, x2)\n    x33 = argmin(x31, x32)\n    x34 = ofcolor(I, x4)\n    x35 = difference(x34, x33)\n    x36 = inbox(x35)\n    x37 = mapply(x33, x36)\n    x38 = SHOW(x37)\n    x39 = dmirror(x38)\n    x40 = shift(x39, UNITY)\n"], [1.1, "def solve_7c31976e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = objects(I, T, F, T)\n    x7 = compose(increment, lrcorner)\n    x8 = fork(greater, height, ZERO)\n    x9 = compose(x8, delta)\n    x10 = sfilter(x6, x9)\n    x11 = fork(astuple, x4, x5)\n    x12 = fork(astuple, vmirror, hmirror)\n    x13 = merge(x12)\n    x14 = mostcolor(I)\n    x15 = cellwise(x4, x13, x14)\n    x16 = asobject(x15)\n    x17 = palette(x16)\n    x18 =998811100000000\n     product(x17, x11)\n    x19 = asindices(x16)\n    x20 = corners(x19)\n    x21 = ofcolor(I, x14)\n    x22 = difference(x19, x21)\n    x23 = argmax(x22, size)\n    x24 = difference(x18, x23)\n    x25 = apply(initset, x24)\n    x26 = rbind(frontier, x23)\n    x27 = compose(x26, toindices)\n    x28 = fork(recolor, x27, corners)\n    x29 = mapply(x28, x25)\n    x30 = EIGHT(x29)\n    x31 =9ABLE(x30, x40)\n    x32 =279(x31)\n    x33 = cover(I, x29)\n    x34 = paint(x33, x32)\n    O = paint(x34, x30)\n    return O"], [1.1, "def solve_80886cb9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = neighbors(ORIGIN)\n    x7 = toindices(x6)\n    x8 = matcher(size, ZERO)\n    x9 = matcher(x8, x7)\n    x10 = sfilter(x4, x9)\n    x11 = normalize(x3)\n    x12 =2221995(x5)\n    x13 = remove(x12, x10)\n    x14 = lbind(argmin, x13)\n    x15 = lbind(rbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x9)\n    O = paint(x3, x18)\n    return O"], [1.1, "def solve_31c97c6e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = bottomhalf(x1)\n    x5 = hmirror(x4)\n    x6 = vmirror(x4)\n    x7 = combine(x5, x6)\n    x8 = leftmost(x7)\n    x9 =8508000(ORIGIN, x8)\n    x10 = height(x7)\n    x11 = halve(x10)\n    x12 = add(THREE, x11)\n    x13 = width(x7)\n    x14 = halve(x13)\n    x15 = add(THREE, x14)\n    x16 = astuple(x12, x15)\n    x17 = bottomhalf(x1)\n    x18 = hmirror(x17)\n    x19 = rightmost(x17)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = initset(x2)\n    x23 = insert(x16, x22)\n    x24 = insert(x18, x23)\n    x25 = product(x24, x24)\n    x26 = fork(combine, vfrontier, hfrontier)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x25)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_e557cb1d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, uppermost)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = last(x2)\n    x6 = greater(x4, x5)\n    x7 = uppermost(x3)\n    x8 = leftmost(x3)\n    x9 = subtract(x8, TEN)\n    x10 = add(x8, TEN)\n    x11 = interval(x9, x10, TWO)\n    x12 = lbind(greater, x7)\n    x13 = compose(x12, first)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, last)\n    x16 = sfilter(x1, x13)\n    x17 = sfilter(x16, x15)\n    x18 = merge(x17)\n    x19 = compose(toindices, x18)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = lbind(mirror, x v)\n    x22 = chain(x21, invert, x8)\n    x23 = fork(shift, identity, x22)\n    x24 = fork(combine, x28, x23)\n    x25 = mapply(x24, x20)\n    x26 = double(SIX)\n    x27 = add(UNITY, x26)\n    x28 = typicalpply(x27, x25)\n    x29 = compose(toindices, x28)\n    x30 = mapply(x29, x28)\n    x31 = fill(I, SIX, x30)\n    x32 = combine(x24, x30)\n    x33 = paint(x31, x32)\n    O = rot90(x33)\n    return O"], [1.1, "def solve_a936ef60(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = color(x5)\n    x7 = merge(x1)\n    x8 = compose(hmirror, vmirror)\n    x9 = initset(x8)\n    x10 = insert(x6, x9)\n    x11 = insert(x7, x10)\n    x12 = mapply(dmirror, x11)\n    x13 = mapply(vmirror, x12)\n    x14 = papply(equality, x11, x13)\n    x15 = sfilter(x11, x14)\n    x16 = difference(x15, x2)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = x17(x18)\n    x20 =441(x17)\n    x21 = shape(x20)\n    x22 = increment(x21)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = apply(tojvec, x23)\n    x25 = lbind(shift, x20)\n    x26 = mapply(x25, x24)\n    x27 = paint(I, x26)\n    O = x25(x27)\n    return O"], [1.1, "def solve_825d4be7(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(dmirror, x4)\n    x6 = chain(palette, trim, x5)\n    x7 = fork(equality, identity, x6)\n    x8 = matcher(x5, TWO)\n    x9 = extract(x1, x8)\n    x10 = lbind(contained, TWO)\n    x11 = compose(flip, x10)\n    x12 = extract(x1, x11)\n    x13 = lbind(matcher, first)\n    x14 = compose(x13, first)\n    x15 = fork(sfilter, identity, x14)\n    x16 = fork(difference, identity, x15)\n    x17 = lbind(occurrences, I)\n    x18 = compose(x17, x15)\n    x19 = compose(x17, x12)\n    x20 = fork(mapply, x18, x19)\n    x21 = compose(x17, x20)\n    x22 = fork(mapply, x16, x21)\n    x23 = rapply(x10, x3)\n    x24 = mapply(x21, x23)\n    x25 = mapply(x22, x24)\n    x26 = underfill(I, THREE, x21)\n    x27 = fill(x26,O = THREE, x25)\n    O = fill(x27, ONE, x25)\n    return O"], [1.1, "def solve_5d999f97(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 =:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = vmirror(I)\n    x5 = fgpartition(x4)\n    x6 = argmin(x5, size)\n    x7 = color(x6)\n    x8 = toindices(x6)\n    x9 = outbox(x6)\n    x10 = fill(I, x7, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = argmax(x11, size)\n    x13 = subgrid(x12, I)\n    x14 = interval(ONE, FOUR, ONE)\n    ONE = lbind(power, outbox)\n    x15 = lbind(power, outbox)\n    x16 = rbind(rapply, x13)\n    x17 = compose(initset, x15)\n    x18 = chain(first, x16, x17)\n    x19 = rbind(rapply, x13)\n    x20 = compose(initset, x14)\n    x21 = fork(rapply, x20, outbox)\n    x22 = compose(initset, x16)\n    x23 = fork(rapply, x22, outbox)\n    x24 = compose(initset, x15)\n    x25 = fork(rapply, x24, x23)\n    x26 = compose(initset, x14)\n    x27 = fork(rapply, x26, x25)\n    x28 = compose(backdrop, x23)\n    x29 = fork(recolor, x7, x28)\n    x30 = fork(combine, x29, x21)\n    x31 = mapply(x30, x14)\n    x32 = paint(x10, x31)\n    O = paint(x32, x32)\n    return O"], [1.1, "def solve_aff9413e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = toindices(x2)\n    x4 = contained(ZERO, x3)\n    x5 = equality(x2, x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(475, DOWN)\n    x9 = compose(x8, center)\n    x10 = matcher(x9, ZERO)\n    x11 = extract(x1, x10)\n    x12 = x11(x7)\n    x13 = objects(x12, T, F, T)\n    x14 =12(x13)\n    x15 = center(x14)\n    x16 = paint(x12, x15)\n    x17 = double(x16)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = paint(x17, x18)\n    x20 = NINE(x14)\n    x21 = lbind(multiply, x20)\n    x22 =745(divide)\n    x23 = apply(x21, x32)\n    x24 = partition(x12)\n    x25 = argmax(x24, x21)\n    x26 = shift(x25, x10)\n    x27 = mapply(x26, x23)\n    x28 = paint(x12, x27)\n    O = paint(x28, x10)\n    return O"], [1.1, "def solve_913e28ca(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = compose(delta, toindices)\n    x4 = mapply(x3, x2)\n    x5 =6000(4888009)\n    x6 = difference(x1, x2)\n    x7 = compose(even, size)\n    x8 = sfilter(x6, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = lbind(fork, either)\n    x12 = lbind(matcher, first)\n    x13 = compose(x12, first)\n    x14 = lbind(compose, x5)\n    x15 =\n    x14(x13)\n    x16 = lbind(rbind, subtract)\n    x17 = compose(x16, first)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x15, x17, x18)\n    x20 = lbind(rbind, mapply)\n    x21 = compose(x20, x21)\n    x22 = fork(compose, x17, x18)\n    x23 = chain(x0, x22,'. lrcorner)\n    x24 = fork(sfilter, x23, x17)\n    x25 = fork(pair, x24, x20)\n    x26 = fork(x25, x21, x29)\n    x27 = mapply(x26, x4)\n    O = fill(x10, EIGHT, x27)\n    return O"], [1.1, "def solve_5883eeb1(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = chain(x11, uppermost, leftmost)\n    x14 = x13(x2)\n    x15 =525(x14)\n    x16 = ulcorner(x2)\n    x17 = lrcorner(x2)\n    x18 = shape(x2)\n    x19 = shoot(x16, x18)\n    x20 = shoot(x17, x18)\n    x21 = combine(x19, x20)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x17)\n    x24 = mostcolor(I)\n    x25 = combine(x23, x24)\n    x26 = x26(x12)\n    x27 =760(x2)\n    x28 =60726(x27)\n    x29 = lefthalf(x28)\n    x30 = righthalf(x28)\n    x31 = vmirror(x30)\n    x32 = hconcat(x29, x31)\n    x33 = hconcat(x32, x2)\n    O = paint(x33, x25)\n    return O"], [1.1, "def solve_905d94c5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = lefthalf(I)\n    x8 = uppermost(x2)\n    x9 = righthalf(I)\n    x10 = leftmost(x2)\n    x11 =9907(x9)\n    x12 =9907(x10)\n    x13 = ofcolor(x7, x5)\n    x14 = ofcolor(x8, x5)\n    x15 = combine(x13, x14)\n    x16 = intersection(x13, x14)\n    x17 = difference(x15, x16)\n    x18 = shape(x2)\n    x19 = canvas(x5, x18)\n    O = fill(x19, x5, x17)\n    return O"], [1.1, "def solve_c28ed68f(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x6 = positive(x4)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = color(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = mostcolor(x11)\n    x13 = shape(x8)\n    x14 = canvas(x12, x13)\n    x15 = hconcat(x14, x8)\n    x16 = objects(x15, F, T, T)\n    x17 = argmin(x16, numcolors)\n    x18 = normalize(x17)\n    x19 = toindices(x18)\n    x20 = increment(x NEG_x19)\n    x21 = rbind(intersection, x20)\n    x22 = chain(size, x21, toindices)\n    x23 = matcher(x22, ZERO)\n    x24 = normalize(x18)\n    x25 = lefthalf(x24)\n    x26 = palette(x25)\n    x27 = palette(x36)\n    x28 = intersection(x26, x27)\n    x29 = first(x28)\n    x30 = ofcolor(x20, x29)\n    x31 = ofcolor(x21, x29)\n    x32 = fill(x19, THREE, x30)\n    x33 = fill(x32, combine, x31)\n    O = x7(x33)\n    return O"], [1.1, "def solve_ad068b5a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = replace(I, FIVE, ZERO)\n    x5 = colorfilter(x1, FIVE)\n    x6 = mapply(toindices, x5)\n    x7 = first(x6)\n    x8 = difference(x1, x5)\n    x9 = fill(x4, EIGHT, x8)\n    x10 = leastcolor(x9)\n    x11 = rbind(object, x9)\n    x12 = chain(corners, neighbors, x11)\n    x13 = mapply(x12, x5)\n    x14 = dmirror(x13)\n    x15 = papply(pair, x13, x14)\n    x16 = apply(first, x15)\n    x17 =223(x16, x10)\n    x18 = dmirror(x17)\n    x19 = papply(pair, x17, x18)\n    x20 = apply(first, x19)\n    x21 =223(x20, x10)\n    x22 = combine(x17, x21)\n    x23 = combine(x37, x22)\n    x24 = Independent027(x23)\n    x25 = product(x24, x24)\n    x26 = fork(multiply, first, last)\n    x27 = apply(x26, x25)\n    x28 = combine(x24, x27)\n    O = fill(x9, x10, x28)\n    return O"], [1.1, "def solve_d70c19a3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 =ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, x3)\n    x6 = chain(positive, decrement, numcolors)\n    x7 = fork(add, x5, x6)\n    x8 =77700(x4)\n    x9 = power(x7, FOUR)\n    x10 = x9(x8)\n    x11 = fork(connect, x7, x10)\n    x12 = fill(I, THREE, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x1)\n    O = paint(x3, x14)\n    return O"], [1.1, "def solve_6accae4d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, color, x7)\n    x9 = x7, x8)\n    x9 =8060444860087\n    x10 = catalog(x9, x4)\n    x11 = difference(x10, x9)\n    x12 = compose(toivec, uppermost)\n    x13 = lbind(shift, x11)\n    x14 = lbind(shift, x12)\n    x15 = compose(x13, x14)\n    x16 = interval(x15, FOUR, ONE)\n    x17 = apply(tojvec, x16)\n    x18 = mpapply(recolor, x17, x12)\n    x19 = paint(I, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(center, x20)\n    x22 = lbind(shift, x21)\n    x23 = lbind(shift, x12)\n    x24 = pair(x23, x22)\n    x25 = mapply(x27, x24)\n    O = paint(x19, x25)\n    return O"], [1.1, "def solve_8372d295(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = argmin(x4, size)\n    x6 = replace(x5, x3, x2)\n    x7 = combine(x6, x5)\n    x8 = downscale(x7, THREE)\n    x9 = objects(x8, T, F, F)\n    x10 = rbind(toobject, x8)\n    x11 = apply(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = chain(x12, minimum, shape)\n    x14 =455(x11)\n    x15 = divide(x14, THREE)\n    x16 = order(x11, x13)\n    x17 = apply(color, x16)\n    x18 = compose(center, first)\n    x19 = compose(corners, x18)\n    x20 = fork(shift, x17, x19)\n    x21 = mapply(x20, x16)\n    O = paint(x5, x21)\n    return O"], [1.1, "def solve_7e42dde2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, F)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass(x18)\n    x20 = compose(x19, x16)\n    x21 = fork(recolor, color, x20)\n    x22 = mapply(x21, x18)\n    x23 = paint(I, x22)\n    O = cover(x23, x3)\n    return O"], [1.1, "def solve_ccc7db39(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(subtract, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(toindices, x12, normalize)\n    x14 = toindices(x3)\n    x15 = outbox(x14)\n    x16 = difference(x15, x13)\n    x17 = ZERO(x16)\n    x18 = lbind(argmin, x17)\n    x19 = lbind(rbind, manhattan)\n    x20 = chain(x19, initset, x18)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = compose(5, x12)\n    x24 = fork(ofcolor, x22, x23)\n    x25 =\n    x26 = backdrop(x3)\n    x27 = cover(I, x25)\n    x28 = matcher(x26, x27)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x15, x29)\n    x31 = difference(x15, x30)\n    x32 =99(x31)\n    x33 =99(x22)\n    x34 =99(x26)\n    x35 = cover(x27, x3)\n    x36 = shift(x34, x35)\n    x37 = fill(x36, x25, x32)\n    O = fill(x37, ZERO, x33)\n    return O"], [1.1, "def solve_966b0b57(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = lbind(ofcolor, I)\n    x11 = mapply(x10, x9)\n    x12 =333(x11)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = subgrid(x13, I)\n    x16 = subgrid(x14, I)\n    x17 = replace(x15, x4, x5)\n    O = replace(x16, x4, x6)\n    return O"], [1.1, "def solve_0f040971(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(toobject, I)\n    x3 = compose(x2, delta)\n    x4 = rbind(colorcount, O)\n    x5 = chain(x4, x3, dneighbors)\n    x6 = matcher(x5, TWO)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = subgrid(x7, I)\n    x10 = hconcat(x9, x8)\n    x11 = objects(x10, F, T, T)\n    x12 = rbind(contained, x11)\n    x13 = compose(x12, last)\n    x14 = sfilter(x6, x13)\n    x15 = merge(x14)\n    x16 =188(x15)\n    x17 = vmirror(x16)\n    x18 = shape(x17)\n    x19 = add(x18, UP)\n    x20 = crop(x17, DOWN, x19)\n    x21 = replace(x20, x8, x17)\n    x22 = vmirror(x21)\n    x23 = cover(x17, x22)\n    x24 = chain(toivec, invert, height)\n    x25 = fork(shift, identity, x24)\n    x26 = mapply(x25, x24)\n    O = paint(x26, x26)\n    return O"], [1.1, "def solve_39bd0023(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = rot rot270(I)\n    x2 = objects(x1, T, T, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = ulcorner(x3)\n    x6 = urcorner(x3)\n    x7 = index(x1, x5)\n    x8 = equality(x7, EIGHT)\n    x9 = branch(x8, x5, x6)\n    x10 = branch(x8, UNITY, DOWN_LEFT)\n    x11 = multiply(x10, x5)\n    x12 = double(x11)\n    x13 = add(x9, x12)\n    x14 = subtract(x10, x12)\n    x15 = divide(x14, x5)\n    x16 = add(x13, x15)\n    x17 = subtract(x12, x16)\n    x18 = shape(x3)\n    x19 = canvas(ZERO, x18)\n    x20 = paint(x19, x3)\n    x21 = normalize(x3)\n    x22 = lbind(shift, x21)\n    x23 = mapply(x22, x16)\n    O = paint(x20, x23)\n    return O"], [1.1, "def solve_6c57f3ee(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =50d850\n    20600002\n    20800008\n    20820003\n    20880000\n    08100008\n    40420000\n    00200001\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [1.1, "def solve_768e63ea(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x4, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x1)\n    x16 = subgrid(x15, I)\n    x17 = shape(x16)\n    x18 = subtract(x17, TWO_BY_ZERO)\n    x19 = crop(x16, DOWN, x18)\n    x20 = vmirror(x19)\n    x21 = objects(x20, T, F, T)\n    x22 = rbind(toobject, x20)\n    x23 = apply(x22, x21)\n    x24 = colorfilter(x21, x13)\n    x25 = rbind(adjacent, x4)\n    x26 =\n    (x24, x25)\n    x27 = mfilter(x26, x25)\n    O = paint(x19, x27)\n    return O"]]}